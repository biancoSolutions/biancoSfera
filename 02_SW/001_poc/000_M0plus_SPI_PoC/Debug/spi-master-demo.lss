
spi-master-demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007a0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  000007a0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000044  20000434  00000bd4  00020434  2**2
                  ALLOC
  3 .stack        00002000  20000478  00000c18  00020434  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002045c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000a730  00000000  00000000  000204b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab2  00000000  00000000  0002abe5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000002f4  00000000  00000000  0002b697  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000120  00000000  00000000  0002b98b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000b0  00000000  00000000  0002baab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000126c4  00000000  00000000  0002bb5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000030d4  00000000  00000000  0003e21f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00072755  00000000  00000000  000412f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000003f4  00000000  00000000  000b3a48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	78 24 00 20 15 01 00 00 0d 02 00 00 0d 02 00 00     x$. ............
	...
  2c:	0d 02 00 00 00 00 00 00 00 00 00 00 0d 02 00 00     ................
  3c:	0d 02 00 00 0d 02 00 00 0d 02 00 00 0d 02 00 00     ................
  4c:	0d 02 00 00 0d 02 00 00 0d 02 00 00 0d 02 00 00     ................
  5c:	0d 02 00 00 0d 02 00 00 0d 02 00 00 0d 02 00 00     ................
  6c:	0d 02 00 00 0d 02 00 00 0d 02 00 00 0d 02 00 00     ................
  7c:	0d 02 00 00 0d 02 00 00 0d 02 00 00 3d 05 00 00     ............=...
  8c:	0d 02 00 00 0d 02 00 00 0d 02 00 00 0d 02 00 00     ................
  9c:	0d 02 00 00 0d 02 00 00 0d 02 00 00 0d 02 00 00     ................
  ac:	0d 02 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000434 	.word	0x20000434
  d4:	00000000 	.word	0x00000000
  d8:	000007a0 	.word	0x000007a0

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000438 	.word	0x20000438
 108:	000007a0 	.word	0x000007a0
 10c:	000007a0 	.word	0x000007a0
 110:	00000000 	.word	0x00000000

00000114 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
 114:	b580      	push	{r7, lr}
 116:	b082      	sub	sp, #8
 118:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
 11a:	4b2f      	ldr	r3, [pc, #188]	; (1d8 <Reset_Handler+0xc4>)
 11c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
 11e:	4b2f      	ldr	r3, [pc, #188]	; (1dc <Reset_Handler+0xc8>)
 120:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
 122:	687a      	ldr	r2, [r7, #4]
 124:	683b      	ldr	r3, [r7, #0]
 126:	429a      	cmp	r2, r3
 128:	d00c      	beq.n	144 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
 12a:	e007      	b.n	13c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
 12c:	683b      	ldr	r3, [r7, #0]
 12e:	1d1a      	adds	r2, r3, #4
 130:	603a      	str	r2, [r7, #0]
 132:	687a      	ldr	r2, [r7, #4]
 134:	1d11      	adds	r1, r2, #4
 136:	6079      	str	r1, [r7, #4]
 138:	6812      	ldr	r2, [r2, #0]
 13a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
 13c:	683a      	ldr	r2, [r7, #0]
 13e:	4b28      	ldr	r3, [pc, #160]	; (1e0 <Reset_Handler+0xcc>)
 140:	429a      	cmp	r2, r3
 142:	d3f3      	bcc.n	12c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 144:	4b27      	ldr	r3, [pc, #156]	; (1e4 <Reset_Handler+0xd0>)
 146:	603b      	str	r3, [r7, #0]
 148:	e004      	b.n	154 <Reset_Handler+0x40>
                *pDest++ = 0;
 14a:	683b      	ldr	r3, [r7, #0]
 14c:	1d1a      	adds	r2, r3, #4
 14e:	603a      	str	r2, [r7, #0]
 150:	2200      	movs	r2, #0
 152:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
 154:	683a      	ldr	r2, [r7, #0]
 156:	4b24      	ldr	r3, [pc, #144]	; (1e8 <Reset_Handler+0xd4>)
 158:	429a      	cmp	r2, r3
 15a:	d3f6      	bcc.n	14a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
 15c:	4b23      	ldr	r3, [pc, #140]	; (1ec <Reset_Handler+0xd8>)
 15e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 160:	4b23      	ldr	r3, [pc, #140]	; (1f0 <Reset_Handler+0xdc>)
 162:	687a      	ldr	r2, [r7, #4]
 164:	21ff      	movs	r1, #255	; 0xff
 166:	438a      	bics	r2, r1
 168:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 16a:	4a22      	ldr	r2, [pc, #136]	; (1f4 <Reset_Handler+0xe0>)
 16c:	2390      	movs	r3, #144	; 0x90
 16e:	005b      	lsls	r3, r3, #1
 170:	2102      	movs	r1, #2
 172:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 174:	4a20      	ldr	r2, [pc, #128]	; (1f8 <Reset_Handler+0xe4>)
 176:	78d3      	ldrb	r3, [r2, #3]
 178:	2103      	movs	r1, #3
 17a:	438b      	bics	r3, r1
 17c:	1c19      	adds	r1, r3, #0
 17e:	2302      	movs	r3, #2
 180:	430b      	orrs	r3, r1
 182:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 184:	4a1c      	ldr	r2, [pc, #112]	; (1f8 <Reset_Handler+0xe4>)
 186:	78d3      	ldrb	r3, [r2, #3]
 188:	210c      	movs	r1, #12
 18a:	438b      	bics	r3, r1
 18c:	1c19      	adds	r1, r3, #0
 18e:	2308      	movs	r3, #8
 190:	430b      	orrs	r3, r1
 192:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
 194:	4a19      	ldr	r2, [pc, #100]	; (1fc <Reset_Handler+0xe8>)
 196:	7b93      	ldrb	r3, [r2, #14]
 198:	2130      	movs	r1, #48	; 0x30
 19a:	438b      	bics	r3, r1
 19c:	1c19      	adds	r1, r3, #0
 19e:	2320      	movs	r3, #32
 1a0:	430b      	orrs	r3, r1
 1a2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 1a4:	4a15      	ldr	r2, [pc, #84]	; (1fc <Reset_Handler+0xe8>)
 1a6:	7b93      	ldrb	r3, [r2, #14]
 1a8:	210c      	movs	r1, #12
 1aa:	438b      	bics	r3, r1
 1ac:	1c19      	adds	r1, r3, #0
 1ae:	2308      	movs	r3, #8
 1b0:	430b      	orrs	r3, r1
 1b2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 1b4:	4a11      	ldr	r2, [pc, #68]	; (1fc <Reset_Handler+0xe8>)
 1b6:	7b93      	ldrb	r3, [r2, #14]
 1b8:	2103      	movs	r1, #3
 1ba:	438b      	bics	r3, r1
 1bc:	1c19      	adds	r1, r3, #0
 1be:	2302      	movs	r3, #2
 1c0:	430b      	orrs	r3, r1
 1c2:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
 1c4:	4a0e      	ldr	r2, [pc, #56]	; (200 <Reset_Handler+0xec>)
 1c6:	6853      	ldr	r3, [r2, #4]
 1c8:	2180      	movs	r1, #128	; 0x80
 1ca:	430b      	orrs	r3, r1
 1cc:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
 1ce:	4b0d      	ldr	r3, [pc, #52]	; (204 <Reset_Handler+0xf0>)
 1d0:	4798      	blx	r3

        /* Branch to main function */
        main();
 1d2:	4b0d      	ldr	r3, [pc, #52]	; (208 <Reset_Handler+0xf4>)
 1d4:	4798      	blx	r3

        /* Infinite loop */
        while (1);
 1d6:	e7fe      	b.n	1d6 <Reset_Handler+0xc2>
 1d8:	000007a0 	.word	0x000007a0
 1dc:	20000000 	.word	0x20000000
 1e0:	20000434 	.word	0x20000434
 1e4:	20000434 	.word	0x20000434
 1e8:	20000478 	.word	0x20000478
 1ec:	00000000 	.word	0x00000000
 1f0:	e000ed00 	.word	0xe000ed00
 1f4:	41007000 	.word	0x41007000
 1f8:	41005000 	.word	0x41005000
 1fc:	41004800 	.word	0x41004800
 200:	41004000 	.word	0x41004000
 204:	000005d1 	.word	0x000005d1
 208:	000003a1 	.word	0x000003a1

0000020c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 20c:	b580      	push	{r7, lr}
 20e:	af00      	add	r7, sp, #0
        while (1) {
 210:	e7fe      	b.n	210 <Dummy_Handler+0x4>
	...

00000214 <SystemInit>:
 214:	b580      	push	{r7, lr}
 216:	af00      	add	r7, sp, #0
 218:	4a05      	ldr	r2, [pc, #20]	; (230 <SystemInit+0x1c>)
 21a:	6a13      	ldr	r3, [r2, #32]
 21c:	4905      	ldr	r1, [pc, #20]	; (234 <SystemInit+0x20>)
 21e:	400b      	ands	r3, r1
 220:	6213      	str	r3, [r2, #32]
 222:	4b05      	ldr	r3, [pc, #20]	; (238 <SystemInit+0x24>)
 224:	4a05      	ldr	r2, [pc, #20]	; (23c <SystemInit+0x28>)
 226:	601a      	str	r2, [r3, #0]
 228:	46c0      	nop			; (mov r8, r8)
 22a:	46bd      	mov	sp, r7
 22c:	bd80      	pop	{r7, pc}
 22e:	46c0      	nop			; (mov r8, r8)
 230:	40000800 	.word	0x40000800
 234:	fffffcff 	.word	0xfffffcff
 238:	20000000 	.word	0x20000000
 23c:	007a1200 	.word	0x007a1200

00000240 <GPIO_Init>:
 */

#include "gpio.h"

void GPIO_Init(void)
{
 240:	b580      	push	{r7, lr}
 242:	af00      	add	r7, sp, #0
	//Pre setting LED to clear
	GPIO_LED_CLR();
 244:	490d      	ldr	r1, [pc, #52]	; (27c <GPIO_Init+0x3c>)
 246:	2298      	movs	r2, #152	; 0x98
 248:	2380      	movs	r3, #128	; 0x80
 24a:	05db      	lsls	r3, r3, #23
 24c:	508b      	str	r3, [r1, r2]
	//Pre setting Slave Select (SS) manually controlled high
	GPIO_SS_HIGH();
 24e:	490b      	ldr	r1, [pc, #44]	; (27c <GPIO_Init+0x3c>)
 250:	2298      	movs	r2, #152	; 0x98
 252:	2380      	movs	r3, #128	; 0x80
 254:	029b      	lsls	r3, r3, #10
 256:	508b      	str	r3, [r1, r2]
	//Setting LED as an output
	PORT->Group[GPIO_GROUP_LED].DIRSET.reg = GPIO_MAP_LED;
 258:	4908      	ldr	r1, [pc, #32]	; (27c <GPIO_Init+0x3c>)
 25a:	2288      	movs	r2, #136	; 0x88
 25c:	2380      	movs	r3, #128	; 0x80
 25e:	05db      	lsls	r3, r3, #23
 260:	508b      	str	r3, [r1, r2]
	

	//Setting RS GPIO as output
	PORT->Group[GPIO_GROUP_RS].DIRSET.reg = GPIO_MAP_RS;
 262:	4906      	ldr	r1, [pc, #24]	; (27c <GPIO_Init+0x3c>)
 264:	2288      	movs	r2, #136	; 0x88
 266:	2380      	movs	r3, #128	; 0x80
 268:	00db      	lsls	r3, r3, #3
 26a:	508b      	str	r3, [r1, r2]

	//SPI
	//Setting SPI Slave Select as an output 
	PORT->Group[GPIO_GROUP_SS].DIRSET.reg = GPIO_MAP_SS;
 26c:	4903      	ldr	r1, [pc, #12]	; (27c <GPIO_Init+0x3c>)
 26e:	2288      	movs	r2, #136	; 0x88
 270:	2380      	movs	r3, #128	; 0x80
 272:	029b      	lsls	r3, r3, #10
 274:	508b      	str	r3, [r1, r2]
	//Other SPI pins are configured with the PMUX settings and controller via the SERCOM			

	
 276:	46c0      	nop			; (mov r8, r8)
 278:	46bd      	mov	sp, r7
 27a:	bd80      	pop	{r7, pc}
 27c:	41004400 	.word	0x41004400

00000280 <LCD_Init>:
#include "tmr.h"
#include "spi_master.h"
#include "lcd.h"

void LCD_Init(void)
{
 280:	b580      	push	{r7, lr}
 282:	b084      	sub	sp, #16
 284:	af00      	add	r7, sp, #0

	SPI_init();
 286:	4b14      	ldr	r3, [pc, #80]	; (2d8 <LCD_Init+0x58>)
 288:	4798      	blx	r3
	TMR_Init();
 28a:	4b14      	ldr	r3, [pc, #80]	; (2dc <LCD_Init+0x5c>)
 28c:	4798      	blx	r3
	GPIO_Init();
 28e:	4b14      	ldr	r3, [pc, #80]	; (2e0 <LCD_Init+0x60>)
 290:	4798      	blx	r3
	GPIO_RS_LOW();
 292:	4914      	ldr	r1, [pc, #80]	; (2e4 <LCD_Init+0x64>)
 294:	2294      	movs	r2, #148	; 0x94
 296:	2380      	movs	r3, #128	; 0x80
 298:	00db      	lsls	r3, r3, #3
 29a:	508b      	str	r3, [r1, r2]

	//Start unlocking the EEProm
	uint8_t initFrequence[] = {0x38u, 0x38u, 0x38u, 0x38u, 0x08u, 0x01u, 0x06u, 0x0Fu};
 29c:	1d3b      	adds	r3, r7, #4
 29e:	4a12      	ldr	r2, [pc, #72]	; (2e8 <LCD_Init+0x68>)
 2a0:	ca03      	ldmia	r2!, {r0, r1}
 2a2:	c303      	stmia	r3!, {r0, r1}
	
	for (uint8_t i; i < sizeof(initFrequence); i++)
 2a4:	e00e      	b.n	2c4 <LCD_Init+0x44>
	{
		Send_Byte(initFrequence[i]);
 2a6:	230f      	movs	r3, #15
 2a8:	18fb      	adds	r3, r7, r3
 2aa:	781b      	ldrb	r3, [r3, #0]
 2ac:	1d3a      	adds	r2, r7, #4
 2ae:	5cd3      	ldrb	r3, [r2, r3]
 2b0:	0018      	movs	r0, r3
 2b2:	4b0e      	ldr	r3, [pc, #56]	; (2ec <LCD_Init+0x6c>)
 2b4:	4798      	blx	r3
	for (uint8_t i; i < sizeof(initFrequence); i++)
 2b6:	230f      	movs	r3, #15
 2b8:	18fb      	adds	r3, r7, r3
 2ba:	781a      	ldrb	r2, [r3, #0]
 2bc:	230f      	movs	r3, #15
 2be:	18fb      	adds	r3, r7, r3
 2c0:	3201      	adds	r2, #1
 2c2:	701a      	strb	r2, [r3, #0]
 2c4:	230f      	movs	r3, #15
 2c6:	18fb      	adds	r3, r7, r3
 2c8:	781b      	ldrb	r3, [r3, #0]
 2ca:	2b07      	cmp	r3, #7
 2cc:	d9eb      	bls.n	2a6 <LCD_Init+0x26>
	}
}
 2ce:	46c0      	nop			; (mov r8, r8)
 2d0:	46bd      	mov	sp, r7
 2d2:	b004      	add	sp, #16
 2d4:	bd80      	pop	{r7, pc}
 2d6:	46c0      	nop			; (mov r8, r8)
 2d8:	000003c5 	.word	0x000003c5
 2dc:	00000561 	.word	0x00000561
 2e0:	00000241 	.word	0x00000241
 2e4:	41004400 	.word	0x41004400
 2e8:	00000770 	.word	0x00000770
 2ec:	0000034d 	.word	0x0000034d

000002f0 <Write_Something>:

void Write_Something(void)
{
 2f0:	b580      	push	{r7, lr}
 2f2:	b082      	sub	sp, #8
 2f4:	af00      	add	r7, sp, #0
	GPIO_RS_HIGH();
 2f6:	4913      	ldr	r1, [pc, #76]	; (344 <Write_Something+0x54>)
 2f8:	2298      	movs	r2, #152	; 0x98
 2fa:	2380      	movs	r3, #128	; 0x80
 2fc:	00db      	lsls	r3, r3, #3
 2fe:	508b      	str	r3, [r1, r2]

	while (1)
	{
		uint8_t i= 0;
 300:	1dfb      	adds	r3, r7, #7
 302:	2200      	movs	r2, #0
 304:	701a      	strb	r2, [r3, #0]
		while (i < 80)
 306:	e007      	b.n	318 <Write_Something+0x28>
		{
			Send_Byte(0xFC);
 308:	20fc      	movs	r0, #252	; 0xfc
 30a:	4b0f      	ldr	r3, [pc, #60]	; (348 <Write_Something+0x58>)
 30c:	4798      	blx	r3
			i++;
 30e:	1dfb      	adds	r3, r7, #7
 310:	781a      	ldrb	r2, [r3, #0]
 312:	1dfb      	adds	r3, r7, #7
 314:	3201      	adds	r2, #1
 316:	701a      	strb	r2, [r3, #0]
		while (i < 80)
 318:	1dfb      	adds	r3, r7, #7
 31a:	781b      	ldrb	r3, [r3, #0]
 31c:	2b4f      	cmp	r3, #79	; 0x4f
 31e:	d9f3      	bls.n	308 <Write_Something+0x18>
		}
		uint8_t j= 0;
 320:	1dbb      	adds	r3, r7, #6
 322:	2200      	movs	r2, #0
 324:	701a      	strb	r2, [r3, #0]
		while (j < 80)
 326:	e007      	b.n	338 <Write_Something+0x48>
		{
			Send_Byte(0xFEu);
 328:	20fe      	movs	r0, #254	; 0xfe
 32a:	4b07      	ldr	r3, [pc, #28]	; (348 <Write_Something+0x58>)
 32c:	4798      	blx	r3
			j++;
 32e:	1dbb      	adds	r3, r7, #6
 330:	781a      	ldrb	r2, [r3, #0]
 332:	1dbb      	adds	r3, r7, #6
 334:	3201      	adds	r2, #1
 336:	701a      	strb	r2, [r3, #0]
		while (j < 80)
 338:	1dbb      	adds	r3, r7, #6
 33a:	781b      	ldrb	r3, [r3, #0]
 33c:	2b4f      	cmp	r3, #79	; 0x4f
 33e:	d9f3      	bls.n	328 <Write_Something+0x38>
	{
 340:	e7de      	b.n	300 <Write_Something+0x10>
 342:	46c0      	nop			; (mov r8, r8)
 344:	41004400 	.word	0x41004400
 348:	0000034d 	.word	0x0000034d

0000034c <Send_Byte>:
	
	GPIO_RS_LOW();
}

void Send_Byte(uint8_t data)
{
 34c:	b580      	push	{r7, lr}
 34e:	b084      	sub	sp, #16
 350:	af00      	add	r7, sp, #0
 352:	0002      	movs	r2, r0
 354:	1dfb      	adds	r3, r7, #7
 356:	701a      	strb	r2, [r3, #0]
	uint32_t spiTimer = GLOBAL_TMR_SET(GLOBAL_TMR_TO_10MS);
 358:	4b0e      	ldr	r3, [pc, #56]	; (394 <Send_Byte+0x48>)
 35a:	681b      	ldr	r3, [r3, #0]
 35c:	3301      	adds	r3, #1
 35e:	60fb      	str	r3, [r7, #12]
	
	while(GLOBAL_TMR_IS_EXPIRED(spiTimer) == 0)
 360:	46c0      	nop			; (mov r8, r8)
 362:	4b0c      	ldr	r3, [pc, #48]	; (394 <Send_Byte+0x48>)
 364:	681b      	ldr	r3, [r3, #0]
 366:	68fa      	ldr	r2, [r7, #12]
 368:	429a      	cmp	r2, r3
 36a:	d8fa      	bhi.n	362 <Send_Byte+0x16>
	{
		
	}
	
	GPIO_SS_LOW();
 36c:	490a      	ldr	r1, [pc, #40]	; (398 <Send_Byte+0x4c>)
 36e:	2294      	movs	r2, #148	; 0x94
 370:	2380      	movs	r3, #128	; 0x80
 372:	029b      	lsls	r3, r3, #10
 374:	508b      	str	r3, [r1, r2]
	spiSend(data);
 376:	1dfb      	adds	r3, r7, #7
 378:	781b      	ldrb	r3, [r3, #0]
 37a:	0018      	movs	r0, r3
 37c:	4b07      	ldr	r3, [pc, #28]	; (39c <Send_Byte+0x50>)
 37e:	4798      	blx	r3
	GPIO_SS_HIGH();
 380:	4905      	ldr	r1, [pc, #20]	; (398 <Send_Byte+0x4c>)
 382:	2298      	movs	r2, #152	; 0x98
 384:	2380      	movs	r3, #128	; 0x80
 386:	029b      	lsls	r3, r3, #10
 388:	508b      	str	r3, [r1, r2]
}
 38a:	46c0      	nop			; (mov r8, r8)
 38c:	46bd      	mov	sp, r7
 38e:	b004      	add	sp, #16
 390:	bd80      	pop	{r7, pc}
 392:	46c0      	nop			; (mov r8, r8)
 394:	20000450 	.word	0x20000450
 398:	41004400 	.word	0x41004400
 39c:	000004c1 	.word	0x000004c1

000003a0 <main>:

#include "sam.h"
#include "lcd.h"

int main(void)
{
 3a0:	b580      	push	{r7, lr}
 3a2:	af00      	add	r7, sp, #0
	/* Initialize the SAM system */
    SystemInit();
 3a4:	4b04      	ldr	r3, [pc, #16]	; (3b8 <main+0x18>)
 3a6:	4798      	blx	r3
	
	/* Initialize the LCD Display*/
	LCD_Init();
 3a8:	4b04      	ldr	r3, [pc, #16]	; (3bc <main+0x1c>)
 3aa:	4798      	blx	r3
	
	Write_Something();
 3ac:	4b04      	ldr	r3, [pc, #16]	; (3c0 <main+0x20>)
 3ae:	4798      	blx	r3
 3b0:	2300      	movs	r3, #0
}
 3b2:	0018      	movs	r0, r3
 3b4:	46bd      	mov	sp, r7
 3b6:	bd80      	pop	{r7, pc}
 3b8:	00000215 	.word	0x00000215
 3bc:	00000281 	.word	0x00000281
 3c0:	000002f1 	.word	0x000002f1

000003c4 <SPI_init>:
#include "gpio.h"
#include "spi_master.h"


void SPI_init(void)
{
 3c4:	b580      	push	{r7, lr}
 3c6:	b082      	sub	sp, #8
 3c8:	af00      	add	r7, sp, #0
	/* Wait for synchronization */
	while(SERCOM5->SPI.SYNCBUSY.bit.ENABLE);
 3ca:	46c0      	nop			; (mov r8, r8)
 3cc:	4b34      	ldr	r3, [pc, #208]	; (4a0 <SPI_init+0xdc>)
 3ce:	69db      	ldr	r3, [r3, #28]
 3d0:	079b      	lsls	r3, r3, #30
 3d2:	0fdb      	lsrs	r3, r3, #31
 3d4:	b2db      	uxtb	r3, r3
 3d6:	2b00      	cmp	r3, #0
 3d8:	d1f8      	bne.n	3cc <SPI_init+0x8>

	/* Disable the SERCOM SPI module */
	SERCOM5->SPI.CTRLA.bit.ENABLE = 0;
 3da:	4a31      	ldr	r2, [pc, #196]	; (4a0 <SPI_init+0xdc>)
 3dc:	6813      	ldr	r3, [r2, #0]
 3de:	2102      	movs	r1, #2
 3e0:	438b      	bics	r3, r1
 3e2:	6013      	str	r3, [r2, #0]

	/* Wait for synchronization */
	while(SERCOM5->SPI.SYNCBUSY.bit.SWRST);
 3e4:	46c0      	nop			; (mov r8, r8)
 3e6:	4b2e      	ldr	r3, [pc, #184]	; (4a0 <SPI_init+0xdc>)
 3e8:	69db      	ldr	r3, [r3, #28]
 3ea:	07db      	lsls	r3, r3, #31
 3ec:	0fdb      	lsrs	r3, r3, #31
 3ee:	b2db      	uxtb	r3, r3
 3f0:	2b00      	cmp	r3, #0
 3f2:	d1f8      	bne.n	3e6 <SPI_init+0x22>

	/* Perform a software reset */
	SERCOM5->SPI.CTRLA.bit.SWRST = 1;
 3f4:	4a2a      	ldr	r2, [pc, #168]	; (4a0 <SPI_init+0xdc>)
 3f6:	6813      	ldr	r3, [r2, #0]
 3f8:	2101      	movs	r1, #1
 3fa:	430b      	orrs	r3, r1
 3fc:	6013      	str	r3, [r2, #0]

	/* Wait for synchronization */
	while(SERCOM5->SPI.CTRLA.bit.SWRST);
 3fe:	46c0      	nop			; (mov r8, r8)
 400:	4b27      	ldr	r3, [pc, #156]	; (4a0 <SPI_init+0xdc>)
 402:	681b      	ldr	r3, [r3, #0]
 404:	07db      	lsls	r3, r3, #31
 406:	0fdb      	lsrs	r3, r3, #31
 408:	b2db      	uxtb	r3, r3
 40a:	2b00      	cmp	r3, #0
 40c:	d1f8      	bne.n	400 <SPI_init+0x3c>

	/* Wait for synchronization */
	while(SERCOM5->SPI.SYNCBUSY.bit.SWRST || SERCOM5->SPI.SYNCBUSY.bit.ENABLE);
 40e:	46c0      	nop			; (mov r8, r8)
 410:	4b23      	ldr	r3, [pc, #140]	; (4a0 <SPI_init+0xdc>)
 412:	69db      	ldr	r3, [r3, #28]
 414:	07db      	lsls	r3, r3, #31
 416:	0fdb      	lsrs	r3, r3, #31
 418:	b2db      	uxtb	r3, r3
 41a:	2b00      	cmp	r3, #0
 41c:	d1f8      	bne.n	410 <SPI_init+0x4c>
 41e:	4b20      	ldr	r3, [pc, #128]	; (4a0 <SPI_init+0xdc>)
 420:	69db      	ldr	r3, [r3, #28]
 422:	079b      	lsls	r3, r3, #30
 424:	0fdb      	lsrs	r3, r3, #31
 426:	b2db      	uxtb	r3, r3
 428:	2b00      	cmp	r3, #0
 42a:	d1f1      	bne.n	410 <SPI_init+0x4c>
		
	//Using the WRCONFIG register to bulk configure PB16 for being configured the SERCOM5 SPI MASTER MISO
	PORT->Group[SPI_SERCOM_PINS_PORT_GROUP].WRCONFIG.reg = 
 42c:	4a1d      	ldr	r2, [pc, #116]	; (4a4 <SPI_init+0xe0>)
 42e:	23a8      	movs	r3, #168	; 0xa8
 430:	491d      	ldr	r1, [pc, #116]	; (4a8 <SPI_init+0xe4>)
 432:	50d1      	str	r1, [r2, r3]
		PORT_WRCONFIG_HWSEL |												//Select the correct pin configurations for 16-31
		PORT_WRCONFIG_INEN |												//Enable input on this pin MISO
		PORT_WRCONFIG_PINMASK((uint16_t)((PORT_PB16) >> 16));				//Selecting which pin is configured  PB16  This bit needs to shift to fit the 16 bit macro requirements
		
	//Using the WRCONFIG register to bulk configure both PB22 and PB23 for being configured the SERCOM5 SPI MASTER MOSI and SCK pins
	PORT->Group[SPI_SERCOM_PINS_PORT_GROUP].WRCONFIG.reg =
 434:	4a1b      	ldr	r2, [pc, #108]	; (4a4 <SPI_init+0xe0>)
 436:	23a8      	movs	r3, #168	; 0xa8
 438:	491c      	ldr	r1, [pc, #112]	; (4ac <SPI_init+0xe8>)
 43a:	50d1      	str	r1, [r2, r3]
		PORT_WRCONFIG_PMUX(MUX_PB22D_SERCOM5_PAD2) |						//Bulk configuration for PMUX
		PORT_WRCONFIG_PMUXEN |												//Enables the PMUX for the pins
		PORT_WRCONFIG_HWSEL |												//Select the correct pin configurations for 16-31
		PORT_WRCONFIG_PINMASK ((uint16_t)((SPI_SERCOM_MOSI_PIN | SPI_SERCOM_SCK_PIN) >> 16));	//Selecting which pin is configured
		
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM5;								//Enable the SERCOM 5 under the PM
 43c:	4b1c      	ldr	r3, [pc, #112]	; (4b0 <SPI_init+0xec>)
 43e:	4a1c      	ldr	r2, [pc, #112]	; (4b0 <SPI_init+0xec>)
 440:	6a12      	ldr	r2, [r2, #32]
 442:	2180      	movs	r1, #128	; 0x80
 444:	430a      	orrs	r2, r1
 446:	621a      	str	r2, [r3, #32]
	
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM5_GCLK_ID_CORE) |				//Provide necessary clocks to the peripheral
 448:	4b1a      	ldr	r3, [pc, #104]	; (4b4 <SPI_init+0xf0>)
 44a:	4a1b      	ldr	r2, [pc, #108]	; (4b8 <SPI_init+0xf4>)
 44c:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(SPI_SERCOM_CLK_GEN);
	
	while(GCLK->STATUS.bit.SYNCBUSY);										//Wait for clock sync
 44e:	46c0      	nop			; (mov r8, r8)
 450:	4b18      	ldr	r3, [pc, #96]	; (4b4 <SPI_init+0xf0>)
 452:	785b      	ldrb	r3, [r3, #1]
 454:	061b      	lsls	r3, r3, #24
 456:	0fdb      	lsrs	r3, r3, #31
 458:	b2db      	uxtb	r3, r3
 45a:	2b00      	cmp	r3, #0
 45c:	d1f8      	bne.n	450 <SPI_init+0x8c>
		
	SPI_SERCOM->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_MODE_SPI_MASTER|			//Configure the Peripheral as SPI Master
 45e:	4b10      	ldr	r3, [pc, #64]	; (4a0 <SPI_init+0xdc>)
 460:	4a16      	ldr	r2, [pc, #88]	; (4bc <SPI_init+0xf8>)
 462:	601a      	str	r2, [r3, #0]
	SERCOM_SPI_CTRLA_DOPO(1);												//DOPO is set to PAD[2,3]

	
	SPI_SERCOM->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_RXEN;						//Enable receive on SPI
 464:	4b0e      	ldr	r3, [pc, #56]	; (4a0 <SPI_init+0xdc>)
 466:	2280      	movs	r2, #128	; 0x80
 468:	0292      	lsls	r2, r2, #10
 46a:	605a      	str	r2, [r3, #4]
	
	uint16_t BAUD_REG = ((float)SPI_CLK_FREQ / (float)(2 * SPI_BAUD)) - 1;	//Calculate BAUD value
 46c:	1dbb      	adds	r3, r7, #6
 46e:	224f      	movs	r2, #79	; 0x4f
 470:	801a      	strh	r2, [r3, #0]
	SPI_SERCOM->SPI.BAUD.reg =	SERCOM_SPI_BAUD_BAUD(BAUD_REG);				//Set the SPI baud rate	
 472:	4a0b      	ldr	r2, [pc, #44]	; (4a0 <SPI_init+0xdc>)
 474:	1dbb      	adds	r3, r7, #6
 476:	881b      	ldrh	r3, [r3, #0]
 478:	b2db      	uxtb	r3, r3
 47a:	7313      	strb	r3, [r2, #12]
	SPI_SERCOM->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;					//Enable the Sercom SPI
 47c:	4b08      	ldr	r3, [pc, #32]	; (4a0 <SPI_init+0xdc>)
 47e:	4a08      	ldr	r2, [pc, #32]	; (4a0 <SPI_init+0xdc>)
 480:	6812      	ldr	r2, [r2, #0]
 482:	2102      	movs	r1, #2
 484:	430a      	orrs	r2, r1
 486:	601a      	str	r2, [r3, #0]
	while(SPI_SERCOM->SPI.SYNCBUSY.bit.ENABLE);								//What for the enable to finish
 488:	46c0      	nop			; (mov r8, r8)
 48a:	4b05      	ldr	r3, [pc, #20]	; (4a0 <SPI_init+0xdc>)
 48c:	69db      	ldr	r3, [r3, #28]
 48e:	079b      	lsls	r3, r3, #30
 490:	0fdb      	lsrs	r3, r3, #31
 492:	b2db      	uxtb	r3, r3
 494:	2b00      	cmp	r3, #0
 496:	d1f8      	bne.n	48a <SPI_init+0xc6>
	
}
 498:	46c0      	nop			; (mov r8, r8)
 49a:	46bd      	mov	sp, r7
 49c:	b002      	add	sp, #8
 49e:	bd80      	pop	{r7, pc}
 4a0:	42001c00 	.word	0x42001c00
 4a4:	41004400 	.word	0x41004400
 4a8:	d2030001 	.word	0xd2030001
 4ac:	d30100c0 	.word	0xd30100c0
 4b0:	40000400 	.word	0x40000400
 4b4:	40000c00 	.word	0x40000c00
 4b8:	00004019 	.word	0x00004019
 4bc:	0001000c 	.word	0x0001000c

000004c0 <spiSend>:

uint8_t spiSend(uint8_t data)
{	
 4c0:	b580      	push	{r7, lr}
 4c2:	b082      	sub	sp, #8
 4c4:	af00      	add	r7, sp, #0
 4c6:	0002      	movs	r2, r0
 4c8:	1dfb      	adds	r3, r7, #7
 4ca:	701a      	strb	r2, [r3, #0]
	while(SPI_SERCOM->SPI.INTFLAG.bit.DRE == 0);
 4cc:	46c0      	nop			; (mov r8, r8)
 4ce:	4b0d      	ldr	r3, [pc, #52]	; (504 <spiSend+0x44>)
 4d0:	7e1b      	ldrb	r3, [r3, #24]
 4d2:	07db      	lsls	r3, r3, #31
 4d4:	0fdb      	lsrs	r3, r3, #31
 4d6:	b2db      	uxtb	r3, r3
 4d8:	2b00      	cmp	r3, #0
 4da:	d0f8      	beq.n	4ce <spiSend+0xe>
	SPI_SERCOM->SPI.DATA.reg = data;
 4dc:	4b09      	ldr	r3, [pc, #36]	; (504 <spiSend+0x44>)
 4de:	1dfa      	adds	r2, r7, #7
 4e0:	7812      	ldrb	r2, [r2, #0]
 4e2:	629a      	str	r2, [r3, #40]	; 0x28
	while(SPI_SERCOM->SPI.INTFLAG.bit.RXC == 0);
 4e4:	46c0      	nop			; (mov r8, r8)
 4e6:	4b07      	ldr	r3, [pc, #28]	; (504 <spiSend+0x44>)
 4e8:	7e1b      	ldrb	r3, [r3, #24]
 4ea:	075b      	lsls	r3, r3, #29
 4ec:	0fdb      	lsrs	r3, r3, #31
 4ee:	b2db      	uxtb	r3, r3
 4f0:	2b00      	cmp	r3, #0
 4f2:	d0f8      	beq.n	4e6 <spiSend+0x26>
	return (uint8_t)SPI_SERCOM->SPI.DATA.reg;	
 4f4:	4b03      	ldr	r3, [pc, #12]	; (504 <spiSend+0x44>)
 4f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 4f8:	b2db      	uxtb	r3, r3
 4fa:	0018      	movs	r0, r3
 4fc:	46bd      	mov	sp, r7
 4fe:	b002      	add	sp, #8
 500:	bd80      	pop	{r7, pc}
 502:	46c0      	nop			; (mov r8, r8)
 504:	42001c00 	.word	0x42001c00

00000508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 508:	b580      	push	{r7, lr}
 50a:	b082      	sub	sp, #8
 50c:	af00      	add	r7, sp, #0
 50e:	0002      	movs	r2, r0
 510:	1dfb      	adds	r3, r7, #7
 512:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 514:	1dfb      	adds	r3, r7, #7
 516:	781b      	ldrb	r3, [r3, #0]
 518:	2b7f      	cmp	r3, #127	; 0x7f
 51a:	d809      	bhi.n	530 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 51c:	4b06      	ldr	r3, [pc, #24]	; (538 <__NVIC_EnableIRQ+0x30>)
 51e:	1dfa      	adds	r2, r7, #7
 520:	7812      	ldrb	r2, [r2, #0]
 522:	0011      	movs	r1, r2
 524:	221f      	movs	r2, #31
 526:	400a      	ands	r2, r1
 528:	2101      	movs	r1, #1
 52a:	4091      	lsls	r1, r2
 52c:	000a      	movs	r2, r1
 52e:	601a      	str	r2, [r3, #0]
  }
}
 530:	46c0      	nop			; (mov r8, r8)
 532:	46bd      	mov	sp, r7
 534:	b002      	add	sp, #8
 536:	bd80      	pop	{r7, pc}
 538:	e000e100 	.word	0xe000e100

0000053c <TC3_Handler>:
#include "gpio.h"

uint32_t	GlobalTick = 0;

void TC3_Handler(void)
{
 53c:	b580      	push	{r7, lr}
 53e:	af00      	add	r7, sp, #0
	TC3->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
 540:	4b05      	ldr	r3, [pc, #20]	; (558 <TC3_Handler+0x1c>)
 542:	2201      	movs	r2, #1
 544:	739a      	strb	r2, [r3, #14]
	GlobalTick++;
 546:	4b05      	ldr	r3, [pc, #20]	; (55c <TC3_Handler+0x20>)
 548:	681b      	ldr	r3, [r3, #0]
 54a:	1c5a      	adds	r2, r3, #1
 54c:	4b03      	ldr	r3, [pc, #12]	; (55c <TC3_Handler+0x20>)
 54e:	601a      	str	r2, [r3, #0]
	
}
 550:	46c0      	nop			; (mov r8, r8)
 552:	46bd      	mov	sp, r7
 554:	bd80      	pop	{r7, pc}
 556:	46c0      	nop			; (mov r8, r8)
 558:	42002c00 	.word	0x42002c00
 55c:	20000450 	.word	0x20000450

00000560 <TMR_Init>:

void TMR_Init(void)
{
 560:	b580      	push	{r7, lr}
 562:	af00      	add	r7, sp, #0
	PM->APBCMASK.reg |= PM_APBCMASK_TC3;								//Provide power to TC3
 564:	4b13      	ldr	r3, [pc, #76]	; (5b4 <TMR_Init+0x54>)
 566:	4a13      	ldr	r2, [pc, #76]	; (5b4 <TMR_Init+0x54>)
 568:	6a12      	ldr	r2, [r2, #32]
 56a:	2180      	movs	r1, #128	; 0x80
 56c:	0109      	lsls	r1, r1, #4
 56e:	430a      	orrs	r2, r1
 570:	621a      	str	r2, [r3, #32]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC3_GCLK_ID) |
 572:	4b11      	ldr	r3, [pc, #68]	; (5b8 <TMR_Init+0x58>)
 574:	4a11      	ldr	r2, [pc, #68]	; (5bc <TMR_Init+0x5c>)
 576:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(0);							//Provide Clock to TC3, from generator 0

	TC3->COUNT16.CTRLA.reg =	TC_CTRLA_MODE_COUNT16 |					// Configuring TC3 to 16-bit operation
 578:	4b11      	ldr	r3, [pc, #68]	; (5c0 <TMR_Init+0x60>)
 57a:	4a12      	ldr	r2, [pc, #72]	; (5c4 <TMR_Init+0x64>)
 57c:	801a      	strh	r2, [r3, #0]
	TC_CTRLA_WAVEGEN_MFRQ |												// Match frequency wit CC0
	TC_CTRLA_PRESCALER_DIV4 |											// Prescaler to 4
	TC_CTRLA_PRESCSYNC_RESYNC;											// Reload or reset the counter on next generic clock. Reset the prescaler counter

	TC3->COUNT16.CC[0].reg = TC3_PER_10MS;								// Set overflow value
 57e:	4b10      	ldr	r3, [pc, #64]	; (5c0 <TMR_Init+0x60>)
 580:	4a11      	ldr	r2, [pc, #68]	; (5c8 <TMR_Init+0x68>)
 582:	831a      	strh	r2, [r3, #24]
	TC3->COUNT16.COUNT.reg = 0;											// Clear Counter
 584:	4b0e      	ldr	r3, [pc, #56]	; (5c0 <TMR_Init+0x60>)
 586:	2200      	movs	r2, #0
 588:	821a      	strh	r2, [r3, #16]

	TC3->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;  						// Clear interrupt flag of timer overflow
 58a:	4b0d      	ldr	r3, [pc, #52]	; (5c0 <TMR_Init+0x60>)
 58c:	2201      	movs	r2, #1
 58e:	739a      	strb	r2, [r3, #14]
	TC3->COUNT16.INTENSET.reg = TC_INTENSET_OVF;						// Enable interrupt on overflow
 590:	4b0b      	ldr	r3, [pc, #44]	; (5c0 <TMR_Init+0x60>)
 592:	2201      	movs	r2, #1
 594:	735a      	strb	r2, [r3, #13]
	NVIC_EnableIRQ(TC3_IRQn);											// Enable Global Interrupt for the Peripheral
 596:	2012      	movs	r0, #18
 598:	4b0c      	ldr	r3, [pc, #48]	; (5cc <TMR_Init+0x6c>)
 59a:	4798      	blx	r3
	TC3->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;							// Start Timer*/
 59c:	4a08      	ldr	r2, [pc, #32]	; (5c0 <TMR_Init+0x60>)
 59e:	4b08      	ldr	r3, [pc, #32]	; (5c0 <TMR_Init+0x60>)
 5a0:	881b      	ldrh	r3, [r3, #0]
 5a2:	b29b      	uxth	r3, r3
 5a4:	2102      	movs	r1, #2
 5a6:	430b      	orrs	r3, r1
 5a8:	b29b      	uxth	r3, r3
 5aa:	8013      	strh	r3, [r2, #0]

 5ac:	46c0      	nop			; (mov r8, r8)
 5ae:	46bd      	mov	sp, r7
 5b0:	bd80      	pop	{r7, pc}
 5b2:	46c0      	nop			; (mov r8, r8)
 5b4:	40000400 	.word	0x40000400
 5b8:	40000c00 	.word	0x40000c00
 5bc:	0000401b 	.word	0x0000401b
 5c0:	42002c00 	.word	0x42002c00
 5c4:	00002220 	.word	0x00002220
 5c8:	00004dee 	.word	0x00004dee
 5cc:	00000509 	.word	0x00000509

000005d0 <__libc_init_array>:
 5d0:	b570      	push	{r4, r5, r6, lr}
 5d2:	4e0d      	ldr	r6, [pc, #52]	; (608 <__libc_init_array+0x38>)
 5d4:	4d0d      	ldr	r5, [pc, #52]	; (60c <__libc_init_array+0x3c>)
 5d6:	2400      	movs	r4, #0
 5d8:	1bad      	subs	r5, r5, r6
 5da:	10ad      	asrs	r5, r5, #2
 5dc:	d005      	beq.n	5ea <__libc_init_array+0x1a>
 5de:	00a3      	lsls	r3, r4, #2
 5e0:	58f3      	ldr	r3, [r6, r3]
 5e2:	3401      	adds	r4, #1
 5e4:	4798      	blx	r3
 5e6:	42a5      	cmp	r5, r4
 5e8:	d1f9      	bne.n	5de <__libc_init_array+0xe>
 5ea:	f000 f8c7 	bl	77c <_init>
 5ee:	4e08      	ldr	r6, [pc, #32]	; (610 <__libc_init_array+0x40>)
 5f0:	4d08      	ldr	r5, [pc, #32]	; (614 <__libc_init_array+0x44>)
 5f2:	2400      	movs	r4, #0
 5f4:	1bad      	subs	r5, r5, r6
 5f6:	10ad      	asrs	r5, r5, #2
 5f8:	d005      	beq.n	606 <__libc_init_array+0x36>
 5fa:	00a3      	lsls	r3, r4, #2
 5fc:	58f3      	ldr	r3, [r6, r3]
 5fe:	3401      	adds	r4, #1
 600:	4798      	blx	r3
 602:	42a5      	cmp	r5, r4
 604:	d1f9      	bne.n	5fa <__libc_init_array+0x2a>
 606:	bd70      	pop	{r4, r5, r6, pc}
 608:	00000788 	.word	0x00000788
 60c:	00000788 	.word	0x00000788
 610:	00000788 	.word	0x00000788
 614:	00000790 	.word	0x00000790

00000618 <register_fini>:
 618:	4b03      	ldr	r3, [pc, #12]	; (628 <register_fini+0x10>)
 61a:	b510      	push	{r4, lr}
 61c:	2b00      	cmp	r3, #0
 61e:	d002      	beq.n	626 <register_fini+0xe>
 620:	4802      	ldr	r0, [pc, #8]	; (62c <register_fini+0x14>)
 622:	f000 f805 	bl	630 <atexit>
 626:	bd10      	pop	{r4, pc}
 628:	00000000 	.word	0x00000000
 62c:	00000641 	.word	0x00000641

00000630 <atexit>:
 630:	b510      	push	{r4, lr}
 632:	0001      	movs	r1, r0
 634:	2300      	movs	r3, #0
 636:	2200      	movs	r2, #0
 638:	2000      	movs	r0, #0
 63a:	f000 f81f 	bl	67c <__register_exitproc>
 63e:	bd10      	pop	{r4, pc}

00000640 <__libc_fini_array>:
 640:	b570      	push	{r4, r5, r6, lr}
 642:	4b09      	ldr	r3, [pc, #36]	; (668 <__libc_fini_array+0x28>)
 644:	4c09      	ldr	r4, [pc, #36]	; (66c <__libc_fini_array+0x2c>)
 646:	1ae4      	subs	r4, r4, r3
 648:	10a4      	asrs	r4, r4, #2
 64a:	d009      	beq.n	660 <__libc_fini_array+0x20>
 64c:	4a08      	ldr	r2, [pc, #32]	; (670 <__libc_fini_array+0x30>)
 64e:	18a5      	adds	r5, r4, r2
 650:	00ad      	lsls	r5, r5, #2
 652:	18ed      	adds	r5, r5, r3
 654:	682b      	ldr	r3, [r5, #0]
 656:	3c01      	subs	r4, #1
 658:	4798      	blx	r3
 65a:	3d04      	subs	r5, #4
 65c:	2c00      	cmp	r4, #0
 65e:	d1f9      	bne.n	654 <__libc_fini_array+0x14>
 660:	f000 f896 	bl	790 <_fini>
 664:	bd70      	pop	{r4, r5, r6, pc}
 666:	46c0      	nop			; (mov r8, r8)
 668:	0000079c 	.word	0x0000079c
 66c:	000007a0 	.word	0x000007a0
 670:	3fffffff 	.word	0x3fffffff

00000674 <__retarget_lock_acquire_recursive>:
 674:	4770      	bx	lr
 676:	46c0      	nop			; (mov r8, r8)

00000678 <__retarget_lock_release_recursive>:
 678:	4770      	bx	lr
 67a:	46c0      	nop			; (mov r8, r8)

0000067c <__register_exitproc>:
 67c:	b5f0      	push	{r4, r5, r6, r7, lr}
 67e:	464e      	mov	r6, r9
 680:	4645      	mov	r5, r8
 682:	46de      	mov	lr, fp
 684:	4657      	mov	r7, sl
 686:	b5e0      	push	{r5, r6, r7, lr}
 688:	4d36      	ldr	r5, [pc, #216]	; (764 <__register_exitproc+0xe8>)
 68a:	b083      	sub	sp, #12
 68c:	0006      	movs	r6, r0
 68e:	6828      	ldr	r0, [r5, #0]
 690:	4698      	mov	r8, r3
 692:	000f      	movs	r7, r1
 694:	4691      	mov	r9, r2
 696:	f7ff ffed 	bl	674 <__retarget_lock_acquire_recursive>
 69a:	4b33      	ldr	r3, [pc, #204]	; (768 <__register_exitproc+0xec>)
 69c:	681c      	ldr	r4, [r3, #0]
 69e:	23a4      	movs	r3, #164	; 0xa4
 6a0:	005b      	lsls	r3, r3, #1
 6a2:	58e0      	ldr	r0, [r4, r3]
 6a4:	2800      	cmp	r0, #0
 6a6:	d052      	beq.n	74e <__register_exitproc+0xd2>
 6a8:	6843      	ldr	r3, [r0, #4]
 6aa:	2b1f      	cmp	r3, #31
 6ac:	dc13      	bgt.n	6d6 <__register_exitproc+0x5a>
 6ae:	1c5a      	adds	r2, r3, #1
 6b0:	9201      	str	r2, [sp, #4]
 6b2:	2e00      	cmp	r6, #0
 6b4:	d128      	bne.n	708 <__register_exitproc+0x8c>
 6b6:	9a01      	ldr	r2, [sp, #4]
 6b8:	3302      	adds	r3, #2
 6ba:	009b      	lsls	r3, r3, #2
 6bc:	6042      	str	r2, [r0, #4]
 6be:	501f      	str	r7, [r3, r0]
 6c0:	6828      	ldr	r0, [r5, #0]
 6c2:	f7ff ffd9 	bl	678 <__retarget_lock_release_recursive>
 6c6:	2000      	movs	r0, #0
 6c8:	b003      	add	sp, #12
 6ca:	bc3c      	pop	{r2, r3, r4, r5}
 6cc:	4690      	mov	r8, r2
 6ce:	4699      	mov	r9, r3
 6d0:	46a2      	mov	sl, r4
 6d2:	46ab      	mov	fp, r5
 6d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 6d6:	4b25      	ldr	r3, [pc, #148]	; (76c <__register_exitproc+0xf0>)
 6d8:	2b00      	cmp	r3, #0
 6da:	d03d      	beq.n	758 <__register_exitproc+0xdc>
 6dc:	20c8      	movs	r0, #200	; 0xc8
 6de:	0040      	lsls	r0, r0, #1
 6e0:	e000      	b.n	6e4 <__register_exitproc+0x68>
 6e2:	bf00      	nop
 6e4:	2800      	cmp	r0, #0
 6e6:	d037      	beq.n	758 <__register_exitproc+0xdc>
 6e8:	22a4      	movs	r2, #164	; 0xa4
 6ea:	2300      	movs	r3, #0
 6ec:	0052      	lsls	r2, r2, #1
 6ee:	58a1      	ldr	r1, [r4, r2]
 6f0:	6043      	str	r3, [r0, #4]
 6f2:	6001      	str	r1, [r0, #0]
 6f4:	50a0      	str	r0, [r4, r2]
 6f6:	3240      	adds	r2, #64	; 0x40
 6f8:	5083      	str	r3, [r0, r2]
 6fa:	3204      	adds	r2, #4
 6fc:	5083      	str	r3, [r0, r2]
 6fe:	3301      	adds	r3, #1
 700:	9301      	str	r3, [sp, #4]
 702:	2300      	movs	r3, #0
 704:	2e00      	cmp	r6, #0
 706:	d0d6      	beq.n	6b6 <__register_exitproc+0x3a>
 708:	009a      	lsls	r2, r3, #2
 70a:	4692      	mov	sl, r2
 70c:	4482      	add	sl, r0
 70e:	464a      	mov	r2, r9
 710:	2188      	movs	r1, #136	; 0x88
 712:	4654      	mov	r4, sl
 714:	5062      	str	r2, [r4, r1]
 716:	22c4      	movs	r2, #196	; 0xc4
 718:	0052      	lsls	r2, r2, #1
 71a:	4691      	mov	r9, r2
 71c:	4481      	add	r9, r0
 71e:	464a      	mov	r2, r9
 720:	3987      	subs	r1, #135	; 0x87
 722:	4099      	lsls	r1, r3
 724:	6812      	ldr	r2, [r2, #0]
 726:	468b      	mov	fp, r1
 728:	430a      	orrs	r2, r1
 72a:	4694      	mov	ip, r2
 72c:	464a      	mov	r2, r9
 72e:	4661      	mov	r1, ip
 730:	6011      	str	r1, [r2, #0]
 732:	2284      	movs	r2, #132	; 0x84
 734:	4641      	mov	r1, r8
 736:	0052      	lsls	r2, r2, #1
 738:	50a1      	str	r1, [r4, r2]
 73a:	2e02      	cmp	r6, #2
 73c:	d1bb      	bne.n	6b6 <__register_exitproc+0x3a>
 73e:	0002      	movs	r2, r0
 740:	465c      	mov	r4, fp
 742:	328d      	adds	r2, #141	; 0x8d
 744:	32ff      	adds	r2, #255	; 0xff
 746:	6811      	ldr	r1, [r2, #0]
 748:	430c      	orrs	r4, r1
 74a:	6014      	str	r4, [r2, #0]
 74c:	e7b3      	b.n	6b6 <__register_exitproc+0x3a>
 74e:	0020      	movs	r0, r4
 750:	304d      	adds	r0, #77	; 0x4d
 752:	30ff      	adds	r0, #255	; 0xff
 754:	50e0      	str	r0, [r4, r3]
 756:	e7a7      	b.n	6a8 <__register_exitproc+0x2c>
 758:	6828      	ldr	r0, [r5, #0]
 75a:	f7ff ff8d 	bl	678 <__retarget_lock_release_recursive>
 75e:	2001      	movs	r0, #1
 760:	4240      	negs	r0, r0
 762:	e7b1      	b.n	6c8 <__register_exitproc+0x4c>
 764:	20000430 	.word	0x20000430
 768:	00000778 	.word	0x00000778
 76c:	00000000 	.word	0x00000000
 770:	38383838 	.word	0x38383838
 774:	0f060108 	.word	0x0f060108

00000778 <_global_impure_ptr>:
 778:	20000008                                ... 

0000077c <_init>:
 77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 77e:	46c0      	nop			; (mov r8, r8)
 780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 782:	bc08      	pop	{r3}
 784:	469e      	mov	lr, r3
 786:	4770      	bx	lr

00000788 <__init_array_start>:
 788:	00000619 	.word	0x00000619

0000078c <__frame_dummy_init_array_entry>:
 78c:	000000dd                                ....

00000790 <_fini>:
 790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 792:	46c0      	nop			; (mov r8, r8)
 794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 796:	bc08      	pop	{r3}
 798:	469e      	mov	lr, r3
 79a:	4770      	bx	lr

0000079c <__fini_array_start>:
 79c:	000000b5 	.word	0x000000b5
