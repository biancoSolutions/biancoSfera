
STM32_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007188  08000250  08000250  00001250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  080073d8  080073d8  000083d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080074dc  080074dc  000084dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080074e4  080074e4  000084e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080074e8  080074e8  000084e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000009  20000000  080074ec  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000144  2000000c  080074f5  0000900c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000150  080074f5  00009150  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00009009  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013147  00000000  00000000  0000903f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000028e6  00000000  00000000  0001c186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ee0  00000000  00000000  0001ea70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b55  00000000  00000000  0001f950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000373fc  00000000  00000000  000204a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00014313  00000000  00000000  000578a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00151d47  00000000  00000000  0006bbb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001bd8fb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003c5c  00000000  00000000  001bd940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  001c159c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	2000000c 	.word	0x2000000c
 800026c:	00000000 	.word	0x00000000
 8000270:	080073c0 	.word	0x080073c0

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000010 	.word	0x20000010
 800028c:	080073c0 	.word	0x080073c0

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b97e 	b.w	80005a4 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14d      	bne.n	8000368 <__udivmoddi4+0xa8>
 80002cc:	428a      	cmp	r2, r1
 80002ce:	460f      	mov	r7, r1
 80002d0:	4684      	mov	ip, r0
 80002d2:	4696      	mov	lr, r2
 80002d4:	fab2 f382 	clz	r3, r2
 80002d8:	d960      	bls.n	800039c <__udivmoddi4+0xdc>
 80002da:	b14b      	cbz	r3, 80002f0 <__udivmoddi4+0x30>
 80002dc:	fa02 fe03 	lsl.w	lr, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80002ea:	fa20 f202 	lsr.w	r2, r0, r2
 80002ee:	4317      	orrs	r7, r2
 80002f0:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002f4:	fa1f f48e 	uxth.w	r4, lr
 80002f8:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002fc:	fbb7 f1f6 	udiv	r1, r7, r6
 8000300:	fb06 7711 	mls	r7, r6, r1, r7
 8000304:	fb01 f004 	mul.w	r0, r1, r4
 8000308:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800030c:	4290      	cmp	r0, r2
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0x62>
 8000310:	eb1e 0202 	adds.w	r2, lr, r2
 8000314:	f101 37ff 	add.w	r7, r1, #4294967295	@ 0xffffffff
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x60>
 800031a:	4290      	cmp	r0, r2
 800031c:	f200 812d 	bhi.w	800057a <__udivmoddi4+0x2ba>
 8000320:	4639      	mov	r1, r7
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	fa1f fc8c 	uxth.w	ip, ip
 8000328:	fbb2 f0f6 	udiv	r0, r2, r6
 800032c:	fb06 2210 	mls	r2, r6, r0, r2
 8000330:	fb00 f404 	mul.w	r4, r0, r4
 8000334:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000338:	4564      	cmp	r4, ip
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x8e>
 800033c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x8c>
 8000346:	4564      	cmp	r4, ip
 8000348:	f200 811a 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 800034c:	4610      	mov	r0, r2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	ebac 0c04 	sub.w	ip, ip, r4
 8000356:	2100      	movs	r1, #0
 8000358:	b125      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035a:	fa2c f303 	lsr.w	r3, ip, r3
 800035e:	2200      	movs	r2, #0
 8000360:	e9c5 3200 	strd	r3, r2, [r5]
 8000364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000368:	428b      	cmp	r3, r1
 800036a:	d905      	bls.n	8000378 <__udivmoddi4+0xb8>
 800036c:	b10d      	cbz	r5, 8000372 <__udivmoddi4+0xb2>
 800036e:	e9c5 0100 	strd	r0, r1, [r5]
 8000372:	2100      	movs	r1, #0
 8000374:	4608      	mov	r0, r1
 8000376:	e7f5      	b.n	8000364 <__udivmoddi4+0xa4>
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	d14d      	bne.n	800041c <__udivmoddi4+0x15c>
 8000380:	42a3      	cmp	r3, r4
 8000382:	f0c0 80f2 	bcc.w	800056a <__udivmoddi4+0x2aa>
 8000386:	4290      	cmp	r0, r2
 8000388:	f080 80ef 	bcs.w	800056a <__udivmoddi4+0x2aa>
 800038c:	4606      	mov	r6, r0
 800038e:	4623      	mov	r3, r4
 8000390:	4608      	mov	r0, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e6      	beq.n	8000364 <__udivmoddi4+0xa4>
 8000396:	e9c5 6300 	strd	r6, r3, [r5]
 800039a:	e7e3      	b.n	8000364 <__udivmoddi4+0xa4>
 800039c:	2b00      	cmp	r3, #0
 800039e:	f040 80a2 	bne.w	80004e6 <__udivmoddi4+0x226>
 80003a2:	1a8a      	subs	r2, r1, r2
 80003a4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a8:	fa1f f68e 	uxth.w	r6, lr
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb2 f4f7 	udiv	r4, r2, r7
 80003b2:	fb07 2014 	mls	r0, r7, r4, r2
 80003b6:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003ba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003be:	fb06 f004 	mul.w	r0, r6, r4
 80003c2:	4290      	cmp	r0, r2
 80003c4:	d90f      	bls.n	80003e6 <__udivmoddi4+0x126>
 80003c6:	eb1e 0202 	adds.w	r2, lr, r2
 80003ca:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 80003ce:	bf2c      	ite	cs
 80003d0:	f04f 0901 	movcs.w	r9, #1
 80003d4:	f04f 0900 	movcc.w	r9, #0
 80003d8:	4290      	cmp	r0, r2
 80003da:	d903      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003dc:	f1b9 0f00 	cmp.w	r9, #0
 80003e0:	f000 80c8 	beq.w	8000574 <__udivmoddi4+0x2b4>
 80003e4:	4644      	mov	r4, r8
 80003e6:	1a12      	subs	r2, r2, r0
 80003e8:	fa1f fc8c 	uxth.w	ip, ip
 80003ec:	fbb2 f0f7 	udiv	r0, r2, r7
 80003f0:	fb07 2210 	mls	r2, r7, r0, r2
 80003f4:	fb00 f606 	mul.w	r6, r0, r6
 80003f8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003fc:	4566      	cmp	r6, ip
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x152>
 8000400:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000404:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000408:	d202      	bcs.n	8000410 <__udivmoddi4+0x150>
 800040a:	4566      	cmp	r6, ip
 800040c:	f200 80bb 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000410:	4610      	mov	r0, r2
 8000412:	ebac 0c06 	sub.w	ip, ip, r6
 8000416:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800041a:	e79d      	b.n	8000358 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa04 fe01 	lsl.w	lr, r4, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	fa20 fc06 	lsr.w	ip, r0, r6
 800042e:	40f4      	lsrs	r4, r6
 8000430:	408a      	lsls	r2, r1
 8000432:	431f      	orrs	r7, r3
 8000434:	ea4e 030c 	orr.w	r3, lr, ip
 8000438:	fa00 fe01 	lsl.w	lr, r0, r1
 800043c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	fbb4 f0f8 	udiv	r0, r4, r8
 800044c:	fb08 4410 	mls	r4, r8, r0, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb00 f90c 	mul.w	r9, r0, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	d90e      	bls.n	800047a <__udivmoddi4+0x1ba>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000462:	bf2c      	ite	cs
 8000464:	f04f 0b01 	movcs.w	fp, #1
 8000468:	f04f 0b00 	movcc.w	fp, #0
 800046c:	45a1      	cmp	r9, r4
 800046e:	d903      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000470:	f1bb 0f00 	cmp.w	fp, #0
 8000474:	f000 8093 	beq.w	800059e <__udivmoddi4+0x2de>
 8000478:	4650      	mov	r0, sl
 800047a:	eba4 0409 	sub.w	r4, r4, r9
 800047e:	fa1f f983 	uxth.w	r9, r3
 8000482:	fbb4 f3f8 	udiv	r3, r4, r8
 8000486:	fb08 4413 	mls	r4, r8, r3, r4
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000492:	45a4      	cmp	ip, r4
 8000494:	d906      	bls.n	80004a4 <__udivmoddi4+0x1e4>
 8000496:	193c      	adds	r4, r7, r4
 8000498:	f103 38ff 	add.w	r8, r3, #4294967295	@ 0xffffffff
 800049c:	d201      	bcs.n	80004a2 <__udivmoddi4+0x1e2>
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d87a      	bhi.n	8000598 <__udivmoddi4+0x2d8>
 80004a2:	4643      	mov	r3, r8
 80004a4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a8:	eba4 040c 	sub.w	r4, r4, ip
 80004ac:	fba0 9802 	umull	r9, r8, r0, r2
 80004b0:	4544      	cmp	r4, r8
 80004b2:	46cc      	mov	ip, r9
 80004b4:	4643      	mov	r3, r8
 80004b6:	d302      	bcc.n	80004be <__udivmoddi4+0x1fe>
 80004b8:	d106      	bne.n	80004c8 <__udivmoddi4+0x208>
 80004ba:	45ce      	cmp	lr, r9
 80004bc:	d204      	bcs.n	80004c8 <__udivmoddi4+0x208>
 80004be:	3801      	subs	r0, #1
 80004c0:	ebb9 0c02 	subs.w	ip, r9, r2
 80004c4:	eb68 0307 	sbc.w	r3, r8, r7
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x222>
 80004ca:	ebbe 020c 	subs.w	r2, lr, ip
 80004ce:	eb64 0403 	sbc.w	r4, r4, r3
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	fa22 f301 	lsr.w	r3, r2, r1
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	431e      	orrs	r6, r3
 80004de:	e9c5 6400 	strd	r6, r4, [r5]
 80004e2:	2100      	movs	r1, #0
 80004e4:	e73e      	b.n	8000364 <__udivmoddi4+0xa4>
 80004e6:	fa02 fe03 	lsl.w	lr, r2, r3
 80004ea:	f1c3 0120 	rsb	r1, r3, #32
 80004ee:	fa04 f203 	lsl.w	r2, r4, r3
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	40cc      	lsrs	r4, r1
 80004f8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004fc:	fa20 f101 	lsr.w	r1, r0, r1
 8000500:	fa1f f68e 	uxth.w	r6, lr
 8000504:	fbb4 f0f7 	udiv	r0, r4, r7
 8000508:	430a      	orrs	r2, r1
 800050a:	fb07 4410 	mls	r4, r7, r0, r4
 800050e:	0c11      	lsrs	r1, r2, #16
 8000510:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000514:	fb00 f406 	mul.w	r4, r0, r6
 8000518:	428c      	cmp	r4, r1
 800051a:	d90e      	bls.n	800053a <__udivmoddi4+0x27a>
 800051c:	eb1e 0101 	adds.w	r1, lr, r1
 8000520:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8000524:	bf2c      	ite	cs
 8000526:	f04f 0901 	movcs.w	r9, #1
 800052a:	f04f 0900 	movcc.w	r9, #0
 800052e:	428c      	cmp	r4, r1
 8000530:	d902      	bls.n	8000538 <__udivmoddi4+0x278>
 8000532:	f1b9 0f00 	cmp.w	r9, #0
 8000536:	d02c      	beq.n	8000592 <__udivmoddi4+0x2d2>
 8000538:	4640      	mov	r0, r8
 800053a:	1b09      	subs	r1, r1, r4
 800053c:	b292      	uxth	r2, r2
 800053e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000542:	fb07 1114 	mls	r1, r7, r4, r1
 8000546:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054a:	fb04 f106 	mul.w	r1, r4, r6
 800054e:	4291      	cmp	r1, r2
 8000550:	d907      	bls.n	8000562 <__udivmoddi4+0x2a2>
 8000552:	eb1e 0202 	adds.w	r2, lr, r2
 8000556:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 800055a:	d201      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 800055c:	4291      	cmp	r1, r2
 800055e:	d815      	bhi.n	800058c <__udivmoddi4+0x2cc>
 8000560:	4644      	mov	r4, r8
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000568:	e721      	b.n	80003ae <__udivmoddi4+0xee>
 800056a:	1a86      	subs	r6, r0, r2
 800056c:	eb64 0303 	sbc.w	r3, r4, r3
 8000570:	2001      	movs	r0, #1
 8000572:	e70e      	b.n	8000392 <__udivmoddi4+0xd2>
 8000574:	3c02      	subs	r4, #2
 8000576:	4472      	add	r2, lr
 8000578:	e735      	b.n	80003e6 <__udivmoddi4+0x126>
 800057a:	3902      	subs	r1, #2
 800057c:	4472      	add	r2, lr
 800057e:	e6d0      	b.n	8000322 <__udivmoddi4+0x62>
 8000580:	44f4      	add	ip, lr
 8000582:	3802      	subs	r0, #2
 8000584:	e6e3      	b.n	800034e <__udivmoddi4+0x8e>
 8000586:	44f4      	add	ip, lr
 8000588:	3802      	subs	r0, #2
 800058a:	e742      	b.n	8000412 <__udivmoddi4+0x152>
 800058c:	3c02      	subs	r4, #2
 800058e:	4472      	add	r2, lr
 8000590:	e7e7      	b.n	8000562 <__udivmoddi4+0x2a2>
 8000592:	3802      	subs	r0, #2
 8000594:	4471      	add	r1, lr
 8000596:	e7d0      	b.n	800053a <__udivmoddi4+0x27a>
 8000598:	3b02      	subs	r3, #2
 800059a:	443c      	add	r4, r7
 800059c:	e782      	b.n	80004a4 <__udivmoddi4+0x1e4>
 800059e:	3802      	subs	r0, #2
 80005a0:	443c      	add	r4, r7
 80005a2:	e76a      	b.n	800047a <__udivmoddi4+0x1ba>

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08c      	sub	sp, #48	@ 0x30
 80005ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ae:	f107 031c 	add.w	r3, r7, #28
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	60da      	str	r2, [r3, #12]
 80005bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005be:	4b60      	ldr	r3, [pc, #384]	@ (8000740 <MX_GPIO_Init+0x198>)
 80005c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005c4:	4a5e      	ldr	r2, [pc, #376]	@ (8000740 <MX_GPIO_Init+0x198>)
 80005c6:	f043 0301 	orr.w	r3, r3, #1
 80005ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80005ce:	4b5c      	ldr	r3, [pc, #368]	@ (8000740 <MX_GPIO_Init+0x198>)
 80005d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005d4:	f003 0301 	and.w	r3, r3, #1
 80005d8:	61bb      	str	r3, [r7, #24]
 80005da:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005dc:	4b58      	ldr	r3, [pc, #352]	@ (8000740 <MX_GPIO_Init+0x198>)
 80005de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005e2:	4a57      	ldr	r2, [pc, #348]	@ (8000740 <MX_GPIO_Init+0x198>)
 80005e4:	f043 0320 	orr.w	r3, r3, #32
 80005e8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80005ec:	4b54      	ldr	r3, [pc, #336]	@ (8000740 <MX_GPIO_Init+0x198>)
 80005ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005f2:	f003 0320 	and.w	r3, r3, #32
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005fa:	4b51      	ldr	r3, [pc, #324]	@ (8000740 <MX_GPIO_Init+0x198>)
 80005fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000600:	4a4f      	ldr	r2, [pc, #316]	@ (8000740 <MX_GPIO_Init+0x198>)
 8000602:	f043 0308 	orr.w	r3, r3, #8
 8000606:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800060a:	4b4d      	ldr	r3, [pc, #308]	@ (8000740 <MX_GPIO_Init+0x198>)
 800060c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000610:	f003 0308 	and.w	r3, r3, #8
 8000614:	613b      	str	r3, [r7, #16]
 8000616:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000618:	4b49      	ldr	r3, [pc, #292]	@ (8000740 <MX_GPIO_Init+0x198>)
 800061a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800061e:	4a48      	ldr	r2, [pc, #288]	@ (8000740 <MX_GPIO_Init+0x198>)
 8000620:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000624:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000628:	4b45      	ldr	r3, [pc, #276]	@ (8000740 <MX_GPIO_Init+0x198>)
 800062a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800062e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000636:	4b42      	ldr	r3, [pc, #264]	@ (8000740 <MX_GPIO_Init+0x198>)
 8000638:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800063c:	4a40      	ldr	r2, [pc, #256]	@ (8000740 <MX_GPIO_Init+0x198>)
 800063e:	f043 0304 	orr.w	r3, r3, #4
 8000642:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000646:	4b3e      	ldr	r3, [pc, #248]	@ (8000740 <MX_GPIO_Init+0x198>)
 8000648:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800064c:	f003 0304 	and.w	r3, r3, #4
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000654:	4b3a      	ldr	r3, [pc, #232]	@ (8000740 <MX_GPIO_Init+0x198>)
 8000656:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800065a:	4a39      	ldr	r2, [pc, #228]	@ (8000740 <MX_GPIO_Init+0x198>)
 800065c:	f043 0302 	orr.w	r3, r3, #2
 8000660:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000664:	4b36      	ldr	r3, [pc, #216]	@ (8000740 <MX_GPIO_Init+0x198>)
 8000666:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800066a:	f003 0302 	and.w	r3, r3, #2
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000678:	4832      	ldr	r0, [pc, #200]	@ (8000744 <MX_GPIO_Init+0x19c>)
 800067a:	f000 ff47 	bl	800150c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000684:	4830      	ldr	r0, [pc, #192]	@ (8000748 <MX_GPIO_Init+0x1a0>)
 8000686:	f000 ff41 	bl	800150c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2104      	movs	r1, #4
 800068e:	482f      	ldr	r0, [pc, #188]	@ (800074c <MX_GPIO_Init+0x1a4>)
 8000690:	f000 ff3c 	bl	800150c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	2180      	movs	r1, #128	@ 0x80
 8000698:	482d      	ldr	r0, [pc, #180]	@ (8000750 <MX_GPIO_Init+0x1a8>)
 800069a:	f000 ff37 	bl	800150c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	2180      	movs	r1, #128	@ 0x80
 80006a2:	482c      	ldr	r0, [pc, #176]	@ (8000754 <MX_GPIO_Init+0x1ac>)
 80006a4:	f000 ff32 	bl	800150c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 80006a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ae:	2301      	movs	r3, #1
 80006b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b6:	2300      	movs	r3, #0
 80006b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	4619      	mov	r1, r3
 80006c0:	4820      	ldr	r0, [pc, #128]	@ (8000744 <MX_GPIO_Init+0x19c>)
 80006c2:	f000 fd4b 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 80006c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	2300      	movs	r3, #0
 80006d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	4619      	mov	r1, r3
 80006de:	481a      	ldr	r0, [pc, #104]	@ (8000748 <MX_GPIO_Init+0x1a0>)
 80006e0:	f000 fd3c 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80006e4:	2304      	movs	r3, #4
 80006e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e8:	2301      	movs	r3, #1
 80006ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	2300      	movs	r3, #0
 80006f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80006f4:	f107 031c 	add.w	r3, r7, #28
 80006f8:	4619      	mov	r1, r3
 80006fa:	4814      	ldr	r0, [pc, #80]	@ (800074c <MX_GPIO_Init+0x1a4>)
 80006fc:	f000 fd2e 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000700:	2380      	movs	r3, #128	@ 0x80
 8000702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000704:	2301      	movs	r3, #1
 8000706:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070c:	2300      	movs	r3, #0
 800070e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000710:	f107 031c 	add.w	r3, r7, #28
 8000714:	4619      	mov	r1, r3
 8000716:	480e      	ldr	r0, [pc, #56]	@ (8000750 <MX_GPIO_Init+0x1a8>)
 8000718:	f000 fd20 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 800071c:	2380      	movs	r3, #128	@ 0x80
 800071e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000720:	2301      	movs	r3, #1
 8000722:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000728:	2300      	movs	r3, #0
 800072a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4619      	mov	r1, r3
 8000732:	4808      	ldr	r0, [pc, #32]	@ (8000754 <MX_GPIO_Init+0x1ac>)
 8000734:	f000 fd12 	bl	800115c <HAL_GPIO_Init>

}
 8000738:	bf00      	nop
 800073a:	3730      	adds	r7, #48	@ 0x30
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	46020c00 	.word	0x46020c00
 8000744:	42021400 	.word	0x42021400
 8000748:	42020c00 	.word	0x42020c00
 800074c:	42021800 	.word	0x42021800
 8000750:	42020800 	.word	0x42020800
 8000754:	42020400 	.word	0x42020400

08000758 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800075c:	2000      	movs	r0, #0
 800075e:	f000 feed 	bl	800153c <HAL_ICACHE_ConfigAssociativityMode>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000768:	f000 f89b 	bl	80008a2 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800076c:	f000 ff06 	bl	800157c <HAL_ICACHE_Enable>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000776:	f000 f894 	bl	80008a2 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  uint8_t RX_Data[5] = {0};
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	2300      	movs	r3, #0
 800078c:	733b      	strb	r3, [r7, #12]
  uint8_t RX_Data_BREAK[] = "\r\n";
 800078e:	4a16      	ldr	r2, [pc, #88]	@ (80007e8 <main+0x68>)
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	6812      	ldr	r2, [r2, #0]
 8000794:	4611      	mov	r1, r2
 8000796:	8019      	strh	r1, [r3, #0]
 8000798:	3302      	adds	r3, #2
 800079a:	0c12      	lsrs	r2, r2, #16
 800079c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800079e:	f000 fb51 	bl	8000e44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a2:	f000 f825 	bl	80007f0 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80007a6:	f000 f86c 	bl	8000882 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007aa:	f7ff fefd 	bl	80005a8 <MX_GPIO_Init>
  MX_ICACHE_Init();
 80007ae:	f7ff ffd3 	bl	8000758 <MX_ICACHE_Init>
  MX_SPI1_Init();
 80007b2:	f000 f90d 	bl	80009d0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80007b6:	f000 fa65 	bl	8000c84 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //LCD_Init(&hspi1);
  RFM69_Init(RF69_868MHZ, 0xAA, 0xAA);
 80007ba:	22aa      	movs	r2, #170	@ 0xaa
 80007bc:	21aa      	movs	r1, #170	@ 0xaa
 80007be:	2056      	movs	r0, #86	@ 0x56
 80007c0:	f000 f876 	bl	80008b0 <RFM69_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 80007c4:	2201      	movs	r2, #1
 80007c6:	2180      	movs	r1, #128	@ 0x80
 80007c8:	4808      	ldr	r0, [pc, #32]	@ (80007ec <main+0x6c>)
 80007ca:	f000 fe9f 	bl	800150c <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 80007ce:	20c8      	movs	r0, #200	@ 0xc8
 80007d0:	f000 fbbc 	bl	8000f4c <HAL_Delay>
	  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2180      	movs	r1, #128	@ 0x80
 80007d8:	4804      	ldr	r0, [pc, #16]	@ (80007ec <main+0x6c>)
 80007da:	f000 fe97 	bl	800150c <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 80007de:	20c8      	movs	r0, #200	@ 0xc8
 80007e0:	f000 fbb4 	bl	8000f4c <HAL_Delay>
	  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 80007e4:	bf00      	nop
 80007e6:	e7ed      	b.n	80007c4 <main+0x44>
 80007e8:	080073d8 	.word	0x080073d8
 80007ec:	42020400 	.word	0x42020400

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b09e      	sub	sp, #120	@ 0x78
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 0318 	add.w	r3, r7, #24
 80007fa:	2260      	movs	r2, #96	@ 0x60
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f006 fdb2 	bl	8007368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	463b      	mov	r3, r7
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]
 8000812:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE3) != HAL_OK)
 8000814:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8000818:	f000 fec0 	bl	800159c <HAL_PWREx_ControlVoltageScaling>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000822:	f000 f83e 	bl	80008a2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000826:	2310      	movs	r3, #16
 8000828:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800082a:	2301      	movs	r3, #1
 800082c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800082e:	2310      	movs	r3, #16
 8000830:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8000832:	2300      	movs	r3, #0
 8000834:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000836:	2300      	movs	r3, #0
 8000838:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083a:	f107 0318 	add.w	r3, r7, #24
 800083e:	4618      	mov	r0, r3
 8000840:	f000 ffa8 	bl	8001794 <HAL_RCC_OscConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800084a:	f000 f82a 	bl	80008a2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084e:	231f      	movs	r3, #31
 8000850:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 800085e:	2360      	movs	r3, #96	@ 0x60
 8000860:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000866:	463b      	mov	r3, r7
 8000868:	2101      	movs	r1, #1
 800086a:	4618      	mov	r0, r3
 800086c:	f001 fe6e 	bl	800254c <HAL_RCC_ClockConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000876:	f000 f814 	bl	80008a2 <Error_Handler>
  }
}
 800087a:	bf00      	nop
 800087c:	3778      	adds	r7, #120	@ 0x78
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000886:	f000 ff65 	bl	8001754 <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 800088a:	f000 ff73 	bl	8001774 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800088e:	2002      	movs	r0, #2
 8000890:	f000 ff10 	bl	80016b4 <HAL_PWREx_ConfigSupply>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemPower_Config+0x1c>
  {
    Error_Handler();
 800089a:	f000 f802 	bl	80008a2 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a6:	b672      	cpsid	i
}
 80008a8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008aa:	bf00      	nop
 80008ac:	e7fd      	b.n	80008aa <Error_Handler+0x8>
	...

080008b0 <RFM69_Init>:
 *  nodeID: Sets the nodeID
 *
 *  networkID: Sets the networkID
 *
 */
void RFM69_Init(uint8_t freqBand, uint8_t nodeID, uint8_t networkID){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
 80008ba:	460b      	mov	r3, r1
 80008bc:	71bb      	strb	r3, [r7, #6]
 80008be:	4613      	mov	r3, r2
 80008c0:	717b      	strb	r3, [r7, #5]
	HAL_Delay(100);
 80008c2:	2064      	movs	r0, #100	@ 0x64
 80008c4:	f000 fb42 	bl	8000f4c <HAL_Delay>
	int test = chipPresent(&hspi1);
 80008c8:	4804      	ldr	r0, [pc, #16]	@ (80008dc <RFM69_Init+0x2c>)
 80008ca:	f000 f809 	bl	80008e0 <chipPresent>
 80008ce:	4603      	mov	r3, r0
 80008d0:	60fb      	str	r3, [r7, #12]
}
 80008d2:	bf00      	nop
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000028 	.word	0x20000028

080008e0 <chipPresent>:
 *  spi_handler: Pointer to the chosen SPI Interface
 *
 *  returns: 	1 if no Chip is found
 *  			0 if a RFM69 Chip is found
 */
uint8_t chipPresent(SPI_HandleTypeDef * spi_handler){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	uint8_t return_status = 1;
 80008e8:	2301      	movs	r3, #1
 80008ea:	73fb      	strb	r3, [r7, #15]

	writeREG(spi_handler, REG_SYNCVALUE1, 0xAA);
 80008ec:	22aa      	movs	r2, #170	@ 0xaa
 80008ee:	212f      	movs	r1, #47	@ 0x2f
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f000 f837 	bl	8000964 <writeREG>
	HAL_Delay(100);
 80008f6:	2064      	movs	r0, #100	@ 0x64
 80008f8:	f000 fb28 	bl	8000f4c <HAL_Delay>

	if (readREG(spi_handler, REG_SYNCVALUE1) == 0xAA){
 80008fc:	212f      	movs	r1, #47	@ 0x2f
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	f000 f84e 	bl	80009a0 <readREG>
 8000904:	4603      	mov	r3, r0
 8000906:	2baa      	cmp	r3, #170	@ 0xaa
 8000908:	d11e      	bne.n	8000948 <chipPresent+0x68>
		writeREG(spi_handler, REG_SYNCVALUE1, 0x55);
 800090a:	2255      	movs	r2, #85	@ 0x55
 800090c:	212f      	movs	r1, #47	@ 0x2f
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f000 f828 	bl	8000964 <writeREG>
		HAL_Delay(100);
 8000914:	2064      	movs	r0, #100	@ 0x64
 8000916:	f000 fb19 	bl	8000f4c <HAL_Delay>

		if (readREG(spi_handler, REG_SYNCVALUE1) == 0x55){
 800091a:	212f      	movs	r1, #47	@ 0x2f
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f000 f83f 	bl	80009a0 <readREG>
 8000922:	4603      	mov	r3, r0
 8000924:	2b55      	cmp	r3, #85	@ 0x55
 8000926:	d108      	bne.n	800093a <chipPresent+0x5a>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000928:	2201      	movs	r2, #1
 800092a:	2180      	movs	r1, #128	@ 0x80
 800092c:	480b      	ldr	r0, [pc, #44]	@ (800095c <chipPresent+0x7c>)
 800092e:	f000 fded 	bl	800150c <HAL_GPIO_WritePin>
			return_status = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	73fb      	strb	r3, [r7, #15]

			return return_status;
 8000936:	7bfb      	ldrb	r3, [r7, #15]
 8000938:	e00c      	b.n	8000954 <chipPresent+0x74>
		}
		else{
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800093a:	2201      	movs	r2, #1
 800093c:	2104      	movs	r1, #4
 800093e:	4808      	ldr	r0, [pc, #32]	@ (8000960 <chipPresent+0x80>)
 8000940:	f000 fde4 	bl	800150c <HAL_GPIO_WritePin>

			return return_status;
 8000944:	7bfb      	ldrb	r3, [r7, #15]
 8000946:	e005      	b.n	8000954 <chipPresent+0x74>
		}
	}
	else{
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000948:	2201      	movs	r2, #1
 800094a:	2104      	movs	r1, #4
 800094c:	4804      	ldr	r0, [pc, #16]	@ (8000960 <chipPresent+0x80>)
 800094e:	f000 fddd 	bl	800150c <HAL_GPIO_WritePin>

		return return_status;
 8000952:	7bfb      	ldrb	r3, [r7, #15]
	}
}
 8000954:	4618      	mov	r0, r3
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	42020800 	.word	0x42020800
 8000960:	42021800 	.word	0x42021800

08000964 <writeREG>:
 *
 *  addr: [HEX] The Address to write to (See RFM69registers.h for predefined values)
 *
 *  value: [HEX] The Value
 */
void writeREG(SPI_HandleTypeDef * spi_handler, uint8_t addr, uint8_t value){
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	460b      	mov	r3, r1
 800096e:	70fb      	strb	r3, [r7, #3]
 8000970:	4613      	mov	r3, r2
 8000972:	70bb      	strb	r3, [r7, #2]
	HAL_Delay(100);
 8000974:	2064      	movs	r0, #100	@ 0x64
 8000976:	f000 fae9 	bl	8000f4c <HAL_Delay>
	// & 0x80 to set the 7th Bit to 1 (write)
	HAL_SPI_Transmit(&hspi1, &addr, 1, 100);
 800097a:	1cf9      	adds	r1, r7, #3
 800097c:	2364      	movs	r3, #100	@ 0x64
 800097e:	2201      	movs	r2, #1
 8000980:	4806      	ldr	r0, [pc, #24]	@ (800099c <writeREG+0x38>)
 8000982:	f005 fa51 	bl	8005e28 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(spi_handler, &value, 1, 100);
 8000986:	1cb9      	adds	r1, r7, #2
 8000988:	2364      	movs	r3, #100	@ 0x64
 800098a:	2201      	movs	r2, #1
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f005 fa4b 	bl	8005e28 <HAL_SPI_Transmit>
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000028 	.word	0x20000028

080009a0 <readREG>:
 *
 *  addr: [HEX] The Address to write to (See RFM69registers.h for predefined values)
 *
 *  returns: The value of the register addr.
 */
HAL_StatusTypeDef readREG(SPI_HandleTypeDef * spi_handler, uint8_t addr){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af02      	add	r7, sp, #8
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	460b      	mov	r3, r1
 80009aa:	70fb      	strb	r3, [r7, #3]
	HAL_Delay(100);
 80009ac:	2064      	movs	r0, #100	@ 0x64
 80009ae:	f000 facd 	bl	8000f4c <HAL_Delay>
	HAL_StatusTypeDef value;
	// & 0x7F to set the 7th Bit to 0 (read)
	HAL_SPI_TransmitReceive(spi_handler, &addr, &value, 1, 100);
 80009b2:	f107 020f 	add.w	r2, r7, #15
 80009b6:	1cf9      	adds	r1, r7, #3
 80009b8:	2364      	movs	r3, #100	@ 0x64
 80009ba:	9300      	str	r3, [sp, #0]
 80009bc:	2301      	movs	r3, #1
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f005 fc50 	bl	8006264 <HAL_SPI_TransmitReceive>

	return value;
 80009c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
	...

080009d0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80009e0:	4b30      	ldr	r3, [pc, #192]	@ (8000aa4 <MX_SPI1_Init+0xd4>)
 80009e2:	4a31      	ldr	r2, [pc, #196]	@ (8000aa8 <MX_SPI1_Init+0xd8>)
 80009e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009e6:	4b2f      	ldr	r3, [pc, #188]	@ (8000aa4 <MX_SPI1_Init+0xd4>)
 80009e8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80009ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009ee:	4b2d      	ldr	r3, [pc, #180]	@ (8000aa4 <MX_SPI1_Init+0xd4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009f4:	4b2b      	ldr	r3, [pc, #172]	@ (8000aa4 <MX_SPI1_Init+0xd4>)
 80009f6:	2207      	movs	r2, #7
 80009f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009fa:	4b2a      	ldr	r3, [pc, #168]	@ (8000aa4 <MX_SPI1_Init+0xd4>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a00:	4b28      	ldr	r3, [pc, #160]	@ (8000aa4 <MX_SPI1_Init+0xd4>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a06:	4b27      	ldr	r3, [pc, #156]	@ (8000aa4 <MX_SPI1_Init+0xd4>)
 8000a08:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000a0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a0e:	4b25      	ldr	r3, [pc, #148]	@ (8000aa4 <MX_SPI1_Init+0xd4>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a14:	4b23      	ldr	r3, [pc, #140]	@ (8000aa4 <MX_SPI1_Init+0xd4>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a1a:	4b22      	ldr	r3, [pc, #136]	@ (8000aa4 <MX_SPI1_Init+0xd4>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a20:	4b20      	ldr	r3, [pc, #128]	@ (8000aa4 <MX_SPI1_Init+0xd4>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000a26:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa4 <MX_SPI1_Init+0xd4>)
 8000a28:	2207      	movs	r2, #7
 8000a2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa4 <MX_SPI1_Init+0xd4>)
 8000a2e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a32:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a34:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa4 <MX_SPI1_Init+0xd4>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa4 <MX_SPI1_Init+0xd4>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a40:	4b18      	ldr	r3, [pc, #96]	@ (8000aa4 <MX_SPI1_Init+0xd4>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a46:	4b17      	ldr	r3, [pc, #92]	@ (8000aa4 <MX_SPI1_Init+0xd4>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a4c:	4b15      	ldr	r3, [pc, #84]	@ (8000aa4 <MX_SPI1_Init+0xd4>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a52:	4b14      	ldr	r3, [pc, #80]	@ (8000aa4 <MX_SPI1_Init+0xd4>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a58:	4b12      	ldr	r3, [pc, #72]	@ (8000aa4 <MX_SPI1_Init+0xd4>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000a5e:	4b11      	ldr	r3, [pc, #68]	@ (8000aa4 <MX_SPI1_Init+0xd4>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa4 <MX_SPI1_Init+0xd4>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a6a:	480e      	ldr	r0, [pc, #56]	@ (8000aa4 <MX_SPI1_Init+0xd4>)
 8000a6c:	f005 f8c6 	bl	8005bfc <HAL_SPI_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 8000a76:	f7ff ff14 	bl	80008a2 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000a7e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000a82:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4805      	ldr	r0, [pc, #20]	@ (8000aa4 <MX_SPI1_Init+0xd4>)
 8000a8e:	f005 ff10 	bl	80068b2 <HAL_SPIEx_SetConfigAutonomousMode>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 8000a98:	f7ff ff03 	bl	80008a2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	3710      	adds	r7, #16
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000028 	.word	0x20000028
 8000aa8:	40013000 	.word	0x40013000

08000aac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b0c0      	sub	sp, #256	@ 0x100
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	22d8      	movs	r2, #216	@ 0xd8
 8000aca:	2100      	movs	r1, #0
 8000acc:	4618      	mov	r0, r3
 8000ace:	f006 fc4b 	bl	8007368 <memset>
  if(spiHandle->Instance==SPI1)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a27      	ldr	r2, [pc, #156]	@ (8000b74 <HAL_SPI_MspInit+0xc8>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d145      	bne.n	8000b68 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000adc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000ae0:	f04f 0300 	mov.w	r3, #0
 8000ae4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PCLK2;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aee:	f107 0310 	add.w	r3, r7, #16
 8000af2:	4618      	mov	r0, r3
 8000af4:	f002 f900 	bl	8002cf8 <HAL_RCCEx_PeriphCLKConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8000afe:	f7ff fed0 	bl	80008a2 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b02:	4b1d      	ldr	r3, [pc, #116]	@ (8000b78 <HAL_SPI_MspInit+0xcc>)
 8000b04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000b08:	4a1b      	ldr	r2, [pc, #108]	@ (8000b78 <HAL_SPI_MspInit+0xcc>)
 8000b0a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b0e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000b12:	4b19      	ldr	r3, [pc, #100]	@ (8000b78 <HAL_SPI_MspInit+0xcc>)
 8000b14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000b18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b20:	4b15      	ldr	r3, [pc, #84]	@ (8000b78 <HAL_SPI_MspInit+0xcc>)
 8000b22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b26:	4a14      	ldr	r2, [pc, #80]	@ (8000b78 <HAL_SPI_MspInit+0xcc>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b30:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <HAL_SPI_MspInit+0xcc>)
 8000b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b3e:	23e0      	movs	r3, #224	@ 0xe0
 8000b40:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b56:	2305      	movs	r3, #5
 8000b58:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000b60:	4619      	mov	r1, r3
 8000b62:	4806      	ldr	r0, [pc, #24]	@ (8000b7c <HAL_SPI_MspInit+0xd0>)
 8000b64:	f000 fafa 	bl	800115c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b68:	bf00      	nop
 8000b6a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40013000 	.word	0x40013000
 8000b78:	46020c00 	.word	0x46020c00
 8000b7c:	42020000 	.word	0x42020000

08000b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b86:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb0 <HAL_MspInit+0x30>)
 8000b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b8c:	4a08      	ldr	r2, [pc, #32]	@ (8000bb0 <HAL_MspInit+0x30>)
 8000b8e:	f043 0304 	orr.w	r3, r3, #4
 8000b92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000b96:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <HAL_MspInit+0x30>)
 8000b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b9c:	f003 0304 	and.w	r3, r3, #4
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	46020c00 	.word	0x46020c00

08000bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <NMI_Handler+0x4>

08000bbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc0:	bf00      	nop
 8000bc2:	e7fd      	b.n	8000bc0 <HardFault_Handler+0x4>

08000bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <MemManage_Handler+0x4>

08000bcc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <BusFault_Handler+0x4>

08000bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <UsageFault_Handler+0x4>

08000bdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c0a:	f000 f97f 	bl	8000f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c18:	4b18      	ldr	r3, [pc, #96]	@ (8000c7c <SystemInit+0x68>)
 8000c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c1e:	4a17      	ldr	r2, [pc, #92]	@ (8000c7c <SystemInit+0x68>)
 8000c20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000c28:	4b15      	ldr	r3, [pc, #84]	@ (8000c80 <SystemInit+0x6c>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000c2e:	4b14      	ldr	r3, [pc, #80]	@ (8000c80 <SystemInit+0x6c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000c34:	4b12      	ldr	r3, [pc, #72]	@ (8000c80 <SystemInit+0x6c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000c3a:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <SystemInit+0x6c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000c40:	4b0f      	ldr	r3, [pc, #60]	@ (8000c80 <SystemInit+0x6c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0e      	ldr	r2, [pc, #56]	@ (8000c80 <SystemInit+0x6c>)
 8000c46:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000c4a:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000c4e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000c50:	4b0b      	ldr	r3, [pc, #44]	@ (8000c80 <SystemInit+0x6c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000c56:	4b0a      	ldr	r3, [pc, #40]	@ (8000c80 <SystemInit+0x6c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a09      	ldr	r2, [pc, #36]	@ (8000c80 <SystemInit+0x6c>)
 8000c5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c60:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000c62:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <SystemInit+0x6c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c68:	4b04      	ldr	r3, [pc, #16]	@ (8000c7c <SystemInit+0x68>)
 8000c6a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c6e:	609a      	str	r2, [r3, #8]
  #endif
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00
 8000c80:	46020c00 	.word	0x46020c00

08000c84 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c88:	4b22      	ldr	r3, [pc, #136]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000c8a:	4a23      	ldr	r2, [pc, #140]	@ (8000d18 <MX_USART1_UART_Init+0x94>)
 8000c8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c8e:	4b21      	ldr	r3, [pc, #132]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000c90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c96:	4b1f      	ldr	r3, [pc, #124]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ca2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000caa:	220c      	movs	r2, #12
 8000cac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cae:	4b19      	ldr	r3, [pc, #100]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb4:	4b17      	ldr	r3, [pc, #92]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cba:	4b16      	ldr	r3, [pc, #88]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cc0:	4b14      	ldr	r3, [pc, #80]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc6:	4b13      	ldr	r3, [pc, #76]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ccc:	4811      	ldr	r0, [pc, #68]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000cce:	f005 fe31 	bl	8006934 <HAL_UART_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000cd8:	f7ff fde3 	bl	80008a2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cdc:	2100      	movs	r1, #0
 8000cde:	480d      	ldr	r0, [pc, #52]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000ce0:	f006 fa78 	bl	80071d4 <HAL_UARTEx_SetTxFifoThreshold>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000cea:	f7ff fdda 	bl	80008a2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4808      	ldr	r0, [pc, #32]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000cf2:	f006 faad 	bl	8007250 <HAL_UARTEx_SetRxFifoThreshold>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000cfc:	f7ff fdd1 	bl	80008a2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d00:	4804      	ldr	r0, [pc, #16]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000d02:	f006 fa2e 	bl	8007162 <HAL_UARTEx_DisableFifoMode>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d0c:	f7ff fdc9 	bl	80008a2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	200000b8 	.word	0x200000b8
 8000d18:	40013800 	.word	0x40013800

08000d1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b0c0      	sub	sp, #256	@ 0x100
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d34:	f107 0310 	add.w	r3, r7, #16
 8000d38:	22d8      	movs	r2, #216	@ 0xd8
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f006 fb13 	bl	8007368 <memset>
  if(uartHandle->Instance==USART1)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a27      	ldr	r2, [pc, #156]	@ (8000de4 <HAL_UART_MspInit+0xc8>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d145      	bne.n	8000dd8 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d4c:	f04f 0201 	mov.w	r2, #1
 8000d50:	f04f 0300 	mov.w	r3, #0
 8000d54:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d5c:	f107 0310 	add.w	r3, r7, #16
 8000d60:	4618      	mov	r0, r3
 8000d62:	f001 ffc9 	bl	8002cf8 <HAL_RCCEx_PeriphCLKConfig>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000d6c:	f7ff fd99 	bl	80008a2 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d70:	4b1d      	ldr	r3, [pc, #116]	@ (8000de8 <HAL_UART_MspInit+0xcc>)
 8000d72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000d76:	4a1c      	ldr	r2, [pc, #112]	@ (8000de8 <HAL_UART_MspInit+0xcc>)
 8000d78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d7c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000d80:	4b19      	ldr	r3, [pc, #100]	@ (8000de8 <HAL_UART_MspInit+0xcc>)
 8000d82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000d86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	4b16      	ldr	r3, [pc, #88]	@ (8000de8 <HAL_UART_MspInit+0xcc>)
 8000d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d94:	4a14      	ldr	r2, [pc, #80]	@ (8000de8 <HAL_UART_MspInit+0xcc>)
 8000d96:	f043 0301 	orr.w	r3, r3, #1
 8000d9a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d9e:	4b12      	ldr	r3, [pc, #72]	@ (8000de8 <HAL_UART_MspInit+0xcc>)
 8000da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000dac:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000db0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dc6:	2307      	movs	r3, #7
 8000dc8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dcc:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4806      	ldr	r0, [pc, #24]	@ (8000dec <HAL_UART_MspInit+0xd0>)
 8000dd4:	f000 f9c2 	bl	800115c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000dd8:	bf00      	nop
 8000dda:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40013800 	.word	0x40013800
 8000de8:	46020c00 	.word	0x46020c00
 8000dec:	42020000 	.word	0x42020000

08000df0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000df0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e28 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000df4:	f7ff ff0e 	bl	8000c14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000df8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000dfa:	e003      	b.n	8000e04 <LoopCopyDataInit>

08000dfc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000e2c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000dfe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e00:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e02:	3104      	adds	r1, #4

08000e04 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e04:	480a      	ldr	r0, [pc, #40]	@ (8000e30 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e06:	4b0b      	ldr	r3, [pc, #44]	@ (8000e34 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e08:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e0a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e0c:	d3f6      	bcc.n	8000dfc <CopyDataInit>
	ldr	r2, =_sbss
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e38 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e10:	e002      	b.n	8000e18 <LoopFillZerobss>

08000e12 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e12:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e14:	f842 3b04 	str.w	r3, [r2], #4

08000e18 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e18:	4b08      	ldr	r3, [pc, #32]	@ (8000e3c <LoopForever+0x16>)
	cmp	r2, r3
 8000e1a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e1c:	d3f9      	bcc.n	8000e12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e1e:	f006 faab 	bl	8007378 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e22:	f7ff fcad 	bl	8000780 <main>

08000e26 <LoopForever>:

LoopForever:
    b LoopForever
 8000e26:	e7fe      	b.n	8000e26 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000e28:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8000e2c:	080074ec 	.word	0x080074ec
	ldr	r0, =_sdata
 8000e30:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e34:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8000e38:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000e3c:	20000150 	.word	0x20000150

08000e40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e40:	e7fe      	b.n	8000e40 <ADC1_2_IRQHandler>
	...

08000e44 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e48:	4b11      	ldr	r3, [pc, #68]	@ (8000e90 <HAL_Init+0x4c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a10      	ldr	r2, [pc, #64]	@ (8000e90 <HAL_Init+0x4c>)
 8000e4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e54:	2003      	movs	r0, #3
 8000e56:	f000 f94f 	bl	80010f8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000e5a:	f001 fd69 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <HAL_Init+0x50>)
 8000e62:	6a1b      	ldr	r3, [r3, #32]
 8000e64:	f003 030f 	and.w	r3, r3, #15
 8000e68:	490b      	ldr	r1, [pc, #44]	@ (8000e98 <HAL_Init+0x54>)
 8000e6a:	5ccb      	ldrb	r3, [r1, r3]
 8000e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e70:	4a0a      	ldr	r2, [pc, #40]	@ (8000e9c <HAL_Init+0x58>)
 8000e72:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e74:	200f      	movs	r0, #15
 8000e76:	f000 f813 	bl	8000ea0 <HAL_InitTick>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	e002      	b.n	8000e8a <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e84:	f7ff fe7c 	bl	8000b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40022000 	.word	0x40022000
 8000e94:	46020c00 	.word	0x46020c00
 8000e98:	080073dc 	.word	0x080073dc
 8000e9c:	20000000 	.word	0x20000000

08000ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000ea8:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <HAL_InitTick+0x60>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d101      	bne.n	8000eb4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e021      	b.n	8000ef8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000eb4:	4b13      	ldr	r3, [pc, #76]	@ (8000f04 <HAL_InitTick+0x64>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b11      	ldr	r3, [pc, #68]	@ (8000f00 <HAL_InitTick+0x60>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 f939 	bl	8001142 <HAL_SYSTICK_Config>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e00e      	b.n	8000ef8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2b0f      	cmp	r3, #15
 8000ede:	d80a      	bhi.n	8000ef6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ee8:	f000 f911 	bl	800110e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eec:	4a06      	ldr	r2, [pc, #24]	@ (8000f08 <HAL_InitTick+0x68>)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e000      	b.n	8000ef8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000008 	.word	0x20000008
 8000f04:	20000000 	.word	0x20000000
 8000f08:	20000004 	.word	0x20000004

08000f0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f10:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <HAL_IncTick+0x20>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	461a      	mov	r2, r3
 8000f16:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <HAL_IncTick+0x24>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	4a04      	ldr	r2, [pc, #16]	@ (8000f30 <HAL_IncTick+0x24>)
 8000f1e:	6013      	str	r3, [r2, #0]
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	20000008 	.word	0x20000008
 8000f30:	2000014c 	.word	0x2000014c

08000f34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return uwTick;
 8000f38:	4b03      	ldr	r3, [pc, #12]	@ (8000f48 <HAL_GetTick+0x14>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	2000014c 	.word	0x2000014c

08000f4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f54:	f7ff ffee 	bl	8000f34 <HAL_GetTick>
 8000f58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f64:	d005      	beq.n	8000f72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f66:	4b0a      	ldr	r3, [pc, #40]	@ (8000f90 <HAL_Delay+0x44>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4413      	add	r3, r2
 8000f70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f72:	bf00      	nop
 8000f74:	f7ff ffde 	bl	8000f34 <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d8f7      	bhi.n	8000f74 <HAL_Delay+0x28>
  {
  }
}
 8000f84:	bf00      	nop
 8000f86:	bf00      	nop
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000008 	.word	0x20000008

08000f94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fc6:	4a04      	ldr	r2, [pc, #16]	@ (8000fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	60d3      	str	r3, [r2, #12]
}
 8000fcc:	bf00      	nop
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe0:	4b04      	ldr	r3, [pc, #16]	@ (8000ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	0a1b      	lsrs	r3, r3, #8
 8000fe6:	f003 0307 	and.w	r3, r3, #7
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	6039      	str	r1, [r7, #0]
 8001002:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001004:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001008:	2b00      	cmp	r3, #0
 800100a:	db0a      	blt.n	8001022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	b2da      	uxtb	r2, r3
 8001010:	490c      	ldr	r1, [pc, #48]	@ (8001044 <__NVIC_SetPriority+0x4c>)
 8001012:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001016:	0112      	lsls	r2, r2, #4
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	440b      	add	r3, r1
 800101c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001020:	e00a      	b.n	8001038 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4908      	ldr	r1, [pc, #32]	@ (8001048 <__NVIC_SetPriority+0x50>)
 8001028:	88fb      	ldrh	r3, [r7, #6]
 800102a:	f003 030f 	and.w	r3, r3, #15
 800102e:	3b04      	subs	r3, #4
 8001030:	0112      	lsls	r2, r2, #4
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	440b      	add	r3, r1
 8001036:	761a      	strb	r2, [r3, #24]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000e100 	.word	0xe000e100
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800104c:	b480      	push	{r7}
 800104e:	b089      	sub	sp, #36	@ 0x24
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f1c3 0307 	rsb	r3, r3, #7
 8001066:	2b04      	cmp	r3, #4
 8001068:	bf28      	it	cs
 800106a:	2304      	movcs	r3, #4
 800106c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3304      	adds	r3, #4
 8001072:	2b06      	cmp	r3, #6
 8001074:	d902      	bls.n	800107c <NVIC_EncodePriority+0x30>
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3b03      	subs	r3, #3
 800107a:	e000      	b.n	800107e <NVIC_EncodePriority+0x32>
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43da      	mvns	r2, r3
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	401a      	ands	r2, r3
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001094:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	fa01 f303 	lsl.w	r3, r1, r3
 800109e:	43d9      	mvns	r1, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	4313      	orrs	r3, r2
         );
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3724      	adds	r7, #36	@ 0x24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
	...

080010b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010c4:	d301      	bcc.n	80010ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010c6:	2301      	movs	r3, #1
 80010c8:	e00f      	b.n	80010ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ca:	4a0a      	ldr	r2, [pc, #40]	@ (80010f4 <SysTick_Config+0x40>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010d2:	210f      	movs	r1, #15
 80010d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010d8:	f7ff ff8e 	bl	8000ff8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010dc:	4b05      	ldr	r3, [pc, #20]	@ (80010f4 <SysTick_Config+0x40>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010e2:	4b04      	ldr	r3, [pc, #16]	@ (80010f4 <SysTick_Config+0x40>)
 80010e4:	2207      	movs	r2, #7
 80010e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	e000e010 	.word	0xe000e010

080010f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff ff47 	bl	8000f94 <__NVIC_SetPriorityGrouping>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b086      	sub	sp, #24
 8001112:	af00      	add	r7, sp, #0
 8001114:	4603      	mov	r3, r0
 8001116:	60b9      	str	r1, [r7, #8]
 8001118:	607a      	str	r2, [r7, #4]
 800111a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800111c:	f7ff ff5e 	bl	8000fdc <__NVIC_GetPriorityGrouping>
 8001120:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	68b9      	ldr	r1, [r7, #8]
 8001126:	6978      	ldr	r0, [r7, #20]
 8001128:	f7ff ff90 	bl	800104c <NVIC_EncodePriority>
 800112c:	4602      	mov	r2, r0
 800112e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001132:	4611      	mov	r1, r2
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff5f 	bl	8000ff8 <__NVIC_SetPriority>
}
 800113a:	bf00      	nop
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff ffb2 	bl	80010b4 <SysTick_Config>
 8001150:	4603      	mov	r3, r0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	@ 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800116e:	e1ba      	b.n	80014e6 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	2101      	movs	r1, #1
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	fa01 f303 	lsl.w	r3, r1, r3
 800117c:	4013      	ands	r3, r2
 800117e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 81aa 	beq.w	80014e0 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a55      	ldr	r2, [pc, #340]	@ (80012e4 <HAL_GPIO_Init+0x188>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d15d      	bne.n	8001250 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800119a:	2201      	movs	r2, #1
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	69fa      	ldr	r2, [r7, #28]
 80011a6:	4013      	ands	r3, r2
 80011a8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f003 0201 	and.w	r2, r3, #1
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	69fa      	ldr	r2, [r7, #28]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69fa      	ldr	r2, [r7, #28]
 80011c2:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80011c4:	4a48      	ldr	r2, [pc, #288]	@ (80012e8 <HAL_GPIO_Init+0x18c>)
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80011cc:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80011ce:	4a46      	ldr	r2, [pc, #280]	@ (80012e8 <HAL_GPIO_Init+0x18c>)
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	4413      	add	r3, r2
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	08da      	lsrs	r2, r3, #3
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	3208      	adds	r2, #8
 80011e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	220f      	movs	r2, #15
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69fa      	ldr	r2, [r7, #28]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	f003 0307 	and.w	r3, r3, #7
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	220b      	movs	r2, #11
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	69fa      	ldr	r2, [r7, #28]
 800120e:	4313      	orrs	r3, r2
 8001210:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	08da      	lsrs	r2, r3, #3
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	3208      	adds	r2, #8
 800121a:	69f9      	ldr	r1, [r7, #28]
 800121c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	2203      	movs	r2, #3
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	69fa      	ldr	r2, [r7, #28]
 8001234:	4013      	ands	r3, r2
 8001236:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	2202      	movs	r2, #2
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	69fa      	ldr	r2, [r7, #28]
 8001244:	4313      	orrs	r3, r2
 8001246:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	69fa      	ldr	r2, [r7, #28]
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	e067      	b.n	8001320 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b02      	cmp	r3, #2
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_Init+0x104>
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	2b12      	cmp	r3, #18
 800125e:	d145      	bne.n	80012ec <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	08da      	lsrs	r2, r3, #3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3208      	adds	r2, #8
 8001268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800126c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	f003 0307 	and.w	r3, r3, #7
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	220f      	movs	r2, #15
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	69fa      	ldr	r2, [r7, #28]
 8001280:	4013      	ands	r3, r2
 8001282:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	691b      	ldr	r3, [r3, #16]
 8001288:	f003 020f 	and.w	r2, r3, #15
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	69fa      	ldr	r2, [r7, #28]
 800129a:	4313      	orrs	r3, r2
 800129c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	08da      	lsrs	r2, r3, #3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3208      	adds	r2, #8
 80012a6:	69f9      	ldr	r1, [r7, #28]
 80012a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	2203      	movs	r2, #3
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	69fa      	ldr	r2, [r7, #28]
 80012c0:	4013      	ands	r3, r2
 80012c2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 0203 	and.w	r2, r3, #3
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	69fa      	ldr	r2, [r7, #28]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	69fa      	ldr	r2, [r7, #28]
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	e01e      	b.n	8001320 <HAL_GPIO_Init+0x1c4>
 80012e2:	bf00      	nop
 80012e4:	46020000 	.word	0x46020000
 80012e8:	08007434 	.word	0x08007434
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	2203      	movs	r2, #3
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69fa      	ldr	r2, [r7, #28]
 8001300:	4013      	ands	r3, r2
 8001302:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 0203 	and.w	r2, r3, #3
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	69fa      	ldr	r2, [r7, #28]
 8001316:	4313      	orrs	r3, r2
 8001318:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	69fa      	ldr	r2, [r7, #28]
 800131e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d00b      	beq.n	8001340 <HAL_GPIO_Init+0x1e4>
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	2b02      	cmp	r3, #2
 800132e:	d007      	beq.n	8001340 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001334:	2b11      	cmp	r3, #17
 8001336:	d003      	beq.n	8001340 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b12      	cmp	r3, #18
 800133e:	d130      	bne.n	80013a2 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	2203      	movs	r2, #3
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	69fa      	ldr	r2, [r7, #28]
 8001354:	4013      	ands	r3, r2
 8001356:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	68da      	ldr	r2, [r3, #12]
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	69fa      	ldr	r2, [r7, #28]
 8001366:	4313      	orrs	r3, r2
 8001368:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	69fa      	ldr	r2, [r7, #28]
 800136e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001376:	2201      	movs	r2, #1
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43db      	mvns	r3, r3
 8001380:	69fa      	ldr	r2, [r7, #28]
 8001382:	4013      	ands	r3, r2
 8001384:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	091b      	lsrs	r3, r3, #4
 800138c:	f003 0201 	and.w	r2, r3, #1
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	69fa      	ldr	r2, [r7, #28]
 8001398:	4313      	orrs	r3, r2
 800139a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	69fa      	ldr	r2, [r7, #28]
 80013a0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2b03      	cmp	r3, #3
 80013a8:	d017      	beq.n	80013da <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	2203      	movs	r2, #3
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69fa      	ldr	r2, [r7, #28]
 80013be:	4013      	ands	r3, r2
 80013c0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	689a      	ldr	r2, [r3, #8]
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	69fa      	ldr	r2, [r7, #28]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	69fa      	ldr	r2, [r7, #28]
 80013d8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d07c      	beq.n	80014e0 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80013e6:	4a47      	ldr	r2, [pc, #284]	@ (8001504 <HAL_GPIO_Init+0x3a8>)
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	089b      	lsrs	r3, r3, #2
 80013ec:	3318      	adds	r3, #24
 80013ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	f003 0303 	and.w	r3, r3, #3
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	220f      	movs	r2, #15
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	69fa      	ldr	r2, [r7, #28]
 8001406:	4013      	ands	r3, r2
 8001408:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	0a9a      	lsrs	r2, r3, #10
 800140e:	4b3e      	ldr	r3, [pc, #248]	@ (8001508 <HAL_GPIO_Init+0x3ac>)
 8001410:	4013      	ands	r3, r2
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	f002 0203 	and.w	r2, r2, #3
 8001418:	00d2      	lsls	r2, r2, #3
 800141a:	4093      	lsls	r3, r2
 800141c:	69fa      	ldr	r2, [r7, #28]
 800141e:	4313      	orrs	r3, r2
 8001420:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001422:	4938      	ldr	r1, [pc, #224]	@ (8001504 <HAL_GPIO_Init+0x3a8>)
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	089b      	lsrs	r3, r3, #2
 8001428:	3318      	adds	r3, #24
 800142a:	69fa      	ldr	r2, [r7, #28]
 800142c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001430:	4b34      	ldr	r3, [pc, #208]	@ (8001504 <HAL_GPIO_Init+0x3a8>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	43db      	mvns	r3, r3
 800143a:	69fa      	ldr	r2, [r7, #28]
 800143c:	4013      	ands	r3, r2
 800143e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 800144c:	69fa      	ldr	r2, [r7, #28]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	4313      	orrs	r3, r2
 8001452:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001454:	4a2b      	ldr	r2, [pc, #172]	@ (8001504 <HAL_GPIO_Init+0x3a8>)
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800145a:	4b2a      	ldr	r3, [pc, #168]	@ (8001504 <HAL_GPIO_Init+0x3a8>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	43db      	mvns	r3, r3
 8001464:	69fa      	ldr	r2, [r7, #28]
 8001466:	4013      	ands	r3, r2
 8001468:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8001476:	69fa      	ldr	r2, [r7, #28]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4313      	orrs	r3, r2
 800147c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800147e:	4a21      	ldr	r2, [pc, #132]	@ (8001504 <HAL_GPIO_Init+0x3a8>)
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001484:	4b1f      	ldr	r3, [pc, #124]	@ (8001504 <HAL_GPIO_Init+0x3a8>)
 8001486:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800148a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	43db      	mvns	r3, r3
 8001490:	69fa      	ldr	r2, [r7, #28]
 8001492:	4013      	ands	r3, r2
 8001494:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80014a2:	69fa      	ldr	r2, [r7, #28]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80014aa:	4a16      	ldr	r2, [pc, #88]	@ (8001504 <HAL_GPIO_Init+0x3a8>)
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80014b2:	4b14      	ldr	r3, [pc, #80]	@ (8001504 <HAL_GPIO_Init+0x3a8>)
 80014b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014b8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	43db      	mvns	r3, r3
 80014be:	69fa      	ldr	r2, [r7, #28]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80014d0:	69fa      	ldr	r2, [r7, #28]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80014d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001504 <HAL_GPIO_Init+0x3a8>)
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	3301      	adds	r3, #1
 80014e4:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	fa22 f303 	lsr.w	r3, r2, r3
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f47f ae3d 	bne.w	8001170 <HAL_GPIO_Init+0x14>
  }
}
 80014f6:	bf00      	nop
 80014f8:	bf00      	nop
 80014fa:	3724      	adds	r7, #36	@ 0x24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	46022000 	.word	0x46022000
 8001508:	002f7f7f 	.word	0x002f7f7f

0800150c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	807b      	strh	r3, [r7, #2]
 8001518:	4613      	mov	r3, r2
 800151a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800151c:	787b      	ldrb	r3, [r7, #1]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001522:	887a      	ldrh	r2, [r7, #2]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8001528:	e002      	b.n	8001530 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800152a:	887a      	ldrh	r2, [r7, #2]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001544:	2300      	movs	r3, #0
 8001546:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001548:	4b0b      	ldr	r3, [pc, #44]	@ (8001578 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b00      	cmp	r3, #0
 8001552:	d002      	beq.n	800155a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	73fb      	strb	r3, [r7, #15]
 8001558:	e007      	b.n	800156a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800155a:	4b07      	ldr	r3, [pc, #28]	@ (8001578 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f023 0204 	bic.w	r2, r3, #4
 8001562:	4905      	ldr	r1, [pc, #20]	@ (8001578 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4313      	orrs	r3, r2
 8001568:	600b      	str	r3, [r1, #0]
  }

  return status;
 800156a:	7bfb      	ldrb	r3, [r7, #15]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	40030400 	.word	0x40030400

0800157c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001580:	4b05      	ldr	r3, [pc, #20]	@ (8001598 <HAL_ICACHE_Enable+0x1c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a04      	ldr	r2, [pc, #16]	@ (8001598 <HAL_ICACHE_Enable+0x1c>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	40030400 	.word	0x40030400

0800159c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80015a4:	4b39      	ldr	r3, [pc, #228]	@ (800168c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80015a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015ac:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d10b      	bne.n	80015ce <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015bc:	d905      	bls.n	80015ca <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80015be:	4b33      	ldr	r3, [pc, #204]	@ (800168c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	4a32      	ldr	r2, [pc, #200]	@ (800168c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80015c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015c8:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80015ca:	2300      	movs	r3, #0
 80015cc:	e057      	b.n	800167e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015d4:	d90a      	bls.n	80015ec <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80015d6:	4b2d      	ldr	r3, [pc, #180]	@ (800168c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	4a2a      	ldr	r2, [pc, #168]	@ (800168c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80015e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015e8:	60d3      	str	r3, [r2, #12]
 80015ea:	e007      	b.n	80015fc <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80015ec:	4b27      	ldr	r3, [pc, #156]	@ (800168c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80015f4:	4925      	ldr	r1, [pc, #148]	@ (800168c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80015fc:	4b24      	ldr	r3, [pc, #144]	@ (8001690 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a24      	ldr	r2, [pc, #144]	@ (8001694 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001602:	fba2 2303 	umull	r2, r3, r2, r3
 8001606:	099b      	lsrs	r3, r3, #6
 8001608:	2232      	movs	r2, #50	@ 0x32
 800160a:	fb02 f303 	mul.w	r3, r2, r3
 800160e:	4a21      	ldr	r2, [pc, #132]	@ (8001694 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001610:	fba2 2303 	umull	r2, r3, r2, r3
 8001614:	099b      	lsrs	r3, r3, #6
 8001616:	3301      	adds	r3, #1
 8001618:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800161a:	e002      	b.n	8001622 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	3b01      	subs	r3, #1
 8001620:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001622:	4b1a      	ldr	r3, [pc, #104]	@ (800168c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d102      	bne.n	8001634 <HAL_PWREx_ControlVoltageScaling+0x98>
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1f3      	bne.n	800161c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d01b      	beq.n	8001672 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800163a:	4b15      	ldr	r3, [pc, #84]	@ (8001690 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a15      	ldr	r2, [pc, #84]	@ (8001694 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001640:	fba2 2303 	umull	r2, r3, r2, r3
 8001644:	099b      	lsrs	r3, r3, #6
 8001646:	2232      	movs	r2, #50	@ 0x32
 8001648:	fb02 f303 	mul.w	r3, r2, r3
 800164c:	4a11      	ldr	r2, [pc, #68]	@ (8001694 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800164e:	fba2 2303 	umull	r2, r3, r2, r3
 8001652:	099b      	lsrs	r3, r3, #6
 8001654:	3301      	adds	r3, #1
 8001656:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001658:	e002      	b.n	8001660 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	3b01      	subs	r3, #1
 800165e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001660:	4b0a      	ldr	r3, [pc, #40]	@ (800168c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001664:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d102      	bne.n	8001672 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f3      	bne.n	800165a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d101      	bne.n	800167c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e000      	b.n	800167e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	46020800 	.word	0x46020800
 8001690:	20000000 	.word	0x20000000
 8001694:	10624dd3 	.word	0x10624dd3

08001698 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800169c:	4b04      	ldr	r3, [pc, #16]	@ (80016b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800169e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	46020800 	.word	0x46020800

080016b4 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80016bc:	4b22      	ldr	r3, [pc, #136]	@ (8001748 <HAL_PWREx_ConfigSupply+0x94>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a22      	ldr	r2, [pc, #136]	@ (800174c <HAL_PWREx_ConfigSupply+0x98>)
 80016c2:	fba2 2303 	umull	r2, r3, r2, r3
 80016c6:	099b      	lsrs	r3, r3, #6
 80016c8:	2232      	movs	r2, #50	@ 0x32
 80016ca:	fb02 f303 	mul.w	r3, r2, r3
 80016ce:	4a1f      	ldr	r2, [pc, #124]	@ (800174c <HAL_PWREx_ConfigSupply+0x98>)
 80016d0:	fba2 2303 	umull	r2, r3, r2, r3
 80016d4:	099b      	lsrs	r3, r3, #6
 80016d6:	3301      	adds	r3, #1
 80016d8:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d113      	bne.n	8001708 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80016e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001750 <HAL_PWREx_ConfigSupply+0x9c>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	4a1a      	ldr	r2, [pc, #104]	@ (8001750 <HAL_PWREx_ConfigSupply+0x9c>)
 80016e6:	f023 0302 	bic.w	r3, r3, #2
 80016ea:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80016ec:	e002      	b.n	80016f4 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	3b01      	subs	r3, #1
 80016f2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80016f4:	4b16      	ldr	r3, [pc, #88]	@ (8001750 <HAL_PWREx_ConfigSupply+0x9c>)
 80016f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d116      	bne.n	800172e <HAL_PWREx_ConfigSupply+0x7a>
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f3      	bne.n	80016ee <HAL_PWREx_ConfigSupply+0x3a>
 8001706:	e012      	b.n	800172e <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8001708:	4b11      	ldr	r3, [pc, #68]	@ (8001750 <HAL_PWREx_ConfigSupply+0x9c>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	4a10      	ldr	r2, [pc, #64]	@ (8001750 <HAL_PWREx_ConfigSupply+0x9c>)
 800170e:	f043 0302 	orr.w	r3, r3, #2
 8001712:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001714:	e002      	b.n	800171c <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	3b01      	subs	r3, #1
 800171a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800171c:	4b0c      	ldr	r3, [pc, #48]	@ (8001750 <HAL_PWREx_ConfigSupply+0x9c>)
 800171e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d102      	bne.n	800172e <HAL_PWREx_ConfigSupply+0x7a>
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f3      	bne.n	8001716 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d101      	bne.n	8001738 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e000      	b.n	800173a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	20000000 	.word	0x20000000
 800174c:	10624dd3 	.word	0x10624dd3
 8001750:	46020800 	.word	0x46020800

08001754 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8001758:	4b05      	ldr	r3, [pc, #20]	@ (8001770 <HAL_PWREx_EnableVddIO2+0x1c>)
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	4a04      	ldr	r2, [pc, #16]	@ (8001770 <HAL_PWREx_EnableVddIO2+0x1c>)
 800175e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001762:	6113      	str	r3, [r2, #16]
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	46020800 	.word	0x46020800

08001774 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8001778:	4b05      	ldr	r3, [pc, #20]	@ (8001790 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800177a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800177c:	4a04      	ldr	r2, [pc, #16]	@ (8001790 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	46020800 	.word	0x46020800

08001794 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08e      	sub	sp, #56	@ 0x38
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800179c:	2300      	movs	r3, #0
 800179e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d102      	bne.n	80017ae <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	f000 bec8 	b.w	800253e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017ae:	4b99      	ldr	r3, [pc, #612]	@ (8001a14 <HAL_RCC_OscConfig+0x280>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	f003 030c 	and.w	r3, r3, #12
 80017b6:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017b8:	4b96      	ldr	r3, [pc, #600]	@ (8001a14 <HAL_RCC_OscConfig+0x280>)
 80017ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017bc:	f003 0303 	and.w	r3, r3, #3
 80017c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0310 	and.w	r3, r3, #16
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f000 816c 	beq.w	8001aa8 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80017d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d007      	beq.n	80017e6 <HAL_RCC_OscConfig+0x52>
 80017d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017d8:	2b0c      	cmp	r3, #12
 80017da:	f040 80de 	bne.w	800199a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	f040 80da 	bne.w	800199a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d102      	bne.n	80017f4 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	f000 bea5 	b.w	800253e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017f8:	4b86      	ldr	r3, [pc, #536]	@ (8001a14 <HAL_RCC_OscConfig+0x280>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d004      	beq.n	800180e <HAL_RCC_OscConfig+0x7a>
 8001804:	4b83      	ldr	r3, [pc, #524]	@ (8001a14 <HAL_RCC_OscConfig+0x280>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800180c:	e005      	b.n	800181a <HAL_RCC_OscConfig+0x86>
 800180e:	4b81      	ldr	r3, [pc, #516]	@ (8001a14 <HAL_RCC_OscConfig+0x280>)
 8001810:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001814:	041b      	lsls	r3, r3, #16
 8001816:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800181a:	4293      	cmp	r3, r2
 800181c:	d255      	bcs.n	80018ca <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800181e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001820:	2b00      	cmp	r3, #0
 8001822:	d10a      	bne.n	800183a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001828:	4618      	mov	r0, r3
 800182a:	f001 f9df 	bl	8002bec <RCC_SetFlashLatencyFromMSIRange>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d002      	beq.n	800183a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	f000 be82 	b.w	800253e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800183a:	4b76      	ldr	r3, [pc, #472]	@ (8001a14 <HAL_RCC_OscConfig+0x280>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	4a75      	ldr	r2, [pc, #468]	@ (8001a14 <HAL_RCC_OscConfig+0x280>)
 8001840:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001844:	6093      	str	r3, [r2, #8]
 8001846:	4b73      	ldr	r3, [pc, #460]	@ (8001a14 <HAL_RCC_OscConfig+0x280>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001852:	4970      	ldr	r1, [pc, #448]	@ (8001a14 <HAL_RCC_OscConfig+0x280>)
 8001854:	4313      	orrs	r3, r2
 8001856:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800185c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001860:	d309      	bcc.n	8001876 <HAL_RCC_OscConfig+0xe2>
 8001862:	4b6c      	ldr	r3, [pc, #432]	@ (8001a14 <HAL_RCC_OscConfig+0x280>)
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	f023 021f 	bic.w	r2, r3, #31
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	4969      	ldr	r1, [pc, #420]	@ (8001a14 <HAL_RCC_OscConfig+0x280>)
 8001870:	4313      	orrs	r3, r2
 8001872:	60cb      	str	r3, [r1, #12]
 8001874:	e07e      	b.n	8001974 <HAL_RCC_OscConfig+0x1e0>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187a:	2b00      	cmp	r3, #0
 800187c:	da0a      	bge.n	8001894 <HAL_RCC_OscConfig+0x100>
 800187e:	4b65      	ldr	r3, [pc, #404]	@ (8001a14 <HAL_RCC_OscConfig+0x280>)
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	015b      	lsls	r3, r3, #5
 800188c:	4961      	ldr	r1, [pc, #388]	@ (8001a14 <HAL_RCC_OscConfig+0x280>)
 800188e:	4313      	orrs	r3, r2
 8001890:	60cb      	str	r3, [r1, #12]
 8001892:	e06f      	b.n	8001974 <HAL_RCC_OscConfig+0x1e0>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001898:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800189c:	d30a      	bcc.n	80018b4 <HAL_RCC_OscConfig+0x120>
 800189e:	4b5d      	ldr	r3, [pc, #372]	@ (8001a14 <HAL_RCC_OscConfig+0x280>)
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a1b      	ldr	r3, [r3, #32]
 80018aa:	029b      	lsls	r3, r3, #10
 80018ac:	4959      	ldr	r1, [pc, #356]	@ (8001a14 <HAL_RCC_OscConfig+0x280>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	60cb      	str	r3, [r1, #12]
 80018b2:	e05f      	b.n	8001974 <HAL_RCC_OscConfig+0x1e0>
 80018b4:	4b57      	ldr	r3, [pc, #348]	@ (8001a14 <HAL_RCC_OscConfig+0x280>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	03db      	lsls	r3, r3, #15
 80018c2:	4954      	ldr	r1, [pc, #336]	@ (8001a14 <HAL_RCC_OscConfig+0x280>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	60cb      	str	r3, [r1, #12]
 80018c8:	e054      	b.n	8001974 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80018ca:	4b52      	ldr	r3, [pc, #328]	@ (8001a14 <HAL_RCC_OscConfig+0x280>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	4a51      	ldr	r2, [pc, #324]	@ (8001a14 <HAL_RCC_OscConfig+0x280>)
 80018d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80018d4:	6093      	str	r3, [r2, #8]
 80018d6:	4b4f      	ldr	r3, [pc, #316]	@ (8001a14 <HAL_RCC_OscConfig+0x280>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e2:	494c      	ldr	r1, [pc, #304]	@ (8001a14 <HAL_RCC_OscConfig+0x280>)
 80018e4:	4313      	orrs	r3, r2
 80018e6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ec:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80018f0:	d309      	bcc.n	8001906 <HAL_RCC_OscConfig+0x172>
 80018f2:	4b48      	ldr	r3, [pc, #288]	@ (8001a14 <HAL_RCC_OscConfig+0x280>)
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	f023 021f 	bic.w	r2, r3, #31
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	4945      	ldr	r1, [pc, #276]	@ (8001a14 <HAL_RCC_OscConfig+0x280>)
 8001900:	4313      	orrs	r3, r2
 8001902:	60cb      	str	r3, [r1, #12]
 8001904:	e028      	b.n	8001958 <HAL_RCC_OscConfig+0x1c4>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190a:	2b00      	cmp	r3, #0
 800190c:	da0a      	bge.n	8001924 <HAL_RCC_OscConfig+0x190>
 800190e:	4b41      	ldr	r3, [pc, #260]	@ (8001a14 <HAL_RCC_OscConfig+0x280>)
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	015b      	lsls	r3, r3, #5
 800191c:	493d      	ldr	r1, [pc, #244]	@ (8001a14 <HAL_RCC_OscConfig+0x280>)
 800191e:	4313      	orrs	r3, r2
 8001920:	60cb      	str	r3, [r1, #12]
 8001922:	e019      	b.n	8001958 <HAL_RCC_OscConfig+0x1c4>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001928:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800192c:	d30a      	bcc.n	8001944 <HAL_RCC_OscConfig+0x1b0>
 800192e:	4b39      	ldr	r3, [pc, #228]	@ (8001a14 <HAL_RCC_OscConfig+0x280>)
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a1b      	ldr	r3, [r3, #32]
 800193a:	029b      	lsls	r3, r3, #10
 800193c:	4935      	ldr	r1, [pc, #212]	@ (8001a14 <HAL_RCC_OscConfig+0x280>)
 800193e:	4313      	orrs	r3, r2
 8001940:	60cb      	str	r3, [r1, #12]
 8001942:	e009      	b.n	8001958 <HAL_RCC_OscConfig+0x1c4>
 8001944:	4b33      	ldr	r3, [pc, #204]	@ (8001a14 <HAL_RCC_OscConfig+0x280>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	03db      	lsls	r3, r3, #15
 8001952:	4930      	ldr	r1, [pc, #192]	@ (8001a14 <HAL_RCC_OscConfig+0x280>)
 8001954:	4313      	orrs	r3, r2
 8001956:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10a      	bne.n	8001974 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001962:	4618      	mov	r0, r3
 8001964:	f001 f942 	bl	8002bec <RCC_SetFlashLatencyFromMSIRange>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d002      	beq.n	8001974 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	f000 bde5 	b.w	800253e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8001974:	f001 f8e4 	bl	8002b40 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001978:	4b27      	ldr	r3, [pc, #156]	@ (8001a18 <HAL_RCC_OscConfig+0x284>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fa8f 	bl	8000ea0 <HAL_InitTick>
 8001982:	4603      	mov	r3, r0
 8001984:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8001988:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 808a 	beq.w	8001aa6 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8001992:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001996:	f000 bdd2 	b.w	800253e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d066      	beq.n	8001a70 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80019a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a14 <HAL_RCC_OscConfig+0x280>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a1b      	ldr	r2, [pc, #108]	@ (8001a14 <HAL_RCC_OscConfig+0x280>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80019ae:	f7ff fac1 	bl	8000f34 <HAL_GetTick>
 80019b2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80019b4:	e009      	b.n	80019ca <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019b6:	f7ff fabd 	bl	8000f34 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d902      	bls.n	80019ca <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	f000 bdba 	b.w	800253e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80019ca:	4b12      	ldr	r3, [pc, #72]	@ (8001a14 <HAL_RCC_OscConfig+0x280>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0304 	and.w	r3, r3, #4
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0ef      	beq.n	80019b6 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80019d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a14 <HAL_RCC_OscConfig+0x280>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	4a0e      	ldr	r2, [pc, #56]	@ (8001a14 <HAL_RCC_OscConfig+0x280>)
 80019dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80019e0:	6093      	str	r3, [r2, #8]
 80019e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001a14 <HAL_RCC_OscConfig+0x280>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ee:	4909      	ldr	r1, [pc, #36]	@ (8001a14 <HAL_RCC_OscConfig+0x280>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80019fc:	d30e      	bcc.n	8001a1c <HAL_RCC_OscConfig+0x288>
 80019fe:	4b05      	ldr	r3, [pc, #20]	@ (8001a14 <HAL_RCC_OscConfig+0x280>)
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	f023 021f 	bic.w	r2, r3, #31
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	4902      	ldr	r1, [pc, #8]	@ (8001a14 <HAL_RCC_OscConfig+0x280>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	60cb      	str	r3, [r1, #12]
 8001a10:	e04a      	b.n	8001aa8 <HAL_RCC_OscConfig+0x314>
 8001a12:	bf00      	nop
 8001a14:	46020c00 	.word	0x46020c00
 8001a18:	20000004 	.word	0x20000004
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	da0a      	bge.n	8001a3a <HAL_RCC_OscConfig+0x2a6>
 8001a24:	4b98      	ldr	r3, [pc, #608]	@ (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
 8001a30:	015b      	lsls	r3, r3, #5
 8001a32:	4995      	ldr	r1, [pc, #596]	@ (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	60cb      	str	r3, [r1, #12]
 8001a38:	e036      	b.n	8001aa8 <HAL_RCC_OscConfig+0x314>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a42:	d30a      	bcc.n	8001a5a <HAL_RCC_OscConfig+0x2c6>
 8001a44:	4b90      	ldr	r3, [pc, #576]	@ (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	029b      	lsls	r3, r3, #10
 8001a52:	498d      	ldr	r1, [pc, #564]	@ (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	60cb      	str	r3, [r1, #12]
 8001a58:	e026      	b.n	8001aa8 <HAL_RCC_OscConfig+0x314>
 8001a5a:	4b8b      	ldr	r3, [pc, #556]	@ (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	03db      	lsls	r3, r3, #15
 8001a68:	4987      	ldr	r1, [pc, #540]	@ (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	60cb      	str	r3, [r1, #12]
 8001a6e:	e01b      	b.n	8001aa8 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8001a70:	4b85      	ldr	r3, [pc, #532]	@ (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a84      	ldr	r2, [pc, #528]	@ (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001a76:	f023 0301 	bic.w	r3, r3, #1
 8001a7a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001a7c:	f7ff fa5a 	bl	8000f34 <HAL_GetTick>
 8001a80:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001a82:	e009      	b.n	8001a98 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a84:	f7ff fa56 	bl	8000f34 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d902      	bls.n	8001a98 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	f000 bd53 	b.w	800253e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001a98:	4b7b      	ldr	r3, [pc, #492]	@ (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1ef      	bne.n	8001a84 <HAL_RCC_OscConfig+0x2f0>
 8001aa4:	e000      	b.n	8001aa8 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001aa6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 808b 	beq.w	8001bcc <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	d005      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x334>
 8001abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001abe:	2b0c      	cmp	r3, #12
 8001ac0:	d109      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ac4:	2b03      	cmp	r3, #3
 8001ac6:	d106      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d17d      	bne.n	8001bcc <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	f000 bd34 	b.w	800253e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ade:	d106      	bne.n	8001aee <HAL_RCC_OscConfig+0x35a>
 8001ae0:	4b69      	ldr	r3, [pc, #420]	@ (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a68      	ldr	r2, [pc, #416]	@ (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001ae6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	e041      	b.n	8001b72 <HAL_RCC_OscConfig+0x3de>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001af6:	d112      	bne.n	8001b1e <HAL_RCC_OscConfig+0x38a>
 8001af8:	4b63      	ldr	r3, [pc, #396]	@ (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a62      	ldr	r2, [pc, #392]	@ (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001afe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	4b60      	ldr	r3, [pc, #384]	@ (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a5f      	ldr	r2, [pc, #380]	@ (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001b0a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	4b5d      	ldr	r3, [pc, #372]	@ (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a5c      	ldr	r2, [pc, #368]	@ (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001b16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b1a:	6013      	str	r3, [r2, #0]
 8001b1c:	e029      	b.n	8001b72 <HAL_RCC_OscConfig+0x3de>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001b26:	d112      	bne.n	8001b4e <HAL_RCC_OscConfig+0x3ba>
 8001b28:	4b57      	ldr	r3, [pc, #348]	@ (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a56      	ldr	r2, [pc, #344]	@ (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001b2e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b32:	6013      	str	r3, [r2, #0]
 8001b34:	4b54      	ldr	r3, [pc, #336]	@ (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a53      	ldr	r2, [pc, #332]	@ (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001b3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	4b51      	ldr	r3, [pc, #324]	@ (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a50      	ldr	r2, [pc, #320]	@ (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001b46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b4a:	6013      	str	r3, [r2, #0]
 8001b4c:	e011      	b.n	8001b72 <HAL_RCC_OscConfig+0x3de>
 8001b4e:	4b4e      	ldr	r3, [pc, #312]	@ (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a4d      	ldr	r2, [pc, #308]	@ (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001b54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	4b4b      	ldr	r3, [pc, #300]	@ (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a4a      	ldr	r2, [pc, #296]	@ (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001b60:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	4b48      	ldr	r3, [pc, #288]	@ (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a47      	ldr	r2, [pc, #284]	@ (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001b6c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001b70:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d014      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8001b7a:	f7ff f9db 	bl	8000f34 <HAL_GetTick>
 8001b7e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b80:	e009      	b.n	8001b96 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b82:	f7ff f9d7 	bl	8000f34 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b64      	cmp	r3, #100	@ 0x64
 8001b8e:	d902      	bls.n	8001b96 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	f000 bcd4 	b.w	800253e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b96:	4b3c      	ldr	r3, [pc, #240]	@ (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d0ef      	beq.n	8001b82 <HAL_RCC_OscConfig+0x3ee>
 8001ba2:	e013      	b.n	8001bcc <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8001ba4:	f7ff f9c6 	bl	8000f34 <HAL_GetTick>
 8001ba8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001baa:	e009      	b.n	8001bc0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bac:	f7ff f9c2 	bl	8000f34 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b64      	cmp	r3, #100	@ 0x64
 8001bb8:	d902      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	f000 bcbf 	b.w	800253e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bc0:	4b31      	ldr	r3, [pc, #196]	@ (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1ef      	bne.n	8001bac <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d05f      	beq.n	8001c98 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	d005      	beq.n	8001bea <HAL_RCC_OscConfig+0x456>
 8001bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001be0:	2b0c      	cmp	r3, #12
 8001be2:	d114      	bne.n	8001c0e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d111      	bne.n	8001c0e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d102      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	f000 bca3 	b.w	800253e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001bf8:	4b23      	ldr	r3, [pc, #140]	@ (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	041b      	lsls	r3, r3, #16
 8001c06:	4920      	ldr	r1, [pc, #128]	@ (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001c0c:	e044      	b.n	8001c98 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d024      	beq.n	8001c60 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8001c16:	4b1c      	ldr	r3, [pc, #112]	@ (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a1b      	ldr	r2, [pc, #108]	@ (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001c1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c20:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001c22:	f7ff f987 	bl	8000f34 <HAL_GetTick>
 8001c26:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c28:	e009      	b.n	8001c3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c2a:	f7ff f983 	bl	8000f34 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d902      	bls.n	8001c3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	f000 bc80 	b.w	800253e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c3e:	4b12      	ldr	r3, [pc, #72]	@ (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0ef      	beq.n	8001c2a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	041b      	lsls	r3, r3, #16
 8001c58:	490b      	ldr	r1, [pc, #44]	@ (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	610b      	str	r3, [r1, #16]
 8001c5e:	e01b      	b.n	8001c98 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8001c60:	4b09      	ldr	r3, [pc, #36]	@ (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a08      	ldr	r2, [pc, #32]	@ (8001c88 <HAL_RCC_OscConfig+0x4f4>)
 8001c66:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c6a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001c6c:	f7ff f962 	bl	8000f34 <HAL_GetTick>
 8001c70:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c72:	e00b      	b.n	8001c8c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c74:	f7ff f95e 	bl	8000f34 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d904      	bls.n	8001c8c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	f000 bc5b 	b.w	800253e <HAL_RCC_OscConfig+0xdaa>
 8001c88:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c8c:	4baf      	ldr	r3, [pc, #700]	@ (8001f4c <HAL_RCC_OscConfig+0x7b8>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1ed      	bne.n	8001c74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0308 	and.w	r3, r3, #8
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f000 80c8 	beq.w	8001e36 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cac:	4ba7      	ldr	r3, [pc, #668]	@ (8001f4c <HAL_RCC_OscConfig+0x7b8>)
 8001cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cb2:	f003 0304 	and.w	r3, r3, #4
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d111      	bne.n	8001cde <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cba:	4ba4      	ldr	r3, [pc, #656]	@ (8001f4c <HAL_RCC_OscConfig+0x7b8>)
 8001cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cc0:	4aa2      	ldr	r2, [pc, #648]	@ (8001f4c <HAL_RCC_OscConfig+0x7b8>)
 8001cc2:	f043 0304 	orr.w	r3, r3, #4
 8001cc6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001cca:	4ba0      	ldr	r3, [pc, #640]	@ (8001f4c <HAL_RCC_OscConfig+0x7b8>)
 8001ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001cde:	4b9c      	ldr	r3, [pc, #624]	@ (8001f50 <HAL_RCC_OscConfig+0x7bc>)
 8001ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d119      	bne.n	8001d1e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001cea:	4b99      	ldr	r3, [pc, #612]	@ (8001f50 <HAL_RCC_OscConfig+0x7bc>)
 8001cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cee:	4a98      	ldr	r2, [pc, #608]	@ (8001f50 <HAL_RCC_OscConfig+0x7bc>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cf6:	f7ff f91d 	bl	8000f34 <HAL_GetTick>
 8001cfa:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001cfc:	e009      	b.n	8001d12 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cfe:	f7ff f919 	bl	8000f34 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d902      	bls.n	8001d12 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	f000 bc16 	b.w	800253e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001d12:	4b8f      	ldr	r3, [pc, #572]	@ (8001f50 <HAL_RCC_OscConfig+0x7bc>)
 8001d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0ef      	beq.n	8001cfe <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d05f      	beq.n	8001de6 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8001d26:	4b89      	ldr	r3, [pc, #548]	@ (8001f4c <HAL_RCC_OscConfig+0x7b8>)
 8001d28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d2c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	699a      	ldr	r2, [r3, #24]
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d037      	beq.n	8001dac <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001d3c:	6a3b      	ldr	r3, [r7, #32]
 8001d3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d006      	beq.n	8001d54 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8001d46:	6a3b      	ldr	r3, [r7, #32]
 8001d48:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e3f4      	b.n	800253e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8001d54:	6a3b      	ldr	r3, [r7, #32]
 8001d56:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d01b      	beq.n	8001d96 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8001d5e:	4b7b      	ldr	r3, [pc, #492]	@ (8001f4c <HAL_RCC_OscConfig+0x7b8>)
 8001d60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d64:	4a79      	ldr	r2, [pc, #484]	@ (8001f4c <HAL_RCC_OscConfig+0x7b8>)
 8001d66:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8001d6a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8001d6e:	f7ff f8e1 	bl	8000f34 <HAL_GetTick>
 8001d72:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d76:	f7ff f8dd 	bl	8000f34 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b05      	cmp	r3, #5
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e3da      	b.n	800253e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001d88:	4b70      	ldr	r3, [pc, #448]	@ (8001f4c <HAL_RCC_OscConfig+0x7b8>)
 8001d8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1ef      	bne.n	8001d76 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8001d96:	4b6d      	ldr	r3, [pc, #436]	@ (8001f4c <HAL_RCC_OscConfig+0x7b8>)
 8001d98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d9c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	4969      	ldr	r1, [pc, #420]	@ (8001f4c <HAL_RCC_OscConfig+0x7b8>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8001dac:	4b67      	ldr	r3, [pc, #412]	@ (8001f4c <HAL_RCC_OscConfig+0x7b8>)
 8001dae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001db2:	4a66      	ldr	r2, [pc, #408]	@ (8001f4c <HAL_RCC_OscConfig+0x7b8>)
 8001db4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001db8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8001dbc:	f7ff f8ba 	bl	8000f34 <HAL_GetTick>
 8001dc0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc4:	f7ff f8b6 	bl	8000f34 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b05      	cmp	r3, #5
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e3b3      	b.n	800253e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001dd6:	4b5d      	ldr	r3, [pc, #372]	@ (8001f4c <HAL_RCC_OscConfig+0x7b8>)
 8001dd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ddc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0ef      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x630>
 8001de4:	e01b      	b.n	8001e1e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8001de6:	4b59      	ldr	r3, [pc, #356]	@ (8001f4c <HAL_RCC_OscConfig+0x7b8>)
 8001de8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001dec:	4a57      	ldr	r2, [pc, #348]	@ (8001f4c <HAL_RCC_OscConfig+0x7b8>)
 8001dee:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8001df2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8001df6:	f7ff f89d 	bl	8000f34 <HAL_GetTick>
 8001dfa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dfe:	f7ff f899 	bl	8000f34 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b05      	cmp	r3, #5
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e396      	b.n	800253e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001e10:	4b4e      	ldr	r3, [pc, #312]	@ (8001f4c <HAL_RCC_OscConfig+0x7b8>)
 8001e12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1ef      	bne.n	8001dfe <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e1e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d107      	bne.n	8001e36 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e26:	4b49      	ldr	r3, [pc, #292]	@ (8001f4c <HAL_RCC_OscConfig+0x7b8>)
 8001e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e2c:	4a47      	ldr	r2, [pc, #284]	@ (8001f4c <HAL_RCC_OscConfig+0x7b8>)
 8001e2e:	f023 0304 	bic.w	r3, r3, #4
 8001e32:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0304 	and.w	r3, r3, #4
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f000 8111 	beq.w	8002066 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8001e44:	2300      	movs	r3, #0
 8001e46:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e4a:	4b40      	ldr	r3, [pc, #256]	@ (8001f4c <HAL_RCC_OscConfig+0x7b8>)
 8001e4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d111      	bne.n	8001e7c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e58:	4b3c      	ldr	r3, [pc, #240]	@ (8001f4c <HAL_RCC_OscConfig+0x7b8>)
 8001e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e5e:	4a3b      	ldr	r2, [pc, #236]	@ (8001f4c <HAL_RCC_OscConfig+0x7b8>)
 8001e60:	f043 0304 	orr.w	r3, r3, #4
 8001e64:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001e68:	4b38      	ldr	r3, [pc, #224]	@ (8001f4c <HAL_RCC_OscConfig+0x7b8>)
 8001e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e6e:	f003 0304 	and.w	r3, r3, #4
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8001e76:	2301      	movs	r3, #1
 8001e78:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001e7c:	4b34      	ldr	r3, [pc, #208]	@ (8001f50 <HAL_RCC_OscConfig+0x7bc>)
 8001e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d118      	bne.n	8001eba <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001e88:	4b31      	ldr	r3, [pc, #196]	@ (8001f50 <HAL_RCC_OscConfig+0x7bc>)
 8001e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e8c:	4a30      	ldr	r2, [pc, #192]	@ (8001f50 <HAL_RCC_OscConfig+0x7bc>)
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e94:	f7ff f84e 	bl	8000f34 <HAL_GetTick>
 8001e98:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e9c:	f7ff f84a 	bl	8000f34 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e347      	b.n	800253e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001eae:	4b28      	ldr	r3, [pc, #160]	@ (8001f50 <HAL_RCC_OscConfig+0x7bc>)
 8001eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0f0      	beq.n	8001e9c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d01f      	beq.n	8001f06 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d010      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001ed2:	4b1e      	ldr	r3, [pc, #120]	@ (8001f4c <HAL_RCC_OscConfig+0x7b8>)
 8001ed4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ed8:	4a1c      	ldr	r2, [pc, #112]	@ (8001f4c <HAL_RCC_OscConfig+0x7b8>)
 8001eda:	f043 0304 	orr.w	r3, r3, #4
 8001ede:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f4c <HAL_RCC_OscConfig+0x7b8>)
 8001ee4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ee8:	4a18      	ldr	r2, [pc, #96]	@ (8001f4c <HAL_RCC_OscConfig+0x7b8>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001ef2:	e018      	b.n	8001f26 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001ef4:	4b15      	ldr	r3, [pc, #84]	@ (8001f4c <HAL_RCC_OscConfig+0x7b8>)
 8001ef6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001efa:	4a14      	ldr	r2, [pc, #80]	@ (8001f4c <HAL_RCC_OscConfig+0x7b8>)
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f04:	e00f      	b.n	8001f26 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f06:	4b11      	ldr	r3, [pc, #68]	@ (8001f4c <HAL_RCC_OscConfig+0x7b8>)
 8001f08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f0c:	4a0f      	ldr	r2, [pc, #60]	@ (8001f4c <HAL_RCC_OscConfig+0x7b8>)
 8001f0e:	f023 0301 	bic.w	r3, r3, #1
 8001f12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001f16:	4b0d      	ldr	r3, [pc, #52]	@ (8001f4c <HAL_RCC_OscConfig+0x7b8>)
 8001f18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f1c:	4a0b      	ldr	r2, [pc, #44]	@ (8001f4c <HAL_RCC_OscConfig+0x7b8>)
 8001f1e:	f023 0304 	bic.w	r3, r3, #4
 8001f22:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d057      	beq.n	8001fde <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8001f2e:	f7ff f801 	bl	8000f34 <HAL_GetTick>
 8001f32:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f34:	e00e      	b.n	8001f54 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f36:	f7fe fffd 	bl	8000f34 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d905      	bls.n	8001f54 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e2f8      	b.n	800253e <HAL_RCC_OscConfig+0xdaa>
 8001f4c:	46020c00 	.word	0x46020c00
 8001f50:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f54:	4b9c      	ldr	r3, [pc, #624]	@ (80021c8 <HAL_RCC_OscConfig+0xa34>)
 8001f56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0e9      	beq.n	8001f36 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d01b      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001f6e:	4b96      	ldr	r3, [pc, #600]	@ (80021c8 <HAL_RCC_OscConfig+0xa34>)
 8001f70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f74:	4a94      	ldr	r2, [pc, #592]	@ (80021c8 <HAL_RCC_OscConfig+0xa34>)
 8001f76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f7a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001f7e:	e00a      	b.n	8001f96 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f80:	f7fe ffd8 	bl	8000f34 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e2d3      	b.n	800253e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001f96:	4b8c      	ldr	r3, [pc, #560]	@ (80021c8 <HAL_RCC_OscConfig+0xa34>)
 8001f98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0ed      	beq.n	8001f80 <HAL_RCC_OscConfig+0x7ec>
 8001fa4:	e053      	b.n	800204e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001fa6:	4b88      	ldr	r3, [pc, #544]	@ (80021c8 <HAL_RCC_OscConfig+0xa34>)
 8001fa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fac:	4a86      	ldr	r2, [pc, #536]	@ (80021c8 <HAL_RCC_OscConfig+0xa34>)
 8001fae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001fb2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001fb6:	e00a      	b.n	8001fce <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb8:	f7fe ffbc 	bl	8000f34 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e2b7      	b.n	800253e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001fce:	4b7e      	ldr	r3, [pc, #504]	@ (80021c8 <HAL_RCC_OscConfig+0xa34>)
 8001fd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1ed      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x824>
 8001fdc:	e037      	b.n	800204e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8001fde:	f7fe ffa9 	bl	8000f34 <HAL_GetTick>
 8001fe2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fe4:	e00a      	b.n	8001ffc <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe6:	f7fe ffa5 	bl	8000f34 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e2a0      	b.n	800253e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ffc:	4b72      	ldr	r3, [pc, #456]	@ (80021c8 <HAL_RCC_OscConfig+0xa34>)
 8001ffe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1ed      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800200a:	4b6f      	ldr	r3, [pc, #444]	@ (80021c8 <HAL_RCC_OscConfig+0xa34>)
 800200c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002010:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002014:	2b00      	cmp	r3, #0
 8002016:	d01a      	beq.n	800204e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002018:	4b6b      	ldr	r3, [pc, #428]	@ (80021c8 <HAL_RCC_OscConfig+0xa34>)
 800201a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800201e:	4a6a      	ldr	r2, [pc, #424]	@ (80021c8 <HAL_RCC_OscConfig+0xa34>)
 8002020:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002024:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002028:	e00a      	b.n	8002040 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202a:	f7fe ff83 	bl	8000f34 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002038:	4293      	cmp	r3, r2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e27e      	b.n	800253e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002040:	4b61      	ldr	r3, [pc, #388]	@ (80021c8 <HAL_RCC_OscConfig+0xa34>)
 8002042:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002046:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1ed      	bne.n	800202a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800204e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002052:	2b01      	cmp	r3, #1
 8002054:	d107      	bne.n	8002066 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002056:	4b5c      	ldr	r3, [pc, #368]	@ (80021c8 <HAL_RCC_OscConfig+0xa34>)
 8002058:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800205c:	4a5a      	ldr	r2, [pc, #360]	@ (80021c8 <HAL_RCC_OscConfig+0xa34>)
 800205e:	f023 0304 	bic.w	r3, r3, #4
 8002062:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0320 	and.w	r3, r3, #32
 800206e:	2b00      	cmp	r3, #0
 8002070:	d036      	beq.n	80020e0 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002076:	2b00      	cmp	r3, #0
 8002078:	d019      	beq.n	80020ae <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800207a:	4b53      	ldr	r3, [pc, #332]	@ (80021c8 <HAL_RCC_OscConfig+0xa34>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a52      	ldr	r2, [pc, #328]	@ (80021c8 <HAL_RCC_OscConfig+0xa34>)
 8002080:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002084:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002086:	f7fe ff55 	bl	8000f34 <HAL_GetTick>
 800208a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800208e:	f7fe ff51 	bl	8000f34 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e24e      	b.n	800253e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80020a0:	4b49      	ldr	r3, [pc, #292]	@ (80021c8 <HAL_RCC_OscConfig+0xa34>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0f0      	beq.n	800208e <HAL_RCC_OscConfig+0x8fa>
 80020ac:	e018      	b.n	80020e0 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80020ae:	4b46      	ldr	r3, [pc, #280]	@ (80021c8 <HAL_RCC_OscConfig+0xa34>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a45      	ldr	r2, [pc, #276]	@ (80021c8 <HAL_RCC_OscConfig+0xa34>)
 80020b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80020b8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80020ba:	f7fe ff3b 	bl	8000f34 <HAL_GetTick>
 80020be:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020c2:	f7fe ff37 	bl	8000f34 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e234      	b.n	800253e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80020d4:	4b3c      	ldr	r3, [pc, #240]	@ (80021c8 <HAL_RCC_OscConfig+0xa34>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1f0      	bne.n	80020c2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d036      	beq.n	800215a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d019      	beq.n	8002128 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80020f4:	4b34      	ldr	r3, [pc, #208]	@ (80021c8 <HAL_RCC_OscConfig+0xa34>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a33      	ldr	r2, [pc, #204]	@ (80021c8 <HAL_RCC_OscConfig+0xa34>)
 80020fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020fe:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002100:	f7fe ff18 	bl	8000f34 <HAL_GetTick>
 8002104:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002108:	f7fe ff14 	bl	8000f34 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e211      	b.n	800253e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800211a:	4b2b      	ldr	r3, [pc, #172]	@ (80021c8 <HAL_RCC_OscConfig+0xa34>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f0      	beq.n	8002108 <HAL_RCC_OscConfig+0x974>
 8002126:	e018      	b.n	800215a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8002128:	4b27      	ldr	r3, [pc, #156]	@ (80021c8 <HAL_RCC_OscConfig+0xa34>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a26      	ldr	r2, [pc, #152]	@ (80021c8 <HAL_RCC_OscConfig+0xa34>)
 800212e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002132:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002134:	f7fe fefe 	bl	8000f34 <HAL_GetTick>
 8002138:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800213c:	f7fe fefa 	bl	8000f34 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e1f7      	b.n	800253e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800214e:	4b1e      	ldr	r3, [pc, #120]	@ (80021c8 <HAL_RCC_OscConfig+0xa34>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f0      	bne.n	800213c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002162:	2b00      	cmp	r3, #0
 8002164:	d07f      	beq.n	8002266 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800216a:	2b00      	cmp	r3, #0
 800216c:	d062      	beq.n	8002234 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800216e:	4b16      	ldr	r3, [pc, #88]	@ (80021c8 <HAL_RCC_OscConfig+0xa34>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	4a15      	ldr	r2, [pc, #84]	@ (80021c8 <HAL_RCC_OscConfig+0xa34>)
 8002174:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002178:	6093      	str	r3, [r2, #8]
 800217a:	4b13      	ldr	r3, [pc, #76]	@ (80021c8 <HAL_RCC_OscConfig+0xa34>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002186:	4910      	ldr	r1, [pc, #64]	@ (80021c8 <HAL_RCC_OscConfig+0xa34>)
 8002188:	4313      	orrs	r3, r2
 800218a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002190:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002194:	d309      	bcc.n	80021aa <HAL_RCC_OscConfig+0xa16>
 8002196:	4b0c      	ldr	r3, [pc, #48]	@ (80021c8 <HAL_RCC_OscConfig+0xa34>)
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	f023 021f 	bic.w	r2, r3, #31
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	4909      	ldr	r1, [pc, #36]	@ (80021c8 <HAL_RCC_OscConfig+0xa34>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	60cb      	str	r3, [r1, #12]
 80021a8:	e02a      	b.n	8002200 <HAL_RCC_OscConfig+0xa6c>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	da0c      	bge.n	80021cc <HAL_RCC_OscConfig+0xa38>
 80021b2:	4b05      	ldr	r3, [pc, #20]	@ (80021c8 <HAL_RCC_OscConfig+0xa34>)
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	015b      	lsls	r3, r3, #5
 80021c0:	4901      	ldr	r1, [pc, #4]	@ (80021c8 <HAL_RCC_OscConfig+0xa34>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	60cb      	str	r3, [r1, #12]
 80021c6:	e01b      	b.n	8002200 <HAL_RCC_OscConfig+0xa6c>
 80021c8:	46020c00 	.word	0x46020c00
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021d4:	d30a      	bcc.n	80021ec <HAL_RCC_OscConfig+0xa58>
 80021d6:	4ba1      	ldr	r3, [pc, #644]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	029b      	lsls	r3, r3, #10
 80021e4:	499d      	ldr	r1, [pc, #628]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	60cb      	str	r3, [r1, #12]
 80021ea:	e009      	b.n	8002200 <HAL_RCC_OscConfig+0xa6c>
 80021ec:	4b9b      	ldr	r3, [pc, #620]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	03db      	lsls	r3, r3, #15
 80021fa:	4998      	ldr	r1, [pc, #608]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8002200:	4b96      	ldr	r3, [pc, #600]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a95      	ldr	r2, [pc, #596]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 8002206:	f043 0310 	orr.w	r3, r3, #16
 800220a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800220c:	f7fe fe92 	bl	8000f34 <HAL_GetTick>
 8002210:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002214:	f7fe fe8e 	bl	8000f34 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e18b      	b.n	800253e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002226:	4b8d      	ldr	r3, [pc, #564]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0320 	and.w	r3, r3, #32
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f0      	beq.n	8002214 <HAL_RCC_OscConfig+0xa80>
 8002232:	e018      	b.n	8002266 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8002234:	4b89      	ldr	r3, [pc, #548]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a88      	ldr	r2, [pc, #544]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 800223a:	f023 0310 	bic.w	r3, r3, #16
 800223e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002240:	f7fe fe78 	bl	8000f34 <HAL_GetTick>
 8002244:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002248:	f7fe fe74 	bl	8000f34 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e171      	b.n	800253e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800225a:	4b80      	ldr	r3, [pc, #512]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0320 	and.w	r3, r3, #32
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f0      	bne.n	8002248 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 8166 	beq.w	800253c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002270:	2300      	movs	r3, #0
 8002272:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002276:	4b79      	ldr	r3, [pc, #484]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	2b0c      	cmp	r3, #12
 8002280:	f000 80f2 	beq.w	8002468 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002288:	2b02      	cmp	r3, #2
 800228a:	f040 80c5 	bne.w	8002418 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800228e:	4b73      	ldr	r3, [pc, #460]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a72      	ldr	r2, [pc, #456]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 8002294:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002298:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800229a:	f7fe fe4b 	bl	8000f34 <HAL_GetTick>
 800229e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a2:	f7fe fe47 	bl	8000f34 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e144      	b.n	800253e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80022b4:	4b69      	ldr	r3, [pc, #420]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1f0      	bne.n	80022a2 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022c0:	4b66      	ldr	r3, [pc, #408]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 80022c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022c6:	f003 0304 	and.w	r3, r3, #4
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d111      	bne.n	80022f2 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80022ce:	4b63      	ldr	r3, [pc, #396]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 80022d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022d4:	4a61      	ldr	r2, [pc, #388]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 80022d6:	f043 0304 	orr.w	r3, r3, #4
 80022da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80022de:	4b5f      	ldr	r3, [pc, #380]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 80022e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80022ec:	2301      	movs	r3, #1
 80022ee:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80022f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002460 <HAL_RCC_OscConfig+0xccc>)
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80022fe:	d102      	bne.n	8002306 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8002300:	2301      	movs	r3, #1
 8002302:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002306:	4b56      	ldr	r3, [pc, #344]	@ (8002460 <HAL_RCC_OscConfig+0xccc>)
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	4a55      	ldr	r2, [pc, #340]	@ (8002460 <HAL_RCC_OscConfig+0xccc>)
 800230c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002310:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8002312:	4b52      	ldr	r3, [pc, #328]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 8002314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002316:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800231a:	f023 0303 	bic.w	r3, r3, #3
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002326:	3a01      	subs	r2, #1
 8002328:	0212      	lsls	r2, r2, #8
 800232a:	4311      	orrs	r1, r2
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002330:	430a      	orrs	r2, r1
 8002332:	494a      	ldr	r1, [pc, #296]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 8002334:	4313      	orrs	r3, r2
 8002336:	628b      	str	r3, [r1, #40]	@ 0x28
 8002338:	4b48      	ldr	r3, [pc, #288]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 800233a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800233c:	4b49      	ldr	r3, [pc, #292]	@ (8002464 <HAL_RCC_OscConfig+0xcd0>)
 800233e:	4013      	ands	r3, r2
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002344:	3a01      	subs	r2, #1
 8002346:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800234e:	3a01      	subs	r2, #1
 8002350:	0252      	lsls	r2, r2, #9
 8002352:	b292      	uxth	r2, r2
 8002354:	4311      	orrs	r1, r2
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800235a:	3a01      	subs	r2, #1
 800235c:	0412      	lsls	r2, r2, #16
 800235e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8002362:	4311      	orrs	r1, r2
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002368:	3a01      	subs	r2, #1
 800236a:	0612      	lsls	r2, r2, #24
 800236c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8002370:	430a      	orrs	r2, r1
 8002372:	493a      	ldr	r1, [pc, #232]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 8002374:	4313      	orrs	r3, r2
 8002376:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002378:	4b38      	ldr	r3, [pc, #224]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 800237a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800237c:	4a37      	ldr	r2, [pc, #220]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 800237e:	f023 0310 	bic.w	r3, r3, #16
 8002382:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002388:	4a34      	ldr	r2, [pc, #208]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800238e:	4b33      	ldr	r3, [pc, #204]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 8002390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002392:	4a32      	ldr	r2, [pc, #200]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 8002394:	f043 0310 	orr.w	r3, r3, #16
 8002398:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800239a:	4b30      	ldr	r3, [pc, #192]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 800239c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800239e:	f023 020c 	bic.w	r2, r3, #12
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a6:	492d      	ldr	r1, [pc, #180]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80023ac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d105      	bne.n	80023c0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80023b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002460 <HAL_RCC_OscConfig+0xccc>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	4a29      	ldr	r2, [pc, #164]	@ (8002460 <HAL_RCC_OscConfig+0xccc>)
 80023ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023be:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80023c0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d107      	bne.n	80023d8 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80023c8:	4b24      	ldr	r3, [pc, #144]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 80023ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023ce:	4a23      	ldr	r2, [pc, #140]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 80023d0:	f023 0304 	bic.w	r3, r3, #4
 80023d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80023d8:	4b20      	ldr	r3, [pc, #128]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 80023da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023dc:	4a1f      	ldr	r2, [pc, #124]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 80023de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023e2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80023e4:	4b1d      	ldr	r3, [pc, #116]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a1c      	ldr	r2, [pc, #112]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 80023ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023ee:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80023f0:	f7fe fda0 	bl	8000f34 <HAL_GetTick>
 80023f4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f8:	f7fe fd9c 	bl	8000f34 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e099      	b.n	800253e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800240a:	4b14      	ldr	r3, [pc, #80]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0xc64>
 8002416:	e091      	b.n	800253c <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002418:	4b10      	ldr	r3, [pc, #64]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a0f      	ldr	r2, [pc, #60]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 800241e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002422:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002424:	f7fe fd86 	bl	8000f34 <HAL_GetTick>
 8002428:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800242c:	f7fe fd82 	bl	8000f34 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e07f      	b.n	800253e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800243e:	4b07      	ldr	r3, [pc, #28]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f0      	bne.n	800242c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800244a:	4b04      	ldr	r3, [pc, #16]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 800244c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800244e:	4a03      	ldr	r2, [pc, #12]	@ (800245c <HAL_RCC_OscConfig+0xcc8>)
 8002450:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002454:	f023 0303 	bic.w	r3, r3, #3
 8002458:	6293      	str	r3, [r2, #40]	@ 0x28
 800245a:	e06f      	b.n	800253c <HAL_RCC_OscConfig+0xda8>
 800245c:	46020c00 	.word	0x46020c00
 8002460:	46020800 	.word	0x46020800
 8002464:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002468:	4b37      	ldr	r3, [pc, #220]	@ (8002548 <HAL_RCC_OscConfig+0xdb4>)
 800246a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800246e:	4b36      	ldr	r3, [pc, #216]	@ (8002548 <HAL_RCC_OscConfig+0xdb4>)
 8002470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002472:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002478:	2b01      	cmp	r3, #1
 800247a:	d039      	beq.n	80024f0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	f003 0203 	and.w	r2, r3, #3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002486:	429a      	cmp	r2, r3
 8002488:	d132      	bne.n	80024f0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	0a1b      	lsrs	r3, r3, #8
 800248e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002496:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002498:	429a      	cmp	r2, r3
 800249a:	d129      	bne.n	80024f0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d122      	bne.n	80024f0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024b4:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d11a      	bne.n	80024f0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	0a5b      	lsrs	r3, r3, #9
 80024be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024c6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d111      	bne.n	80024f0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	0c1b      	lsrs	r3, r3, #16
 80024d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024d8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80024da:	429a      	cmp	r2, r3
 80024dc:	d108      	bne.n	80024f0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	0e1b      	lsrs	r3, r3, #24
 80024e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ea:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d001      	beq.n	80024f4 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e024      	b.n	800253e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80024f4:	4b14      	ldr	r3, [pc, #80]	@ (8002548 <HAL_RCC_OscConfig+0xdb4>)
 80024f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f8:	08db      	lsrs	r3, r3, #3
 80024fa:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002502:	429a      	cmp	r2, r3
 8002504:	d01a      	beq.n	800253c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002506:	4b10      	ldr	r3, [pc, #64]	@ (8002548 <HAL_RCC_OscConfig+0xdb4>)
 8002508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800250a:	4a0f      	ldr	r2, [pc, #60]	@ (8002548 <HAL_RCC_OscConfig+0xdb4>)
 800250c:	f023 0310 	bic.w	r3, r3, #16
 8002510:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002512:	f7fe fd0f 	bl	8000f34 <HAL_GetTick>
 8002516:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8002518:	bf00      	nop
 800251a:	f7fe fd0b 	bl	8000f34 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002522:	4293      	cmp	r3, r2
 8002524:	d0f9      	beq.n	800251a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800252a:	4a07      	ldr	r2, [pc, #28]	@ (8002548 <HAL_RCC_OscConfig+0xdb4>)
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002530:	4b05      	ldr	r3, [pc, #20]	@ (8002548 <HAL_RCC_OscConfig+0xdb4>)
 8002532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002534:	4a04      	ldr	r2, [pc, #16]	@ (8002548 <HAL_RCC_OscConfig+0xdb4>)
 8002536:	f043 0310 	orr.w	r3, r3, #16
 800253a:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3738      	adds	r7, #56	@ 0x38
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	46020c00 	.word	0x46020c00

0800254c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e1d9      	b.n	8002914 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002560:	4b9b      	ldr	r3, [pc, #620]	@ (80027d0 <HAL_RCC_ClockConfig+0x284>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 030f 	and.w	r3, r3, #15
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d910      	bls.n	8002590 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256e:	4b98      	ldr	r3, [pc, #608]	@ (80027d0 <HAL_RCC_ClockConfig+0x284>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f023 020f 	bic.w	r2, r3, #15
 8002576:	4996      	ldr	r1, [pc, #600]	@ (80027d0 <HAL_RCC_ClockConfig+0x284>)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	4313      	orrs	r3, r2
 800257c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800257e:	4b94      	ldr	r3, [pc, #592]	@ (80027d0 <HAL_RCC_ClockConfig+0x284>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	429a      	cmp	r2, r3
 800258a:	d001      	beq.n	8002590 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e1c1      	b.n	8002914 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0310 	and.w	r3, r3, #16
 8002598:	2b00      	cmp	r3, #0
 800259a:	d010      	beq.n	80025be <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	695a      	ldr	r2, [r3, #20]
 80025a0:	4b8c      	ldr	r3, [pc, #560]	@ (80027d4 <HAL_RCC_ClockConfig+0x288>)
 80025a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d908      	bls.n	80025be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80025ac:	4b89      	ldr	r3, [pc, #548]	@ (80027d4 <HAL_RCC_ClockConfig+0x288>)
 80025ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	4986      	ldr	r1, [pc, #536]	@ (80027d4 <HAL_RCC_ClockConfig+0x288>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d012      	beq.n	80025f0 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691a      	ldr	r2, [r3, #16]
 80025ce:	4b81      	ldr	r3, [pc, #516]	@ (80027d4 <HAL_RCC_ClockConfig+0x288>)
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	091b      	lsrs	r3, r3, #4
 80025d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025d8:	429a      	cmp	r2, r3
 80025da:	d909      	bls.n	80025f0 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80025dc:	4b7d      	ldr	r3, [pc, #500]	@ (80027d4 <HAL_RCC_ClockConfig+0x288>)
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	011b      	lsls	r3, r3, #4
 80025ea:	497a      	ldr	r1, [pc, #488]	@ (80027d4 <HAL_RCC_ClockConfig+0x288>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d010      	beq.n	800261e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68da      	ldr	r2, [r3, #12]
 8002600:	4b74      	ldr	r3, [pc, #464]	@ (80027d4 <HAL_RCC_ClockConfig+0x288>)
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002608:	429a      	cmp	r2, r3
 800260a:	d908      	bls.n	800261e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800260c:	4b71      	ldr	r3, [pc, #452]	@ (80027d4 <HAL_RCC_ClockConfig+0x288>)
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	496e      	ldr	r1, [pc, #440]	@ (80027d4 <HAL_RCC_ClockConfig+0x288>)
 800261a:	4313      	orrs	r3, r2
 800261c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d010      	beq.n	800264c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	689a      	ldr	r2, [r3, #8]
 800262e:	4b69      	ldr	r3, [pc, #420]	@ (80027d4 <HAL_RCC_ClockConfig+0x288>)
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	429a      	cmp	r2, r3
 8002638:	d908      	bls.n	800264c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800263a:	4b66      	ldr	r3, [pc, #408]	@ (80027d4 <HAL_RCC_ClockConfig+0x288>)
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	f023 020f 	bic.w	r2, r3, #15
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	4963      	ldr	r1, [pc, #396]	@ (80027d4 <HAL_RCC_ClockConfig+0x288>)
 8002648:	4313      	orrs	r3, r2
 800264a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 80d2 	beq.w	80027fe <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800265a:	2300      	movs	r3, #0
 800265c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b03      	cmp	r3, #3
 8002664:	d143      	bne.n	80026ee <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002666:	4b5b      	ldr	r3, [pc, #364]	@ (80027d4 <HAL_RCC_ClockConfig+0x288>)
 8002668:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	d110      	bne.n	8002696 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002674:	4b57      	ldr	r3, [pc, #348]	@ (80027d4 <HAL_RCC_ClockConfig+0x288>)
 8002676:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800267a:	4a56      	ldr	r2, [pc, #344]	@ (80027d4 <HAL_RCC_ClockConfig+0x288>)
 800267c:	f043 0304 	orr.w	r3, r3, #4
 8002680:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002684:	4b53      	ldr	r3, [pc, #332]	@ (80027d4 <HAL_RCC_ClockConfig+0x288>)
 8002686:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800268a:	f003 0304 	and.w	r3, r3, #4
 800268e:	60bb      	str	r3, [r7, #8]
 8002690:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8002692:	2301      	movs	r3, #1
 8002694:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8002696:	f7fe fc4d 	bl	8000f34 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800269c:	4b4e      	ldr	r3, [pc, #312]	@ (80027d8 <HAL_RCC_ClockConfig+0x28c>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00f      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80026aa:	f7fe fc43 	bl	8000f34 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e12b      	b.n	8002914 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80026bc:	4b46      	ldr	r3, [pc, #280]	@ (80027d8 <HAL_RCC_ClockConfig+0x28c>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0f0      	beq.n	80026aa <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80026c8:	7dfb      	ldrb	r3, [r7, #23]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d107      	bne.n	80026de <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80026ce:	4b41      	ldr	r3, [pc, #260]	@ (80027d4 <HAL_RCC_ClockConfig+0x288>)
 80026d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026d4:	4a3f      	ldr	r2, [pc, #252]	@ (80027d4 <HAL_RCC_ClockConfig+0x288>)
 80026d6:	f023 0304 	bic.w	r3, r3, #4
 80026da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80026de:	4b3d      	ldr	r3, [pc, #244]	@ (80027d4 <HAL_RCC_ClockConfig+0x288>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d121      	bne.n	800272e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e112      	b.n	8002914 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d107      	bne.n	8002706 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026f6:	4b37      	ldr	r3, [pc, #220]	@ (80027d4 <HAL_RCC_ClockConfig+0x288>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d115      	bne.n	800272e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e106      	b.n	8002914 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d107      	bne.n	800271e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800270e:	4b31      	ldr	r3, [pc, #196]	@ (80027d4 <HAL_RCC_ClockConfig+0x288>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	2b00      	cmp	r3, #0
 8002718:	d109      	bne.n	800272e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e0fa      	b.n	8002914 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800271e:	4b2d      	ldr	r3, [pc, #180]	@ (80027d4 <HAL_RCC_ClockConfig+0x288>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e0f2      	b.n	8002914 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800272e:	4b29      	ldr	r3, [pc, #164]	@ (80027d4 <HAL_RCC_ClockConfig+0x288>)
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	f023 0203 	bic.w	r2, r3, #3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	4926      	ldr	r1, [pc, #152]	@ (80027d4 <HAL_RCC_ClockConfig+0x288>)
 800273c:	4313      	orrs	r3, r2
 800273e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8002740:	f7fe fbf8 	bl	8000f34 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b03      	cmp	r3, #3
 800274c:	d112      	bne.n	8002774 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800274e:	e00a      	b.n	8002766 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002750:	f7fe fbf0 	bl	8000f34 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800275e:	4293      	cmp	r3, r2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e0d6      	b.n	8002914 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002766:	4b1b      	ldr	r3, [pc, #108]	@ (80027d4 <HAL_RCC_ClockConfig+0x288>)
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	f003 030c 	and.w	r3, r3, #12
 800276e:	2b0c      	cmp	r3, #12
 8002770:	d1ee      	bne.n	8002750 <HAL_RCC_ClockConfig+0x204>
 8002772:	e044      	b.n	80027fe <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b02      	cmp	r3, #2
 800277a:	d112      	bne.n	80027a2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800277c:	e00a      	b.n	8002794 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800277e:	f7fe fbd9 	bl	8000f34 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	f241 3288 	movw	r2, #5000	@ 0x1388
 800278c:	4293      	cmp	r3, r2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e0bf      	b.n	8002914 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002794:	4b0f      	ldr	r3, [pc, #60]	@ (80027d4 <HAL_RCC_ClockConfig+0x288>)
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	f003 030c 	and.w	r3, r3, #12
 800279c:	2b08      	cmp	r3, #8
 800279e:	d1ee      	bne.n	800277e <HAL_RCC_ClockConfig+0x232>
 80027a0:	e02d      	b.n	80027fe <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d123      	bne.n	80027f2 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80027aa:	e00a      	b.n	80027c2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ac:	f7fe fbc2 	bl	8000f34 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e0a8      	b.n	8002914 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80027c2:	4b04      	ldr	r3, [pc, #16]	@ (80027d4 <HAL_RCC_ClockConfig+0x288>)
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	f003 030c 	and.w	r3, r3, #12
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1ee      	bne.n	80027ac <HAL_RCC_ClockConfig+0x260>
 80027ce:	e016      	b.n	80027fe <HAL_RCC_ClockConfig+0x2b2>
 80027d0:	40022000 	.word	0x40022000
 80027d4:	46020c00 	.word	0x46020c00
 80027d8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027dc:	f7fe fbaa 	bl	8000f34 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e090      	b.n	8002914 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80027f2:	4b4a      	ldr	r3, [pc, #296]	@ (800291c <HAL_RCC_ClockConfig+0x3d0>)
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	f003 030c 	and.w	r3, r3, #12
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d1ee      	bne.n	80027dc <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d010      	beq.n	800282c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	4b43      	ldr	r3, [pc, #268]	@ (800291c <HAL_RCC_ClockConfig+0x3d0>)
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	429a      	cmp	r2, r3
 8002818:	d208      	bcs.n	800282c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800281a:	4b40      	ldr	r3, [pc, #256]	@ (800291c <HAL_RCC_ClockConfig+0x3d0>)
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	f023 020f 	bic.w	r2, r3, #15
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	493d      	ldr	r1, [pc, #244]	@ (800291c <HAL_RCC_ClockConfig+0x3d0>)
 8002828:	4313      	orrs	r3, r2
 800282a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800282c:	4b3c      	ldr	r3, [pc, #240]	@ (8002920 <HAL_RCC_ClockConfig+0x3d4>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 030f 	and.w	r3, r3, #15
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	429a      	cmp	r2, r3
 8002838:	d210      	bcs.n	800285c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283a:	4b39      	ldr	r3, [pc, #228]	@ (8002920 <HAL_RCC_ClockConfig+0x3d4>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f023 020f 	bic.w	r2, r3, #15
 8002842:	4937      	ldr	r1, [pc, #220]	@ (8002920 <HAL_RCC_ClockConfig+0x3d4>)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	4313      	orrs	r3, r2
 8002848:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800284a:	4b35      	ldr	r3, [pc, #212]	@ (8002920 <HAL_RCC_ClockConfig+0x3d4>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	429a      	cmp	r2, r3
 8002856:	d001      	beq.n	800285c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e05b      	b.n	8002914 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b00      	cmp	r3, #0
 8002866:	d010      	beq.n	800288a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68da      	ldr	r2, [r3, #12]
 800286c:	4b2b      	ldr	r3, [pc, #172]	@ (800291c <HAL_RCC_ClockConfig+0x3d0>)
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002874:	429a      	cmp	r2, r3
 8002876:	d208      	bcs.n	800288a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002878:	4b28      	ldr	r3, [pc, #160]	@ (800291c <HAL_RCC_ClockConfig+0x3d0>)
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	4925      	ldr	r1, [pc, #148]	@ (800291c <HAL_RCC_ClockConfig+0x3d0>)
 8002886:	4313      	orrs	r3, r2
 8002888:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	2b00      	cmp	r3, #0
 8002894:	d012      	beq.n	80028bc <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691a      	ldr	r2, [r3, #16]
 800289a:	4b20      	ldr	r3, [pc, #128]	@ (800291c <HAL_RCC_ClockConfig+0x3d0>)
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	091b      	lsrs	r3, r3, #4
 80028a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d209      	bcs.n	80028bc <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80028a8:	4b1c      	ldr	r3, [pc, #112]	@ (800291c <HAL_RCC_ClockConfig+0x3d0>)
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	011b      	lsls	r3, r3, #4
 80028b6:	4919      	ldr	r1, [pc, #100]	@ (800291c <HAL_RCC_ClockConfig+0x3d0>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0310 	and.w	r3, r3, #16
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d010      	beq.n	80028ea <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	695a      	ldr	r2, [r3, #20]
 80028cc:	4b13      	ldr	r3, [pc, #76]	@ (800291c <HAL_RCC_ClockConfig+0x3d0>)
 80028ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d208      	bcs.n	80028ea <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80028d8:	4b10      	ldr	r3, [pc, #64]	@ (800291c <HAL_RCC_ClockConfig+0x3d0>)
 80028da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028dc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	490d      	ldr	r1, [pc, #52]	@ (800291c <HAL_RCC_ClockConfig+0x3d0>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80028ea:	f000 f821 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 80028ee:	4602      	mov	r2, r0
 80028f0:	4b0a      	ldr	r3, [pc, #40]	@ (800291c <HAL_RCC_ClockConfig+0x3d0>)
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	f003 030f 	and.w	r3, r3, #15
 80028f8:	490a      	ldr	r1, [pc, #40]	@ (8002924 <HAL_RCC_ClockConfig+0x3d8>)
 80028fa:	5ccb      	ldrb	r3, [r1, r3]
 80028fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002900:	4a09      	ldr	r2, [pc, #36]	@ (8002928 <HAL_RCC_ClockConfig+0x3dc>)
 8002902:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002904:	4b09      	ldr	r3, [pc, #36]	@ (800292c <HAL_RCC_ClockConfig+0x3e0>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7fe fac9 	bl	8000ea0 <HAL_InitTick>
 800290e:	4603      	mov	r3, r0
 8002910:	73fb      	strb	r3, [r7, #15]

  return status;
 8002912:	7bfb      	ldrb	r3, [r7, #15]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	46020c00 	.word	0x46020c00
 8002920:	40022000 	.word	0x40022000
 8002924:	080073dc 	.word	0x080073dc
 8002928:	20000000 	.word	0x20000000
 800292c:	20000004 	.word	0x20000004

08002930 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002930:	b480      	push	{r7}
 8002932:	b08b      	sub	sp, #44	@ 0x2c
 8002934:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002936:	2300      	movs	r3, #0
 8002938:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800293a:	2300      	movs	r3, #0
 800293c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800293e:	4b7b      	ldr	r3, [pc, #492]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	f003 030c 	and.w	r3, r3, #12
 8002946:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002948:	4b78      	ldr	r3, [pc, #480]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800294a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800294c:	f003 0303 	and.w	r3, r3, #3
 8002950:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d005      	beq.n	8002964 <HAL_RCC_GetSysClockFreq+0x34>
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	2b0c      	cmp	r3, #12
 800295c:	d121      	bne.n	80029a2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d11e      	bne.n	80029a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8002964:	4b71      	ldr	r3, [pc, #452]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d107      	bne.n	8002980 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002970:	4b6e      	ldr	r3, [pc, #440]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002972:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002976:	0b1b      	lsrs	r3, r3, #12
 8002978:	f003 030f 	and.w	r3, r3, #15
 800297c:	627b      	str	r3, [r7, #36]	@ 0x24
 800297e:	e005      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002980:	4b6a      	ldr	r3, [pc, #424]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	0f1b      	lsrs	r3, r3, #28
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800298c:	4a68      	ldr	r2, [pc, #416]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x200>)
 800298e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002994:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d110      	bne.n	80029be <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800299c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80029a0:	e00d      	b.n	80029be <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029a2:	4b62      	ldr	r3, [pc, #392]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	f003 030c 	and.w	r3, r3, #12
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d102      	bne.n	80029b4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029ae:	4b61      	ldr	r3, [pc, #388]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x204>)
 80029b0:	623b      	str	r3, [r7, #32]
 80029b2:	e004      	b.n	80029be <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	d101      	bne.n	80029be <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029ba:	4b5e      	ldr	r3, [pc, #376]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x204>)
 80029bc:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	2b0c      	cmp	r3, #12
 80029c2:	f040 80ac 	bne.w	8002b1e <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80029c6:	4b59      	ldr	r3, [pc, #356]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80029c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80029d0:	4b56      	ldr	r3, [pc, #344]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80029d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d4:	0a1b      	lsrs	r3, r3, #8
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	3301      	adds	r3, #1
 80029dc:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80029de:	4b53      	ldr	r3, [pc, #332]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80029e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e2:	091b      	lsrs	r3, r3, #4
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80029ea:	4b50      	ldr	r3, [pc, #320]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80029ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ee:	08db      	lsrs	r3, r3, #3
 80029f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80029f4:	68ba      	ldr	r2, [r7, #8]
 80029f6:	fb02 f303 	mul.w	r3, r2, r3
 80029fa:	ee07 3a90 	vmov	s15, r3
 80029fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a02:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 8086 	beq.w	8002b1a <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d003      	beq.n	8002a1c <HAL_RCC_GetSysClockFreq+0xec>
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	d022      	beq.n	8002a60 <HAL_RCC_GetSysClockFreq+0x130>
 8002a1a:	e043      	b.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	ee07 3a90 	vmov	s15, r3
 8002a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a26:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8002b38 <HAL_RCC_GetSysClockFreq+0x208>
 8002a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a2e:	4b3f      	ldr	r3, [pc, #252]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a36:	ee07 3a90 	vmov	s15, r3
 8002a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002a3e:	ed97 6a01 	vldr	s12, [r7, #4]
 8002a42:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8002b3c <HAL_RCC_GetSysClockFreq+0x20c>
 8002a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002a4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a5a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002a5e:	e046      	b.n	8002aee <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	ee07 3a90 	vmov	s15, r3
 8002a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a6a:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8002b38 <HAL_RCC_GetSysClockFreq+0x208>
 8002a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a72:	4b2e      	ldr	r3, [pc, #184]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002a74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a7a:	ee07 3a90 	vmov	s15, r3
 8002a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002a82:	ed97 6a01 	vldr	s12, [r7, #4]
 8002a86:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8002b3c <HAL_RCC_GetSysClockFreq+0x20c>
 8002a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002a92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a9e:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002aa2:	e024      	b.n	8002aee <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa6:	ee07 3a90 	vmov	s15, r3
 8002aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	ee07 3a90 	vmov	s15, r3
 8002ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ab8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002abc:	4b1b      	ldr	r3, [pc, #108]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002abe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ac4:	ee07 3a90 	vmov	s15, r3
 8002ac8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002acc:	ed97 6a01 	vldr	s12, [r7, #4]
 8002ad0:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8002b3c <HAL_RCC_GetSysClockFreq+0x20c>
 8002ad4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ad8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002adc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ae0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ae4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ae8:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002aec:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002aee:	4b0f      	ldr	r3, [pc, #60]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002af2:	0e1b      	lsrs	r3, r3, #24
 8002af4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002af8:	3301      	adds	r3, #1
 8002afa:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	ee07 3a90 	vmov	s15, r3
 8002b02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b06:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b12:	ee17 3a90 	vmov	r3, s15
 8002b16:	623b      	str	r3, [r7, #32]
 8002b18:	e001      	b.n	8002b1e <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8002b1e:	6a3b      	ldr	r3, [r7, #32]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	372c      	adds	r7, #44	@ 0x2c
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	46020c00 	.word	0x46020c00
 8002b30:	080073f4 	.word	0x080073f4
 8002b34:	00f42400 	.word	0x00f42400
 8002b38:	4b742400 	.word	0x4b742400
 8002b3c:	46000000 	.word	0x46000000

08002b40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002b44:	f7ff fef4 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	4b07      	ldr	r3, [pc, #28]	@ (8002b68 <HAL_RCC_GetHCLKFreq+0x28>)
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	4906      	ldr	r1, [pc, #24]	@ (8002b6c <HAL_RCC_GetHCLKFreq+0x2c>)
 8002b54:	5ccb      	ldrb	r3, [r1, r3]
 8002b56:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5a:	4a05      	ldr	r2, [pc, #20]	@ (8002b70 <HAL_RCC_GetHCLKFreq+0x30>)
 8002b5c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8002b5e:	4b04      	ldr	r3, [pc, #16]	@ (8002b70 <HAL_RCC_GetHCLKFreq+0x30>)
 8002b60:	681b      	ldr	r3, [r3, #0]
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	46020c00 	.word	0x46020c00
 8002b6c:	080073dc 	.word	0x080073dc
 8002b70:	20000000 	.word	0x20000000

08002b74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8002b78:	f7ff ffe2 	bl	8002b40 <HAL_RCC_GetHCLKFreq>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	4b05      	ldr	r3, [pc, #20]	@ (8002b94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	091b      	lsrs	r3, r3, #4
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	4903      	ldr	r1, [pc, #12]	@ (8002b98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b8a:	5ccb      	ldrb	r3, [r1, r3]
 8002b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	46020c00 	.word	0x46020c00
 8002b98:	080073ec 	.word	0x080073ec

08002b9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8002ba0:	f7ff ffce 	bl	8002b40 <HAL_RCC_GetHCLKFreq>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	4b05      	ldr	r3, [pc, #20]	@ (8002bbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	0a1b      	lsrs	r3, r3, #8
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	4903      	ldr	r1, [pc, #12]	@ (8002bc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bb2:	5ccb      	ldrb	r3, [r1, r3]
 8002bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	46020c00 	.word	0x46020c00
 8002bc0:	080073ec 	.word	0x080073ec

08002bc4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8002bc8:	f7ff ffba 	bl	8002b40 <HAL_RCC_GetHCLKFreq>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	4b05      	ldr	r3, [pc, #20]	@ (8002be4 <HAL_RCC_GetPCLK3Freq+0x20>)
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd2:	091b      	lsrs	r3, r3, #4
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	4903      	ldr	r1, [pc, #12]	@ (8002be8 <HAL_RCC_GetPCLK3Freq+0x24>)
 8002bda:	5ccb      	ldrb	r3, [r1, r3]
 8002bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	46020c00 	.word	0x46020c00
 8002be8:	080073ec 	.word	0x080073ec

08002bec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002bf4:	4b3e      	ldr	r3, [pc, #248]	@ (8002cf0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c02:	f7fe fd49 	bl	8001698 <HAL_PWREx_GetVoltageRange>
 8002c06:	6178      	str	r0, [r7, #20]
 8002c08:	e019      	b.n	8002c3e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c0a:	4b39      	ldr	r3, [pc, #228]	@ (8002cf0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c10:	4a37      	ldr	r2, [pc, #220]	@ (8002cf0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002c12:	f043 0304 	orr.w	r3, r3, #4
 8002c16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002c1a:	4b35      	ldr	r3, [pc, #212]	@ (8002cf0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002c1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c28:	f7fe fd36 	bl	8001698 <HAL_PWREx_GetVoltageRange>
 8002c2c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c2e:	4b30      	ldr	r3, [pc, #192]	@ (8002cf0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c34:	4a2e      	ldr	r2, [pc, #184]	@ (8002cf0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002c36:	f023 0304 	bic.w	r3, r3, #4
 8002c3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002c44:	d003      	beq.n	8002c4e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c4c:	d109      	bne.n	8002c62 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c54:	d202      	bcs.n	8002c5c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8002c56:	2301      	movs	r3, #1
 8002c58:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002c5a:	e033      	b.n	8002cc4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002c60:	e030      	b.n	8002cc4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c68:	d208      	bcs.n	8002c7c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c70:	d102      	bne.n	8002c78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8002c72:	2303      	movs	r3, #3
 8002c74:	613b      	str	r3, [r7, #16]
 8002c76:	e025      	b.n	8002cc4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e035      	b.n	8002ce8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c82:	d90f      	bls.n	8002ca4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d109      	bne.n	8002c9e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002c90:	d902      	bls.n	8002c98 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8002c92:	2300      	movs	r3, #0
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	e015      	b.n	8002cc4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8002c98:	2301      	movs	r3, #1
 8002c9a:	613b      	str	r3, [r7, #16]
 8002c9c:	e012      	b.n	8002cc4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	613b      	str	r3, [r7, #16]
 8002ca2:	e00f      	b.n	8002cc4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002caa:	d109      	bne.n	8002cc0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cb2:	d102      	bne.n	8002cba <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	613b      	str	r3, [r7, #16]
 8002cb8:	e004      	b.n	8002cc4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8002cba:	2302      	movs	r3, #2
 8002cbc:	613b      	str	r3, [r7, #16]
 8002cbe:	e001      	b.n	8002cc4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f023 020f 	bic.w	r2, r3, #15
 8002ccc:	4909      	ldr	r1, [pc, #36]	@ (8002cf4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002cd4:	4b07      	ldr	r3, [pc, #28]	@ (8002cf4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 030f 	and.w	r3, r3, #15
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d001      	beq.n	8002ce6 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	46020c00 	.word	0x46020c00
 8002cf4:	40022000 	.word	0x40022000

08002cf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cfc:	b0c4      	sub	sp, #272	@ 0x110
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d04:	2300      	movs	r3, #0
 8002d06:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d18:	f002 0401 	and.w	r4, r2, #1
 8002d1c:	2500      	movs	r5, #0
 8002d1e:	ea54 0305 	orrs.w	r3, r4, r5
 8002d22:	d00b      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002d24:	4bd5      	ldr	r3, [pc, #852]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d2a:	f023 0103 	bic.w	r1, r3, #3
 8002d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d34:	4ad1      	ldr	r2, [pc, #836]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002d36:	430b      	orrs	r3, r1
 8002d38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d44:	f002 0802 	and.w	r8, r2, #2
 8002d48:	f04f 0900 	mov.w	r9, #0
 8002d4c:	ea58 0309 	orrs.w	r3, r8, r9
 8002d50:	d00b      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002d52:	4bca      	ldr	r3, [pc, #808]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d58:	f023 010c 	bic.w	r1, r3, #12
 8002d5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d62:	4ac6      	ldr	r2, [pc, #792]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002d64:	430b      	orrs	r3, r1
 8002d66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d72:	f002 0a04 	and.w	sl, r2, #4
 8002d76:	f04f 0b00 	mov.w	fp, #0
 8002d7a:	ea5a 030b 	orrs.w	r3, sl, fp
 8002d7e:	d00b      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002d80:	4bbe      	ldr	r3, [pc, #760]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d86:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002d8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d90:	4aba      	ldr	r2, [pc, #744]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002d92:	430b      	orrs	r3, r1
 8002d94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da0:	f002 0308 	and.w	r3, r2, #8
 8002da4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002da8:	2300      	movs	r3, #0
 8002daa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002dae:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002db2:	460b      	mov	r3, r1
 8002db4:	4313      	orrs	r3, r2
 8002db6:	d00b      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002db8:	4bb0      	ldr	r3, [pc, #704]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dbe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc8:	4aac      	ldr	r2, [pc, #688]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002dca:	430b      	orrs	r3, r1
 8002dcc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002dd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd8:	f002 0310 	and.w	r3, r2, #16
 8002ddc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002de0:	2300      	movs	r3, #0
 8002de2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002de6:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002dea:	460b      	mov	r3, r1
 8002dec:	4313      	orrs	r3, r2
 8002dee:	d00b      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002df0:	4ba2      	ldr	r3, [pc, #648]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002df6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002dfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e00:	4a9e      	ldr	r2, [pc, #632]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e02:	430b      	orrs	r3, r1
 8002e04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e10:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8002e14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002e1e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002e22:	460b      	mov	r3, r1
 8002e24:	4313      	orrs	r3, r2
 8002e26:	d00b      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8002e28:	4b94      	ldr	r3, [pc, #592]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e2a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002e2e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002e32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e38:	4a90      	ldr	r2, [pc, #576]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e3a:	430b      	orrs	r3, r1
 8002e3c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e48:	f002 0320 	and.w	r3, r2, #32
 8002e4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002e50:	2300      	movs	r3, #0
 8002e52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002e56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	d00b      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002e60:	4b86      	ldr	r3, [pc, #536]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e66:	f023 0107 	bic.w	r1, r3, #7
 8002e6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e70:	4a82      	ldr	r2, [pc, #520]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e72:	430b      	orrs	r3, r1
 8002e74:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e80:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8002e84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002e8e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4313      	orrs	r3, r2
 8002e96:	d00b      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002e98:	4b78      	ldr	r3, [pc, #480]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e9e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8002ea2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ea6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ea8:	4a74      	ldr	r2, [pc, #464]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002eaa:	430b      	orrs	r3, r1
 8002eac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002eb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8002ebc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002ec6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002eca:	460b      	mov	r3, r1
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	d00b      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002ed0:	4b6a      	ldr	r3, [pc, #424]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ed6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee0:	4a66      	ldr	r2, [pc, #408]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002ee2:	430b      	orrs	r3, r1
 8002ee4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef0:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8002ef4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002ef8:	2300      	movs	r3, #0
 8002efa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002efe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4313      	orrs	r3, r2
 8002f06:	d00b      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8002f08:	4b5c      	ldr	r3, [pc, #368]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f0e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002f12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f18:	4a58      	ldr	r2, [pc, #352]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f1a:	430b      	orrs	r3, r1
 8002f1c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f28:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002f2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f30:	2300      	movs	r3, #0
 8002f32:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002f36:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	d00b      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8002f40:	4b4e      	ldr	r3, [pc, #312]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f46:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8002f4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f50:	4a4a      	ldr	r2, [pc, #296]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f52:	430b      	orrs	r3, r1
 8002f54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8002f58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f60:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8002f64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002f68:	2300      	movs	r3, #0
 8002f6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f6e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4313      	orrs	r3, r2
 8002f76:	d00b      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8002f78:	4b40      	ldr	r3, [pc, #256]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f7a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002f7e:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8002f82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f88:	4a3c      	ldr	r2, [pc, #240]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f8a:	430b      	orrs	r3, r1
 8002f8c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8002f90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f98:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8002f9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002fa6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002faa:	460b      	mov	r3, r1
 8002fac:	4313      	orrs	r3, r2
 8002fae:	d00c      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8002fb0:	4b32      	ldr	r3, [pc, #200]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002fb2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002fb6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fc2:	4a2e      	ldr	r2, [pc, #184]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002fc4:	430b      	orrs	r3, r1
 8002fc6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002fca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd2:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8002fd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002fda:	2300      	movs	r3, #0
 8002fdc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002fe0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	d00c      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8002fea:	4b24      	ldr	r3, [pc, #144]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002fec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ff0:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8002ff4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ffc:	4a1f      	ldr	r2, [pc, #124]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002ffe:	430b      	orrs	r3, r1
 8003000:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003004:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800300c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003010:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003014:	2300      	movs	r3, #0
 8003016:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800301a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800301e:	460b      	mov	r3, r1
 8003020:	4313      	orrs	r3, r2
 8003022:	d00c      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003024:	4b15      	ldr	r3, [pc, #84]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800302a:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800302e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003036:	4a11      	ldr	r2, [pc, #68]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003038:	430b      	orrs	r3, r1
 800303a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800303e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003046:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800304a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800304e:	2300      	movs	r3, #0
 8003050:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003054:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003058:	460b      	mov	r3, r1
 800305a:	4313      	orrs	r3, r2
 800305c:	d010      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800305e:	4b07      	ldr	r3, [pc, #28]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003060:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003064:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800306c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003070:	4a02      	ldr	r2, [pc, #8]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003072:	430b      	orrs	r3, r1
 8003074:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003078:	e002      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800307a:	bf00      	nop
 800307c:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003080:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003088:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800308c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003090:	2300      	movs	r3, #0
 8003092:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003096:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800309a:	460b      	mov	r3, r1
 800309c:	4313      	orrs	r3, r2
 800309e:	d04c      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80030a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80030a8:	2b80      	cmp	r3, #128	@ 0x80
 80030aa:	d02d      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80030ac:	2b80      	cmp	r3, #128	@ 0x80
 80030ae:	d827      	bhi.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80030b0:	2b60      	cmp	r3, #96	@ 0x60
 80030b2:	d02b      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x414>
 80030b4:	2b60      	cmp	r3, #96	@ 0x60
 80030b6:	d823      	bhi.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80030b8:	2b40      	cmp	r3, #64	@ 0x40
 80030ba:	d006      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 80030bc:	2b40      	cmp	r3, #64	@ 0x40
 80030be:	d81f      	bhi.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d009      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80030c4:	2b20      	cmp	r3, #32
 80030c6:	d011      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80030c8:	e01a      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80030ca:	4bbe      	ldr	r3, [pc, #760]	@ (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ce:	4abd      	ldr	r2, [pc, #756]	@ (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030d4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80030d6:	e01a      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80030d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030dc:	3308      	adds	r3, #8
 80030de:	4618      	mov	r0, r3
 80030e0:	f002 fc5c 	bl	800599c <RCCEx_PLL2_Config>
 80030e4:	4603      	mov	r3, r0
 80030e6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80030ea:	e010      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80030ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030f0:	332c      	adds	r3, #44	@ 0x2c
 80030f2:	4618      	mov	r0, r3
 80030f4:	f002 fcea 	bl	8005acc <RCCEx_PLL3_Config>
 80030f8:	4603      	mov	r3, r0
 80030fa:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80030fe:	e006      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8003106:	e002      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8003108:	bf00      	nop
 800310a:	e000      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800310c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800310e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10d      	bne.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003116:	4bab      	ldr	r3, [pc, #684]	@ (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003118:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800311c:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8003120:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003124:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003128:	4aa6      	ldr	r2, [pc, #664]	@ (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800312a:	430b      	orrs	r3, r1
 800312c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003130:	e003      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003132:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003136:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800313a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800313e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003142:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003146:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800314a:	2300      	movs	r3, #0
 800314c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003150:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003154:	460b      	mov	r3, r1
 8003156:	4313      	orrs	r3, r2
 8003158:	d053      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800315a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800315e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003162:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003166:	d033      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8003168:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800316c:	d82c      	bhi.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800316e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003172:	d02f      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8003174:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003178:	d826      	bhi.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800317a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800317e:	d008      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8003180:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003184:	d820      	bhi.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00a      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800318a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800318e:	d011      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003190:	e01a      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003192:	4b8c      	ldr	r3, [pc, #560]	@ (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003196:	4a8b      	ldr	r2, [pc, #556]	@ (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003198:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800319c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800319e:	e01a      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80031a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031a4:	3308      	adds	r3, #8
 80031a6:	4618      	mov	r0, r3
 80031a8:	f002 fbf8 	bl	800599c <RCCEx_PLL2_Config>
 80031ac:	4603      	mov	r3, r0
 80031ae:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80031b2:	e010      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80031b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031b8:	332c      	adds	r3, #44	@ 0x2c
 80031ba:	4618      	mov	r0, r3
 80031bc:	f002 fc86 	bl	8005acc <RCCEx_PLL3_Config>
 80031c0:	4603      	mov	r3, r0
 80031c2:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80031c6:	e006      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80031ce:	e002      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 80031d0:	bf00      	nop
 80031d2:	e000      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 80031d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031d6:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10d      	bne.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80031de:	4b79      	ldr	r3, [pc, #484]	@ (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80031e4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80031e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80031f0:	4a74      	ldr	r2, [pc, #464]	@ (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031f2:	430b      	orrs	r3, r1
 80031f4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80031f8:	e003      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031fa:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80031fe:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800320a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800320e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003210:	2300      	movs	r3, #0
 8003212:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003214:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003218:	460b      	mov	r3, r1
 800321a:	4313      	orrs	r3, r2
 800321c:	d046      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800321e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003222:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003226:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800322a:	d028      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x586>
 800322c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003230:	d821      	bhi.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8003232:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003236:	d022      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003238:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800323c:	d81b      	bhi.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 800323e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003242:	d01c      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003244:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003248:	d815      	bhi.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 800324a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800324e:	d008      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8003250:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003254:	d80f      	bhi.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8003256:	2b00      	cmp	r3, #0
 8003258:	d011      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x586>
 800325a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800325e:	d00e      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003260:	e009      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003266:	3308      	adds	r3, #8
 8003268:	4618      	mov	r0, r3
 800326a:	f002 fb97 	bl	800599c <RCCEx_PLL2_Config>
 800326e:	4603      	mov	r3, r0
 8003270:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8003274:	e004      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x588>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800327c:	e000      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x588>
        break;
 800327e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003280:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10d      	bne.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003288:	4b4e      	ldr	r3, [pc, #312]	@ (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800328a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800328e:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003292:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003296:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800329a:	4a4a      	ldr	r2, [pc, #296]	@ (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800329c:	430b      	orrs	r3, r1
 800329e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80032a2:	e003      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032a4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80032a8:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80032ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80032b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80032ba:	2300      	movs	r3, #0
 80032bc:	677b      	str	r3, [r7, #116]	@ 0x74
 80032be:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80032c2:	460b      	mov	r3, r1
 80032c4:	4313      	orrs	r3, r2
 80032c6:	d03f      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80032c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032d0:	2b04      	cmp	r3, #4
 80032d2:	d81e      	bhi.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x61a>
 80032d4:	a201      	add	r2, pc, #4	@ (adr r2, 80032dc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80032d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032da:	bf00      	nop
 80032dc:	0800331b 	.word	0x0800331b
 80032e0:	080032f1 	.word	0x080032f1
 80032e4:	080032ff 	.word	0x080032ff
 80032e8:	0800331b 	.word	0x0800331b
 80032ec:	0800331b 	.word	0x0800331b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80032f0:	4b34      	ldr	r3, [pc, #208]	@ (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f4:	4a33      	ldr	r2, [pc, #204]	@ (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032fa:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80032fc:	e00e      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80032fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003302:	332c      	adds	r3, #44	@ 0x2c
 8003304:	4618      	mov	r0, r3
 8003306:	f002 fbe1 	bl	8005acc <RCCEx_PLL3_Config>
 800330a:	4603      	mov	r3, r0
 800330c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8003310:	e004      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8003318:	e000      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x624>
        break;
 800331a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800331c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10d      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8003324:	4b27      	ldr	r3, [pc, #156]	@ (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003326:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800332a:	f023 0107 	bic.w	r1, r3, #7
 800332e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003332:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003336:	4a23      	ldr	r2, [pc, #140]	@ (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003338:	430b      	orrs	r3, r1
 800333a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800333e:	e003      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x650>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003340:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003344:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003348:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800334c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003350:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003354:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003356:	2300      	movs	r3, #0
 8003358:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800335a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800335e:	460b      	mov	r3, r1
 8003360:	4313      	orrs	r3, r2
 8003362:	d04c      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x706>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003364:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003368:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800336c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003370:	d02a      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8003372:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003376:	d821      	bhi.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8003378:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800337c:	d026      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 800337e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003382:	d81b      	bhi.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8003384:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003388:	d00e      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800338a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800338e:	d815      	bhi.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8003390:	2b00      	cmp	r3, #0
 8003392:	d01d      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8003394:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003398:	d110      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800339a:	4b0a      	ldr	r3, [pc, #40]	@ (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800339c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339e:	4a09      	ldr	r2, [pc, #36]	@ (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033a4:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80033a6:	e014      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80033a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033ac:	332c      	adds	r3, #44	@ 0x2c
 80033ae:	4618      	mov	r0, r3
 80033b0:	f002 fb8c 	bl	8005acc <RCCEx_PLL3_Config>
 80033b4:	4603      	mov	r3, r0
 80033b6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80033ba:	e00a      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80033c2:	e006      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x6da>
 80033c4:	46020c00 	.word	0x46020c00
        break;
 80033c8:	bf00      	nop
 80033ca:	e002      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 80033cc:	bf00      	nop
 80033ce:	e000      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 80033d0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80033d2:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10d      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80033da:	4baf      	ldr	r3, [pc, #700]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80033dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80033e0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80033e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033ec:	4aaa      	ldr	r2, [pc, #680]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80033ee:	430b      	orrs	r3, r1
 80033f0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80033f4:	e003      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x706>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f6:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80033fa:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003406:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800340a:	663b      	str	r3, [r7, #96]	@ 0x60
 800340c:	2300      	movs	r3, #0
 800340e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003410:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003414:	460b      	mov	r3, r1
 8003416:	4313      	orrs	r3, r2
 8003418:	f000 80b5 	beq.w	8003586 <HAL_RCCEx_PeriphCLKConfig+0x88e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800341c:	2300      	movs	r3, #0
 800341e:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003422:	4b9d      	ldr	r3, [pc, #628]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003424:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	d113      	bne.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x760>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003430:	4b99      	ldr	r3, [pc, #612]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003432:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003436:	4a98      	ldr	r2, [pc, #608]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003438:	f043 0304 	orr.w	r3, r3, #4
 800343c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003440:	4b95      	ldr	r3, [pc, #596]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003442:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800344e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
      pwrclkchanged = SET;
 8003452:	2301      	movs	r3, #1
 8003454:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003458:	4b90      	ldr	r3, [pc, #576]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 800345a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800345c:	4a8f      	ldr	r2, [pc, #572]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003464:	f7fd fd66 	bl	8000f34 <HAL_GetTick>
 8003468:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800346c:	e00b      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x78e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800346e:	f7fd fd61 	bl	8000f34 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d903      	bls.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        ret = HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8003484:	e005      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x79a>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003486:	4b85      	ldr	r3, [pc, #532]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8003488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0ed      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x776>
      }
    }

    if (ret == HAL_OK)
 8003492:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003496:	2b00      	cmp	r3, #0
 8003498:	d165      	bne.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800349a:	4b7f      	ldr	r3, [pc, #508]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800349c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034a4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80034a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d023      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x800>
 80034b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034b4:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80034b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034bc:	4293      	cmp	r3, r2
 80034be:	d01b      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x800>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034c0:	4b75      	ldr	r3, [pc, #468]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80034c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034ca:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034ce:	4b72      	ldr	r3, [pc, #456]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80034d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034d4:	4a70      	ldr	r2, [pc, #448]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80034d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034de:	4b6e      	ldr	r3, [pc, #440]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80034e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034e4:	4a6c      	ldr	r2, [pc, #432]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80034e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034ee:	4a6a      	ldr	r2, [pc, #424]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80034f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034f4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b00      	cmp	r3, #0
 8003502:	d019      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x840>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003504:	f7fd fd16 	bl	8000f34 <HAL_GetTick>
 8003508:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800350c:	e00d      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x832>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800350e:	f7fd fd11 	bl	8000f34 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003518:	1ad2      	subs	r2, r2, r3
 800351a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800351e:	429a      	cmp	r2, r3
 8003520:	d903      	bls.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x832>
          {
            ret = HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
            break;
 8003528:	e006      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x840>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800352a:	4b5b      	ldr	r3, [pc, #364]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800352c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0ea      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x816>
          }
        }
      }

      if (ret == HAL_OK)
 8003538:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10d      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x864>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003540:	4b55      	ldr	r3, [pc, #340]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003542:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003546:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800354a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800354e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8003552:	4a51      	ldr	r2, [pc, #324]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003554:	430b      	orrs	r3, r1
 8003556:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800355a:	e008      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800355c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003560:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
 8003564:	e003      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003566:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800356a:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800356e:	f897 3109 	ldrb.w	r3, [r7, #265]	@ 0x109
 8003572:	2b01      	cmp	r3, #1
 8003574:	d107      	bne.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x88e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003576:	4b48      	ldr	r3, [pc, #288]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003578:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800357c:	4a46      	ldr	r2, [pc, #280]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800357e:	f023 0304 	bic.w	r3, r3, #4
 8003582:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8003586:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800358a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358e:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003592:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003594:	2300      	movs	r3, #0
 8003596:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003598:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800359c:	460b      	mov	r3, r1
 800359e:	4313      	orrs	r3, r2
 80035a0:	d042      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80035a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80035aa:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80035ae:	d022      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 80035b0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80035b4:	d81b      	bhi.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 80035b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035ba:	d011      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 80035bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035c0:	d815      	bhi.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d019      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x902>
 80035c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035ca:	d110      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80035cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035d0:	3308      	adds	r3, #8
 80035d2:	4618      	mov	r0, r3
 80035d4:	f002 f9e2 	bl	800599c <RCCEx_PLL2_Config>
 80035d8:	4603      	mov	r3, r0
 80035da:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80035de:	e00d      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035e0:	4b2d      	ldr	r3, [pc, #180]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80035e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e4:	4a2c      	ldr	r2, [pc, #176]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80035e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035ea:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80035ec:	e006      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80035f4:	e002      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 80035f6:	bf00      	nop
 80035f8:	e000      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 80035fa:	bf00      	nop
    }
    if (ret == HAL_OK)
 80035fc:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10d      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x928>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8003604:	4b24      	ldr	r3, [pc, #144]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800360a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800360e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003612:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003616:	4a20      	ldr	r2, [pc, #128]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003618:	430b      	orrs	r3, r1
 800361a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800361e:	e003      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003620:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003624:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003628:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800362c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003630:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003634:	653b      	str	r3, [r7, #80]	@ 0x50
 8003636:	2300      	movs	r3, #0
 8003638:	657b      	str	r3, [r7, #84]	@ 0x54
 800363a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800363e:	460b      	mov	r3, r1
 8003640:	4313      	orrs	r3, r2
 8003642:	d031      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003644:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003648:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800364c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003650:	d00b      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x972>
 8003652:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003656:	d804      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003658:	2b00      	cmp	r3, #0
 800365a:	d008      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x976>
 800365c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003660:	d007      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x97a>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8003668:	e004      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 800366a:	bf00      	nop
 800366c:	e002      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 800366e:	bf00      	nop
 8003670:	e000      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8003672:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003674:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003678:	2b00      	cmp	r3, #0
 800367a:	d111      	bne.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800367c:	4b06      	ldr	r3, [pc, #24]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800367e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003682:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003686:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800368a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800368e:	4a02      	ldr	r2, [pc, #8]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003690:	430b      	orrs	r3, r1
 8003692:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003696:	e007      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 8003698:	46020c00 	.word	0x46020c00
 800369c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80036a4:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 80036a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b0:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80036b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036b6:	2300      	movs	r3, #0
 80036b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036ba:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80036be:	460b      	mov	r3, r1
 80036c0:	4313      	orrs	r3, r2
 80036c2:	d00c      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 80036c4:	4bb2      	ldr	r3, [pc, #712]	@ (8003990 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80036c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80036ca:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 80036ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80036d6:	4aae      	ldr	r2, [pc, #696]	@ (8003990 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80036d8:	430b      	orrs	r3, r1
 80036da:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80036de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80036ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80036ec:	2300      	movs	r3, #0
 80036ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80036f0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80036f4:	460b      	mov	r3, r1
 80036f6:	4313      	orrs	r3, r2
 80036f8:	d019      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80036fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003702:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003706:	d105      	bne.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003708:	4ba1      	ldr	r3, [pc, #644]	@ (8003990 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800370a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800370c:	4aa0      	ldr	r2, [pc, #640]	@ (8003990 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800370e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003712:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8003714:	4b9e      	ldr	r3, [pc, #632]	@ (8003990 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003716:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800371a:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800371e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003722:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003726:	4a9a      	ldr	r2, [pc, #616]	@ (8003990 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003728:	430b      	orrs	r3, r1
 800372a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800372e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003736:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800373a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800373c:	2300      	movs	r3, #0
 800373e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003740:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003744:	460b      	mov	r3, r1
 8003746:	4313      	orrs	r3, r2
 8003748:	d00c      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800374a:	4b91      	ldr	r3, [pc, #580]	@ (8003990 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800374c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003750:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003754:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003758:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800375c:	4a8c      	ldr	r2, [pc, #560]	@ (8003990 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800375e:	430b      	orrs	r3, r1
 8003760:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003770:	633b      	str	r3, [r7, #48]	@ 0x30
 8003772:	2300      	movs	r3, #0
 8003774:	637b      	str	r3, [r7, #52]	@ 0x34
 8003776:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800377a:	460b      	mov	r3, r1
 800377c:	4313      	orrs	r3, r2
 800377e:	d00c      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003780:	4b83      	ldr	r3, [pc, #524]	@ (8003990 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003786:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800378a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800378e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003792:	4a7f      	ldr	r2, [pc, #508]	@ (8003990 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003794:	430b      	orrs	r3, r1
 8003796:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800379a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800379e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a2:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80037a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037a8:	2300      	movs	r3, #0
 80037aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037ac:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80037b0:	460b      	mov	r3, r1
 80037b2:	4313      	orrs	r3, r2
 80037b4:	d00c      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80037b6:	4b76      	ldr	r3, [pc, #472]	@ (8003990 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80037b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80037bc:	f023 0218 	bic.w	r2, r3, #24
 80037c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037c4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80037c8:	4971      	ldr	r1, [pc, #452]	@ (8003990 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80037d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d8:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80037dc:	623b      	str	r3, [r7, #32]
 80037de:	2300      	movs	r3, #0
 80037e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80037e2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80037e6:	460b      	mov	r3, r1
 80037e8:	4313      	orrs	r3, r2
 80037ea:	d032      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80037ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037f0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80037f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037f8:	d105      	bne.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037fa:	4b65      	ldr	r3, [pc, #404]	@ (8003990 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80037fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037fe:	4a64      	ldr	r2, [pc, #400]	@ (8003990 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003800:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003804:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8003806:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800380a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800380e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003812:	d108      	bne.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003814:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003818:	3308      	adds	r3, #8
 800381a:	4618      	mov	r0, r3
 800381c:	f002 f8be 	bl	800599c <RCCEx_PLL2_Config>
 8003820:	4603      	mov	r3, r0
 8003822:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
    }
    if (ret == HAL_OK)
 8003826:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10d      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0xb52>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800382e:	4b58      	ldr	r3, [pc, #352]	@ (8003990 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003830:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003834:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003838:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800383c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003840:	4953      	ldr	r1, [pc, #332]	@ (8003990 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003842:	4313      	orrs	r3, r2
 8003844:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003848:	e003      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800384a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800384e:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 8003852:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385a:	2100      	movs	r1, #0
 800385c:	61b9      	str	r1, [r7, #24]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	61fb      	str	r3, [r7, #28]
 8003864:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003868:	460b      	mov	r3, r1
 800386a:	4313      	orrs	r3, r2
 800386c:	d04a      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800386e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003872:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003876:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800387a:	d01e      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 800387c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003880:	d825      	bhi.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 8003882:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003886:	d00e      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8003888:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800388c:	d81f      	bhi.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 800388e:	2b00      	cmp	r3, #0
 8003890:	d021      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 8003892:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003896:	d11a      	bne.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003898:	4b3d      	ldr	r3, [pc, #244]	@ (8003990 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800389a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800389c:	4a3c      	ldr	r2, [pc, #240]	@ (8003990 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800389e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038a2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80038a4:	e018      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80038a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038aa:	3308      	adds	r3, #8
 80038ac:	4618      	mov	r0, r3
 80038ae:	f002 f875 	bl	800599c <RCCEx_PLL2_Config>
 80038b2:	4603      	mov	r3, r0
 80038b4:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80038b8:	e00e      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80038ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038be:	332c      	adds	r3, #44	@ 0x2c
 80038c0:	4618      	mov	r0, r3
 80038c2:	f002 f903 	bl	8005acc <RCCEx_PLL3_Config>
 80038c6:	4603      	mov	r3, r0
 80038c8:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80038cc:	e004      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      default:
        ret = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80038d4:	e000      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        break;
 80038d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038d8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10d      	bne.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xc04>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 80038e0:	4b2b      	ldr	r3, [pc, #172]	@ (8003990 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80038e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80038e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80038ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038ee:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80038f2:	4927      	ldr	r1, [pc, #156]	@ (8003990 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80038fa:	e003      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038fc:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003900:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8003904:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390c:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8003910:	613b      	str	r3, [r7, #16]
 8003912:	2300      	movs	r3, #0
 8003914:	617b      	str	r3, [r7, #20]
 8003916:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800391a:	460b      	mov	r3, r1
 800391c:	4313      	orrs	r3, r2
 800391e:	d03d      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0xca4>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8003920:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003924:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003928:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800392c:	d00e      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800392e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003932:	d815      	bhi.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003934:	2b00      	cmp	r3, #0
 8003936:	d017      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003938:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800393c:	d110      	bne.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0xc68>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800393e:	4b14      	ldr	r3, [pc, #80]	@ (8003990 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003942:	4a13      	ldr	r2, [pc, #76]	@ (8003990 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003944:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003948:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800394a:	e00e      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xc72>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800394c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003950:	3308      	adds	r3, #8
 8003952:	4618      	mov	r0, r3
 8003954:	f002 f822 	bl	800599c <RCCEx_PLL2_Config>
 8003958:	4603      	mov	r3, r0
 800395a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800395e:	e004      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xc72>
      default:
        ret = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8003966:	e000      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xc72>
        break;
 8003968:	bf00      	nop
    }
    if (ret == HAL_OK)
 800396a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800396e:	2b00      	cmp	r3, #0
 8003970:	d110      	bne.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8003972:	4b07      	ldr	r3, [pc, #28]	@ (8003990 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003978:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800397c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003980:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003984:	4902      	ldr	r1, [pc, #8]	@ (8003990 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800398c:	e006      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0xca4>
 800398e:	bf00      	nop
 8003990:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003994:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003998:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800399c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80039a8:	60bb      	str	r3, [r7, #8]
 80039aa:	2300      	movs	r3, #0
 80039ac:	60fb      	str	r3, [r7, #12]
 80039ae:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80039b2:	460b      	mov	r3, r1
 80039b4:	4313      	orrs	r3, r2
 80039b6:	d00c      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0xcda>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80039b8:	4b2c      	ldr	r3, [pc, #176]	@ (8003a6c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80039ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80039be:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80039c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039c6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80039ca:	4928      	ldr	r1, [pc, #160]	@ (8003a6c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 80039d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039da:	2100      	movs	r1, #0
 80039dc:	6039      	str	r1, [r7, #0]
 80039de:	f003 0308 	and.w	r3, r3, #8
 80039e2:	607b      	str	r3, [r7, #4]
 80039e4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80039e8:	460b      	mov	r3, r1
 80039ea:	4313      	orrs	r3, r2
 80039ec:	d036      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 80039ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80039f6:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80039fa:	d00d      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80039fc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003a00:	d811      	bhi.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8003a02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a06:	d012      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003a08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a0c:	d80b      	bhi.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00d      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003a12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a16:	d106      	bne.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003a18:	4b14      	ldr	r3, [pc, #80]	@ (8003a6c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8003a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a1c:	4a13      	ldr	r2, [pc, #76]	@ (8003a6c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8003a1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a22:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8003a24:	e004      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xd38>

      default:
        ret = HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8003a2c:	e000      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xd38>
        break;
 8003a2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a30:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10d      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8003a38:	4b0c      	ldr	r3, [pc, #48]	@ (8003a6c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8003a3a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003a3e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003a42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a46:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003a4a:	4908      	ldr	r1, [pc, #32]	@ (8003a6c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003a52:	e003      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0xd64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a54:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003a58:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8003a5c:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8003a66:	46bd      	mov	sp, r7
 8003a68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a6c:	46020c00 	.word	0x46020c00

08003a70 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b089      	sub	sp, #36	@ 0x24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003a78:	4bad      	ldr	r3, [pc, #692]	@ (8003d30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a80:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003a82:	4bab      	ldr	r3, [pc, #684]	@ (8003d30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003a8c:	4ba8      	ldr	r3, [pc, #672]	@ (8003d30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a90:	0a1b      	lsrs	r3, r3, #8
 8003a92:	f003 030f 	and.w	r3, r3, #15
 8003a96:	3301      	adds	r3, #1
 8003a98:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003a9a:	4ba5      	ldr	r3, [pc, #660]	@ (8003d30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a9e:	091b      	lsrs	r3, r3, #4
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003aa6:	4ba2      	ldr	r3, [pc, #648]	@ (8003d30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aaa:	08db      	lsrs	r3, r3, #3
 8003aac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	fb02 f303 	mul.w	r3, r2, r3
 8003ab6:	ee07 3a90 	vmov	s15, r3
 8003aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003abe:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 8123 	beq.w	8003d10 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	2b03      	cmp	r3, #3
 8003ace:	d062      	beq.n	8003b96 <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	2b03      	cmp	r3, #3
 8003ad4:	f200 8081 	bhi.w	8003bda <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d024      	beq.n	8003b28 <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d17a      	bne.n	8003bda <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	ee07 3a90 	vmov	s15, r3
 8003aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aee:	eddf 6a91 	vldr	s13, [pc, #580]	@ 8003d34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8003af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003af6:	4b8e      	ldr	r3, [pc, #568]	@ (8003d30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003afe:	ee07 3a90 	vmov	s15, r3
 8003b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b06:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b0a:	eddf 5a8b 	vldr	s11, [pc, #556]	@ 8003d38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b26:	e08f      	b.n	8003c48 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003b28:	4b81      	ldr	r3, [pc, #516]	@ (8003d30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d005      	beq.n	8003b40 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 8003b34:	4b7e      	ldr	r3, [pc, #504]	@ (8003d30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	0f1b      	lsrs	r3, r3, #28
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	e006      	b.n	8003b4e <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 8003b40:	4b7b      	ldr	r3, [pc, #492]	@ (8003d30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003b42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003b46:	041b      	lsls	r3, r3, #16
 8003b48:	0f1b      	lsrs	r3, r3, #28
 8003b4a:	f003 030f 	and.w	r3, r3, #15
 8003b4e:	4a7b      	ldr	r2, [pc, #492]	@ (8003d3c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8003b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b54:	ee07 3a90 	vmov	s15, r3
 8003b58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	ee07 3a90 	vmov	s15, r3
 8003b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	ee07 3a90 	vmov	s15, r3
 8003b70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b74:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b78:	eddf 5a6f 	vldr	s11, [pc, #444]	@ 8003d38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003b7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b88:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003b8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b90:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b94:	e058      	b.n	8003c48 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	ee07 3a90 	vmov	s15, r3
 8003b9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ba0:	eddf 6a64 	vldr	s13, [pc, #400]	@ 8003d34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8003ba4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ba8:	4b61      	ldr	r3, [pc, #388]	@ (8003d30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003baa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bb0:	ee07 3a90 	vmov	s15, r3
 8003bb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003bb8:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bbc:	eddf 5a5e 	vldr	s11, [pc, #376]	@ 8003d38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003bc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003bc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003bc8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003bd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bd4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bd8:	e036      	b.n	8003c48 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003bda:	4b55      	ldr	r3, [pc, #340]	@ (8003d30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d005      	beq.n	8003bf2 <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 8003be6:	4b52      	ldr	r3, [pc, #328]	@ (8003d30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	0f1b      	lsrs	r3, r3, #28
 8003bec:	f003 030f 	and.w	r3, r3, #15
 8003bf0:	e006      	b.n	8003c00 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 8003bf2:	4b4f      	ldr	r3, [pc, #316]	@ (8003d30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003bf4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003bf8:	041b      	lsls	r3, r3, #16
 8003bfa:	0f1b      	lsrs	r3, r3, #28
 8003bfc:	f003 030f 	and.w	r3, r3, #15
 8003c00:	4a4e      	ldr	r2, [pc, #312]	@ (8003d3c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8003c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c06:	ee07 3a90 	vmov	s15, r3
 8003c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	ee07 3a90 	vmov	s15, r3
 8003c14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	ee07 3a90 	vmov	s15, r3
 8003c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c26:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c2a:	eddf 5a43 	vldr	s11, [pc, #268]	@ 8003d38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c46:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003c48:	4b39      	ldr	r3, [pc, #228]	@ (8003d30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d017      	beq.n	8003c84 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003c54:	4b36      	ldr	r3, [pc, #216]	@ (8003d30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003c56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c58:	0a5b      	lsrs	r3, r3, #9
 8003c5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c5e:	ee07 3a90 	vmov	s15, r3
 8003c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8003c66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c6a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003c6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c7a:	ee17 2a90 	vmov	r2, s15
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	e002      	b.n	8003c8a <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8003c8a:	4b29      	ldr	r3, [pc, #164]	@ (8003d30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d017      	beq.n	8003cc6 <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003c96:	4b26      	ldr	r3, [pc, #152]	@ (8003d30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003c98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c9a:	0c1b      	lsrs	r3, r3, #16
 8003c9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ca0:	ee07 3a90 	vmov	s15, r3
 8003ca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003ca8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003cac:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003cb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cbc:	ee17 2a90 	vmov	r2, s15
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	605a      	str	r2, [r3, #4]
 8003cc4:	e002      	b.n	8003ccc <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8003ccc:	4b18      	ldr	r3, [pc, #96]	@ (8003d30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d017      	beq.n	8003d08 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003cd8:	4b15      	ldr	r3, [pc, #84]	@ (8003d30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cdc:	0e1b      	lsrs	r3, r3, #24
 8003cde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ce2:	ee07 3a90 	vmov	s15, r3
 8003ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8003cea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003cee:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003cf2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cfe:	ee17 2a90 	vmov	r2, s15
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003d06:	e00c      	b.n	8003d22 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	609a      	str	r2, [r3, #8]
}
 8003d0e:	e008      	b.n	8003d22 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	609a      	str	r2, [r3, #8]
}
 8003d22:	bf00      	nop
 8003d24:	3724      	adds	r7, #36	@ 0x24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	46020c00 	.word	0x46020c00
 8003d34:	4b742400 	.word	0x4b742400
 8003d38:	46000000 	.word	0x46000000
 8003d3c:	080073f4 	.word	0x080073f4

08003d40 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b089      	sub	sp, #36	@ 0x24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003d48:	4bad      	ldr	r3, [pc, #692]	@ (8004000 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d50:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003d52:	4bab      	ldr	r3, [pc, #684]	@ (8004000 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d56:	f003 0303 	and.w	r3, r3, #3
 8003d5a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8003d5c:	4ba8      	ldr	r3, [pc, #672]	@ (8004000 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d60:	0a1b      	lsrs	r3, r3, #8
 8003d62:	f003 030f 	and.w	r3, r3, #15
 8003d66:	3301      	adds	r3, #1
 8003d68:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8003d6a:	4ba5      	ldr	r3, [pc, #660]	@ (8004000 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d6e:	091b      	lsrs	r3, r3, #4
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003d76:	4ba2      	ldr	r3, [pc, #648]	@ (8004000 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d7a:	08db      	lsrs	r3, r3, #3
 8003d7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	fb02 f303 	mul.w	r3, r2, r3
 8003d86:	ee07 3a90 	vmov	s15, r3
 8003d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d8e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 8123 	beq.w	8003fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2b03      	cmp	r3, #3
 8003d9e:	d062      	beq.n	8003e66 <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	2b03      	cmp	r3, #3
 8003da4:	f200 8081 	bhi.w	8003eaa <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d024      	beq.n	8003df8 <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d17a      	bne.n	8003eaa <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	ee07 3a90 	vmov	s15, r3
 8003dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dbe:	eddf 6a91 	vldr	s13, [pc, #580]	@ 8004004 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dc6:	4b8e      	ldr	r3, [pc, #568]	@ (8004000 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dce:	ee07 3a90 	vmov	s15, r3
 8003dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003dd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dda:	eddf 5a8b 	vldr	s11, [pc, #556]	@ 8004008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003de6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003df2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003df6:	e08f      	b.n	8003f18 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003df8:	4b81      	ldr	r3, [pc, #516]	@ (8004000 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d005      	beq.n	8003e10 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 8003e04:	4b7e      	ldr	r3, [pc, #504]	@ (8004000 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	0f1b      	lsrs	r3, r3, #28
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	e006      	b.n	8003e1e <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 8003e10:	4b7b      	ldr	r3, [pc, #492]	@ (8004000 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003e12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003e16:	041b      	lsls	r3, r3, #16
 8003e18:	0f1b      	lsrs	r3, r3, #28
 8003e1a:	f003 030f 	and.w	r3, r3, #15
 8003e1e:	4a7b      	ldr	r2, [pc, #492]	@ (800400c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8003e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e24:	ee07 3a90 	vmov	s15, r3
 8003e28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	ee07 3a90 	vmov	s15, r3
 8003e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	ee07 3a90 	vmov	s15, r3
 8003e40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e44:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e48:	eddf 5a6f 	vldr	s11, [pc, #444]	@ 8004008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003e4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e58:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003e5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e60:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e64:	e058      	b.n	8003f18 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	ee07 3a90 	vmov	s15, r3
 8003e6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e70:	eddf 6a64 	vldr	s13, [pc, #400]	@ 8004004 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003e74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e78:	4b61      	ldr	r3, [pc, #388]	@ (8004000 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e80:	ee07 3a90 	vmov	s15, r3
 8003e84:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e88:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e8c:	eddf 5a5e 	vldr	s11, [pc, #376]	@ 8004008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003e90:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003e94:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003ea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ea4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ea8:	e036      	b.n	8003f18 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003eaa:	4b55      	ldr	r3, [pc, #340]	@ (8004000 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d005      	beq.n	8003ec2 <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 8003eb6:	4b52      	ldr	r3, [pc, #328]	@ (8004000 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	0f1b      	lsrs	r3, r3, #28
 8003ebc:	f003 030f 	and.w	r3, r3, #15
 8003ec0:	e006      	b.n	8003ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 8003ec2:	4b4f      	ldr	r3, [pc, #316]	@ (8004000 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003ec4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003ec8:	041b      	lsls	r3, r3, #16
 8003eca:	0f1b      	lsrs	r3, r3, #28
 8003ecc:	f003 030f 	and.w	r3, r3, #15
 8003ed0:	4a4e      	ldr	r2, [pc, #312]	@ (800400c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8003ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ed6:	ee07 3a90 	vmov	s15, r3
 8003eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	ee07 3a90 	vmov	s15, r3
 8003ee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ee8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	ee07 3a90 	vmov	s15, r3
 8003ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ef6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003efa:	eddf 5a43 	vldr	s11, [pc, #268]	@ 8004008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f16:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8003f18:	4b39      	ldr	r3, [pc, #228]	@ (8004000 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d017      	beq.n	8003f54 <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003f24:	4b36      	ldr	r3, [pc, #216]	@ (8004000 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f28:	0a5b      	lsrs	r3, r3, #9
 8003f2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f2e:	ee07 3a90 	vmov	s15, r3
 8003f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8003f36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f3a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003f3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f4a:	ee17 2a90 	vmov	r2, s15
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	e002      	b.n	8003f5a <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8003f5a:	4b29      	ldr	r3, [pc, #164]	@ (8004000 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d017      	beq.n	8003f96 <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003f66:	4b26      	ldr	r3, [pc, #152]	@ (8004000 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f6a:	0c1b      	lsrs	r3, r3, #16
 8003f6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f70:	ee07 3a90 	vmov	s15, r3
 8003f74:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8003f78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f7c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003f80:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f8c:	ee17 2a90 	vmov	r2, s15
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	605a      	str	r2, [r3, #4]
 8003f94:	e002      	b.n	8003f9c <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8003f9c:	4b18      	ldr	r3, [pc, #96]	@ (8004000 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d017      	beq.n	8003fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003fa8:	4b15      	ldr	r3, [pc, #84]	@ (8004000 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fac:	0e1b      	lsrs	r3, r3, #24
 8003fae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fb2:	ee07 3a90 	vmov	s15, r3
 8003fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8003fba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003fbe:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003fc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fce:	ee17 2a90 	vmov	r2, s15
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003fd6:	e00c      	b.n	8003ff2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	609a      	str	r2, [r3, #8]
}
 8003fde:	e008      	b.n	8003ff2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	609a      	str	r2, [r3, #8]
}
 8003ff2:	bf00      	nop
 8003ff4:	3724      	adds	r7, #36	@ 0x24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	46020c00 	.word	0x46020c00
 8004004:	4b742400 	.word	0x4b742400
 8004008:	46000000 	.word	0x46000000
 800400c:	080073f4 	.word	0x080073f4

08004010 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004010:	b480      	push	{r7}
 8004012:	b089      	sub	sp, #36	@ 0x24
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8004018:	4bad      	ldr	r3, [pc, #692]	@ (80042d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800401a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004020:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8004022:	4bab      	ldr	r3, [pc, #684]	@ (80042d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800402c:	4ba8      	ldr	r3, [pc, #672]	@ (80042d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800402e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004030:	0a1b      	lsrs	r3, r3, #8
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	3301      	adds	r3, #1
 8004038:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800403a:	4ba5      	ldr	r3, [pc, #660]	@ (80042d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800403c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403e:	091b      	lsrs	r3, r3, #4
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8004046:	4ba2      	ldr	r3, [pc, #648]	@ (80042d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800404a:	08db      	lsrs	r3, r3, #3
 800404c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	fb02 f303 	mul.w	r3, r2, r3
 8004056:	ee07 3a90 	vmov	s15, r3
 800405a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800405e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 8123 	beq.w	80042b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	2b03      	cmp	r3, #3
 800406e:	d062      	beq.n	8004136 <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	2b03      	cmp	r3, #3
 8004074:	f200 8081 	bhi.w	800417a <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d024      	beq.n	80040c8 <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2b02      	cmp	r3, #2
 8004082:	d17a      	bne.n	800417a <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	ee07 3a90 	vmov	s15, r3
 800408a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800408e:	eddf 6a91 	vldr	s13, [pc, #580]	@ 80042d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8004092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004096:	4b8e      	ldr	r3, [pc, #568]	@ (80042d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800409a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800409e:	ee07 3a90 	vmov	s15, r3
 80040a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80040a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80040aa:	eddf 5a8b 	vldr	s11, [pc, #556]	@ 80042d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80040ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80040b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80040b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80040be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040c2:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 80040c6:	e08f      	b.n	80041e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80040c8:	4b81      	ldr	r3, [pc, #516]	@ (80042d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d005      	beq.n	80040e0 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 80040d4:	4b7e      	ldr	r3, [pc, #504]	@ (80042d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	0f1b      	lsrs	r3, r3, #28
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	e006      	b.n	80040ee <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 80040e0:	4b7b      	ldr	r3, [pc, #492]	@ (80042d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80040e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80040e6:	041b      	lsls	r3, r3, #16
 80040e8:	0f1b      	lsrs	r3, r3, #28
 80040ea:	f003 030f 	and.w	r3, r3, #15
 80040ee:	4a7b      	ldr	r2, [pc, #492]	@ (80042dc <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 80040f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040f4:	ee07 3a90 	vmov	s15, r3
 80040f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	ee07 3a90 	vmov	s15, r3
 8004102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	ee07 3a90 	vmov	s15, r3
 8004110:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004114:	ed97 6a02 	vldr	s12, [r7, #8]
 8004118:	eddf 5a6f 	vldr	s11, [pc, #444]	@ 80042d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800411c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004120:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004124:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004128:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800412c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004130:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004134:	e058      	b.n	80041e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	ee07 3a90 	vmov	s15, r3
 800413c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004140:	eddf 6a64 	vldr	s13, [pc, #400]	@ 80042d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8004144:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004148:	4b61      	ldr	r3, [pc, #388]	@ (80042d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800414a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004150:	ee07 3a90 	vmov	s15, r3
 8004154:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004158:	ed97 6a02 	vldr	s12, [r7, #8]
 800415c:	eddf 5a5e 	vldr	s11, [pc, #376]	@ 80042d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004160:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004164:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004168:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800416c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004174:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004178:	e036      	b.n	80041e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800417a:	4b55      	ldr	r3, [pc, #340]	@ (80042d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d005      	beq.n	8004192 <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 8004186:	4b52      	ldr	r3, [pc, #328]	@ (80042d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	0f1b      	lsrs	r3, r3, #28
 800418c:	f003 030f 	and.w	r3, r3, #15
 8004190:	e006      	b.n	80041a0 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 8004192:	4b4f      	ldr	r3, [pc, #316]	@ (80042d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004194:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004198:	041b      	lsls	r3, r3, #16
 800419a:	0f1b      	lsrs	r3, r3, #28
 800419c:	f003 030f 	and.w	r3, r3, #15
 80041a0:	4a4e      	ldr	r2, [pc, #312]	@ (80042dc <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 80041a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041a6:	ee07 3a90 	vmov	s15, r3
 80041aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	ee07 3a90 	vmov	s15, r3
 80041b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	ee07 3a90 	vmov	s15, r3
 80041c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80041ca:	eddf 5a43 	vldr	s11, [pc, #268]	@ 80042d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80041ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041da:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80041de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041e6:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80041e8:	4b39      	ldr	r3, [pc, #228]	@ (80042d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80041ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d017      	beq.n	8004224 <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80041f4:	4b36      	ldr	r3, [pc, #216]	@ (80042d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80041f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f8:	0a5b      	lsrs	r3, r3, #9
 80041fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041fe:	ee07 3a90 	vmov	s15, r3
 8004202:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8004206:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800420a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800420e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004216:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800421a:	ee17 2a90 	vmov	r2, s15
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	601a      	str	r2, [r3, #0]
 8004222:	e002      	b.n	800422a <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800422a:	4b29      	ldr	r3, [pc, #164]	@ (80042d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800422c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800422e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d017      	beq.n	8004266 <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004236:	4b26      	ldr	r3, [pc, #152]	@ (80042d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800423a:	0c1b      	lsrs	r3, r3, #16
 800423c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004240:	ee07 3a90 	vmov	s15, r3
 8004244:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8004248:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800424c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004250:	edd7 6a07 	vldr	s13, [r7, #28]
 8004254:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004258:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800425c:	ee17 2a90 	vmov	r2, s15
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	605a      	str	r2, [r3, #4]
 8004264:	e002      	b.n	800426c <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800426c:	4b18      	ldr	r3, [pc, #96]	@ (80042d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800426e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004270:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d017      	beq.n	80042a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004278:	4b15      	ldr	r3, [pc, #84]	@ (80042d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800427a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800427c:	0e1b      	lsrs	r3, r3, #24
 800427e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004282:	ee07 3a90 	vmov	s15, r3
 8004286:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800428a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800428e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004292:	edd7 6a07 	vldr	s13, [r7, #28]
 8004296:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800429a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800429e:	ee17 2a90 	vmov	r2, s15
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80042a6:	e00c      	b.n	80042c2 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	609a      	str	r2, [r3, #8]
}
 80042ae:	e008      	b.n	80042c2 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	609a      	str	r2, [r3, #8]
}
 80042c2:	bf00      	nop
 80042c4:	3724      	adds	r7, #36	@ 0x24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	46020c00 	.word	0x46020c00
 80042d4:	4b742400 	.word	0x4b742400
 80042d8:	46000000 	.word	0x46000000
 80042dc:	080073f4 	.word	0x080073f4

080042e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b08e      	sub	sp, #56	@ 0x38
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80042ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042ee:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80042f2:	430b      	orrs	r3, r1
 80042f4:	d145      	bne.n	8004382 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80042f6:	4ba7      	ldr	r3, [pc, #668]	@ (8004594 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80042f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004300:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004302:	4ba4      	ldr	r3, [pc, #656]	@ (8004594 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004304:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b02      	cmp	r3, #2
 800430e:	d108      	bne.n	8004322 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004312:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004316:	d104      	bne.n	8004322 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8004318:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800431c:	637b      	str	r3, [r7, #52]	@ 0x34
 800431e:	f001 bb31 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004322:	4b9c      	ldr	r3, [pc, #624]	@ (8004594 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004324:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004328:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800432c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004330:	d114      	bne.n	800435c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8004332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004334:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004338:	d110      	bne.n	800435c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800433a:	4b96      	ldr	r3, [pc, #600]	@ (8004594 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800433c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004340:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004344:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004348:	d103      	bne.n	8004352 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800434a:	23fa      	movs	r3, #250	@ 0xfa
 800434c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800434e:	f001 bb19 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 8004352:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004356:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004358:	f001 bb14 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800435c:	4b8d      	ldr	r3, [pc, #564]	@ (8004594 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004364:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004368:	d107      	bne.n	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800436a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800436c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004370:	d103      	bne.n	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8004372:	4b89      	ldr	r3, [pc, #548]	@ (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004374:	637b      	str	r3, [r7, #52]	@ 0x34
 8004376:	f001 bb05 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800437a:	2300      	movs	r3, #0
 800437c:	637b      	str	r3, [r7, #52]	@ 0x34
 800437e:	f001 bb01 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004382:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004386:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800438a:	430b      	orrs	r3, r1
 800438c:	d151      	bne.n	8004432 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800438e:	4b81      	ldr	r3, [pc, #516]	@ (8004594 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004390:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004394:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8004398:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800439a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800439c:	2b80      	cmp	r3, #128	@ 0x80
 800439e:	d035      	beq.n	800440c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80043a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a2:	2b80      	cmp	r3, #128	@ 0x80
 80043a4:	d841      	bhi.n	800442a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80043a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a8:	2b60      	cmp	r3, #96	@ 0x60
 80043aa:	d02a      	beq.n	8004402 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80043ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ae:	2b60      	cmp	r3, #96	@ 0x60
 80043b0:	d83b      	bhi.n	800442a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80043b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b4:	2b40      	cmp	r3, #64	@ 0x40
 80043b6:	d009      	beq.n	80043cc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80043b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ba:	2b40      	cmp	r3, #64	@ 0x40
 80043bc:	d835      	bhi.n	800442a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80043be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00c      	beq.n	80043de <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80043c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c6:	2b20      	cmp	r3, #32
 80043c8:	d012      	beq.n	80043f0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80043ca:	e02e      	b.n	800442a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80043cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7ff fb4d 	bl	8003a70 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80043d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043da:	f001 bad3 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80043de:	f107 0318 	add.w	r3, r7, #24
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7ff fcac 	bl	8003d40 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043ec:	f001 baca 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80043f0:	f107 030c 	add.w	r3, r7, #12
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff fe0b 	bl	8004010 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043fe:	f001 bac1 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004402:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004406:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004408:	f001 babc 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800440c:	4b61      	ldr	r3, [pc, #388]	@ (8004594 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004414:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004418:	d103      	bne.n	8004422 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800441a:	4b60      	ldr	r3, [pc, #384]	@ (800459c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800441c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800441e:	f001 bab1 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004422:	2300      	movs	r3, #0
 8004424:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004426:	f001 baad 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :
      {
        frequency = 0U;
 800442a:	2300      	movs	r3, #0
 800442c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800442e:	f001 baa9 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8004432:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004436:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800443a:	430b      	orrs	r3, r1
 800443c:	d158      	bne.n	80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800443e:	4b55      	ldr	r3, [pc, #340]	@ (8004594 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004440:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004444:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004448:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800444a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800444c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004450:	d03b      	beq.n	80044ca <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8004452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004454:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004458:	d846      	bhi.n	80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800445a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800445c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004460:	d02e      	beq.n	80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8004462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004464:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004468:	d83e      	bhi.n	80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800446a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800446c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004470:	d00b      	beq.n	800448a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8004472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004474:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004478:	d836      	bhi.n	80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800447a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00d      	beq.n	800449c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8004480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004482:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004486:	d012      	beq.n	80044ae <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8004488:	e02e      	b.n	80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800448a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800448e:	4618      	mov	r0, r3
 8004490:	f7ff faee 	bl	8003a70 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004496:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004498:	f001 ba74 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800449c:	f107 0318 	add.w	r3, r7, #24
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff fc4d 	bl	8003d40 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80044aa:	f001 ba6b 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80044ae:	f107 030c 	add.w	r3, r7, #12
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7ff fdac 	bl	8004010 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80044bc:	f001 ba62 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80044c0:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80044c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80044c6:	f001 ba5d 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80044ca:	4b32      	ldr	r3, [pc, #200]	@ (8004594 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044d6:	d103      	bne.n	80044e0 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80044d8:	4b30      	ldr	r3, [pc, #192]	@ (800459c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80044da:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80044dc:	f001 ba52 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80044e0:	2300      	movs	r3, #0
 80044e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80044e4:	f001 ba4e 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80044ec:	f001 ba4a 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 80044f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044f4:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80044f8:	430b      	orrs	r3, r1
 80044fa:	d126      	bne.n	800454a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80044fc:	4b25      	ldr	r3, [pc, #148]	@ (8004594 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80044fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004502:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004506:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8004508:	4b22      	ldr	r3, [pc, #136]	@ (8004594 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004510:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004514:	d106      	bne.n	8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8004516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004518:	2b00      	cmp	r3, #0
 800451a:	d103      	bne.n	8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800451c:	4b1f      	ldr	r3, [pc, #124]	@ (800459c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800451e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004520:	f001 ba30 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8004524:	4b1b      	ldr	r3, [pc, #108]	@ (8004594 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800452c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004530:	d107      	bne.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8004532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004534:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004538:	d103      	bne.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800453a:	4b19      	ldr	r3, [pc, #100]	@ (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800453c:	637b      	str	r3, [r7, #52]	@ 0x34
 800453e:	f001 ba21 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8004542:	2300      	movs	r3, #0
 8004544:	637b      	str	r3, [r7, #52]	@ 0x34
 8004546:	f001 ba1d 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800454a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800454e:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8004552:	430b      	orrs	r3, r1
 8004554:	d16e      	bne.n	8004634 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004556:	4b0f      	ldr	r3, [pc, #60]	@ (8004594 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800455c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004560:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004564:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004568:	d03d      	beq.n	80045e6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800456a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800456c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004570:	d85c      	bhi.n	800462c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8004572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004574:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004578:	d014      	beq.n	80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800457a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800457c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004580:	d854      	bhi.n	800462c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8004582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004584:	2b00      	cmp	r3, #0
 8004586:	d01f      	beq.n	80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8004588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800458a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800458e:	d012      	beq.n	80045b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8004590:	e04c      	b.n	800462c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8004592:	bf00      	nop
 8004594:	46020c00 	.word	0x46020c00
 8004598:	0007a120 	.word	0x0007a120
 800459c:	00f42400 	.word	0x00f42400
 80045a0:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80045a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7ff fa61 	bl	8003a70 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80045ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80045b2:	f001 b9e7 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80045b6:	f107 0318 	add.w	r3, r7, #24
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7ff fbc0 	bl	8003d40 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80045c4:	f001 b9de 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80045c8:	4ba7      	ldr	r3, [pc, #668]	@ (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045d4:	d103      	bne.n	80045de <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 80045d6:	4ba5      	ldr	r3, [pc, #660]	@ (800486c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80045d8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80045da:	f001 b9d3 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80045de:	2300      	movs	r3, #0
 80045e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80045e2:	f001 b9cf 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80045e6:	4ba0      	ldr	r3, [pc, #640]	@ (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0320 	and.w	r3, r3, #32
 80045ee:	2b20      	cmp	r3, #32
 80045f0:	d118      	bne.n	8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80045f2:	4b9d      	ldr	r3, [pc, #628]	@ (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d005      	beq.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80045fe:	4b9a      	ldr	r3, [pc, #616]	@ (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	0e1b      	lsrs	r3, r3, #24
 8004604:	f003 030f 	and.w	r3, r3, #15
 8004608:	e006      	b.n	8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800460a:	4b97      	ldr	r3, [pc, #604]	@ (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800460c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004610:	041b      	lsls	r3, r3, #16
 8004612:	0e1b      	lsrs	r3, r3, #24
 8004614:	f003 030f 	and.w	r3, r3, #15
 8004618:	4a95      	ldr	r2, [pc, #596]	@ (8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800461a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800461e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004620:	f001 b9b0 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004628:	f001 b9ac 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 800462c:	2300      	movs	r3, #0
 800462e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004630:	f001 b9a8 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004634:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004638:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800463c:	430b      	orrs	r3, r1
 800463e:	d17f      	bne.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004640:	4b89      	ldr	r3, [pc, #548]	@ (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004642:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004646:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800464a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800464c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800464e:	2b00      	cmp	r3, #0
 8004650:	d165      	bne.n	800471e <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004652:	4b85      	ldr	r3, [pc, #532]	@ (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004658:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800465c:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800465e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004660:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004664:	d034      	beq.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8004666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004668:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800466c:	d853      	bhi.n	8004716 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800466e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004670:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004674:	d00b      	beq.n	800468e <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8004676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004678:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800467c:	d84b      	bhi.n	8004716 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800467e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004680:	2b00      	cmp	r3, #0
 8004682:	d016      	beq.n	80046b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8004684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004686:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800468a:	d009      	beq.n	80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800468c:	e043      	b.n	8004716 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800468e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004692:	4618      	mov	r0, r3
 8004694:	f7ff f9ec 	bl	8003a70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800469a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800469c:	f001 b972 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80046a0:	f107 0318 	add.w	r3, r7, #24
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff fb4b 	bl	8003d40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80046ae:	f001 b969 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80046b2:	4b6d      	ldr	r3, [pc, #436]	@ (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046be:	d103      	bne.n	80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 80046c0:	4b6a      	ldr	r3, [pc, #424]	@ (800486c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80046c2:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80046c4:	f001 b95e 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80046cc:	f001 b95a 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80046d0:	4b65      	ldr	r3, [pc, #404]	@ (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0320 	and.w	r3, r3, #32
 80046d8:	2b20      	cmp	r3, #32
 80046da:	d118      	bne.n	800470e <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80046dc:	4b62      	ldr	r3, [pc, #392]	@ (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d005      	beq.n	80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 80046e8:	4b5f      	ldr	r3, [pc, #380]	@ (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	0e1b      	lsrs	r3, r3, #24
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	e006      	b.n	8004702 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80046f4:	4b5c      	ldr	r3, [pc, #368]	@ (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80046f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80046fa:	041b      	lsls	r3, r3, #16
 80046fc:	0e1b      	lsrs	r3, r3, #24
 80046fe:	f003 030f 	and.w	r3, r3, #15
 8004702:	4a5b      	ldr	r2, [pc, #364]	@ (8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004708:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800470a:	f001 b93b 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 800470e:	2300      	movs	r3, #0
 8004710:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004712:	f001 b937 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        default :
        {
          frequency = 0U;
 8004716:	2300      	movs	r3, #0
 8004718:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800471a:	f001 b933 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800471e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004720:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004724:	d108      	bne.n	8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004726:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800472a:	4618      	mov	r0, r3
 800472c:	f7ff f9a0 	bl	8003a70 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8004730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004732:	637b      	str	r3, [r7, #52]	@ 0x34
 8004734:	f001 b926 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else
    {
      frequency = 0U;
 8004738:	2300      	movs	r3, #0
 800473a:	637b      	str	r3, [r7, #52]	@ 0x34
 800473c:	f001 b922 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8004740:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004744:	1e51      	subs	r1, r2, #1
 8004746:	430b      	orrs	r3, r1
 8004748:	d136      	bne.n	80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800474a:	4b47      	ldr	r3, [pc, #284]	@ (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800474c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004750:	f003 0303 	and.w	r3, r3, #3
 8004754:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8004756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004758:	2b00      	cmp	r3, #0
 800475a:	d104      	bne.n	8004766 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800475c:	f7fe fa1e 	bl	8002b9c <HAL_RCC_GetPCLK2Freq>
 8004760:	6378      	str	r0, [r7, #52]	@ 0x34
 8004762:	f001 b90f 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8004766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004768:	2b01      	cmp	r3, #1
 800476a:	d104      	bne.n	8004776 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800476c:	f7fe f8e0 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 8004770:	6378      	str	r0, [r7, #52]	@ 0x34
 8004772:	f001 b907 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8004776:	4b3c      	ldr	r3, [pc, #240]	@ (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800477e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004782:	d106      	bne.n	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8004784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004786:	2b02      	cmp	r3, #2
 8004788:	d103      	bne.n	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800478a:	4b3a      	ldr	r3, [pc, #232]	@ (8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800478c:	637b      	str	r3, [r7, #52]	@ 0x34
 800478e:	f001 b8f9 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004792:	4b35      	ldr	r3, [pc, #212]	@ (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004794:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b02      	cmp	r3, #2
 800479e:	d107      	bne.n	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80047a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a2:	2b03      	cmp	r3, #3
 80047a4:	d104      	bne.n	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 80047a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80047ac:	f001 b8ea 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80047b4:	f001 b8e6 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80047b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047bc:	1e91      	subs	r1, r2, #2
 80047be:	430b      	orrs	r3, r1
 80047c0:	d136      	bne.n	8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80047c2:	4b29      	ldr	r3, [pc, #164]	@ (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80047c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80047c8:	f003 030c 	and.w	r3, r3, #12
 80047cc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80047ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d104      	bne.n	80047de <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80047d4:	f7fe f9ce 	bl	8002b74 <HAL_RCC_GetPCLK1Freq>
 80047d8:	6378      	str	r0, [r7, #52]	@ 0x34
 80047da:	f001 b8d3 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80047de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e0:	2b04      	cmp	r3, #4
 80047e2:	d104      	bne.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80047e4:	f7fe f8a4 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 80047e8:	6378      	str	r0, [r7, #52]	@ 0x34
 80047ea:	f001 b8cb 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80047ee:	4b1e      	ldr	r3, [pc, #120]	@ (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047fa:	d106      	bne.n	800480a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80047fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047fe:	2b08      	cmp	r3, #8
 8004800:	d103      	bne.n	800480a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8004802:	4b1c      	ldr	r3, [pc, #112]	@ (8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004804:	637b      	str	r3, [r7, #52]	@ 0x34
 8004806:	f001 b8bd 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800480a:	4b17      	ldr	r3, [pc, #92]	@ (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800480c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b02      	cmp	r3, #2
 8004816:	d107      	bne.n	8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8004818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800481a:	2b0c      	cmp	r3, #12
 800481c:	d104      	bne.n	8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800481e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004822:	637b      	str	r3, [r7, #52]	@ 0x34
 8004824:	f001 b8ae 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8004828:	2300      	movs	r3, #0
 800482a:	637b      	str	r3, [r7, #52]	@ 0x34
 800482c:	f001 b8aa 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8004830:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004834:	1f11      	subs	r1, r2, #4
 8004836:	430b      	orrs	r3, r1
 8004838:	d13f      	bne.n	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800483a:	4b0b      	ldr	r3, [pc, #44]	@ (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800483c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004840:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004844:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8004846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004848:	2b00      	cmp	r3, #0
 800484a:	d104      	bne.n	8004856 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800484c:	f7fe f992 	bl	8002b74 <HAL_RCC_GetPCLK1Freq>
 8004850:	6378      	str	r0, [r7, #52]	@ 0x34
 8004852:	f001 b897 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8004856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004858:	2b10      	cmp	r3, #16
 800485a:	d10d      	bne.n	8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800485c:	f7fe f868 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 8004860:	6378      	str	r0, [r7, #52]	@ 0x34
 8004862:	f001 b88f 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8004866:	bf00      	nop
 8004868:	46020c00 	.word	0x46020c00
 800486c:	02dc6c00 	.word	0x02dc6c00
 8004870:	080073f4 	.word	0x080073f4
 8004874:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8004878:	4ba8      	ldr	r3, [pc, #672]	@ (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004880:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004884:	d106      	bne.n	8004894 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8004886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004888:	2b20      	cmp	r3, #32
 800488a:	d103      	bne.n	8004894 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800488c:	4ba4      	ldr	r3, [pc, #656]	@ (8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800488e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004890:	f001 b878 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8004894:	4ba1      	ldr	r3, [pc, #644]	@ (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004896:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d107      	bne.n	80048b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80048a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a4:	2b30      	cmp	r3, #48	@ 0x30
 80048a6:	d104      	bne.n	80048b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 80048a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80048ae:	f001 b869 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80048b2:	2300      	movs	r3, #0
 80048b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80048b6:	f001 b865 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80048ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048be:	f1a2 0108 	sub.w	r1, r2, #8
 80048c2:	430b      	orrs	r3, r1
 80048c4:	d136      	bne.n	8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80048c6:	4b95      	ldr	r3, [pc, #596]	@ (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80048c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048cc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80048d0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80048d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d104      	bne.n	80048e2 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80048d8:	f7fe f94c 	bl	8002b74 <HAL_RCC_GetPCLK1Freq>
 80048dc:	6378      	str	r0, [r7, #52]	@ 0x34
 80048de:	f001 b851 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80048e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e4:	2b40      	cmp	r3, #64	@ 0x40
 80048e6:	d104      	bne.n	80048f2 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80048e8:	f7fe f822 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 80048ec:	6378      	str	r0, [r7, #52]	@ 0x34
 80048ee:	f001 b849 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80048f2:	4b8a      	ldr	r3, [pc, #552]	@ (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048fe:	d106      	bne.n	800490e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8004900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004902:	2b80      	cmp	r3, #128	@ 0x80
 8004904:	d103      	bne.n	800490e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8004906:	4b86      	ldr	r3, [pc, #536]	@ (8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004908:	637b      	str	r3, [r7, #52]	@ 0x34
 800490a:	f001 b83b 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800490e:	4b83      	ldr	r3, [pc, #524]	@ (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004910:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b02      	cmp	r3, #2
 800491a:	d107      	bne.n	800492c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800491c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800491e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004920:	d104      	bne.n	800492c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8004922:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004926:	637b      	str	r3, [r7, #52]	@ 0x34
 8004928:	f001 b82c 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800492c:	2300      	movs	r3, #0
 800492e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004930:	f001 b828 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8004934:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004938:	f1a2 0110 	sub.w	r1, r2, #16
 800493c:	430b      	orrs	r3, r1
 800493e:	d139      	bne.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004940:	4b76      	ldr	r3, [pc, #472]	@ (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004946:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800494a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800494c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800494e:	2b00      	cmp	r3, #0
 8004950:	d104      	bne.n	800495c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004952:	f7fe f90f 	bl	8002b74 <HAL_RCC_GetPCLK1Freq>
 8004956:	6378      	str	r0, [r7, #52]	@ 0x34
 8004958:	f001 b814 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800495c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800495e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004962:	d104      	bne.n	800496e <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004964:	f7fd ffe4 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 8004968:	6378      	str	r0, [r7, #52]	@ 0x34
 800496a:	f001 b80b 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800496e:	4b6b      	ldr	r3, [pc, #428]	@ (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004976:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800497a:	d107      	bne.n	800498c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800497c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800497e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004982:	d103      	bne.n	800498c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8004984:	4b66      	ldr	r3, [pc, #408]	@ (8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004986:	637b      	str	r3, [r7, #52]	@ 0x34
 8004988:	f000 bffc 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800498c:	4b63      	ldr	r3, [pc, #396]	@ (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800498e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b02      	cmp	r3, #2
 8004998:	d108      	bne.n	80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800499a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800499c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049a0:	d104      	bne.n	80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 80049a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80049a8:	f000 bfec 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80049b0:	f000 bfe8 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 80049b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049b8:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 80049bc:	430b      	orrs	r3, r1
 80049be:	d139      	bne.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 80049c0:	4b56      	ldr	r3, [pc, #344]	@ (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80049c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80049c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80049ca:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 80049cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d104      	bne.n	80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80049d2:	f7fe f8cf 	bl	8002b74 <HAL_RCC_GetPCLK1Freq>
 80049d6:	6378      	str	r0, [r7, #52]	@ 0x34
 80049d8:	f000 bfd4 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 80049dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049e2:	d104      	bne.n	80049ee <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80049e4:	f7fd ffa4 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 80049e8:	6378      	str	r0, [r7, #52]	@ 0x34
 80049ea:	f000 bfcb 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 80049ee:	4b4b      	ldr	r3, [pc, #300]	@ (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049fa:	d107      	bne.n	8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 80049fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a02:	d103      	bne.n	8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 8004a04:	4b46      	ldr	r3, [pc, #280]	@ (8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004a06:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a08:	f000 bfbc 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8004a0c:	4b43      	ldr	r3, [pc, #268]	@ (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d108      	bne.n	8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a1c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004a20:	d104      	bne.n	8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 8004a22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a26:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a28:	f000 bfac 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a30:	f000 bfa8 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8004a34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a38:	f1a2 0120 	sub.w	r1, r2, #32
 8004a3c:	430b      	orrs	r3, r1
 8004a3e:	d158      	bne.n	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004a40:	4b36      	ldr	r3, [pc, #216]	@ (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a46:	f003 0307 	and.w	r3, r3, #7
 8004a4a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d104      	bne.n	8004a5c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8004a52:	f7fe f8b7 	bl	8002bc4 <HAL_RCC_GetPCLK3Freq>
 8004a56:	6378      	str	r0, [r7, #52]	@ 0x34
 8004a58:	f000 bf94 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8004a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d104      	bne.n	8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004a62:	f7fd ff65 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 8004a66:	6378      	str	r0, [r7, #52]	@ 0x34
 8004a68:	f000 bf8c 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004a6c:	4b2b      	ldr	r3, [pc, #172]	@ (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a78:	d106      	bne.n	8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8004a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d103      	bne.n	8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 8004a80:	4b27      	ldr	r3, [pc, #156]	@ (8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004a82:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a84:	f000 bf7e 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004a88:	4b24      	ldr	r3, [pc, #144]	@ (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d107      	bne.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8004a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a98:	2b03      	cmp	r3, #3
 8004a9a:	d104      	bne.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 8004a9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004aa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004aa2:	f000 bf6f 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8004aa6:	4b1d      	ldr	r3, [pc, #116]	@ (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0320 	and.w	r3, r3, #32
 8004aae:	2b20      	cmp	r3, #32
 8004ab0:	d11b      	bne.n	8004aea <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8004ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab4:	2b04      	cmp	r3, #4
 8004ab6:	d118      	bne.n	8004aea <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004ab8:	4b18      	ldr	r3, [pc, #96]	@ (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d005      	beq.n	8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 8004ac4:	4b15      	ldr	r3, [pc, #84]	@ (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	0e1b      	lsrs	r3, r3, #24
 8004aca:	f003 030f 	and.w	r3, r3, #15
 8004ace:	e006      	b.n	8004ade <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8004ad0:	4b12      	ldr	r3, [pc, #72]	@ (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004ad2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004ad6:	041b      	lsls	r3, r3, #16
 8004ad8:	0e1b      	lsrs	r3, r3, #24
 8004ada:	f003 030f 	and.w	r3, r3, #15
 8004ade:	4a11      	ldr	r2, [pc, #68]	@ (8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ae4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ae6:	f000 bf4d 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8004aea:	2300      	movs	r3, #0
 8004aec:	637b      	str	r3, [r7, #52]	@ 0x34
 8004aee:	f000 bf49 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8004af2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004af6:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8004afa:	430b      	orrs	r3, r1
 8004afc:	d172      	bne.n	8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004afe:	4b07      	ldr	r3, [pc, #28]	@ (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b04:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004b08:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b10:	d10a      	bne.n	8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004b12:	f7fd ff0d 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 8004b16:	6378      	str	r0, [r7, #52]	@ 0x34
 8004b18:	f000 bf34 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8004b1c:	46020c00 	.word	0x46020c00
 8004b20:	00f42400 	.word	0x00f42400
 8004b24:	080073f4 	.word	0x080073f4
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8004b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b2e:	d108      	bne.n	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b30:	f107 0318 	add.w	r3, r7, #24
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7ff f903 	bl	8003d40 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8004b3a:	6a3b      	ldr	r3, [r7, #32]
 8004b3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b3e:	f000 bf21 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d104      	bne.n	8004b52 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8004b48:	f7fd fffa 	bl	8002b40 <HAL_RCC_GetHCLKFreq>
 8004b4c:	6378      	str	r0, [r7, #52]	@ 0x34
 8004b4e:	f000 bf19 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8004b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b54:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004b58:	d122      	bne.n	8004ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004b5a:	4bb0      	ldr	r3, [pc, #704]	@ (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0320 	and.w	r3, r3, #32
 8004b62:	2b20      	cmp	r3, #32
 8004b64:	d118      	bne.n	8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004b66:	4bad      	ldr	r3, [pc, #692]	@ (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d005      	beq.n	8004b7e <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 8004b72:	4baa      	ldr	r3, [pc, #680]	@ (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	0e1b      	lsrs	r3, r3, #24
 8004b78:	f003 030f 	and.w	r3, r3, #15
 8004b7c:	e006      	b.n	8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8004b7e:	4ba7      	ldr	r3, [pc, #668]	@ (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004b80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004b84:	041b      	lsls	r3, r3, #16
 8004b86:	0e1b      	lsrs	r3, r3, #24
 8004b88:	f003 030f 	and.w	r3, r3, #15
 8004b8c:	4aa4      	ldr	r2, [pc, #656]	@ (8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8004b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b92:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b94:	f000 bef6 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b9c:	f000 bef2 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004ba0:	4b9e      	ldr	r3, [pc, #632]	@ (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ba8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bac:	d107      	bne.n	8004bbe <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8004bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004bb4:	d103      	bne.n	8004bbe <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 8004bb6:	4b9b      	ldr	r3, [pc, #620]	@ (8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8004bb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bba:	f000 bee3 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004bbe:	4b97      	ldr	r3, [pc, #604]	@ (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bca:	d107      	bne.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8004bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bd2:	d103      	bne.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 8004bd4:	4b93      	ldr	r3, [pc, #588]	@ (8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8004bd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bd8:	f000 bed4 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	637b      	str	r3, [r7, #52]	@ 0x34
 8004be0:	f000 bed0 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8004be4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004be8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8004bec:	430b      	orrs	r3, r1
 8004bee:	d158      	bne.n	8004ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8004bf0:	4b8a      	ldr	r3, [pc, #552]	@ (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004bf2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004bf6:	f003 0307 	and.w	r3, r3, #7
 8004bfa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bfe:	2b04      	cmp	r3, #4
 8004c00:	d84b      	bhi.n	8004c9a <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 8004c02:	a201      	add	r2, pc, #4	@ (adr r2, 8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 8004c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c08:	08004c41 	.word	0x08004c41
 8004c0c:	08004c1d 	.word	0x08004c1d
 8004c10:	08004c2f 	.word	0x08004c2f
 8004c14:	08004c4b 	.word	0x08004c4b
 8004c18:	08004c55 	.word	0x08004c55
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7fe ff25 	bl	8003a70 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c2a:	f000 beab 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c2e:	f107 030c 	add.w	r3, r7, #12
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7ff f9ec 	bl	8004010 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c3c:	f000 bea2 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004c40:	f7fd ff7e 	bl	8002b40 <HAL_RCC_GetHCLKFreq>
 8004c44:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004c46:	f000 be9d 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004c4a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004c4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c50:	f000 be98 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004c54:	4b71      	ldr	r3, [pc, #452]	@ (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0320 	and.w	r3, r3, #32
 8004c5c:	2b20      	cmp	r3, #32
 8004c5e:	d118      	bne.n	8004c92 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004c60:	4b6e      	ldr	r3, [pc, #440]	@ (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d005      	beq.n	8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8004c6c:	4b6b      	ldr	r3, [pc, #428]	@ (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	0e1b      	lsrs	r3, r3, #24
 8004c72:	f003 030f 	and.w	r3, r3, #15
 8004c76:	e006      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8004c78:	4b68      	ldr	r3, [pc, #416]	@ (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004c7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004c7e:	041b      	lsls	r3, r3, #16
 8004c80:	0e1b      	lsrs	r3, r3, #24
 8004c82:	f003 030f 	and.w	r3, r3, #15
 8004c86:	4a66      	ldr	r2, [pc, #408]	@ (8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8004c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c8c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004c8e:	f000 be79 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004c92:	2300      	movs	r3, #0
 8004c94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c96:	f000 be75 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c9e:	f000 be71 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8004ca2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ca6:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8004caa:	430b      	orrs	r3, r1
 8004cac:	d167      	bne.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8004cae:	4b5b      	ldr	r3, [pc, #364]	@ (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004cb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004cb4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8004cb8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cbc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004cc0:	d036      	beq.n	8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8004cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004cc8:	d855      	bhi.n	8004d76 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8004cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ccc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004cd0:	d029      	beq.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004cd8:	d84d      	bhi.n	8004d76 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8004cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cdc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ce0:	d013      	beq.n	8004d0a <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8004ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ce8:	d845      	bhi.n	8004d76 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8004cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d015      	beq.n	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 8004cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cf6:	d13e      	bne.n	8004d76 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004cf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7fe feb7 	bl	8003a70 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d06:	f000 be3d 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d0a:	f107 030c 	add.w	r3, r7, #12
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7ff f97e 	bl	8004010 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d18:	f000 be34 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004d1c:	f7fd ff10 	bl	8002b40 <HAL_RCC_GetHCLKFreq>
 8004d20:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004d22:	f000 be2f 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004d26:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004d2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d2c:	f000 be2a 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004d30:	4b3a      	ldr	r3, [pc, #232]	@ (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0320 	and.w	r3, r3, #32
 8004d38:	2b20      	cmp	r3, #32
 8004d3a:	d118      	bne.n	8004d6e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004d3c:	4b37      	ldr	r3, [pc, #220]	@ (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d005      	beq.n	8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8004d48:	4b34      	ldr	r3, [pc, #208]	@ (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	0e1b      	lsrs	r3, r3, #24
 8004d4e:	f003 030f 	and.w	r3, r3, #15
 8004d52:	e006      	b.n	8004d62 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8004d54:	4b31      	ldr	r3, [pc, #196]	@ (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004d56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004d5a:	041b      	lsls	r3, r3, #16
 8004d5c:	0e1b      	lsrs	r3, r3, #24
 8004d5e:	f003 030f 	and.w	r3, r3, #15
 8004d62:	4a2f      	ldr	r2, [pc, #188]	@ (8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8004d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d68:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004d6a:	f000 be0b 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d72:	f000 be07 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d7a:	f000 be03 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8004d7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d82:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8004d86:	430b      	orrs	r3, r1
 8004d88:	d152      	bne.n	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004d8a:	4b24      	ldr	r3, [pc, #144]	@ (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d90:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004d94:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d104      	bne.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004d9c:	f7fd feea 	bl	8002b74 <HAL_RCC_GetPCLK1Freq>
 8004da0:	6378      	str	r0, [r7, #52]	@ 0x34
 8004da2:	f000 bdef 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8004da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dac:	d104      	bne.n	8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004dae:	f7fd fdbf 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 8004db2:	6378      	str	r0, [r7, #52]	@ 0x34
 8004db4:	f000 bde6 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004db8:	4b18      	ldr	r3, [pc, #96]	@ (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dc4:	d107      	bne.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 8004dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dcc:	d103      	bne.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 8004dce:	4b15      	ldr	r3, [pc, #84]	@ (8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8004dd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dd2:	f000 bdd7 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8004dd6:	4b11      	ldr	r3, [pc, #68]	@ (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0320 	and.w	r3, r3, #32
 8004dde:	2b20      	cmp	r3, #32
 8004de0:	d122      	bne.n	8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 8004de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004de8:	d11e      	bne.n	8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004dea:	4b0c      	ldr	r3, [pc, #48]	@ (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d005      	beq.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 8004df6:	4b09      	ldr	r3, [pc, #36]	@ (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	0e1b      	lsrs	r3, r3, #24
 8004dfc:	f003 030f 	and.w	r3, r3, #15
 8004e00:	e006      	b.n	8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 8004e02:	4b06      	ldr	r3, [pc, #24]	@ (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004e04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004e08:	041b      	lsls	r3, r3, #16
 8004e0a:	0e1b      	lsrs	r3, r3, #24
 8004e0c:	f003 030f 	and.w	r3, r3, #15
 8004e10:	4a03      	ldr	r2, [pc, #12]	@ (8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8004e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e16:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e18:	f000 bdb4 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8004e1c:	46020c00 	.word	0x46020c00
 8004e20:	080073f4 	.word	0x080073f4
 8004e24:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e2c:	f000 bdaa 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8004e30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e34:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8004e38:	430b      	orrs	r3, r1
 8004e3a:	d14c      	bne.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004e3c:	4ba8      	ldr	r3, [pc, #672]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e42:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004e46:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d104      	bne.n	8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004e4e:	f7fd fe91 	bl	8002b74 <HAL_RCC_GetPCLK1Freq>
 8004e52:	6378      	str	r0, [r7, #52]	@ 0x34
 8004e54:	f000 bd96 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8004e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e5e:	d104      	bne.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004e60:	f7fd fd66 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 8004e64:	6378      	str	r0, [r7, #52]	@ 0x34
 8004e66:	f000 bd8d 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004e6a:	4b9d      	ldr	r3, [pc, #628]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e76:	d107      	bne.n	8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8004e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e7e:	d103      	bne.n	8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 8004e80:	4b98      	ldr	r3, [pc, #608]	@ (80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8004e82:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e84:	f000 bd7e 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8004e88:	4b95      	ldr	r3, [pc, #596]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0320 	and.w	r3, r3, #32
 8004e90:	2b20      	cmp	r3, #32
 8004e92:	d11c      	bne.n	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 8004e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e96:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004e9a:	d118      	bne.n	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004e9c:	4b90      	ldr	r3, [pc, #576]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d005      	beq.n	8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8004ea8:	4b8d      	ldr	r3, [pc, #564]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	0e1b      	lsrs	r3, r3, #24
 8004eae:	f003 030f 	and.w	r3, r3, #15
 8004eb2:	e006      	b.n	8004ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 8004eb4:	4b8a      	ldr	r3, [pc, #552]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004eb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004eba:	041b      	lsls	r3, r3, #16
 8004ebc:	0e1b      	lsrs	r3, r3, #24
 8004ebe:	f003 030f 	and.w	r3, r3, #15
 8004ec2:	4a89      	ldr	r2, [pc, #548]	@ (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8004ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ec8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004eca:	f000 bd5b 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ed2:	f000 bd57 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8004ed6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004eda:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8004ede:	430b      	orrs	r3, r1
 8004ee0:	d158      	bne.n	8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004ee2:	4b7f      	ldr	r3, [pc, #508]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004ee4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ee8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004eec:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef0:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ef2:	d028      	beq.n	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 8004ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ef8:	d848      	bhi.n	8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8004efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004efc:	2b80      	cmp	r3, #128	@ 0x80
 8004efe:	d00e      	beq.n	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8004f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f02:	2b80      	cmp	r3, #128	@ 0x80
 8004f04:	d842      	bhi.n	8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8004f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d003      	beq.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 8004f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f0e:	2b40      	cmp	r3, #64	@ 0x40
 8004f10:	d014      	beq.n	8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8004f12:	e03b      	b.n	8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8004f14:	f7fd fe56 	bl	8002bc4 <HAL_RCC_GetPCLK3Freq>
 8004f18:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004f1a:	f000 bd33 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f1e:	4b70      	ldr	r3, [pc, #448]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f2a:	d103      	bne.n	8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 8004f2c:	4b6d      	ldr	r3, [pc, #436]	@ (80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8004f2e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004f30:	f000 bd28 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f38:	f000 bd24 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8004f3c:	f7fd fcf8 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 8004f40:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004f42:	f000 bd1f 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004f46:	4b66      	ldr	r3, [pc, #408]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0320 	and.w	r3, r3, #32
 8004f4e:	2b20      	cmp	r3, #32
 8004f50:	d118      	bne.n	8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004f52:	4b63      	ldr	r3, [pc, #396]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d005      	beq.n	8004f6a <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 8004f5e:	4b60      	ldr	r3, [pc, #384]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	0e1b      	lsrs	r3, r3, #24
 8004f64:	f003 030f 	and.w	r3, r3, #15
 8004f68:	e006      	b.n	8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 8004f6a:	4b5d      	ldr	r3, [pc, #372]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004f6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004f70:	041b      	lsls	r3, r3, #16
 8004f72:	0e1b      	lsrs	r3, r3, #24
 8004f74:	f003 030f 	and.w	r3, r3, #15
 8004f78:	4a5b      	ldr	r2, [pc, #364]	@ (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8004f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f7e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004f80:	f000 bd00 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004f84:	2300      	movs	r3, #0
 8004f86:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f88:	f000 bcfc 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      default:
      {
        frequency = 0U;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f90:	f000 bcf8 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8004f94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f98:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8004f9c:	430b      	orrs	r3, r1
 8004f9e:	d14c      	bne.n	800503a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004fa0:	4b4f      	ldr	r3, [pc, #316]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004fa6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004faa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8004fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d104      	bne.n	8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004fb2:	f7fd fddf 	bl	8002b74 <HAL_RCC_GetPCLK1Freq>
 8004fb6:	6378      	str	r0, [r7, #52]	@ 0x34
 8004fb8:	f000 bce4 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8004fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fbe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fc2:	d104      	bne.n	8004fce <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004fc4:	f7fd fcb4 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 8004fc8:	6378      	str	r0, [r7, #52]	@ 0x34
 8004fca:	f000 bcdb 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8004fce:	4b44      	ldr	r3, [pc, #272]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fda:	d107      	bne.n	8004fec <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 8004fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fe2:	d103      	bne.n	8004fec <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 8004fe4:	4b3f      	ldr	r3, [pc, #252]	@ (80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8004fe6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fe8:	f000 bccc 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8004fec:	4b3c      	ldr	r3, [pc, #240]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0320 	and.w	r3, r3, #32
 8004ff4:	2b20      	cmp	r3, #32
 8004ff6:	d11c      	bne.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8004ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ffa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004ffe:	d118      	bne.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005000:	4b37      	ldr	r3, [pc, #220]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d005      	beq.n	8005018 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800500c:	4b34      	ldr	r3, [pc, #208]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	0e1b      	lsrs	r3, r3, #24
 8005012:	f003 030f 	and.w	r3, r3, #15
 8005016:	e006      	b.n	8005026 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8005018:	4b31      	ldr	r3, [pc, #196]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800501a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800501e:	041b      	lsls	r3, r3, #16
 8005020:	0e1b      	lsrs	r3, r3, #24
 8005022:	f003 030f 	and.w	r3, r3, #15
 8005026:	4a30      	ldr	r2, [pc, #192]	@ (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8005028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800502c:	637b      	str	r3, [r7, #52]	@ 0x34
 800502e:	f000 bca9 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8005032:	2300      	movs	r3, #0
 8005034:	637b      	str	r3, [r7, #52]	@ 0x34
 8005036:	f000 bca5 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800503a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800503e:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 8005042:	430b      	orrs	r3, r1
 8005044:	d152      	bne.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 8005046:	4b26      	ldr	r3, [pc, #152]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005048:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800504c:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8005050:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 8005052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005054:	2b00      	cmp	r3, #0
 8005056:	d104      	bne.n	8005062 <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005058:	f7fd fd8c 	bl	8002b74 <HAL_RCC_GetPCLK1Freq>
 800505c:	6378      	str	r0, [r7, #52]	@ 0x34
 800505e:	f000 bc91 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 8005062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005064:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005068:	d104      	bne.n	8005074 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800506a:	f7fd fc61 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 800506e:	6378      	str	r0, [r7, #52]	@ 0x34
 8005070:	f000 bc88 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 8005074:	4b1a      	ldr	r3, [pc, #104]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800507c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005080:	d107      	bne.n	8005092 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 8005082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005084:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005088:	d103      	bne.n	8005092 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800508a:	4b16      	ldr	r3, [pc, #88]	@ (80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800508c:	637b      	str	r3, [r7, #52]	@ 0x34
 800508e:	f000 bc79 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 8005092:	4b13      	ldr	r3, [pc, #76]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0320 	and.w	r3, r3, #32
 800509a:	2b20      	cmp	r3, #32
 800509c:	d11c      	bne.n	80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800509e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80050a4:	d118      	bne.n	80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80050a6:	4b0e      	ldr	r3, [pc, #56]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d005      	beq.n	80050be <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 80050b2:	4b0b      	ldr	r3, [pc, #44]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	0e1b      	lsrs	r3, r3, #24
 80050b8:	f003 030f 	and.w	r3, r3, #15
 80050bc:	e006      	b.n	80050cc <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 80050be:	4b08      	ldr	r3, [pc, #32]	@ (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80050c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80050c4:	041b      	lsls	r3, r3, #16
 80050c6:	0e1b      	lsrs	r3, r3, #24
 80050c8:	f003 030f 	and.w	r3, r3, #15
 80050cc:	4a06      	ldr	r2, [pc, #24]	@ (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 80050ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80050d4:	f000 bc56 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 80050d8:	2300      	movs	r3, #0
 80050da:	637b      	str	r3, [r7, #52]	@ 0x34
 80050dc:	f000 bc52 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 80050e0:	46020c00 	.word	0x46020c00
 80050e4:	00f42400 	.word	0x00f42400
 80050e8:	080073f4 	.word	0x080073f4
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 80050ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050f0:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 80050f4:	430b      	orrs	r3, r1
 80050f6:	d14a      	bne.n	800518e <HAL_RCCEx_GetPeriphCLKFreq+0xeae>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 80050f8:	4ba5      	ldr	r3, [pc, #660]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80050fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80050fe:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8005102:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 8005104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005106:	2b00      	cmp	r3, #0
 8005108:	d104      	bne.n	8005114 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800510a:	f7fd fd33 	bl	8002b74 <HAL_RCC_GetPCLK1Freq>
 800510e:	6378      	str	r0, [r7, #52]	@ 0x34
 8005110:	f000 bc38 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 8005114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005116:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800511a:	d104      	bne.n	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800511c:	f7fd fc08 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 8005120:	6378      	str	r0, [r7, #52]	@ 0x34
 8005122:	f000 bc2f 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 8005126:	4b9a      	ldr	r3, [pc, #616]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800512e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005132:	d107      	bne.n	8005144 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005136:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800513a:	d103      	bne.n	8005144 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800513c:	4b95      	ldr	r3, [pc, #596]	@ (8005394 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800513e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005140:	f000 bc20 	b.w	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 8005144:	4b92      	ldr	r3, [pc, #584]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0320 	and.w	r3, r3, #32
 800514c:	2b20      	cmp	r3, #32
 800514e:	d11b      	bne.n	8005188 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 8005150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005152:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005156:	d117      	bne.n	8005188 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005158:	4b8d      	ldr	r3, [pc, #564]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d005      	beq.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 8005164:	4b8a      	ldr	r3, [pc, #552]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	0e1b      	lsrs	r3, r3, #24
 800516a:	f003 030f 	and.w	r3, r3, #15
 800516e:	e006      	b.n	800517e <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 8005170:	4b87      	ldr	r3, [pc, #540]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005172:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005176:	041b      	lsls	r3, r3, #16
 8005178:	0e1b      	lsrs	r3, r3, #24
 800517a:	f003 030f 	and.w	r3, r3, #15
 800517e:	4a86      	ldr	r2, [pc, #536]	@ (8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8005180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005184:	637b      	str	r3, [r7, #52]	@ 0x34
 8005186:	e3fd      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 8005188:	2300      	movs	r3, #0
 800518a:	637b      	str	r3, [r7, #52]	@ 0x34
 800518c:	e3fa      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800518e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005192:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8005196:	430b      	orrs	r3, r1
 8005198:	d164      	bne.n	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0xf84>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800519a:	4b7d      	ldr	r3, [pc, #500]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800519c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80051a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051a4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80051a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d120      	bne.n	80051ee <HAL_RCCEx_GetPeriphCLKFreq+0xf0e>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80051ac:	4b78      	ldr	r3, [pc, #480]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0320 	and.w	r3, r3, #32
 80051b4:	2b20      	cmp	r3, #32
 80051b6:	d117      	bne.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80051b8:	4b75      	ldr	r3, [pc, #468]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d005      	beq.n	80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0xef0>
 80051c4:	4b72      	ldr	r3, [pc, #456]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	0e1b      	lsrs	r3, r3, #24
 80051ca:	f003 030f 	and.w	r3, r3, #15
 80051ce:	e006      	b.n	80051de <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
 80051d0:	4b6f      	ldr	r3, [pc, #444]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80051d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80051d6:	041b      	lsls	r3, r3, #16
 80051d8:	0e1b      	lsrs	r3, r3, #24
 80051da:	f003 030f 	and.w	r3, r3, #15
 80051de:	4a6e      	ldr	r2, [pc, #440]	@ (8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 80051e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80051e6:	e3cd      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 80051e8:	2300      	movs	r3, #0
 80051ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80051ec:	e3ca      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80051ee:	4b68      	ldr	r3, [pc, #416]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80051f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051fc:	d112      	bne.n	8005224 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
 80051fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005200:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005204:	d10e      	bne.n	8005224 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005206:	4b62      	ldr	r3, [pc, #392]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005208:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800520c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005210:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005214:	d102      	bne.n	800521c <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
      {
        frequency = LSI_VALUE / 128U;
 8005216:	23fa      	movs	r3, #250	@ 0xfa
 8005218:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800521a:	e3b3      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 800521c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005220:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005222:	e3af      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8005224:	4b5a      	ldr	r3, [pc, #360]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800522c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005230:	d106      	bne.n	8005240 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8005232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005234:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005238:	d102      	bne.n	8005240 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
    {
      frequency = HSI_VALUE;
 800523a:	4b56      	ldr	r3, [pc, #344]	@ (8005394 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800523c:	637b      	str	r3, [r7, #52]	@ 0x34
 800523e:	e3a1      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8005240:	4b53      	ldr	r3, [pc, #332]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005242:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b02      	cmp	r3, #2
 800524c:	d107      	bne.n	800525e <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
 800524e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005250:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005254:	d103      	bne.n	800525e <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
    {
      frequency = LSE_VALUE;
 8005256:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800525a:	637b      	str	r3, [r7, #52]	@ 0x34
 800525c:	e392      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800525e:	2300      	movs	r3, #0
 8005260:	637b      	str	r3, [r7, #52]	@ 0x34
 8005262:	e38f      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8005264:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005268:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800526c:	430b      	orrs	r3, r1
 800526e:	d164      	bne.n	800533a <HAL_RCCEx_GetPeriphCLKFreq+0x105a>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005270:	4b47      	ldr	r3, [pc, #284]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005272:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005276:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800527a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800527c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800527e:	2b00      	cmp	r3, #0
 8005280:	d120      	bne.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005282:	4b43      	ldr	r3, [pc, #268]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0320 	and.w	r3, r3, #32
 800528a:	2b20      	cmp	r3, #32
 800528c:	d117      	bne.n	80052be <HAL_RCCEx_GetPeriphCLKFreq+0xfde>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800528e:	4b40      	ldr	r3, [pc, #256]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d005      	beq.n	80052a6 <HAL_RCCEx_GetPeriphCLKFreq+0xfc6>
 800529a:	4b3d      	ldr	r3, [pc, #244]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	0e1b      	lsrs	r3, r3, #24
 80052a0:	f003 030f 	and.w	r3, r3, #15
 80052a4:	e006      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 80052a6:	4b3a      	ldr	r3, [pc, #232]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80052a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80052ac:	041b      	lsls	r3, r3, #16
 80052ae:	0e1b      	lsrs	r3, r3, #24
 80052b0:	f003 030f 	and.w	r3, r3, #15
 80052b4:	4a38      	ldr	r2, [pc, #224]	@ (8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 80052b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80052bc:	e362      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 80052be:	2300      	movs	r3, #0
 80052c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80052c2:	e35f      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80052c4:	4b32      	ldr	r3, [pc, #200]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80052c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052d2:	d112      	bne.n	80052fa <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
 80052d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052da:	d10e      	bne.n	80052fa <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80052dc:	4b2c      	ldr	r3, [pc, #176]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80052de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052ea:	d102      	bne.n	80052f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1012>
      {
        frequency = LSI_VALUE / 128U;
 80052ec:	23fa      	movs	r3, #250	@ 0xfa
 80052ee:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80052f0:	e348      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 80052f2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80052f6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80052f8:	e344      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80052fa:	4b25      	ldr	r3, [pc, #148]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005302:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005306:	d106      	bne.n	8005316 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
 8005308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800530e:	d102      	bne.n	8005316 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
    {
      frequency = HSI_VALUE;
 8005310:	4b20      	ldr	r3, [pc, #128]	@ (8005394 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8005312:	637b      	str	r3, [r7, #52]	@ 0x34
 8005314:	e336      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8005316:	4b1e      	ldr	r3, [pc, #120]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005318:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800531c:	f003 0302 	and.w	r3, r3, #2
 8005320:	2b02      	cmp	r3, #2
 8005322:	d107      	bne.n	8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
 8005324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005326:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800532a:	d103      	bne.n	8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
    {
      frequency = LSE_VALUE;
 800532c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005330:	637b      	str	r3, [r7, #52]	@ 0x34
 8005332:	e327      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8005334:	2300      	movs	r3, #0
 8005336:	637b      	str	r3, [r7, #52]	@ 0x34
 8005338:	e324      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800533a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800533e:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005342:	430b      	orrs	r3, r1
 8005344:	d14e      	bne.n	80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1104>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005346:	4b12      	ldr	r3, [pc, #72]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800534c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005350:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8005352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005354:	2b00      	cmp	r3, #0
 8005356:	d103      	bne.n	8005360 <HAL_RCCEx_GetPeriphCLKFreq+0x1080>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005358:	f7fd fc0c 	bl	8002b74 <HAL_RCC_GetPCLK1Freq>
 800535c:	6378      	str	r0, [r7, #52]	@ 0x34
 800535e:	e311      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8005360:	4b0b      	ldr	r3, [pc, #44]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005362:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005366:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800536a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800536e:	d119      	bne.n	80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 8005370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005372:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005376:	d115      	bne.n	80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005378:	4b05      	ldr	r3, [pc, #20]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800537a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800537e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005382:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005386:	d109      	bne.n	800539c <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>
      {
        frequency = LSI_VALUE / 128U;
 8005388:	23fa      	movs	r3, #250	@ 0xfa
 800538a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800538c:	e2fa      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800538e:	bf00      	nop
 8005390:	46020c00 	.word	0x46020c00
 8005394:	00f42400 	.word	0x00f42400
 8005398:	080073f4 	.word	0x080073f4
      }
      else
      {
        frequency = LSI_VALUE;
 800539c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80053a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80053a2:	e2ef      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80053a4:	4ba8      	ldr	r3, [pc, #672]	@ (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053b0:	d106      	bne.n	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
 80053b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80053b8:	d102      	bne.n	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
    {
      frequency = HSI_VALUE;
 80053ba:	4ba4      	ldr	r3, [pc, #656]	@ (800564c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80053bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80053be:	e2e1      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80053c0:	4ba1      	ldr	r3, [pc, #644]	@ (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80053c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d107      	bne.n	80053de <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
 80053ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80053d4:	d103      	bne.n	80053de <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
    {
      frequency = LSE_VALUE;
 80053d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053da:	637b      	str	r3, [r7, #52]	@ 0x34
 80053dc:	e2d2      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80053de:	2300      	movs	r3, #0
 80053e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80053e2:	e2cf      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80053e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053e8:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80053ec:	430b      	orrs	r3, r1
 80053ee:	d12d      	bne.n	800544c <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80053f0:	4b95      	ldr	r3, [pc, #596]	@ (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80053f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053f6:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80053fa:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80053fc:	4b92      	ldr	r3, [pc, #584]	@ (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005404:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005408:	d105      	bne.n	8005416 <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
 800540a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800540c:	2b00      	cmp	r3, #0
 800540e:	d102      	bne.n	8005416 <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
    {
      frequency = HSE_VALUE;
 8005410:	4b8e      	ldr	r3, [pc, #568]	@ (800564c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8005412:	637b      	str	r3, [r7, #52]	@ 0x34
 8005414:	e2b6      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8005416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005418:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800541c:	d107      	bne.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x114e>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800541e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005422:	4618      	mov	r0, r3
 8005424:	f7fe fb24 	bl	8003a70 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8005428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800542a:	637b      	str	r3, [r7, #52]	@ 0x34
 800542c:	e2aa      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800542e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005430:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005434:	d107      	bne.n	8005446 <HAL_RCCEx_GetPeriphCLKFreq+0x1166>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005436:	f107 0318 	add.w	r3, r7, #24
 800543a:	4618      	mov	r0, r3
 800543c:	f7fe fc80 	bl	8003d40 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	637b      	str	r3, [r7, #52]	@ 0x34
 8005444:	e29e      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8005446:	2300      	movs	r3, #0
 8005448:	637b      	str	r3, [r7, #52]	@ 0x34
 800544a:	e29b      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800544c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005450:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8005454:	430b      	orrs	r3, r1
 8005456:	d156      	bne.n	8005506 <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8005458:	4b7b      	ldr	r3, [pc, #492]	@ (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800545a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800545e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005462:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8005464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005466:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800546a:	d028      	beq.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
 800546c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005472:	d845      	bhi.n	8005500 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 8005474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005476:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800547a:	d013      	beq.n	80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0x11c4>
 800547c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800547e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005482:	d83d      	bhi.n	8005500 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 8005484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005486:	2b00      	cmp	r3, #0
 8005488:	d004      	beq.n	8005494 <HAL_RCCEx_GetPeriphCLKFreq+0x11b4>
 800548a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800548c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005490:	d004      	beq.n	800549c <HAL_RCCEx_GetPeriphCLKFreq+0x11bc>
 8005492:	e035      	b.n	8005500 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8005494:	f7fd fb82 	bl	8002b9c <HAL_RCC_GetPCLK2Freq>
 8005498:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800549a:	e273      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800549c:	f7fd fa48 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 80054a0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80054a2:	e26f      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80054a4:	4b68      	ldr	r3, [pc, #416]	@ (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054b0:	d102      	bne.n	80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        {
          frequency = HSI_VALUE;
 80054b2:	4b66      	ldr	r3, [pc, #408]	@ (800564c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80054b4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80054b6:	e265      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80054b8:	2300      	movs	r3, #0
 80054ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80054bc:	e262      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80054be:	4b62      	ldr	r3, [pc, #392]	@ (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0320 	and.w	r3, r3, #32
 80054c6:	2b20      	cmp	r3, #32
 80054c8:	d117      	bne.n	80054fa <HAL_RCCEx_GetPeriphCLKFreq+0x121a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80054ca:	4b5f      	ldr	r3, [pc, #380]	@ (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d005      	beq.n	80054e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1202>
 80054d6:	4b5c      	ldr	r3, [pc, #368]	@ (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	0e1b      	lsrs	r3, r3, #24
 80054dc:	f003 030f 	and.w	r3, r3, #15
 80054e0:	e006      	b.n	80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1210>
 80054e2:	4b59      	ldr	r3, [pc, #356]	@ (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80054e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80054e8:	041b      	lsls	r3, r3, #16
 80054ea:	0e1b      	lsrs	r3, r3, #24
 80054ec:	f003 030f 	and.w	r3, r3, #15
 80054f0:	4a57      	ldr	r2, [pc, #348]	@ (8005650 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 80054f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054f6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80054f8:	e244      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80054fa:	2300      	movs	r3, #0
 80054fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80054fe:	e241      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8005500:	2300      	movs	r3, #0
 8005502:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005504:	e23e      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8005506:	e9d7 2300 	ldrd	r2, r3, [r7]
 800550a:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800550e:	430b      	orrs	r3, r1
 8005510:	d156      	bne.n	80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005512:	4b4d      	ldr	r3, [pc, #308]	@ (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005518:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800551c:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800551e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005520:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005524:	d028      	beq.n	8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>
 8005526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005528:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800552c:	d845      	bhi.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 800552e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005530:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005534:	d013      	beq.n	800555e <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 8005536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005538:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800553c:	d83d      	bhi.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 800553e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005540:	2b00      	cmp	r3, #0
 8005542:	d004      	beq.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8005544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005546:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800554a:	d004      	beq.n	8005556 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 800554c:	e035      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800554e:	f7fd fb11 	bl	8002b74 <HAL_RCC_GetPCLK1Freq>
 8005552:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005554:	e216      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005556:	f7fd f9eb 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 800555a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800555c:	e212      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800555e:	4b3a      	ldr	r3, [pc, #232]	@ (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005566:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800556a:	d102      	bne.n	8005572 <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
        {
          frequency = HSI_VALUE;
 800556c:	4b37      	ldr	r3, [pc, #220]	@ (800564c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800556e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005570:	e208      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8005572:	2300      	movs	r3, #0
 8005574:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005576:	e205      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005578:	4b33      	ldr	r3, [pc, #204]	@ (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0320 	and.w	r3, r3, #32
 8005580:	2b20      	cmp	r3, #32
 8005582:	d117      	bne.n	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12d4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005584:	4b30      	ldr	r3, [pc, #192]	@ (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d005      	beq.n	800559c <HAL_RCCEx_GetPeriphCLKFreq+0x12bc>
 8005590:	4b2d      	ldr	r3, [pc, #180]	@ (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	0e1b      	lsrs	r3, r3, #24
 8005596:	f003 030f 	and.w	r3, r3, #15
 800559a:	e006      	b.n	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0x12ca>
 800559c:	4b2a      	ldr	r3, [pc, #168]	@ (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800559e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80055a2:	041b      	lsls	r3, r3, #16
 80055a4:	0e1b      	lsrs	r3, r3, #24
 80055a6:	f003 030f 	and.w	r3, r3, #15
 80055aa:	4a29      	ldr	r2, [pc, #164]	@ (8005650 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 80055ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055b0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80055b2:	e1e7      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80055b4:	2300      	movs	r3, #0
 80055b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80055b8:	e1e4      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80055ba:	2300      	movs	r3, #0
 80055bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80055be:	e1e1      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80055c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055c4:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80055c8:	430b      	orrs	r3, r1
 80055ca:	d17c      	bne.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80055cc:	4b1e      	ldr	r3, [pc, #120]	@ (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80055ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80055d2:	f003 0318 	and.w	r3, r3, #24
 80055d6:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80055d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055da:	2b18      	cmp	r3, #24
 80055dc:	d870      	bhi.n	80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>
 80055de:	a201      	add	r2, pc, #4	@ (adr r2, 80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1304>)
 80055e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e4:	08005655 	.word	0x08005655
 80055e8:	080056c1 	.word	0x080056c1
 80055ec:	080056c1 	.word	0x080056c1
 80055f0:	080056c1 	.word	0x080056c1
 80055f4:	080056c1 	.word	0x080056c1
 80055f8:	080056c1 	.word	0x080056c1
 80055fc:	080056c1 	.word	0x080056c1
 8005600:	080056c1 	.word	0x080056c1
 8005604:	0800565d 	.word	0x0800565d
 8005608:	080056c1 	.word	0x080056c1
 800560c:	080056c1 	.word	0x080056c1
 8005610:	080056c1 	.word	0x080056c1
 8005614:	080056c1 	.word	0x080056c1
 8005618:	080056c1 	.word	0x080056c1
 800561c:	080056c1 	.word	0x080056c1
 8005620:	080056c1 	.word	0x080056c1
 8005624:	08005665 	.word	0x08005665
 8005628:	080056c1 	.word	0x080056c1
 800562c:	080056c1 	.word	0x080056c1
 8005630:	080056c1 	.word	0x080056c1
 8005634:	080056c1 	.word	0x080056c1
 8005638:	080056c1 	.word	0x080056c1
 800563c:	080056c1 	.word	0x080056c1
 8005640:	080056c1 	.word	0x080056c1
 8005644:	0800567f 	.word	0x0800567f
 8005648:	46020c00 	.word	0x46020c00
 800564c:	00f42400 	.word	0x00f42400
 8005650:	080073f4 	.word	0x080073f4
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8005654:	f7fd fab6 	bl	8002bc4 <HAL_RCC_GetPCLK3Freq>
 8005658:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800565a:	e193      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800565c:	f7fd f968 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 8005660:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005662:	e18f      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005664:	4b9f      	ldr	r3, [pc, #636]	@ (80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800566c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005670:	d102      	bne.n	8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
        {
          frequency = HSI_VALUE;
 8005672:	4b9d      	ldr	r3, [pc, #628]	@ (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8005674:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005676:	e185      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8005678:	2300      	movs	r3, #0
 800567a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800567c:	e182      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800567e:	4b99      	ldr	r3, [pc, #612]	@ (80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0320 	and.w	r3, r3, #32
 8005686:	2b20      	cmp	r3, #32
 8005688:	d117      	bne.n	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0x13da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800568a:	4b96      	ldr	r3, [pc, #600]	@ (80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d005      	beq.n	80056a2 <HAL_RCCEx_GetPeriphCLKFreq+0x13c2>
 8005696:	4b93      	ldr	r3, [pc, #588]	@ (80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	0e1b      	lsrs	r3, r3, #24
 800569c:	f003 030f 	and.w	r3, r3, #15
 80056a0:	e006      	b.n	80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x13d0>
 80056a2:	4b90      	ldr	r3, [pc, #576]	@ (80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80056a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80056a8:	041b      	lsls	r3, r3, #16
 80056aa:	0e1b      	lsrs	r3, r3, #24
 80056ac:	f003 030f 	and.w	r3, r3, #15
 80056b0:	4a8e      	ldr	r2, [pc, #568]	@ (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80056b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056b6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80056b8:	e164      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80056ba:	2300      	movs	r3, #0
 80056bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80056be:	e161      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80056c0:	2300      	movs	r3, #0
 80056c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80056c4:	e15e      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80056c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056ca:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 80056ce:	430b      	orrs	r3, r1
 80056d0:	d155      	bne.n	800577e <HAL_RCCEx_GetPeriphCLKFreq+0x149e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80056d2:	4b84      	ldr	r3, [pc, #528]	@ (80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80056d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80056d8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80056dc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80056de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80056e4:	d013      	beq.n	800570e <HAL_RCCEx_GetPeriphCLKFreq+0x142e>
 80056e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80056ec:	d844      	bhi.n	8005778 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 80056ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056f4:	d013      	beq.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
 80056f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056fc:	d83c      	bhi.n	8005778 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 80056fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005700:	2b00      	cmp	r3, #0
 8005702:	d014      	beq.n	800572e <HAL_RCCEx_GetPeriphCLKFreq+0x144e>
 8005704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005706:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800570a:	d014      	beq.n	8005736 <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 800570c:	e034      	b.n	8005778 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800570e:	f107 0318 	add.w	r3, r7, #24
 8005712:	4618      	mov	r0, r3
 8005714:	f7fe fb14 	bl	8003d40 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800571c:	e132      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800571e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005722:	4618      	mov	r0, r3
 8005724:	f7fe f9a4 	bl	8003a70 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800572a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800572c:	e12a      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800572e:	f7fd f8ff 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 8005732:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005734:	e126      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005736:	4b6b      	ldr	r3, [pc, #428]	@ (80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0320 	and.w	r3, r3, #32
 800573e:	2b20      	cmp	r3, #32
 8005740:	d117      	bne.n	8005772 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005742:	4b68      	ldr	r3, [pc, #416]	@ (80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d005      	beq.n	800575a <HAL_RCCEx_GetPeriphCLKFreq+0x147a>
 800574e:	4b65      	ldr	r3, [pc, #404]	@ (80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	0e1b      	lsrs	r3, r3, #24
 8005754:	f003 030f 	and.w	r3, r3, #15
 8005758:	e006      	b.n	8005768 <HAL_RCCEx_GetPeriphCLKFreq+0x1488>
 800575a:	4b62      	ldr	r3, [pc, #392]	@ (80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800575c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005760:	041b      	lsls	r3, r3, #16
 8005762:	0e1b      	lsrs	r3, r3, #24
 8005764:	f003 030f 	and.w	r3, r3, #15
 8005768:	4a60      	ldr	r2, [pc, #384]	@ (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800576a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800576e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005770:	e108      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8005772:	2300      	movs	r3, #0
 8005774:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005776:	e105      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8005778:	2300      	movs	r3, #0
 800577a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800577c:	e102      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800577e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005782:	1e59      	subs	r1, r3, #1
 8005784:	ea52 0301 	orrs.w	r3, r2, r1
 8005788:	d13c      	bne.n	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800578a:	4b56      	ldr	r3, [pc, #344]	@ (80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800578c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005790:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005794:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005798:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800579c:	d027      	beq.n	80057ee <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 800579e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80057a4:	d82b      	bhi.n	80057fe <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 80057a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80057ac:	d017      	beq.n	80057de <HAL_RCCEx_GetPeriphCLKFreq+0x14fe>
 80057ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80057b4:	d823      	bhi.n	80057fe <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 80057b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d004      	beq.n	80057c6 <HAL_RCCEx_GetPeriphCLKFreq+0x14e6>
 80057bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057c2:	d004      	beq.n	80057ce <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 80057c4:	e01b      	b.n	80057fe <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80057c6:	f7fd f8b3 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 80057ca:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80057cc:	e0da      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7fe f94c 	bl	8003a70 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80057d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80057dc:	e0d2      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057de:	f107 0318 	add.w	r3, r7, #24
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7fe faac 	bl	8003d40 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80057ec:	e0ca      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057ee:	f107 030c 	add.w	r3, r7, #12
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7fe fc0c 	bl	8004010 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80057fc:	e0c2      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80057fe:	2300      	movs	r3, #0
 8005800:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005802:	e0bf      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8005804:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005808:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800580c:	430b      	orrs	r3, r1
 800580e:	d131      	bne.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x1594>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8005810:	4b34      	ldr	r3, [pc, #208]	@ (80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005812:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005816:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800581a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800581c:	4b31      	ldr	r3, [pc, #196]	@ (80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800581e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005822:	f003 0302 	and.w	r3, r3, #2
 8005826:	2b02      	cmp	r3, #2
 8005828:	d106      	bne.n	8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
 800582a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582c:	2b00      	cmp	r3, #0
 800582e:	d103      	bne.n	8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
    {
      frequency = LSE_VALUE;
 8005830:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005834:	637b      	str	r3, [r7, #52]	@ 0x34
 8005836:	e0a5      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8005838:	4b2a      	ldr	r3, [pc, #168]	@ (80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800583a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800583e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005842:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005846:	d112      	bne.n	800586e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
 8005848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800584a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800584e:	d10e      	bne.n	800586e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005850:	4b24      	ldr	r3, [pc, #144]	@ (80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005852:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800585a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800585e:	d102      	bne.n	8005866 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
      {
        frequency = LSI_VALUE / 128U;
 8005860:	23fa      	movs	r3, #250	@ 0xfa
 8005862:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005864:	e08e      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 8005866:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800586a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800586c:	e08a      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	637b      	str	r3, [r7, #52]	@ 0x34
 8005872:	e087      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8005874:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005878:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800587c:	430b      	orrs	r3, r1
 800587e:	d13b      	bne.n	80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005880:	4b18      	ldr	r3, [pc, #96]	@ (80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005882:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005886:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800588a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800588c:	4b15      	ldr	r3, [pc, #84]	@ (80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005894:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005898:	d105      	bne.n	80058a6 <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
 800589a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800589c:	2b00      	cmp	r3, #0
 800589e:	d102      	bne.n	80058a6 <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
    {
      frequency = HSI48_VALUE;
 80058a0:	4b13      	ldr	r3, [pc, #76]	@ (80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 80058a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80058a4:	e06e      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 80058a6:	4b0f      	ldr	r3, [pc, #60]	@ (80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058b2:	d106      	bne.n	80058c2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
 80058b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058ba:	d102      	bne.n	80058c2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
    {
      frequency = HSI48_VALUE >> 1U ;
 80058bc:	4b0d      	ldr	r3, [pc, #52]	@ (80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 80058be:	637b      	str	r3, [r7, #52]	@ 0x34
 80058c0:	e060      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80058c2:	4b08      	ldr	r3, [pc, #32]	@ (80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058ce:	d106      	bne.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
 80058d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058d6:	d102      	bne.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
    {
      frequency = HSI_VALUE;
 80058d8:	4b03      	ldr	r3, [pc, #12]	@ (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80058da:	637b      	str	r3, [r7, #52]	@ 0x34
 80058dc:	e052      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80058de:	2300      	movs	r3, #0
 80058e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80058e2:	e04f      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 80058e4:	46020c00 	.word	0x46020c00
 80058e8:	00f42400 	.word	0x00f42400
 80058ec:	080073f4 	.word	0x080073f4
 80058f0:	02dc6c00 	.word	0x02dc6c00
 80058f4:	016e3600 	.word	0x016e3600
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 80058f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058fc:	f1a3 0108 	sub.w	r1, r3, #8
 8005900:	ea52 0301 	orrs.w	r3, r2, r1
 8005904:	d13c      	bne.n	8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 8005906:	4b22      	ldr	r3, [pc, #136]	@ (8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 8005908:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800590c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005910:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 8005912:	4b1f      	ldr	r3, [pc, #124]	@ (8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800591a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800591e:	d105      	bne.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
 8005920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005922:	2b00      	cmp	r3, #0
 8005924:	d102      	bne.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    {
      frequency = HSE_VALUE;
 8005926:	4b1b      	ldr	r3, [pc, #108]	@ (8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x16b4>)
 8005928:	637b      	str	r3, [r7, #52]	@ 0x34
 800592a:	e02b      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800592c:	4b18      	ldr	r3, [pc, #96]	@ (8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005934:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005938:	d106      	bne.n	8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
 800593a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800593c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005940:	d102      	bne.n	8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
    {
      frequency = HSE_VALUE >> 1U ;
 8005942:	4b15      	ldr	r3, [pc, #84]	@ (8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 8005944:	637b      	str	r3, [r7, #52]	@ 0x34
 8005946:	e01d      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 8005948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800594a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800594e:	d107      	bne.n	8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x1680>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005950:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005954:	4618      	mov	r0, r3
 8005956:	f7fe f88b 	bl	8003a70 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800595a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595c:	637b      	str	r3, [r7, #52]	@ 0x34
 800595e:	e011      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 8005960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005962:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005966:	d108      	bne.n	800597a <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005968:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800596c:	4618      	mov	r0, r3
 800596e:	f7fe f87f 	bl	8003a70 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 8005972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005974:	085b      	lsrs	r3, r3, #1
 8005976:	637b      	str	r3, [r7, #52]	@ 0x34
 8005978:	e004      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800597a:	2300      	movs	r3, #0
 800597c:	637b      	str	r3, [r7, #52]	@ 0x34
 800597e:	e001      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8005980:	2300      	movs	r3, #0
 8005982:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8005984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005986:	4618      	mov	r0, r3
 8005988:	3738      	adds	r7, #56	@ 0x38
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	46020c00 	.word	0x46020c00
 8005994:	00f42400 	.word	0x00f42400
 8005998:	007a1200 	.word	0x007a1200

0800599c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80059a4:	4b47      	ldr	r3, [pc, #284]	@ (8005ac4 <RCCEx_PLL2_Config+0x128>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a46      	ldr	r2, [pc, #280]	@ (8005ac4 <RCCEx_PLL2_Config+0x128>)
 80059aa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80059ae:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80059b0:	f7fb fac0 	bl	8000f34 <HAL_GetTick>
 80059b4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80059b6:	e008      	b.n	80059ca <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80059b8:	f7fb fabc 	bl	8000f34 <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d901      	bls.n	80059ca <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e077      	b.n	8005aba <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80059ca:	4b3e      	ldr	r3, [pc, #248]	@ (8005ac4 <RCCEx_PLL2_Config+0x128>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1f0      	bne.n	80059b8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80059d6:	4b3b      	ldr	r3, [pc, #236]	@ (8005ac4 <RCCEx_PLL2_Config+0x128>)
 80059d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059da:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80059de:	f023 0303 	bic.w	r3, r3, #3
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	6811      	ldr	r1, [r2, #0]
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	6852      	ldr	r2, [r2, #4]
 80059ea:	3a01      	subs	r2, #1
 80059ec:	0212      	lsls	r2, r2, #8
 80059ee:	430a      	orrs	r2, r1
 80059f0:	4934      	ldr	r1, [pc, #208]	@ (8005ac4 <RCCEx_PLL2_Config+0x128>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80059f6:	4b33      	ldr	r3, [pc, #204]	@ (8005ac4 <RCCEx_PLL2_Config+0x128>)
 80059f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059fa:	4b33      	ldr	r3, [pc, #204]	@ (8005ac8 <RCCEx_PLL2_Config+0x12c>)
 80059fc:	4013      	ands	r3, r2
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	6892      	ldr	r2, [r2, #8]
 8005a02:	3a01      	subs	r2, #1
 8005a04:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	68d2      	ldr	r2, [r2, #12]
 8005a0c:	3a01      	subs	r2, #1
 8005a0e:	0252      	lsls	r2, r2, #9
 8005a10:	b292      	uxth	r2, r2
 8005a12:	4311      	orrs	r1, r2
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	6912      	ldr	r2, [r2, #16]
 8005a18:	3a01      	subs	r2, #1
 8005a1a:	0412      	lsls	r2, r2, #16
 8005a1c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005a20:	4311      	orrs	r1, r2
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	6952      	ldr	r2, [r2, #20]
 8005a26:	3a01      	subs	r2, #1
 8005a28:	0612      	lsls	r2, r2, #24
 8005a2a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	4924      	ldr	r1, [pc, #144]	@ (8005ac4 <RCCEx_PLL2_Config+0x128>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005a36:	4b23      	ldr	r3, [pc, #140]	@ (8005ac4 <RCCEx_PLL2_Config+0x128>)
 8005a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a3a:	f023 020c 	bic.w	r2, r3, #12
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	4920      	ldr	r1, [pc, #128]	@ (8005ac4 <RCCEx_PLL2_Config+0x128>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005a48:	4b1e      	ldr	r3, [pc, #120]	@ (8005ac4 <RCCEx_PLL2_Config+0x128>)
 8005a4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	491c      	ldr	r1, [pc, #112]	@ (8005ac4 <RCCEx_PLL2_Config+0x128>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8005a56:	4b1b      	ldr	r3, [pc, #108]	@ (8005ac4 <RCCEx_PLL2_Config+0x128>)
 8005a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5a:	4a1a      	ldr	r2, [pc, #104]	@ (8005ac4 <RCCEx_PLL2_Config+0x128>)
 8005a5c:	f023 0310 	bic.w	r3, r3, #16
 8005a60:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005a62:	4b18      	ldr	r3, [pc, #96]	@ (8005ac4 <RCCEx_PLL2_Config+0x128>)
 8005a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a6a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	69d2      	ldr	r2, [r2, #28]
 8005a72:	00d2      	lsls	r2, r2, #3
 8005a74:	4913      	ldr	r1, [pc, #76]	@ (8005ac4 <RCCEx_PLL2_Config+0x128>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8005a7a:	4b12      	ldr	r3, [pc, #72]	@ (8005ac4 <RCCEx_PLL2_Config+0x128>)
 8005a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a7e:	4a11      	ldr	r2, [pc, #68]	@ (8005ac4 <RCCEx_PLL2_Config+0x128>)
 8005a80:	f043 0310 	orr.w	r3, r3, #16
 8005a84:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8005a86:	4b0f      	ldr	r3, [pc, #60]	@ (8005ac4 <RCCEx_PLL2_Config+0x128>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a0e      	ldr	r2, [pc, #56]	@ (8005ac4 <RCCEx_PLL2_Config+0x128>)
 8005a8c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005a90:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005a92:	f7fb fa4f 	bl	8000f34 <HAL_GetTick>
 8005a96:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a98:	e008      	b.n	8005aac <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005a9a:	f7fb fa4b 	bl	8000f34 <HAL_GetTick>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d901      	bls.n	8005aac <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e006      	b.n	8005aba <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005aac:	4b05      	ldr	r3, [pc, #20]	@ (8005ac4 <RCCEx_PLL2_Config+0x128>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d0f0      	beq.n	8005a9a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0

}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	46020c00 	.word	0x46020c00
 8005ac8:	80800000 	.word	0x80800000

08005acc <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8005ad4:	4b47      	ldr	r3, [pc, #284]	@ (8005bf4 <RCCEx_PLL3_Config+0x128>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a46      	ldr	r2, [pc, #280]	@ (8005bf4 <RCCEx_PLL3_Config+0x128>)
 8005ada:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ade:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005ae0:	f7fb fa28 	bl	8000f34 <HAL_GetTick>
 8005ae4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005ae6:	e008      	b.n	8005afa <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005ae8:	f7fb fa24 	bl	8000f34 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d901      	bls.n	8005afa <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e077      	b.n	8005bea <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005afa:	4b3e      	ldr	r3, [pc, #248]	@ (8005bf4 <RCCEx_PLL3_Config+0x128>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1f0      	bne.n	8005ae8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8005b06:	4b3b      	ldr	r3, [pc, #236]	@ (8005bf4 <RCCEx_PLL3_Config+0x128>)
 8005b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b0a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005b0e:	f023 0303 	bic.w	r3, r3, #3
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	6811      	ldr	r1, [r2, #0]
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	6852      	ldr	r2, [r2, #4]
 8005b1a:	3a01      	subs	r2, #1
 8005b1c:	0212      	lsls	r2, r2, #8
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	4934      	ldr	r1, [pc, #208]	@ (8005bf4 <RCCEx_PLL3_Config+0x128>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	630b      	str	r3, [r1, #48]	@ 0x30
 8005b26:	4b33      	ldr	r3, [pc, #204]	@ (8005bf4 <RCCEx_PLL3_Config+0x128>)
 8005b28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b2a:	4b33      	ldr	r3, [pc, #204]	@ (8005bf8 <RCCEx_PLL3_Config+0x12c>)
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	6892      	ldr	r2, [r2, #8]
 8005b32:	3a01      	subs	r2, #1
 8005b34:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	68d2      	ldr	r2, [r2, #12]
 8005b3c:	3a01      	subs	r2, #1
 8005b3e:	0252      	lsls	r2, r2, #9
 8005b40:	b292      	uxth	r2, r2
 8005b42:	4311      	orrs	r1, r2
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	6912      	ldr	r2, [r2, #16]
 8005b48:	3a01      	subs	r2, #1
 8005b4a:	0412      	lsls	r2, r2, #16
 8005b4c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005b50:	4311      	orrs	r1, r2
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	6952      	ldr	r2, [r2, #20]
 8005b56:	3a01      	subs	r2, #1
 8005b58:	0612      	lsls	r2, r2, #24
 8005b5a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	4924      	ldr	r1, [pc, #144]	@ (8005bf4 <RCCEx_PLL3_Config+0x128>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8005b66:	4b23      	ldr	r3, [pc, #140]	@ (8005bf4 <RCCEx_PLL3_Config+0x128>)
 8005b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b6a:	f023 020c 	bic.w	r2, r3, #12
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	4920      	ldr	r1, [pc, #128]	@ (8005bf4 <RCCEx_PLL3_Config+0x128>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005b78:	4b1e      	ldr	r3, [pc, #120]	@ (8005bf4 <RCCEx_PLL3_Config+0x128>)
 8005b7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a1b      	ldr	r3, [r3, #32]
 8005b80:	491c      	ldr	r1, [pc, #112]	@ (8005bf4 <RCCEx_PLL3_Config+0x128>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8005b86:	4b1b      	ldr	r3, [pc, #108]	@ (8005bf4 <RCCEx_PLL3_Config+0x128>)
 8005b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b8a:	4a1a      	ldr	r2, [pc, #104]	@ (8005bf4 <RCCEx_PLL3_Config+0x128>)
 8005b8c:	f023 0310 	bic.w	r3, r3, #16
 8005b90:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005b92:	4b18      	ldr	r3, [pc, #96]	@ (8005bf4 <RCCEx_PLL3_Config+0x128>)
 8005b94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b9a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	69d2      	ldr	r2, [r2, #28]
 8005ba2:	00d2      	lsls	r2, r2, #3
 8005ba4:	4913      	ldr	r1, [pc, #76]	@ (8005bf4 <RCCEx_PLL3_Config+0x128>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8005baa:	4b12      	ldr	r3, [pc, #72]	@ (8005bf4 <RCCEx_PLL3_Config+0x128>)
 8005bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bae:	4a11      	ldr	r2, [pc, #68]	@ (8005bf4 <RCCEx_PLL3_Config+0x128>)
 8005bb0:	f043 0310 	orr.w	r3, r3, #16
 8005bb4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8005bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8005bf4 <RCCEx_PLL3_Config+0x128>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a0e      	ldr	r2, [pc, #56]	@ (8005bf4 <RCCEx_PLL3_Config+0x128>)
 8005bbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bc0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005bc2:	f7fb f9b7 	bl	8000f34 <HAL_GetTick>
 8005bc6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005bc8:	e008      	b.n	8005bdc <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005bca:	f7fb f9b3 	bl	8000f34 <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d901      	bls.n	8005bdc <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e006      	b.n	8005bea <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005bdc:	4b05      	ldr	r3, [pc, #20]	@ (8005bf4 <RCCEx_PLL3_Config+0x128>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d0f0      	beq.n	8005bca <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	46020c00 	.word	0x46020c00
 8005bf8:	80800000 	.word	0x80800000

08005bfc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d101      	bne.n	8005c0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e0fb      	b.n	8005e06 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a7f      	ldr	r2, [pc, #508]	@ (8005e10 <HAL_SPI_Init+0x214>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d004      	beq.n	8005c22 <HAL_SPI_Init+0x26>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a7d      	ldr	r2, [pc, #500]	@ (8005e14 <HAL_SPI_Init+0x218>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	e000      	b.n	8005c24 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8005c22:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a78      	ldr	r2, [pc, #480]	@ (8005e10 <HAL_SPI_Init+0x214>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d004      	beq.n	8005c3e <HAL_SPI_Init+0x42>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a76      	ldr	r2, [pc, #472]	@ (8005e14 <HAL_SPI_Init+0x218>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d105      	bne.n	8005c4a <HAL_SPI_Init+0x4e>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	2b0f      	cmp	r3, #15
 8005c44:	d901      	bls.n	8005c4a <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e0dd      	b.n	8005e06 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 fe16 	bl	800687c <SPI_GetPacketSize>
 8005c50:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a6e      	ldr	r2, [pc, #440]	@ (8005e10 <HAL_SPI_Init+0x214>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d004      	beq.n	8005c66 <HAL_SPI_Init+0x6a>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a6c      	ldr	r2, [pc, #432]	@ (8005e14 <HAL_SPI_Init+0x218>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d102      	bne.n	8005c6c <HAL_SPI_Init+0x70>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2b08      	cmp	r3, #8
 8005c6a:	d816      	bhi.n	8005c9a <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005c70:	4a69      	ldr	r2, [pc, #420]	@ (8005e18 <HAL_SPI_Init+0x21c>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d00e      	beq.n	8005c94 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a68      	ldr	r2, [pc, #416]	@ (8005e1c <HAL_SPI_Init+0x220>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d009      	beq.n	8005c94 <HAL_SPI_Init+0x98>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a66      	ldr	r2, [pc, #408]	@ (8005e20 <HAL_SPI_Init+0x224>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d004      	beq.n	8005c94 <HAL_SPI_Init+0x98>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a65      	ldr	r2, [pc, #404]	@ (8005e24 <HAL_SPI_Init+0x228>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d104      	bne.n	8005c9e <HAL_SPI_Init+0xa2>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2b10      	cmp	r3, #16
 8005c98:	d901      	bls.n	8005c9e <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e0b3      	b.n	8005e06 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d106      	bne.n	8005cb8 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7fa fefa 	bl	8000aac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2202      	movs	r2, #2
 8005cbc:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f022 0201 	bic.w	r2, r2, #1
 8005cce:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8005cda:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ce4:	d119      	bne.n	8005d1a <HAL_SPI_Init+0x11e>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cee:	d103      	bne.n	8005cf8 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d008      	beq.n	8005d0a <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d10c      	bne.n	8005d1a <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005d04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d08:	d107      	bne.n	8005d1a <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005d18:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00f      	beq.n	8005d46 <HAL_SPI_Init+0x14a>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	2b06      	cmp	r3, #6
 8005d2c:	d90b      	bls.n	8005d46 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	430a      	orrs	r2, r1
 8005d42:	601a      	str	r2, [r3, #0]
 8005d44:	e007      	b.n	8005d56 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d54:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	69da      	ldr	r2, [r3, #28]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d5e:	431a      	orrs	r2, r3
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	431a      	orrs	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d68:	ea42 0103 	orr.w	r1, r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	68da      	ldr	r2, [r3, #12]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	430a      	orrs	r2, r1
 8005d76:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d80:	431a      	orrs	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d86:	431a      	orrs	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	431a      	orrs	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	431a      	orrs	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	695b      	ldr	r3, [r3, #20]
 8005d98:	431a      	orrs	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a1b      	ldr	r3, [r3, #32]
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	431a      	orrs	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005daa:	431a      	orrs	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	431a      	orrs	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005db6:	431a      	orrs	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dbc:	431a      	orrs	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dc2:	ea42 0103 	orr.w	r1, r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00a      	beq.n	8005df4 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	430a      	orrs	r2, r1
 8005df2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	46002000 	.word	0x46002000
 8005e14:	56002000 	.word	0x56002000
 8005e18:	40013000 	.word	0x40013000
 8005e1c:	50013000 	.word	0x50013000
 8005e20:	40003800 	.word	0x40003800
 8005e24:	50003800 	.word	0x50003800

08005e28 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b08a      	sub	sp, #40	@ 0x28
 8005e2c:	af02      	add	r7, sp, #8
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	603b      	str	r3, [r7, #0]
 8005e34:	4613      	mov	r3, r2
 8005e36:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	3320      	adds	r3, #32
 8005e3e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e40:	2300      	movs	r3, #0
 8005e42:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d101      	bne.n	8005e52 <HAL_SPI_Transmit+0x2a>
 8005e4e:	2302      	movs	r3, #2
 8005e50:	e203      	b.n	800625a <HAL_SPI_Transmit+0x432>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e5a:	f7fb f86b 	bl	8000f34 <HAL_GetTick>
 8005e5e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d007      	beq.n	8005e7c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return errorcode;
 8005e78:	7efb      	ldrb	r3, [r7, #27]
 8005e7a:	e1ee      	b.n	800625a <HAL_SPI_Transmit+0x432>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d002      	beq.n	8005e88 <HAL_SPI_Transmit+0x60>
 8005e82:	88fb      	ldrh	r3, [r7, #6]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d107      	bne.n	8005e98 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return errorcode;
 8005e94:	7efb      	ldrb	r3, [r7, #27]
 8005e96:	e1e0      	b.n	800625a <HAL_SPI_Transmit+0x432>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2203      	movs	r2, #3
 8005e9c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	88fa      	ldrh	r2, [r7, #6]
 8005eb2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	88fa      	ldrh	r2, [r7, #6]
 8005eba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005ee8:	d108      	bne.n	8005efc <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ef8:	601a      	str	r2, [r3, #0]
 8005efa:	e009      	b.n	8005f10 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005f0e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	0c1b      	lsrs	r3, r3, #16
 8005f18:	041b      	lsls	r3, r3, #16
 8005f1a:	88f9      	ldrh	r1, [r7, #6]
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	6812      	ldr	r2, [r2, #0]
 8005f20:	430b      	orrs	r3, r1
 8005f22:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f042 0201 	orr.w	r2, r2, #1
 8005f32:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	69db      	ldr	r3, [r3, #28]
 8005f3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10c      	bne.n	8005f5c <HAL_SPI_Transmit+0x134>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f4a:	d107      	bne.n	8005f5c <HAL_SPI_Transmit+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	2b0f      	cmp	r3, #15
 8005f62:	d95b      	bls.n	800601c <HAL_SPI_Transmit+0x1f4>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a8f      	ldr	r2, [pc, #572]	@ (80061a8 <HAL_SPI_Transmit+0x380>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d04f      	beq.n	800600e <HAL_SPI_Transmit+0x1e6>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a8e      	ldr	r2, [pc, #568]	@ (80061ac <HAL_SPI_Transmit+0x384>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d04a      	beq.n	800600e <HAL_SPI_Transmit+0x1e6>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a8c      	ldr	r2, [pc, #560]	@ (80061b0 <HAL_SPI_Transmit+0x388>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d045      	beq.n	800600e <HAL_SPI_Transmit+0x1e6>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a8b      	ldr	r2, [pc, #556]	@ (80061b4 <HAL_SPI_Transmit+0x38c>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d147      	bne.n	800601c <HAL_SPI_Transmit+0x1f4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005f8c:	e03f      	b.n	800600e <HAL_SPI_Transmit+0x1e6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	695b      	ldr	r3, [r3, #20]
 8005f94:	f003 0302 	and.w	r3, r3, #2
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d114      	bne.n	8005fc6 <HAL_SPI_Transmit+0x19e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6812      	ldr	r2, [r2, #0]
 8005fa6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fac:	1d1a      	adds	r2, r3, #4
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005fc4:	e023      	b.n	800600e <HAL_SPI_Transmit+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fc6:	f7fa ffb5 	bl	8000f34 <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	683a      	ldr	r2, [r7, #0]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d803      	bhi.n	8005fde <HAL_SPI_Transmit+0x1b6>
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fdc:	d102      	bne.n	8005fe4 <HAL_SPI_Transmit+0x1bc>
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d114      	bne.n	800600e <HAL_SPI_Transmit+0x1e6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f000 fb7b 	bl	80066e0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ff8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
          return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e125      	b.n	800625a <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006014:	b29b      	uxth	r3, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1b9      	bne.n	8005f8e <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800601a:	e0f8      	b.n	800620e <HAL_SPI_Transmit+0x3e6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	2b07      	cmp	r3, #7
 8006022:	f240 80ed 	bls.w	8006200 <HAL_SPI_Transmit+0x3d8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006026:	e05d      	b.n	80060e4 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	f003 0302 	and.w	r3, r3, #2
 8006032:	2b02      	cmp	r3, #2
 8006034:	d132      	bne.n	800609c <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800603c:	b29b      	uxth	r3, r3
 800603e:	2b01      	cmp	r3, #1
 8006040:	d918      	bls.n	8006074 <HAL_SPI_Transmit+0x24c>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006046:	2b00      	cmp	r3, #0
 8006048:	d014      	beq.n	8006074 <HAL_SPI_Transmit+0x24c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	6812      	ldr	r2, [r2, #0]
 8006054:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800605a:	1d1a      	adds	r2, r3, #4
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006066:	b29b      	uxth	r3, r3
 8006068:	3b02      	subs	r3, #2
 800606a:	b29a      	uxth	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006072:	e037      	b.n	80060e4 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006078:	881a      	ldrh	r2, [r3, #0]
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006082:	1c9a      	adds	r2, r3, #2
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800608e:	b29b      	uxth	r3, r3
 8006090:	3b01      	subs	r3, #1
 8006092:	b29a      	uxth	r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800609a:	e023      	b.n	80060e4 <HAL_SPI_Transmit+0x2bc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800609c:	f7fa ff4a 	bl	8000f34 <HAL_GetTick>
 80060a0:	4602      	mov	r2, r0
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	683a      	ldr	r2, [r7, #0]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d803      	bhi.n	80060b4 <HAL_SPI_Transmit+0x28c>
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060b2:	d102      	bne.n	80060ba <HAL_SPI_Transmit+0x292>
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d114      	bne.n	80060e4 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f000 fb10 	bl	80066e0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060ce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
          return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e0ba      	b.n	800625a <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d19b      	bne.n	8006028 <HAL_SPI_Transmit+0x200>
 80060f0:	e08d      	b.n	800620e <HAL_SPI_Transmit+0x3e6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	f003 0302 	and.w	r3, r3, #2
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d15b      	bne.n	80061b8 <HAL_SPI_Transmit+0x390>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006106:	b29b      	uxth	r3, r3
 8006108:	2b03      	cmp	r3, #3
 800610a:	d918      	bls.n	800613e <HAL_SPI_Transmit+0x316>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006110:	2b40      	cmp	r3, #64	@ 0x40
 8006112:	d914      	bls.n	800613e <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6812      	ldr	r2, [r2, #0]
 800611e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006124:	1d1a      	adds	r2, r3, #4
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006130:	b29b      	uxth	r3, r3
 8006132:	3b04      	subs	r3, #4
 8006134:	b29a      	uxth	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800613c:	e060      	b.n	8006200 <HAL_SPI_Transmit+0x3d8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006144:	b29b      	uxth	r3, r3
 8006146:	2b01      	cmp	r3, #1
 8006148:	d917      	bls.n	800617a <HAL_SPI_Transmit+0x352>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800614e:	2b00      	cmp	r3, #0
 8006150:	d013      	beq.n	800617a <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006156:	881a      	ldrh	r2, [r3, #0]
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006160:	1c9a      	adds	r2, r3, #2
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800616c:	b29b      	uxth	r3, r3
 800616e:	3b02      	subs	r3, #2
 8006170:	b29a      	uxth	r2, r3
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006178:	e042      	b.n	8006200 <HAL_SPI_Transmit+0x3d8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	3320      	adds	r3, #32
 8006184:	7812      	ldrb	r2, [r2, #0]
 8006186:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800618c:	1c5a      	adds	r2, r3, #1
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006198:	b29b      	uxth	r3, r3
 800619a:	3b01      	subs	r3, #1
 800619c:	b29a      	uxth	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80061a4:	e02c      	b.n	8006200 <HAL_SPI_Transmit+0x3d8>
 80061a6:	bf00      	nop
 80061a8:	40013000 	.word	0x40013000
 80061ac:	50013000 	.word	0x50013000
 80061b0:	40003800 	.word	0x40003800
 80061b4:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061b8:	f7fa febc 	bl	8000f34 <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	683a      	ldr	r2, [r7, #0]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d803      	bhi.n	80061d0 <HAL_SPI_Transmit+0x3a8>
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061ce:	d102      	bne.n	80061d6 <HAL_SPI_Transmit+0x3ae>
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d114      	bne.n	8006200 <HAL_SPI_Transmit+0x3d8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f000 fa82 	bl	80066e0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80061ea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
          return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e02c      	b.n	800625a <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006206:	b29b      	uxth	r3, r3
 8006208:	2b00      	cmp	r3, #0
 800620a:	f47f af72 	bne.w	80060f2 <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	9300      	str	r3, [sp, #0]
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	2200      	movs	r2, #0
 8006216:	2108      	movs	r1, #8
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f000 fb01 	bl	8006820 <SPI_WaitOnFlagUntilTimeout>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d007      	beq.n	8006234 <HAL_SPI_Transmit+0x40c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800622a:	f043 0220 	orr.w	r2, r3, #32
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f000 fa53 	bl	80066e0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <HAL_SPI_Transmit+0x430>
  {
    return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e000      	b.n	800625a <HAL_SPI_Transmit+0x432>
  }
  return errorcode;
 8006258:	7efb      	ldrb	r3, [r7, #27]
}
 800625a:	4618      	mov	r0, r3
 800625c:	3720      	adds	r7, #32
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop

08006264 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b08c      	sub	sp, #48	@ 0x30
 8006268:	af02      	add	r7, sp, #8
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
 8006270:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006272:	2300      	movs	r3, #0
 8006274:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3320      	adds	r3, #32
 800627e:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	3330      	adds	r3, #48	@ 0x30
 8006286:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800628e:	2b01      	cmp	r3, #1
 8006290:	d101      	bne.n	8006296 <HAL_SPI_TransmitReceive+0x32>
 8006292:	2302      	movs	r3, #2
 8006294:	e21f      	b.n	80066d6 <HAL_SPI_TransmitReceive+0x472>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800629e:	f7fa fe49 	bl	8000f34 <HAL_GetTick>
 80062a2:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 80062a4:	887b      	ldrh	r3, [r7, #2]
 80062a6:	84fb      	strh	r3, [r7, #38]	@ 0x26
  initial_RxXferCount = Size;
 80062a8:	887b      	ldrh	r3, [r7, #2]
 80062aa:	84bb      	strh	r3, [r7, #36]	@ 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d009      	beq.n	80062cc <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 80062b8:	2302      	movs	r3, #2
 80062ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    __HAL_UNLOCK(hspi);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return errorcode;
 80062c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80062ca:	e204      	b.n	80066d6 <HAL_SPI_TransmitReceive+0x472>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d005      	beq.n	80062de <HAL_SPI_TransmitReceive+0x7a>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d002      	beq.n	80062de <HAL_SPI_TransmitReceive+0x7a>
 80062d8:	887b      	ldrh	r3, [r7, #2]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d109      	bne.n	80062f2 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    __HAL_UNLOCK(hspi);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return errorcode;
 80062ec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80062f0:	e1f1      	b.n	80066d6 <HAL_SPI_TransmitReceive+0x472>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2205      	movs	r2, #5
 80062f6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferCount = Size;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	887a      	ldrh	r2, [r7, #2]
 800630c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->RxXferSize  = Size;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	887a      	ldrh	r2, [r7, #2]
 8006314:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferCount = Size;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	887a      	ldrh	r2, [r7, #2]
 8006322:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferSize  = Size;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	887a      	ldrh	r2, [r7, #2]
 800632a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68da      	ldr	r2, [r3, #12]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8006348:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	0c1b      	lsrs	r3, r3, #16
 8006352:	041b      	lsls	r3, r3, #16
 8006354:	8879      	ldrh	r1, [r7, #2]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	6812      	ldr	r2, [r2, #0]
 800635a:	430b      	orrs	r3, r1
 800635c:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f042 0201 	orr.w	r2, r2, #1
 800636c:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	69db      	ldr	r3, [r3, #28]
 8006374:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d10c      	bne.n	8006396 <HAL_SPI_TransmitReceive+0x132>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006384:	d107      	bne.n	8006396 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006394:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	2b0f      	cmp	r3, #15
 800639c:	f240 8085 	bls.w	80064aa <HAL_SPI_TransmitReceive+0x246>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a7b      	ldr	r2, [pc, #492]	@ (8006594 <HAL_SPI_TransmitReceive+0x330>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d078      	beq.n	800649c <HAL_SPI_TransmitReceive+0x238>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a7a      	ldr	r2, [pc, #488]	@ (8006598 <HAL_SPI_TransmitReceive+0x334>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d073      	beq.n	800649c <HAL_SPI_TransmitReceive+0x238>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a78      	ldr	r2, [pc, #480]	@ (800659c <HAL_SPI_TransmitReceive+0x338>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d06e      	beq.n	800649c <HAL_SPI_TransmitReceive+0x238>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a77      	ldr	r2, [pc, #476]	@ (80065a0 <HAL_SPI_TransmitReceive+0x33c>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d170      	bne.n	80064aa <HAL_SPI_TransmitReceive+0x246>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80063c8:	e068      	b.n	800649c <HAL_SPI_TransmitReceive+0x238>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	f003 0302 	and.w	r3, r3, #2
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d11a      	bne.n	800640e <HAL_SPI_TransmitReceive+0x1aa>
 80063d8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d017      	beq.n	800640e <HAL_SPI_TransmitReceive+0x1aa>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	6812      	ldr	r2, [r2, #0]
 80063e8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063ee:	1d1a      	adds	r2, r3, #4
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount --;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	3b01      	subs	r3, #1
 80063fe:	b29a      	uxth	r2, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800640c:	84fb      	strh	r3, [r7, #38]	@ 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	695a      	ldr	r2, [r3, #20]
 8006414:	f248 0308 	movw	r3, #32776	@ 0x8008
 8006418:	4013      	ands	r3, r2
 800641a:	2b00      	cmp	r3, #0
 800641c:	d01a      	beq.n	8006454 <HAL_SPI_TransmitReceive+0x1f0>
 800641e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006420:	2b00      	cmp	r3, #0
 8006422:	d017      	beq.n	8006454 <HAL_SPI_TransmitReceive+0x1f0>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800642c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800642e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006434:	1d1a      	adds	r2, r3, #4
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount --;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006440:	b29b      	uxth	r3, r3
 8006442:	3b01      	subs	r3, #1
 8006444:	b29a      	uxth	r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006452:	84bb      	strh	r3, [r7, #36]	@ 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006454:	f7fa fd6e 	bl	8000f34 <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006460:	429a      	cmp	r2, r3
 8006462:	d803      	bhi.n	800646c <HAL_SPI_TransmitReceive+0x208>
 8006464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006466:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800646a:	d102      	bne.n	8006472 <HAL_SPI_TransmitReceive+0x20e>
 800646c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800646e:	2b00      	cmp	r3, #0
 8006470:	d114      	bne.n	800649c <HAL_SPI_TransmitReceive+0x238>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f000 f934 	bl	80066e0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006486:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        return HAL_TIMEOUT;
 8006498:	2303      	movs	r3, #3
 800649a:	e11c      	b.n	80066d6 <HAL_SPI_TransmitReceive+0x472>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800649c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d193      	bne.n	80063ca <HAL_SPI_TransmitReceive+0x166>
 80064a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d190      	bne.n	80063ca <HAL_SPI_TransmitReceive+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80064a8:	e0ee      	b.n	8006688 <HAL_SPI_TransmitReceive+0x424>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	2b07      	cmp	r3, #7
 80064b0:	f240 80e4 	bls.w	800667c <HAL_SPI_TransmitReceive+0x418>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80064b4:	e066      	b.n	8006584 <HAL_SPI_TransmitReceive+0x320>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	695b      	ldr	r3, [r3, #20]
 80064bc:	f003 0302 	and.w	r3, r3, #2
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d119      	bne.n	80064f8 <HAL_SPI_TransmitReceive+0x294>
 80064c4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d016      	beq.n	80064f8 <HAL_SPI_TransmitReceive+0x294>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064ce:	881a      	ldrh	r2, [r3, #0]
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064d8:	1c9a      	adds	r2, r3, #2
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	3b01      	subs	r3, #1
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80064f6:	84fb      	strh	r3, [r7, #38]	@ 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	2b01      	cmp	r3, #1
 8006504:	d11a      	bne.n	800653c <HAL_SPI_TransmitReceive+0x2d8>
 8006506:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006508:	2b00      	cmp	r3, #0
 800650a:	d017      	beq.n	800653c <HAL_SPI_TransmitReceive+0x2d8>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006510:	69ba      	ldr	r2, [r7, #24]
 8006512:	8812      	ldrh	r2, [r2, #0]
 8006514:	b292      	uxth	r2, r2
 8006516:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800651c:	1c9a      	adds	r2, r3, #2
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006528:	b29b      	uxth	r3, r3
 800652a:	3b01      	subs	r3, #1
 800652c:	b29a      	uxth	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800653a:	84bb      	strh	r3, [r7, #36]	@ 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800653c:	f7fa fcfa 	bl	8000f34 <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006548:	429a      	cmp	r2, r3
 800654a:	d803      	bhi.n	8006554 <HAL_SPI_TransmitReceive+0x2f0>
 800654c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800654e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006552:	d102      	bne.n	800655a <HAL_SPI_TransmitReceive+0x2f6>
 8006554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006556:	2b00      	cmp	r3, #0
 8006558:	d114      	bne.n	8006584 <HAL_SPI_TransmitReceive+0x320>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800655a:	68f8      	ldr	r0, [r7, #12]
 800655c:	f000 f8c0 	bl	80066e0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800656e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e0a8      	b.n	80066d6 <HAL_SPI_TransmitReceive+0x472>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006584:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006586:	2b00      	cmp	r3, #0
 8006588:	d195      	bne.n	80064b6 <HAL_SPI_TransmitReceive+0x252>
 800658a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800658c:	2b00      	cmp	r3, #0
 800658e:	d192      	bne.n	80064b6 <HAL_SPI_TransmitReceive+0x252>
 8006590:	e07a      	b.n	8006688 <HAL_SPI_TransmitReceive+0x424>
 8006592:	bf00      	nop
 8006594:	40013000 	.word	0x40013000
 8006598:	50013000 	.word	0x50013000
 800659c:	40003800 	.word	0x40003800
 80065a0:	50003800 	.word	0x50003800
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d11b      	bne.n	80065ea <HAL_SPI_TransmitReceive+0x386>
 80065b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d018      	beq.n	80065ea <HAL_SPI_TransmitReceive+0x386>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	3320      	adds	r3, #32
 80065c2:	7812      	ldrb	r2, [r2, #0]
 80065c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065ca:	1c5a      	adds	r2, r3, #1
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	3b01      	subs	r3, #1
 80065da:	b29a      	uxth	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80065e8:	84fb      	strh	r3, [r7, #38]	@ 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	695b      	ldr	r3, [r3, #20]
 80065f0:	f003 0301 	and.w	r3, r3, #1
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d11d      	bne.n	8006634 <HAL_SPI_TransmitReceive+0x3d0>
 80065f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d01a      	beq.n	8006634 <HAL_SPI_TransmitReceive+0x3d0>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800660a:	7812      	ldrb	r2, [r2, #0]
 800660c:	b2d2      	uxtb	r2, r2
 800660e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006614:	1c5a      	adds	r2, r3, #1
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006620:	b29b      	uxth	r3, r3
 8006622:	3b01      	subs	r3, #1
 8006624:	b29a      	uxth	r2, r3
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006632:	84bb      	strh	r3, [r7, #36]	@ 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006634:	f7fa fc7e 	bl	8000f34 <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006640:	429a      	cmp	r2, r3
 8006642:	d803      	bhi.n	800664c <HAL_SPI_TransmitReceive+0x3e8>
 8006644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006646:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800664a:	d102      	bne.n	8006652 <HAL_SPI_TransmitReceive+0x3ee>
 800664c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800664e:	2b00      	cmp	r3, #0
 8006650:	d114      	bne.n	800667c <HAL_SPI_TransmitReceive+0x418>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f000 f844 	bl	80066e0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006666:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e02c      	b.n	80066d6 <HAL_SPI_TransmitReceive+0x472>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800667c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800667e:	2b00      	cmp	r3, #0
 8006680:	d190      	bne.n	80065a4 <HAL_SPI_TransmitReceive+0x340>
 8006682:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006684:	2b00      	cmp	r3, #0
 8006686:	d18d      	bne.n	80065a4 <HAL_SPI_TransmitReceive+0x340>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	9300      	str	r3, [sp, #0]
 800668c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800668e:	2200      	movs	r2, #0
 8006690:	2108      	movs	r1, #8
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f000 f8c4 	bl	8006820 <SPI_WaitOnFlagUntilTimeout>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d007      	beq.n	80066ae <HAL_SPI_TransmitReceive+0x44a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066a4:	f043 0220 	orr.w	r2, r3, #32
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f000 f816 	bl	80066e0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  hspi->State = HAL_SPI_STATE_READY;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d001      	beq.n	80066d2 <HAL_SPI_TransmitReceive+0x46e>
  {
    return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e001      	b.n	80066d6 <HAL_SPI_TransmitReceive+0x472>
  }
  return errorcode;
 80066d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3728      	adds	r7, #40	@ 0x28
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop

080066e0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	699a      	ldr	r2, [r3, #24]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f042 0208 	orr.w	r2, r2, #8
 80066fe:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	699a      	ldr	r2, [r3, #24]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f042 0210 	orr.w	r2, r2, #16
 800670e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f022 0201 	bic.w	r2, r2, #1
 800671e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	6812      	ldr	r2, [r2, #0]
 800672a:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800672e:	f023 0303 	bic.w	r3, r3, #3
 8006732:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	689a      	ldr	r2, [r3, #8]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006742:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800674a:	b2db      	uxtb	r3, r3
 800674c:	2b04      	cmp	r3, #4
 800674e:	d014      	beq.n	800677a <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f003 0320 	and.w	r3, r3, #32
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00f      	beq.n	800677a <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006760:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	699a      	ldr	r2, [r3, #24]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f042 0220 	orr.w	r2, r2, #32
 8006778:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b03      	cmp	r3, #3
 8006784:	d014      	beq.n	80067b0 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00f      	beq.n	80067b0 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006796:	f043 0204 	orr.w	r2, r3, #4
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	699a      	ldr	r2, [r3, #24]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067ae:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00f      	beq.n	80067da <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067c0:	f043 0201 	orr.w	r2, r3, #1
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	699a      	ldr	r2, [r3, #24]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067d8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00f      	beq.n	8006804 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067ea:	f043 0208 	orr.w	r2, r3, #8
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	699a      	ldr	r2, [r3, #24]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006802:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8006814:	bf00      	nop
 8006816:	3714      	adds	r7, #20
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	603b      	str	r3, [r7, #0]
 800682c:	4613      	mov	r3, r2
 800682e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006830:	e010      	b.n	8006854 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006832:	f7fa fb7f 	bl	8000f34 <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	683a      	ldr	r2, [r7, #0]
 800683e:	429a      	cmp	r2, r3
 8006840:	d803      	bhi.n	800684a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006848:	d102      	bne.n	8006850 <SPI_WaitOnFlagUntilTimeout+0x30>
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d101      	bne.n	8006854 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e00f      	b.n	8006874 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	695a      	ldr	r2, [r3, #20]
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	4013      	ands	r3, r2
 800685e:	68ba      	ldr	r2, [r7, #8]
 8006860:	429a      	cmp	r2, r3
 8006862:	bf0c      	ite	eq
 8006864:	2301      	moveq	r3, #1
 8006866:	2300      	movne	r3, #0
 8006868:	b2db      	uxtb	r3, r3
 800686a:	461a      	mov	r2, r3
 800686c:	79fb      	ldrb	r3, [r7, #7]
 800686e:	429a      	cmp	r2, r3
 8006870:	d0df      	beq.n	8006832 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006888:	095b      	lsrs	r3, r3, #5
 800688a:	3301      	adds	r3, #1
 800688c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	3301      	adds	r3, #1
 8006894:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	3307      	adds	r3, #7
 800689a:	08db      	lsrs	r3, r3, #3
 800689c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	fb02 f303 	mul.w	r3, r2, r3
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr

080068b2 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 80068b2:	b480      	push	{r7}
 80068b4:	b083      	sub	sp, #12
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
 80068ba:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d12e      	bne.n	8006926 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d101      	bne.n	80068d6 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 80068d2:	2302      	movs	r3, #2
 80068d4:	e028      	b.n	8006928 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2201      	movs	r2, #1
 80068da:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2202      	movs	r2, #2
 80068e2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f022 0201 	bic.w	r2, r2, #1
 80068f4:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8006902:	ea42 0103 	orr.w	r1, r2, r3
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	689a      	ldr	r2, [r3, #8]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	430a      	orrs	r2, r1
 8006910:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006922:	2300      	movs	r3, #0
 8006924:	e000      	b.n	8006928 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
  }
}
 8006928:	4618      	mov	r0, r3
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d101      	bne.n	8006946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e042      	b.n	80069cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800694c:	2b00      	cmp	r3, #0
 800694e:	d106      	bne.n	800695e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f7fa f9df 	bl	8000d1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2224      	movs	r2, #36	@ 0x24
 8006962:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f022 0201 	bic.w	r2, r2, #1
 8006974:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 f82c 	bl	80069d4 <UART_SetConfig>
 800697c:	4603      	mov	r3, r0
 800697e:	2b01      	cmp	r3, #1
 8006980:	d101      	bne.n	8006986 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e022      	b.n	80069cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800698a:	2b00      	cmp	r3, #0
 800698c:	d002      	beq.n	8006994 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 f9ce 	bl	8006d30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	685a      	ldr	r2, [r3, #4]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80069a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	689a      	ldr	r2, [r3, #8]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80069b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f042 0201 	orr.w	r2, r2, #1
 80069c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fa55 	bl	8006e74 <UART_CheckIdleState>
 80069ca:	4603      	mov	r3, r0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3708      	adds	r7, #8
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069d8:	b094      	sub	sp, #80	@ 0x50
 80069da:	af00      	add	r7, sp, #0
 80069dc:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069de:	2300      	movs	r3, #0
 80069e0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80069e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	4b83      	ldr	r3, [pc, #524]	@ (8006bf8 <UART_SetConfig+0x224>)
 80069ea:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ee:	689a      	ldr	r2, [r3, #8]
 80069f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	431a      	orrs	r2, r3
 80069f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	431a      	orrs	r2, r3
 80069fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069fe:	69db      	ldr	r3, [r3, #28]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	497c      	ldr	r1, [pc, #496]	@ (8006bfc <UART_SetConfig+0x228>)
 8006a0c:	4019      	ands	r1, r3
 8006a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a14:	430b      	orrs	r3, r1
 8006a16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a24:	68d9      	ldr	r1, [r3, #12]
 8006a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	ea40 0301 	orr.w	r3, r0, r1
 8006a2e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	4b6f      	ldr	r3, [pc, #444]	@ (8006bf8 <UART_SetConfig+0x224>)
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d009      	beq.n	8006a54 <UART_SetConfig+0x80>
 8006a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	4b6e      	ldr	r3, [pc, #440]	@ (8006c00 <UART_SetConfig+0x22c>)
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d004      	beq.n	8006a54 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a4c:	6a1a      	ldr	r2, [r3, #32]
 8006a4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a50:	4313      	orrs	r3, r2
 8006a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8006a5e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8006a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a68:	430b      	orrs	r3, r1
 8006a6a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a72:	f023 000f 	bic.w	r0, r3, #15
 8006a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a78:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	ea40 0301 	orr.w	r3, r0, r1
 8006a82:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	4b5e      	ldr	r3, [pc, #376]	@ (8006c04 <UART_SetConfig+0x230>)
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d102      	bne.n	8006a94 <UART_SetConfig+0xc0>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a92:	e032      	b.n	8006afa <UART_SetConfig+0x126>
 8006a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	4b5b      	ldr	r3, [pc, #364]	@ (8006c08 <UART_SetConfig+0x234>)
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d102      	bne.n	8006aa4 <UART_SetConfig+0xd0>
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006aa2:	e02a      	b.n	8006afa <UART_SetConfig+0x126>
 8006aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	4b58      	ldr	r3, [pc, #352]	@ (8006c0c <UART_SetConfig+0x238>)
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d102      	bne.n	8006ab4 <UART_SetConfig+0xe0>
 8006aae:	2304      	movs	r3, #4
 8006ab0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ab2:	e022      	b.n	8006afa <UART_SetConfig+0x126>
 8006ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	4b55      	ldr	r3, [pc, #340]	@ (8006c10 <UART_SetConfig+0x23c>)
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d102      	bne.n	8006ac4 <UART_SetConfig+0xf0>
 8006abe:	2308      	movs	r3, #8
 8006ac0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ac2:	e01a      	b.n	8006afa <UART_SetConfig+0x126>
 8006ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	4b52      	ldr	r3, [pc, #328]	@ (8006c14 <UART_SetConfig+0x240>)
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d102      	bne.n	8006ad4 <UART_SetConfig+0x100>
 8006ace:	2310      	movs	r3, #16
 8006ad0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ad2:	e012      	b.n	8006afa <UART_SetConfig+0x126>
 8006ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	4b4f      	ldr	r3, [pc, #316]	@ (8006c18 <UART_SetConfig+0x244>)
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d103      	bne.n	8006ae6 <UART_SetConfig+0x112>
 8006ade:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8006ae2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ae4:	e009      	b.n	8006afa <UART_SetConfig+0x126>
 8006ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	4b43      	ldr	r3, [pc, #268]	@ (8006bf8 <UART_SetConfig+0x224>)
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d102      	bne.n	8006af6 <UART_SetConfig+0x122>
 8006af0:	2320      	movs	r3, #32
 8006af2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006af4:	e001      	b.n	8006afa <UART_SetConfig+0x126>
 8006af6:	2300      	movs	r3, #0
 8006af8:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	4b3e      	ldr	r3, [pc, #248]	@ (8006bf8 <UART_SetConfig+0x224>)
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d005      	beq.n	8006b10 <UART_SetConfig+0x13c>
 8006b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	4b3d      	ldr	r3, [pc, #244]	@ (8006c00 <UART_SetConfig+0x22c>)
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	f040 8088 	bne.w	8006c20 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006b10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b12:	2200      	movs	r2, #0
 8006b14:	623b      	str	r3, [r7, #32]
 8006b16:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b18:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006b1c:	f7fd fbe0 	bl	80042e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006b20:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f000 80eb 	beq.w	8006d00 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b2e:	4a3b      	ldr	r2, [pc, #236]	@ (8006c1c <UART_SetConfig+0x248>)
 8006b30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b34:	461a      	mov	r2, r3
 8006b36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b38:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b3c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b40:	685a      	ldr	r2, [r3, #4]
 8006b42:	4613      	mov	r3, r2
 8006b44:	005b      	lsls	r3, r3, #1
 8006b46:	4413      	add	r3, r2
 8006b48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d305      	bcc.n	8006b5a <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d903      	bls.n	8006b62 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006b60:	e048      	b.n	8006bf4 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b64:	2200      	movs	r2, #0
 8006b66:	61bb      	str	r3, [r7, #24]
 8006b68:	61fa      	str	r2, [r7, #28]
 8006b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b6e:	4a2b      	ldr	r2, [pc, #172]	@ (8006c1c <UART_SetConfig+0x248>)
 8006b70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	2200      	movs	r2, #0
 8006b78:	613b      	str	r3, [r7, #16]
 8006b7a:	617a      	str	r2, [r7, #20]
 8006b7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006b80:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006b84:	f7f9 fb84 	bl	8000290 <__aeabi_uldivmod>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	4610      	mov	r0, r2
 8006b8e:	4619      	mov	r1, r3
 8006b90:	f04f 0200 	mov.w	r2, #0
 8006b94:	f04f 0300 	mov.w	r3, #0
 8006b98:	020b      	lsls	r3, r1, #8
 8006b9a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006b9e:	0202      	lsls	r2, r0, #8
 8006ba0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ba2:	6849      	ldr	r1, [r1, #4]
 8006ba4:	0849      	lsrs	r1, r1, #1
 8006ba6:	2000      	movs	r0, #0
 8006ba8:	460c      	mov	r4, r1
 8006baa:	4605      	mov	r5, r0
 8006bac:	eb12 0804 	adds.w	r8, r2, r4
 8006bb0:	eb43 0905 	adc.w	r9, r3, r5
 8006bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	60bb      	str	r3, [r7, #8]
 8006bbc:	60fa      	str	r2, [r7, #12]
 8006bbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006bc2:	4640      	mov	r0, r8
 8006bc4:	4649      	mov	r1, r9
 8006bc6:	f7f9 fb63 	bl	8000290 <__aeabi_uldivmod>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	460b      	mov	r3, r1
 8006bce:	4613      	mov	r3, r2
 8006bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006bd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bd8:	d308      	bcc.n	8006bec <UART_SetConfig+0x218>
 8006bda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bdc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006be0:	d204      	bcs.n	8006bec <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 8006be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006be8:	60da      	str	r2, [r3, #12]
 8006bea:	e003      	b.n	8006bf4 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8006bf2:	e085      	b.n	8006d00 <UART_SetConfig+0x32c>
 8006bf4:	e084      	b.n	8006d00 <UART_SetConfig+0x32c>
 8006bf6:	bf00      	nop
 8006bf8:	46002400 	.word	0x46002400
 8006bfc:	cfff69f3 	.word	0xcfff69f3
 8006c00:	56002400 	.word	0x56002400
 8006c04:	40013800 	.word	0x40013800
 8006c08:	40004400 	.word	0x40004400
 8006c0c:	40004800 	.word	0x40004800
 8006c10:	40004c00 	.word	0x40004c00
 8006c14:	40005000 	.word	0x40005000
 8006c18:	40006400 	.word	0x40006400
 8006c1c:	080074b4 	.word	0x080074b4
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c22:	69db      	ldr	r3, [r3, #28]
 8006c24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c28:	d13c      	bne.n	8006ca4 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006c2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	603b      	str	r3, [r7, #0]
 8006c30:	607a      	str	r2, [r7, #4]
 8006c32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c36:	f7fd fb53 	bl	80042e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006c3a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d05e      	beq.n	8006d00 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c46:	4a39      	ldr	r2, [pc, #228]	@ (8006d2c <UART_SetConfig+0x358>)
 8006c48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c50:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c54:	005a      	lsls	r2, r3, #1
 8006c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	085b      	lsrs	r3, r3, #1
 8006c5c:	441a      	add	r2, r3
 8006c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c6a:	2b0f      	cmp	r3, #15
 8006c6c:	d916      	bls.n	8006c9c <UART_SetConfig+0x2c8>
 8006c6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c74:	d212      	bcs.n	8006c9c <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	f023 030f 	bic.w	r3, r3, #15
 8006c7e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c82:	085b      	lsrs	r3, r3, #1
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	f003 0307 	and.w	r3, r3, #7
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8006c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8006c98:	60da      	str	r2, [r3, #12]
 8006c9a:	e031      	b.n	8006d00 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006ca2:	e02d      	b.n	8006d00 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006ca4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	469a      	mov	sl, r3
 8006caa:	4693      	mov	fp, r2
 8006cac:	4650      	mov	r0, sl
 8006cae:	4659      	mov	r1, fp
 8006cb0:	f7fd fb16 	bl	80042e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006cb4:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8006cb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d021      	beq.n	8006d00 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc0:	4a1a      	ldr	r2, [pc, #104]	@ (8006d2c <UART_SetConfig+0x358>)
 8006cc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cca:	fbb3 f2f2 	udiv	r2, r3, r2
 8006cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	085b      	lsrs	r3, r3, #1
 8006cd4:	441a      	add	r2, r3
 8006cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ce2:	2b0f      	cmp	r3, #15
 8006ce4:	d909      	bls.n	8006cfa <UART_SetConfig+0x326>
 8006ce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cec:	d205      	bcs.n	8006cfa <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006cee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	60da      	str	r2, [r3, #12]
 8006cf8:	e002      	b.n	8006d00 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d02:	2201      	movs	r2, #1
 8006d04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d12:	2200      	movs	r2, #0
 8006d14:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d18:	2200      	movs	r2, #0
 8006d1a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006d1c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3750      	adds	r7, #80	@ 0x50
 8006d24:	46bd      	mov	sp, r7
 8006d26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d2a:	bf00      	nop
 8006d2c:	080074b4 	.word	0x080074b4

08006d30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d3c:	f003 0301 	and.w	r3, r3, #1
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00a      	beq.n	8006d5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	430a      	orrs	r2, r1
 8006d58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d5e:	f003 0302 	and.w	r3, r3, #2
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00a      	beq.n	8006d7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	430a      	orrs	r2, r1
 8006d7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d80:	f003 0304 	and.w	r3, r3, #4
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d00a      	beq.n	8006d9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	430a      	orrs	r2, r1
 8006d9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da2:	f003 0308 	and.w	r3, r3, #8
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00a      	beq.n	8006dc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	430a      	orrs	r2, r1
 8006dbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dc4:	f003 0310 	and.w	r3, r3, #16
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00a      	beq.n	8006de2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	430a      	orrs	r2, r1
 8006de0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006de6:	f003 0320 	and.w	r3, r3, #32
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00a      	beq.n	8006e04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	430a      	orrs	r2, r1
 8006e02:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d01a      	beq.n	8006e46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	430a      	orrs	r2, r1
 8006e24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e2e:	d10a      	bne.n	8006e46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	430a      	orrs	r2, r1
 8006e44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00a      	beq.n	8006e68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	430a      	orrs	r2, r1
 8006e66:	605a      	str	r2, [r3, #4]
  }
}
 8006e68:	bf00      	nop
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b098      	sub	sp, #96	@ 0x60
 8006e78:	af02      	add	r7, sp, #8
 8006e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e84:	f7fa f856 	bl	8000f34 <HAL_GetTick>
 8006e88:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0308 	and.w	r3, r3, #8
 8006e94:	2b08      	cmp	r3, #8
 8006e96:	d12f      	bne.n	8006ef8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e9c:	9300      	str	r3, [sp, #0]
 8006e9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f88e 	bl	8006fc8 <UART_WaitOnFlagUntilTimeout>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d022      	beq.n	8006ef8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eba:	e853 3f00 	ldrex	r3, [r3]
 8006ebe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ec2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ec6:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ed0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ed2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ed6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ed8:	e841 2300 	strex	r3, r2, [r1]
 8006edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ede:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1e6      	bne.n	8006eb2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2220      	movs	r2, #32
 8006ee8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e063      	b.n	8006fc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0304 	and.w	r3, r3, #4
 8006f02:	2b04      	cmp	r3, #4
 8006f04:	d149      	bne.n	8006f9a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f06:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f0a:	9300      	str	r3, [sp, #0]
 8006f0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 f857 	bl	8006fc8 <UART_WaitOnFlagUntilTimeout>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d03c      	beq.n	8006f9a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f28:	e853 3f00 	ldrex	r3, [r3]
 8006f2c:	623b      	str	r3, [r7, #32]
   return(result);
 8006f2e:	6a3b      	ldr	r3, [r7, #32]
 8006f30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f40:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f46:	e841 2300 	strex	r3, r2, [r1]
 8006f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1e6      	bne.n	8006f20 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	3308      	adds	r3, #8
 8006f58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	e853 3f00 	ldrex	r3, [r3]
 8006f60:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f023 0301 	bic.w	r3, r3, #1
 8006f68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	3308      	adds	r3, #8
 8006f70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f72:	61fa      	str	r2, [r7, #28]
 8006f74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f76:	69b9      	ldr	r1, [r7, #24]
 8006f78:	69fa      	ldr	r2, [r7, #28]
 8006f7a:	e841 2300 	strex	r3, r2, [r1]
 8006f7e:	617b      	str	r3, [r7, #20]
   return(result);
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1e5      	bne.n	8006f52 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2220      	movs	r2, #32
 8006f8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e012      	b.n	8006fc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2220      	movs	r2, #32
 8006f9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2220      	movs	r2, #32
 8006fa6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3758      	adds	r7, #88	@ 0x58
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	603b      	str	r3, [r7, #0]
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fd8:	e049      	b.n	800706e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006fe0:	d045      	beq.n	800706e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fe2:	f7f9 ffa7 	bl	8000f34 <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	69ba      	ldr	r2, [r7, #24]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d302      	bcc.n	8006ff8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d101      	bne.n	8006ffc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e048      	b.n	800708e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 0304 	and.w	r3, r3, #4
 8007006:	2b00      	cmp	r3, #0
 8007008:	d031      	beq.n	800706e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	69db      	ldr	r3, [r3, #28]
 8007010:	f003 0308 	and.w	r3, r3, #8
 8007014:	2b08      	cmp	r3, #8
 8007016:	d110      	bne.n	800703a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2208      	movs	r2, #8
 800701e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f000 f838 	bl	8007096 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2208      	movs	r2, #8
 800702a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2200      	movs	r2, #0
 8007032:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e029      	b.n	800708e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	69db      	ldr	r3, [r3, #28]
 8007040:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007044:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007048:	d111      	bne.n	800706e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007052:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	f000 f81e 	bl	8007096 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2220      	movs	r2, #32
 800705e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	e00f      	b.n	800708e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	69da      	ldr	r2, [r3, #28]
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	4013      	ands	r3, r2
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	429a      	cmp	r2, r3
 800707c:	bf0c      	ite	eq
 800707e:	2301      	moveq	r3, #1
 8007080:	2300      	movne	r3, #0
 8007082:	b2db      	uxtb	r3, r3
 8007084:	461a      	mov	r2, r3
 8007086:	79fb      	ldrb	r3, [r7, #7]
 8007088:	429a      	cmp	r2, r3
 800708a:	d0a6      	beq.n	8006fda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007096:	b480      	push	{r7}
 8007098:	b095      	sub	sp, #84	@ 0x54
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070a6:	e853 3f00 	ldrex	r3, [r3]
 80070aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80070ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	461a      	mov	r2, r3
 80070ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80070be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80070c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80070c4:	e841 2300 	strex	r3, r2, [r1]
 80070c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80070ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1e6      	bne.n	800709e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	3308      	adds	r3, #8
 80070d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	e853 3f00 	ldrex	r3, [r3]
 80070de:	61fb      	str	r3, [r7, #28]
   return(result);
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070e6:	f023 0301 	bic.w	r3, r3, #1
 80070ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	3308      	adds	r3, #8
 80070f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070fc:	e841 2300 	strex	r3, r2, [r1]
 8007100:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007104:	2b00      	cmp	r3, #0
 8007106:	d1e3      	bne.n	80070d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800710c:	2b01      	cmp	r3, #1
 800710e:	d118      	bne.n	8007142 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	e853 3f00 	ldrex	r3, [r3]
 800711c:	60bb      	str	r3, [r7, #8]
   return(result);
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	f023 0310 	bic.w	r3, r3, #16
 8007124:	647b      	str	r3, [r7, #68]	@ 0x44
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	461a      	mov	r2, r3
 800712c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800712e:	61bb      	str	r3, [r7, #24]
 8007130:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007132:	6979      	ldr	r1, [r7, #20]
 8007134:	69ba      	ldr	r2, [r7, #24]
 8007136:	e841 2300 	strex	r3, r2, [r1]
 800713a:	613b      	str	r3, [r7, #16]
   return(result);
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1e6      	bne.n	8007110 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2220      	movs	r2, #32
 8007146:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007156:	bf00      	nop
 8007158:	3754      	adds	r7, #84	@ 0x54
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007162:	b480      	push	{r7}
 8007164:	b085      	sub	sp, #20
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007170:	2b01      	cmp	r3, #1
 8007172:	d101      	bne.n	8007178 <HAL_UARTEx_DisableFifoMode+0x16>
 8007174:	2302      	movs	r3, #2
 8007176:	e027      	b.n	80071c8 <HAL_UARTEx_DisableFifoMode+0x66>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2224      	movs	r2, #36	@ 0x24
 8007184:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f022 0201 	bic.w	r2, r2, #1
 800719e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80071a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2220      	movs	r2, #32
 80071ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3714      	adds	r7, #20
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d101      	bne.n	80071ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80071e8:	2302      	movs	r3, #2
 80071ea:	e02d      	b.n	8007248 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2224      	movs	r2, #36	@ 0x24
 80071f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f022 0201 	bic.w	r2, r2, #1
 8007212:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	683a      	ldr	r2, [r7, #0]
 8007224:	430a      	orrs	r2, r1
 8007226:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 f84f 	bl	80072cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2220      	movs	r2, #32
 800723a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007260:	2b01      	cmp	r3, #1
 8007262:	d101      	bne.n	8007268 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007264:	2302      	movs	r3, #2
 8007266:	e02d      	b.n	80072c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2224      	movs	r2, #36	@ 0x24
 8007274:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f022 0201 	bic.w	r2, r2, #1
 800728e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	683a      	ldr	r2, [r7, #0]
 80072a0:	430a      	orrs	r2, r1
 80072a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 f811 	bl	80072cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2220      	movs	r2, #32
 80072b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3710      	adds	r7, #16
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d108      	bne.n	80072ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80072ec:	e031      	b.n	8007352 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80072ee:	2308      	movs	r3, #8
 80072f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80072f2:	2308      	movs	r3, #8
 80072f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	0e5b      	lsrs	r3, r3, #25
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	f003 0307 	and.w	r3, r3, #7
 8007304:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	0f5b      	lsrs	r3, r3, #29
 800730e:	b2db      	uxtb	r3, r3
 8007310:	f003 0307 	and.w	r3, r3, #7
 8007314:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007316:	7bbb      	ldrb	r3, [r7, #14]
 8007318:	7b3a      	ldrb	r2, [r7, #12]
 800731a:	4911      	ldr	r1, [pc, #68]	@ (8007360 <UARTEx_SetNbDataToProcess+0x94>)
 800731c:	5c8a      	ldrb	r2, [r1, r2]
 800731e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007322:	7b3a      	ldrb	r2, [r7, #12]
 8007324:	490f      	ldr	r1, [pc, #60]	@ (8007364 <UARTEx_SetNbDataToProcess+0x98>)
 8007326:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007328:	fb93 f3f2 	sdiv	r3, r3, r2
 800732c:	b29a      	uxth	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007334:	7bfb      	ldrb	r3, [r7, #15]
 8007336:	7b7a      	ldrb	r2, [r7, #13]
 8007338:	4909      	ldr	r1, [pc, #36]	@ (8007360 <UARTEx_SetNbDataToProcess+0x94>)
 800733a:	5c8a      	ldrb	r2, [r1, r2]
 800733c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007340:	7b7a      	ldrb	r2, [r7, #13]
 8007342:	4908      	ldr	r1, [pc, #32]	@ (8007364 <UARTEx_SetNbDataToProcess+0x98>)
 8007344:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007346:	fb93 f3f2 	sdiv	r3, r3, r2
 800734a:	b29a      	uxth	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007352:	bf00      	nop
 8007354:	3714      	adds	r7, #20
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	080074cc 	.word	0x080074cc
 8007364:	080074d4 	.word	0x080074d4

08007368 <memset>:
 8007368:	4402      	add	r2, r0
 800736a:	4603      	mov	r3, r0
 800736c:	4293      	cmp	r3, r2
 800736e:	d100      	bne.n	8007372 <memset+0xa>
 8007370:	4770      	bx	lr
 8007372:	f803 1b01 	strb.w	r1, [r3], #1
 8007376:	e7f9      	b.n	800736c <memset+0x4>

08007378 <__libc_init_array>:
 8007378:	b570      	push	{r4, r5, r6, lr}
 800737a:	4d0d      	ldr	r5, [pc, #52]	@ (80073b0 <__libc_init_array+0x38>)
 800737c:	2600      	movs	r6, #0
 800737e:	4c0d      	ldr	r4, [pc, #52]	@ (80073b4 <__libc_init_array+0x3c>)
 8007380:	1b64      	subs	r4, r4, r5
 8007382:	10a4      	asrs	r4, r4, #2
 8007384:	42a6      	cmp	r6, r4
 8007386:	d109      	bne.n	800739c <__libc_init_array+0x24>
 8007388:	4d0b      	ldr	r5, [pc, #44]	@ (80073b8 <__libc_init_array+0x40>)
 800738a:	2600      	movs	r6, #0
 800738c:	4c0b      	ldr	r4, [pc, #44]	@ (80073bc <__libc_init_array+0x44>)
 800738e:	f000 f817 	bl	80073c0 <_init>
 8007392:	1b64      	subs	r4, r4, r5
 8007394:	10a4      	asrs	r4, r4, #2
 8007396:	42a6      	cmp	r6, r4
 8007398:	d105      	bne.n	80073a6 <__libc_init_array+0x2e>
 800739a:	bd70      	pop	{r4, r5, r6, pc}
 800739c:	f855 3b04 	ldr.w	r3, [r5], #4
 80073a0:	3601      	adds	r6, #1
 80073a2:	4798      	blx	r3
 80073a4:	e7ee      	b.n	8007384 <__libc_init_array+0xc>
 80073a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80073aa:	3601      	adds	r6, #1
 80073ac:	4798      	blx	r3
 80073ae:	e7f2      	b.n	8007396 <__libc_init_array+0x1e>
 80073b0:	080074e4 	.word	0x080074e4
 80073b4:	080074e4 	.word	0x080074e4
 80073b8:	080074e4 	.word	0x080074e4
 80073bc:	080074e8 	.word	0x080074e8

080073c0 <_init>:
 80073c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073c2:	bf00      	nop
 80073c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073c6:	bc08      	pop	{r3}
 80073c8:	469e      	mov	lr, r3
 80073ca:	4770      	bx	lr

080073cc <_fini>:
 80073cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ce:	bf00      	nop
 80073d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073d2:	bc08      	pop	{r3}
 80073d4:	469e      	mov	lr, r3
 80073d6:	4770      	bx	lr
