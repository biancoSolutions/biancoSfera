
STM32_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070c0  08000250  08000250  00001250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08007310  08007310  00008310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007414  08007414  00008414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800741c  0800741c  0000841c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007420  08007420  00008420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000009  20000000  08007424  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000144  2000000c  0800742d  0000900c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000150  0800742d  00009150  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00009009  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001315c  00000000  00000000  0000903f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000028e7  00000000  00000000  0001c19b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ee0  00000000  00000000  0001ea88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b55  00000000  00000000  0001f968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000373fc  00000000  00000000  000204bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000152fd  00000000  00000000  000578b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00151d71  00000000  00000000  0006cbb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001be927  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003c5c  00000000  00000000  001be96c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000083  00000000  00000000  001c25c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	2000000c 	.word	0x2000000c
 800026c:	00000000 	.word	0x00000000
 8000270:	080072f8 	.word	0x080072f8

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000010 	.word	0x20000010
 800028c:	080072f8 	.word	0x080072f8

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b97e 	b.w	80005a4 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14d      	bne.n	8000368 <__udivmoddi4+0xa8>
 80002cc:	428a      	cmp	r2, r1
 80002ce:	460f      	mov	r7, r1
 80002d0:	4684      	mov	ip, r0
 80002d2:	4696      	mov	lr, r2
 80002d4:	fab2 f382 	clz	r3, r2
 80002d8:	d960      	bls.n	800039c <__udivmoddi4+0xdc>
 80002da:	b14b      	cbz	r3, 80002f0 <__udivmoddi4+0x30>
 80002dc:	fa02 fe03 	lsl.w	lr, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80002ea:	fa20 f202 	lsr.w	r2, r0, r2
 80002ee:	4317      	orrs	r7, r2
 80002f0:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002f4:	fa1f f48e 	uxth.w	r4, lr
 80002f8:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002fc:	fbb7 f1f6 	udiv	r1, r7, r6
 8000300:	fb06 7711 	mls	r7, r6, r1, r7
 8000304:	fb01 f004 	mul.w	r0, r1, r4
 8000308:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800030c:	4290      	cmp	r0, r2
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0x62>
 8000310:	eb1e 0202 	adds.w	r2, lr, r2
 8000314:	f101 37ff 	add.w	r7, r1, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x60>
 800031a:	4290      	cmp	r0, r2
 800031c:	f200 812d 	bhi.w	800057a <__udivmoddi4+0x2ba>
 8000320:	4639      	mov	r1, r7
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	fa1f fc8c 	uxth.w	ip, ip
 8000328:	fbb2 f0f6 	udiv	r0, r2, r6
 800032c:	fb06 2210 	mls	r2, r6, r0, r2
 8000330:	fb00 f404 	mul.w	r4, r0, r4
 8000334:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000338:	4564      	cmp	r4, ip
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x8e>
 800033c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x8c>
 8000346:	4564      	cmp	r4, ip
 8000348:	f200 811a 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 800034c:	4610      	mov	r0, r2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	ebac 0c04 	sub.w	ip, ip, r4
 8000356:	2100      	movs	r1, #0
 8000358:	b125      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035a:	fa2c f303 	lsr.w	r3, ip, r3
 800035e:	2200      	movs	r2, #0
 8000360:	e9c5 3200 	strd	r3, r2, [r5]
 8000364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000368:	428b      	cmp	r3, r1
 800036a:	d905      	bls.n	8000378 <__udivmoddi4+0xb8>
 800036c:	b10d      	cbz	r5, 8000372 <__udivmoddi4+0xb2>
 800036e:	e9c5 0100 	strd	r0, r1, [r5]
 8000372:	2100      	movs	r1, #0
 8000374:	4608      	mov	r0, r1
 8000376:	e7f5      	b.n	8000364 <__udivmoddi4+0xa4>
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	d14d      	bne.n	800041c <__udivmoddi4+0x15c>
 8000380:	42a3      	cmp	r3, r4
 8000382:	f0c0 80f2 	bcc.w	800056a <__udivmoddi4+0x2aa>
 8000386:	4290      	cmp	r0, r2
 8000388:	f080 80ef 	bcs.w	800056a <__udivmoddi4+0x2aa>
 800038c:	4606      	mov	r6, r0
 800038e:	4623      	mov	r3, r4
 8000390:	4608      	mov	r0, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e6      	beq.n	8000364 <__udivmoddi4+0xa4>
 8000396:	e9c5 6300 	strd	r6, r3, [r5]
 800039a:	e7e3      	b.n	8000364 <__udivmoddi4+0xa4>
 800039c:	2b00      	cmp	r3, #0
 800039e:	f040 80a2 	bne.w	80004e6 <__udivmoddi4+0x226>
 80003a2:	1a8a      	subs	r2, r1, r2
 80003a4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a8:	fa1f f68e 	uxth.w	r6, lr
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb2 f4f7 	udiv	r4, r2, r7
 80003b2:	fb07 2014 	mls	r0, r7, r4, r2
 80003b6:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003ba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003be:	fb06 f004 	mul.w	r0, r6, r4
 80003c2:	4290      	cmp	r0, r2
 80003c4:	d90f      	bls.n	80003e6 <__udivmoddi4+0x126>
 80003c6:	eb1e 0202 	adds.w	r2, lr, r2
 80003ca:	f104 38ff 	add.w	r8, r4, #4294967295
 80003ce:	bf2c      	ite	cs
 80003d0:	f04f 0901 	movcs.w	r9, #1
 80003d4:	f04f 0900 	movcc.w	r9, #0
 80003d8:	4290      	cmp	r0, r2
 80003da:	d903      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003dc:	f1b9 0f00 	cmp.w	r9, #0
 80003e0:	f000 80c8 	beq.w	8000574 <__udivmoddi4+0x2b4>
 80003e4:	4644      	mov	r4, r8
 80003e6:	1a12      	subs	r2, r2, r0
 80003e8:	fa1f fc8c 	uxth.w	ip, ip
 80003ec:	fbb2 f0f7 	udiv	r0, r2, r7
 80003f0:	fb07 2210 	mls	r2, r7, r0, r2
 80003f4:	fb00 f606 	mul.w	r6, r0, r6
 80003f8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003fc:	4566      	cmp	r6, ip
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x152>
 8000400:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000404:	f100 32ff 	add.w	r2, r0, #4294967295
 8000408:	d202      	bcs.n	8000410 <__udivmoddi4+0x150>
 800040a:	4566      	cmp	r6, ip
 800040c:	f200 80bb 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000410:	4610      	mov	r0, r2
 8000412:	ebac 0c06 	sub.w	ip, ip, r6
 8000416:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800041a:	e79d      	b.n	8000358 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa04 fe01 	lsl.w	lr, r4, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	fa20 fc06 	lsr.w	ip, r0, r6
 800042e:	40f4      	lsrs	r4, r6
 8000430:	408a      	lsls	r2, r1
 8000432:	431f      	orrs	r7, r3
 8000434:	ea4e 030c 	orr.w	r3, lr, ip
 8000438:	fa00 fe01 	lsl.w	lr, r0, r1
 800043c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	fbb4 f0f8 	udiv	r0, r4, r8
 800044c:	fb08 4410 	mls	r4, r8, r0, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb00 f90c 	mul.w	r9, r0, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	d90e      	bls.n	800047a <__udivmoddi4+0x1ba>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	bf2c      	ite	cs
 8000464:	f04f 0b01 	movcs.w	fp, #1
 8000468:	f04f 0b00 	movcc.w	fp, #0
 800046c:	45a1      	cmp	r9, r4
 800046e:	d903      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000470:	f1bb 0f00 	cmp.w	fp, #0
 8000474:	f000 8093 	beq.w	800059e <__udivmoddi4+0x2de>
 8000478:	4650      	mov	r0, sl
 800047a:	eba4 0409 	sub.w	r4, r4, r9
 800047e:	fa1f f983 	uxth.w	r9, r3
 8000482:	fbb4 f3f8 	udiv	r3, r4, r8
 8000486:	fb08 4413 	mls	r4, r8, r3, r4
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000492:	45a4      	cmp	ip, r4
 8000494:	d906      	bls.n	80004a4 <__udivmoddi4+0x1e4>
 8000496:	193c      	adds	r4, r7, r4
 8000498:	f103 38ff 	add.w	r8, r3, #4294967295
 800049c:	d201      	bcs.n	80004a2 <__udivmoddi4+0x1e2>
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d87a      	bhi.n	8000598 <__udivmoddi4+0x2d8>
 80004a2:	4643      	mov	r3, r8
 80004a4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a8:	eba4 040c 	sub.w	r4, r4, ip
 80004ac:	fba0 9802 	umull	r9, r8, r0, r2
 80004b0:	4544      	cmp	r4, r8
 80004b2:	46cc      	mov	ip, r9
 80004b4:	4643      	mov	r3, r8
 80004b6:	d302      	bcc.n	80004be <__udivmoddi4+0x1fe>
 80004b8:	d106      	bne.n	80004c8 <__udivmoddi4+0x208>
 80004ba:	45ce      	cmp	lr, r9
 80004bc:	d204      	bcs.n	80004c8 <__udivmoddi4+0x208>
 80004be:	3801      	subs	r0, #1
 80004c0:	ebb9 0c02 	subs.w	ip, r9, r2
 80004c4:	eb68 0307 	sbc.w	r3, r8, r7
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x222>
 80004ca:	ebbe 020c 	subs.w	r2, lr, ip
 80004ce:	eb64 0403 	sbc.w	r4, r4, r3
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	fa22 f301 	lsr.w	r3, r2, r1
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	431e      	orrs	r6, r3
 80004de:	e9c5 6400 	strd	r6, r4, [r5]
 80004e2:	2100      	movs	r1, #0
 80004e4:	e73e      	b.n	8000364 <__udivmoddi4+0xa4>
 80004e6:	fa02 fe03 	lsl.w	lr, r2, r3
 80004ea:	f1c3 0120 	rsb	r1, r3, #32
 80004ee:	fa04 f203 	lsl.w	r2, r4, r3
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	40cc      	lsrs	r4, r1
 80004f8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004fc:	fa20 f101 	lsr.w	r1, r0, r1
 8000500:	fa1f f68e 	uxth.w	r6, lr
 8000504:	fbb4 f0f7 	udiv	r0, r4, r7
 8000508:	430a      	orrs	r2, r1
 800050a:	fb07 4410 	mls	r4, r7, r0, r4
 800050e:	0c11      	lsrs	r1, r2, #16
 8000510:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000514:	fb00 f406 	mul.w	r4, r0, r6
 8000518:	428c      	cmp	r4, r1
 800051a:	d90e      	bls.n	800053a <__udivmoddi4+0x27a>
 800051c:	eb1e 0101 	adds.w	r1, lr, r1
 8000520:	f100 38ff 	add.w	r8, r0, #4294967295
 8000524:	bf2c      	ite	cs
 8000526:	f04f 0901 	movcs.w	r9, #1
 800052a:	f04f 0900 	movcc.w	r9, #0
 800052e:	428c      	cmp	r4, r1
 8000530:	d902      	bls.n	8000538 <__udivmoddi4+0x278>
 8000532:	f1b9 0f00 	cmp.w	r9, #0
 8000536:	d02c      	beq.n	8000592 <__udivmoddi4+0x2d2>
 8000538:	4640      	mov	r0, r8
 800053a:	1b09      	subs	r1, r1, r4
 800053c:	b292      	uxth	r2, r2
 800053e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000542:	fb07 1114 	mls	r1, r7, r4, r1
 8000546:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054a:	fb04 f106 	mul.w	r1, r4, r6
 800054e:	4291      	cmp	r1, r2
 8000550:	d907      	bls.n	8000562 <__udivmoddi4+0x2a2>
 8000552:	eb1e 0202 	adds.w	r2, lr, r2
 8000556:	f104 38ff 	add.w	r8, r4, #4294967295
 800055a:	d201      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 800055c:	4291      	cmp	r1, r2
 800055e:	d815      	bhi.n	800058c <__udivmoddi4+0x2cc>
 8000560:	4644      	mov	r4, r8
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000568:	e721      	b.n	80003ae <__udivmoddi4+0xee>
 800056a:	1a86      	subs	r6, r0, r2
 800056c:	eb64 0303 	sbc.w	r3, r4, r3
 8000570:	2001      	movs	r0, #1
 8000572:	e70e      	b.n	8000392 <__udivmoddi4+0xd2>
 8000574:	3c02      	subs	r4, #2
 8000576:	4472      	add	r2, lr
 8000578:	e735      	b.n	80003e6 <__udivmoddi4+0x126>
 800057a:	3902      	subs	r1, #2
 800057c:	4472      	add	r2, lr
 800057e:	e6d0      	b.n	8000322 <__udivmoddi4+0x62>
 8000580:	44f4      	add	ip, lr
 8000582:	3802      	subs	r0, #2
 8000584:	e6e3      	b.n	800034e <__udivmoddi4+0x8e>
 8000586:	44f4      	add	ip, lr
 8000588:	3802      	subs	r0, #2
 800058a:	e742      	b.n	8000412 <__udivmoddi4+0x152>
 800058c:	3c02      	subs	r4, #2
 800058e:	4472      	add	r2, lr
 8000590:	e7e7      	b.n	8000562 <__udivmoddi4+0x2a2>
 8000592:	3802      	subs	r0, #2
 8000594:	4471      	add	r1, lr
 8000596:	e7d0      	b.n	800053a <__udivmoddi4+0x27a>
 8000598:	3b02      	subs	r3, #2
 800059a:	443c      	add	r4, r7
 800059c:	e782      	b.n	80004a4 <__udivmoddi4+0x1e4>
 800059e:	3802      	subs	r0, #2
 80005a0:	443c      	add	r4, r7
 80005a2:	e76a      	b.n	800047a <__udivmoddi4+0x1ba>

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08c      	sub	sp, #48	@ 0x30
 80005ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ae:	f107 031c 	add.w	r3, r7, #28
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	60da      	str	r2, [r3, #12]
 80005bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005be:	4b60      	ldr	r3, [pc, #384]	@ (8000740 <MX_GPIO_Init+0x198>)
 80005c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005c4:	4a5e      	ldr	r2, [pc, #376]	@ (8000740 <MX_GPIO_Init+0x198>)
 80005c6:	f043 0301 	orr.w	r3, r3, #1
 80005ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80005ce:	4b5c      	ldr	r3, [pc, #368]	@ (8000740 <MX_GPIO_Init+0x198>)
 80005d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005d4:	f003 0301 	and.w	r3, r3, #1
 80005d8:	61bb      	str	r3, [r7, #24]
 80005da:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005dc:	4b58      	ldr	r3, [pc, #352]	@ (8000740 <MX_GPIO_Init+0x198>)
 80005de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005e2:	4a57      	ldr	r2, [pc, #348]	@ (8000740 <MX_GPIO_Init+0x198>)
 80005e4:	f043 0320 	orr.w	r3, r3, #32
 80005e8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80005ec:	4b54      	ldr	r3, [pc, #336]	@ (8000740 <MX_GPIO_Init+0x198>)
 80005ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005f2:	f003 0320 	and.w	r3, r3, #32
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005fa:	4b51      	ldr	r3, [pc, #324]	@ (8000740 <MX_GPIO_Init+0x198>)
 80005fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000600:	4a4f      	ldr	r2, [pc, #316]	@ (8000740 <MX_GPIO_Init+0x198>)
 8000602:	f043 0308 	orr.w	r3, r3, #8
 8000606:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800060a:	4b4d      	ldr	r3, [pc, #308]	@ (8000740 <MX_GPIO_Init+0x198>)
 800060c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000610:	f003 0308 	and.w	r3, r3, #8
 8000614:	613b      	str	r3, [r7, #16]
 8000616:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000618:	4b49      	ldr	r3, [pc, #292]	@ (8000740 <MX_GPIO_Init+0x198>)
 800061a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800061e:	4a48      	ldr	r2, [pc, #288]	@ (8000740 <MX_GPIO_Init+0x198>)
 8000620:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000624:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000628:	4b45      	ldr	r3, [pc, #276]	@ (8000740 <MX_GPIO_Init+0x198>)
 800062a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800062e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000636:	4b42      	ldr	r3, [pc, #264]	@ (8000740 <MX_GPIO_Init+0x198>)
 8000638:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800063c:	4a40      	ldr	r2, [pc, #256]	@ (8000740 <MX_GPIO_Init+0x198>)
 800063e:	f043 0304 	orr.w	r3, r3, #4
 8000642:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000646:	4b3e      	ldr	r3, [pc, #248]	@ (8000740 <MX_GPIO_Init+0x198>)
 8000648:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800064c:	f003 0304 	and.w	r3, r3, #4
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000654:	4b3a      	ldr	r3, [pc, #232]	@ (8000740 <MX_GPIO_Init+0x198>)
 8000656:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800065a:	4a39      	ldr	r2, [pc, #228]	@ (8000740 <MX_GPIO_Init+0x198>)
 800065c:	f043 0302 	orr.w	r3, r3, #2
 8000660:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000664:	4b36      	ldr	r3, [pc, #216]	@ (8000740 <MX_GPIO_Init+0x198>)
 8000666:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800066a:	f003 0302 	and.w	r3, r3, #2
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000678:	4832      	ldr	r0, [pc, #200]	@ (8000744 <MX_GPIO_Init+0x19c>)
 800067a:	f000 ff71 	bl	8001560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000684:	4830      	ldr	r0, [pc, #192]	@ (8000748 <MX_GPIO_Init+0x1a0>)
 8000686:	f000 ff6b 	bl	8001560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2104      	movs	r1, #4
 800068e:	482f      	ldr	r0, [pc, #188]	@ (800074c <MX_GPIO_Init+0x1a4>)
 8000690:	f000 ff66 	bl	8001560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	2180      	movs	r1, #128	@ 0x80
 8000698:	482d      	ldr	r0, [pc, #180]	@ (8000750 <MX_GPIO_Init+0x1a8>)
 800069a:	f000 ff61 	bl	8001560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	2180      	movs	r1, #128	@ 0x80
 80006a2:	482c      	ldr	r0, [pc, #176]	@ (8000754 <MX_GPIO_Init+0x1ac>)
 80006a4:	f000 ff5c 	bl	8001560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 80006a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ae:	2301      	movs	r3, #1
 80006b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b6:	2300      	movs	r3, #0
 80006b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	4619      	mov	r1, r3
 80006c0:	4820      	ldr	r0, [pc, #128]	@ (8000744 <MX_GPIO_Init+0x19c>)
 80006c2:	f000 fd75 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 80006c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	2300      	movs	r3, #0
 80006d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	4619      	mov	r1, r3
 80006de:	481a      	ldr	r0, [pc, #104]	@ (8000748 <MX_GPIO_Init+0x1a0>)
 80006e0:	f000 fd66 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80006e4:	2304      	movs	r3, #4
 80006e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e8:	2301      	movs	r3, #1
 80006ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	2300      	movs	r3, #0
 80006f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80006f4:	f107 031c 	add.w	r3, r7, #28
 80006f8:	4619      	mov	r1, r3
 80006fa:	4814      	ldr	r0, [pc, #80]	@ (800074c <MX_GPIO_Init+0x1a4>)
 80006fc:	f000 fd58 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000700:	2380      	movs	r3, #128	@ 0x80
 8000702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000704:	2301      	movs	r3, #1
 8000706:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070c:	2300      	movs	r3, #0
 800070e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000710:	f107 031c 	add.w	r3, r7, #28
 8000714:	4619      	mov	r1, r3
 8000716:	480e      	ldr	r0, [pc, #56]	@ (8000750 <MX_GPIO_Init+0x1a8>)
 8000718:	f000 fd4a 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 800071c:	2380      	movs	r3, #128	@ 0x80
 800071e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000720:	2301      	movs	r3, #1
 8000722:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000728:	2300      	movs	r3, #0
 800072a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4619      	mov	r1, r3
 8000732:	4808      	ldr	r0, [pc, #32]	@ (8000754 <MX_GPIO_Init+0x1ac>)
 8000734:	f000 fd3c 	bl	80011b0 <HAL_GPIO_Init>

}
 8000738:	bf00      	nop
 800073a:	3730      	adds	r7, #48	@ 0x30
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	46020c00 	.word	0x46020c00
 8000744:	42021400 	.word	0x42021400
 8000748:	42020c00 	.word	0x42020c00
 800074c:	42021800 	.word	0x42021800
 8000750:	42020800 	.word	0x42020800
 8000754:	42020400 	.word	0x42020400

08000758 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800075c:	2000      	movs	r0, #0
 800075e:	f000 ff17 	bl	8001590 <HAL_ICACHE_ConfigAssociativityMode>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000768:	f000 f89b 	bl	80008a2 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800076c:	f000 ff30 	bl	80015d0 <HAL_ICACHE_Enable>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000776:	f000 f894 	bl	80008a2 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  uint8_t RX_Data[5] = {0};
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	2300      	movs	r3, #0
 800078c:	733b      	strb	r3, [r7, #12]
  uint8_t RX_Data_BREAK[] = "\r\n";
 800078e:	4a16      	ldr	r2, [pc, #88]	@ (80007e8 <main+0x68>)
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	6812      	ldr	r2, [r2, #0]
 8000794:	4611      	mov	r1, r2
 8000796:	8019      	strh	r1, [r3, #0]
 8000798:	3302      	adds	r3, #2
 800079a:	0c12      	lsrs	r2, r2, #16
 800079c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800079e:	f000 fb7b 	bl	8000e98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a2:	f000 f825 	bl	80007f0 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80007a6:	f000 f86c 	bl	8000882 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007aa:	f7ff fefd 	bl	80005a8 <MX_GPIO_Init>
  MX_ICACHE_Init();
 80007ae:	f7ff ffd3 	bl	8000758 <MX_ICACHE_Init>
  MX_SPI1_Init();
 80007b2:	f000 f937 	bl	8000a24 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80007b6:	f000 fa8f 	bl	8000cd8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //LCD_Init(&hspi1);
  RFM69_Init(RF69_868MHZ, 0xAA, 0xAA);
 80007ba:	22aa      	movs	r2, #170	@ 0xaa
 80007bc:	21aa      	movs	r1, #170	@ 0xaa
 80007be:	2056      	movs	r0, #86	@ 0x56
 80007c0:	f000 f876 	bl	80008b0 <RFM69_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 80007c4:	2201      	movs	r2, #1
 80007c6:	2180      	movs	r1, #128	@ 0x80
 80007c8:	4808      	ldr	r0, [pc, #32]	@ (80007ec <main+0x6c>)
 80007ca:	f000 fec9 	bl	8001560 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 80007ce:	20c8      	movs	r0, #200	@ 0xc8
 80007d0:	f000 fbe6 	bl	8000fa0 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2180      	movs	r1, #128	@ 0x80
 80007d8:	4804      	ldr	r0, [pc, #16]	@ (80007ec <main+0x6c>)
 80007da:	f000 fec1 	bl	8001560 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 80007de:	20c8      	movs	r0, #200	@ 0xc8
 80007e0:	f000 fbde 	bl	8000fa0 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 80007e4:	bf00      	nop
 80007e6:	e7ed      	b.n	80007c4 <main+0x44>
 80007e8:	08007310 	.word	0x08007310
 80007ec:	42020400 	.word	0x42020400

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b09e      	sub	sp, #120	@ 0x78
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 0318 	add.w	r3, r7, #24
 80007fa:	2260      	movs	r2, #96	@ 0x60
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f006 fd4e 	bl	80072a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	463b      	mov	r3, r7
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]
 8000812:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE3) != HAL_OK)
 8000814:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8000818:	f000 feea 	bl	80015f0 <HAL_PWREx_ControlVoltageScaling>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000822:	f000 f83e 	bl	80008a2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000826:	2310      	movs	r3, #16
 8000828:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800082a:	2301      	movs	r3, #1
 800082c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800082e:	2310      	movs	r3, #16
 8000830:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8000832:	2300      	movs	r3, #0
 8000834:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000836:	2300      	movs	r3, #0
 8000838:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083a:	f107 0318 	add.w	r3, r7, #24
 800083e:	4618      	mov	r0, r3
 8000840:	f000 ffd2 	bl	80017e8 <HAL_RCC_OscConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800084a:	f000 f82a 	bl	80008a2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084e:	231f      	movs	r3, #31
 8000850:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 800085e:	2360      	movs	r3, #96	@ 0x60
 8000860:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000866:	463b      	mov	r3, r7
 8000868:	2101      	movs	r1, #1
 800086a:	4618      	mov	r0, r3
 800086c:	f001 fe98 	bl	80025a0 <HAL_RCC_ClockConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000876:	f000 f814 	bl	80008a2 <Error_Handler>
  }
}
 800087a:	bf00      	nop
 800087c:	3778      	adds	r7, #120	@ 0x78
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000886:	f000 ff8f 	bl	80017a8 <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 800088a:	f000 ff9d 	bl	80017c8 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800088e:	2002      	movs	r0, #2
 8000890:	f000 ff3a 	bl	8001708 <HAL_PWREx_ConfigSupply>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemPower_Config+0x1c>
  {
    Error_Handler();
 800089a:	f000 f802 	bl	80008a2 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a6:	b672      	cpsid	i
}
 80008a8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008aa:	bf00      	nop
 80008ac:	e7fd      	b.n	80008aa <Error_Handler+0x8>
	...

080008b0 <RFM69_Init>:
 *  nodeID: Sets the nodeID
 *
 *  networkID: Sets the networkID
 *
 */
void RFM69_Init(uint8_t freqBand, uint8_t nodeID, uint8_t networkID){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
 80008ba:	460b      	mov	r3, r1
 80008bc:	71bb      	strb	r3, [r7, #6]
 80008be:	4613      	mov	r3, r2
 80008c0:	717b      	strb	r3, [r7, #5]
	HAL_Delay(100);
 80008c2:	2064      	movs	r0, #100	@ 0x64
 80008c4:	f000 fb6c 	bl	8000fa0 <HAL_Delay>
	int test = chipPresent(&hspi1);
 80008c8:	4804      	ldr	r0, [pc, #16]	@ (80008dc <RFM69_Init+0x2c>)
 80008ca:	f000 f809 	bl	80008e0 <chipPresent>
 80008ce:	4603      	mov	r3, r0
 80008d0:	60fb      	str	r3, [r7, #12]
}
 80008d2:	bf00      	nop
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000028 	.word	0x20000028

080008e0 <chipPresent>:
 *  spi_handler: Pointer to the chosen SPI Interface
 *
 *  returns: 	1 if no Chip is found
 *  			0 if a RFM69 Chip is found
 */
uint8_t chipPresent(SPI_HandleTypeDef * spi_handler){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	uint8_t return_status = 1;
 80008e8:	2301      	movs	r3, #1
 80008ea:	73fb      	strb	r3, [r7, #15]

	writeREG(spi_handler, REG_SYNCVALUE1, 0xAA);
 80008ec:	22aa      	movs	r2, #170	@ 0xaa
 80008ee:	212f      	movs	r1, #47	@ 0x2f
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f000 f837 	bl	8000964 <writeREG>
	HAL_Delay(100);
 80008f6:	2064      	movs	r0, #100	@ 0x64
 80008f8:	f000 fb52 	bl	8000fa0 <HAL_Delay>

	if (readREG(spi_handler, REG_SYNCVALUE1) == 0xAA){
 80008fc:	212f      	movs	r1, #47	@ 0x2f
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	f000 f860 	bl	80009c4 <readREG>
 8000904:	4603      	mov	r3, r0
 8000906:	2baa      	cmp	r3, #170	@ 0xaa
 8000908:	d11e      	bne.n	8000948 <chipPresent+0x68>
		writeREG(spi_handler, REG_SYNCVALUE1, 0x55);
 800090a:	2255      	movs	r2, #85	@ 0x55
 800090c:	212f      	movs	r1, #47	@ 0x2f
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f000 f828 	bl	8000964 <writeREG>
		HAL_Delay(100);
 8000914:	2064      	movs	r0, #100	@ 0x64
 8000916:	f000 fb43 	bl	8000fa0 <HAL_Delay>

		if (readREG(spi_handler, REG_SYNCVALUE1) == 0x55){
 800091a:	212f      	movs	r1, #47	@ 0x2f
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f000 f851 	bl	80009c4 <readREG>
 8000922:	4603      	mov	r3, r0
 8000924:	2b55      	cmp	r3, #85	@ 0x55
 8000926:	d108      	bne.n	800093a <chipPresent+0x5a>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000928:	2201      	movs	r2, #1
 800092a:	2180      	movs	r1, #128	@ 0x80
 800092c:	480b      	ldr	r0, [pc, #44]	@ (800095c <chipPresent+0x7c>)
 800092e:	f000 fe17 	bl	8001560 <HAL_GPIO_WritePin>
			return_status = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	73fb      	strb	r3, [r7, #15]

			return return_status;
 8000936:	7bfb      	ldrb	r3, [r7, #15]
 8000938:	e00c      	b.n	8000954 <chipPresent+0x74>
		}
		else{
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800093a:	2201      	movs	r2, #1
 800093c:	2104      	movs	r1, #4
 800093e:	4808      	ldr	r0, [pc, #32]	@ (8000960 <chipPresent+0x80>)
 8000940:	f000 fe0e 	bl	8001560 <HAL_GPIO_WritePin>

			return return_status;
 8000944:	7bfb      	ldrb	r3, [r7, #15]
 8000946:	e005      	b.n	8000954 <chipPresent+0x74>
		}
	}
	else{
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000948:	2201      	movs	r2, #1
 800094a:	2104      	movs	r1, #4
 800094c:	4804      	ldr	r0, [pc, #16]	@ (8000960 <chipPresent+0x80>)
 800094e:	f000 fe07 	bl	8001560 <HAL_GPIO_WritePin>

		return return_status;
 8000952:	7bfb      	ldrb	r3, [r7, #15]
	}
}
 8000954:	4618      	mov	r0, r3
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	42020800 	.word	0x42020800
 8000960:	42021800 	.word	0x42021800

08000964 <writeREG>:
 *
 *  addr: [HEX] The Address to write to (See RFM69registers.h for predefined values)
 *
 *  value: [HEX] The Value
 */
void writeREG(SPI_HandleTypeDef * spi_handler, uint8_t addr, uint8_t value){
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	460b      	mov	r3, r1
 800096e:	70fb      	strb	r3, [r7, #3]
 8000970:	4613      	mov	r3, r2
 8000972:	70bb      	strb	r3, [r7, #2]
	uint8_t write_addr = addr | 0x80;
 8000974:	78fb      	ldrb	r3, [r7, #3]
 8000976:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800097a:	b2db      	uxtb	r3, r3
 800097c:	73fb      	strb	r3, [r7, #15]

	HAL_Delay(100);
 800097e:	2064      	movs	r0, #100	@ 0x64
 8000980:	f000 fb0e 	bl	8000fa0 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOF, LCD_CS_Pin, GPIO_PIN_RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800098a:	480d      	ldr	r0, [pc, #52]	@ (80009c0 <writeREG+0x5c>)
 800098c:	f000 fde8 	bl	8001560 <HAL_GPIO_WritePin>

	// & 0x80 to set the 7th Bit to 1 (write)
	HAL_SPI_Transmit(spi_handler, &write_addr, 1, 100);
 8000990:	f107 010f 	add.w	r1, r7, #15
 8000994:	2364      	movs	r3, #100	@ 0x64
 8000996:	2201      	movs	r2, #1
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f005 fa6f 	bl	8005e7c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(spi_handler, &value, 1, 100);
 800099e:	1cb9      	adds	r1, r7, #2
 80009a0:	2364      	movs	r3, #100	@ 0x64
 80009a2:	2201      	movs	r2, #1
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f005 fa69 	bl	8005e7c <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOF, LCD_CS_Pin, GPIO_PIN_SET);
 80009aa:	2201      	movs	r2, #1
 80009ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009b0:	4803      	ldr	r0, [pc, #12]	@ (80009c0 <writeREG+0x5c>)
 80009b2:	f000 fdd5 	bl	8001560 <HAL_GPIO_WritePin>
}
 80009b6:	bf00      	nop
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	42021400 	.word	0x42021400

080009c4 <readREG>:
 *
 *  addr: [HEX] The Address to write to (See RFM69registers.h for predefined values)
 *
 *  returns: The value of the register addr.
 */
uint8_t readREG(SPI_HandleTypeDef * spi_handler, uint8_t addr){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	460b      	mov	r3, r1
 80009ce:	70fb      	strb	r3, [r7, #3]
	uint8_t read_addr = addr & 0x7F;
 80009d0:	78fb      	ldrb	r3, [r7, #3]
 80009d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	73fb      	strb	r3, [r7, #15]
	uint8_t value;

	HAL_Delay(100);
 80009da:	2064      	movs	r0, #100	@ 0x64
 80009dc:	f000 fae0 	bl	8000fa0 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOF, LCD_CS_Pin, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009e6:	480e      	ldr	r0, [pc, #56]	@ (8000a20 <readREG+0x5c>)
 80009e8:	f000 fdba 	bl	8001560 <HAL_GPIO_WritePin>

	// & 0x7F to set the 7th Bit to 0 (read)
	HAL_SPI_Transmit(spi_handler, &read_addr, 1, 100);
 80009ec:	f107 010f 	add.w	r1, r7, #15
 80009f0:	2364      	movs	r3, #100	@ 0x64
 80009f2:	2201      	movs	r2, #1
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f005 fa41 	bl	8005e7c <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi_handler, &value, 1, 100);
 80009fa:	f107 010e 	add.w	r1, r7, #14
 80009fe:	2364      	movs	r3, #100	@ 0x64
 8000a00:	2201      	movs	r2, #1
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f005 fc58 	bl	80062b8 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOF, LCD_CS_Pin, GPIO_PIN_SET);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a0e:	4804      	ldr	r0, [pc, #16]	@ (8000a20 <readREG+0x5c>)
 8000a10:	f000 fda6 	bl	8001560 <HAL_GPIO_WritePin>

	return value;
 8000a14:	7bbb      	ldrb	r3, [r7, #14]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	42021400 	.word	0x42021400

08000a24 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000a34:	4b30      	ldr	r3, [pc, #192]	@ (8000af8 <MX_SPI1_Init+0xd4>)
 8000a36:	4a31      	ldr	r2, [pc, #196]	@ (8000afc <MX_SPI1_Init+0xd8>)
 8000a38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a3a:	4b2f      	ldr	r3, [pc, #188]	@ (8000af8 <MX_SPI1_Init+0xd4>)
 8000a3c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000a40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a42:	4b2d      	ldr	r3, [pc, #180]	@ (8000af8 <MX_SPI1_Init+0xd4>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a48:	4b2b      	ldr	r3, [pc, #172]	@ (8000af8 <MX_SPI1_Init+0xd4>)
 8000a4a:	2207      	movs	r2, #7
 8000a4c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000af8 <MX_SPI1_Init+0xd4>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a54:	4b28      	ldr	r3, [pc, #160]	@ (8000af8 <MX_SPI1_Init+0xd4>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a5a:	4b27      	ldr	r3, [pc, #156]	@ (8000af8 <MX_SPI1_Init+0xd4>)
 8000a5c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000a60:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a62:	4b25      	ldr	r3, [pc, #148]	@ (8000af8 <MX_SPI1_Init+0xd4>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a68:	4b23      	ldr	r3, [pc, #140]	@ (8000af8 <MX_SPI1_Init+0xd4>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a6e:	4b22      	ldr	r3, [pc, #136]	@ (8000af8 <MX_SPI1_Init+0xd4>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a74:	4b20      	ldr	r3, [pc, #128]	@ (8000af8 <MX_SPI1_Init+0xd4>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000a7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000af8 <MX_SPI1_Init+0xd4>)
 8000a7c:	2207      	movs	r2, #7
 8000a7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a80:	4b1d      	ldr	r3, [pc, #116]	@ (8000af8 <MX_SPI1_Init+0xd4>)
 8000a82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a86:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a88:	4b1b      	ldr	r3, [pc, #108]	@ (8000af8 <MX_SPI1_Init+0xd4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000af8 <MX_SPI1_Init+0xd4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a94:	4b18      	ldr	r3, [pc, #96]	@ (8000af8 <MX_SPI1_Init+0xd4>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a9a:	4b17      	ldr	r3, [pc, #92]	@ (8000af8 <MX_SPI1_Init+0xd4>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000aa0:	4b15      	ldr	r3, [pc, #84]	@ (8000af8 <MX_SPI1_Init+0xd4>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000aa6:	4b14      	ldr	r3, [pc, #80]	@ (8000af8 <MX_SPI1_Init+0xd4>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000aac:	4b12      	ldr	r3, [pc, #72]	@ (8000af8 <MX_SPI1_Init+0xd4>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <MX_SPI1_Init+0xd4>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8000af8 <MX_SPI1_Init+0xd4>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000abe:	480e      	ldr	r0, [pc, #56]	@ (8000af8 <MX_SPI1_Init+0xd4>)
 8000ac0:	f005 f8c6 	bl	8005c50 <HAL_SPI_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 8000aca:	f7ff feea 	bl	80008a2 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000ad2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ad6:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4805      	ldr	r0, [pc, #20]	@ (8000af8 <MX_SPI1_Init+0xd4>)
 8000ae2:	f005 fe82 	bl	80067ea <HAL_SPIEx_SetConfigAutonomousMode>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 8000aec:	f7ff fed9 	bl	80008a2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000028 	.word	0x20000028
 8000afc:	40013000 	.word	0x40013000

08000b00 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b0c0      	sub	sp, #256	@ 0x100
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b18:	f107 0310 	add.w	r3, r7, #16
 8000b1c:	22d8      	movs	r2, #216	@ 0xd8
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f006 fbbd 	bl	80072a0 <memset>
  if(spiHandle->Instance==SPI1)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a27      	ldr	r2, [pc, #156]	@ (8000bc8 <HAL_SPI_MspInit+0xc8>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d145      	bne.n	8000bbc <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000b30:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000b34:	f04f 0300 	mov.w	r3, #0
 8000b38:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PCLK2;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b42:	f107 0310 	add.w	r3, r7, #16
 8000b46:	4618      	mov	r0, r3
 8000b48:	f002 f900 	bl	8002d4c <HAL_RCCEx_PeriphCLKConfig>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8000b52:	f7ff fea6 	bl	80008a2 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b56:	4b1d      	ldr	r3, [pc, #116]	@ (8000bcc <HAL_SPI_MspInit+0xcc>)
 8000b58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000b5c:	4a1b      	ldr	r2, [pc, #108]	@ (8000bcc <HAL_SPI_MspInit+0xcc>)
 8000b5e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b62:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000b66:	4b19      	ldr	r3, [pc, #100]	@ (8000bcc <HAL_SPI_MspInit+0xcc>)
 8000b68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000b6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b74:	4b15      	ldr	r3, [pc, #84]	@ (8000bcc <HAL_SPI_MspInit+0xcc>)
 8000b76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b7a:	4a14      	ldr	r2, [pc, #80]	@ (8000bcc <HAL_SPI_MspInit+0xcc>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b84:	4b11      	ldr	r3, [pc, #68]	@ (8000bcc <HAL_SPI_MspInit+0xcc>)
 8000b86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b92:	23e0      	movs	r3, #224	@ 0xe0
 8000b94:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000baa:	2305      	movs	r3, #5
 8000bac:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4806      	ldr	r0, [pc, #24]	@ (8000bd0 <HAL_SPI_MspInit+0xd0>)
 8000bb8:	f000 fafa 	bl	80011b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000bbc:	bf00      	nop
 8000bbe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40013000 	.word	0x40013000
 8000bcc:	46020c00 	.word	0x46020c00
 8000bd0:	42020000 	.word	0x42020000

08000bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bda:	4b0a      	ldr	r3, [pc, #40]	@ (8000c04 <HAL_MspInit+0x30>)
 8000bdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000be0:	4a08      	ldr	r2, [pc, #32]	@ (8000c04 <HAL_MspInit+0x30>)
 8000be2:	f043 0304 	orr.w	r3, r3, #4
 8000be6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000bea:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <HAL_MspInit+0x30>)
 8000bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000bf0:	f003 0304 	and.w	r3, r3, #4
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	46020c00 	.word	0x46020c00

08000c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <NMI_Handler+0x4>

08000c10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <HardFault_Handler+0x4>

08000c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <MemManage_Handler+0x4>

08000c20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <BusFault_Handler+0x4>

08000c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <UsageFault_Handler+0x4>

08000c30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c5e:	f000 f97f 	bl	8000f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c6c:	4b18      	ldr	r3, [pc, #96]	@ (8000cd0 <SystemInit+0x68>)
 8000c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c72:	4a17      	ldr	r2, [pc, #92]	@ (8000cd0 <SystemInit+0x68>)
 8000c74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000c7c:	4b15      	ldr	r3, [pc, #84]	@ (8000cd4 <SystemInit+0x6c>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000c82:	4b14      	ldr	r3, [pc, #80]	@ (8000cd4 <SystemInit+0x6c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000c88:	4b12      	ldr	r3, [pc, #72]	@ (8000cd4 <SystemInit+0x6c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000c8e:	4b11      	ldr	r3, [pc, #68]	@ (8000cd4 <SystemInit+0x6c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000c94:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd4 <SystemInit+0x6c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0e      	ldr	r2, [pc, #56]	@ (8000cd4 <SystemInit+0x6c>)
 8000c9a:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000c9e:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000ca2:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd4 <SystemInit+0x6c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000caa:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd4 <SystemInit+0x6c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a09      	ldr	r2, [pc, #36]	@ (8000cd4 <SystemInit+0x6c>)
 8000cb0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cb4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000cb6:	4b07      	ldr	r3, [pc, #28]	@ (8000cd4 <SystemInit+0x6c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cbc:	4b04      	ldr	r3, [pc, #16]	@ (8000cd0 <SystemInit+0x68>)
 8000cbe:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000cc2:	609a      	str	r2, [r3, #8]
  #endif
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000ed00 	.word	0xe000ed00
 8000cd4:	46020c00 	.word	0x46020c00

08000cd8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cdc:	4b22      	ldr	r3, [pc, #136]	@ (8000d68 <MX_USART1_UART_Init+0x90>)
 8000cde:	4a23      	ldr	r2, [pc, #140]	@ (8000d6c <MX_USART1_UART_Init+0x94>)
 8000ce0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ce2:	4b21      	ldr	r3, [pc, #132]	@ (8000d68 <MX_USART1_UART_Init+0x90>)
 8000ce4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ce8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cea:	4b1f      	ldr	r3, [pc, #124]	@ (8000d68 <MX_USART1_UART_Init+0x90>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d68 <MX_USART1_UART_Init+0x90>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d68 <MX_USART1_UART_Init+0x90>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d68 <MX_USART1_UART_Init+0x90>)
 8000cfe:	220c      	movs	r2, #12
 8000d00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d02:	4b19      	ldr	r3, [pc, #100]	@ (8000d68 <MX_USART1_UART_Init+0x90>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d08:	4b17      	ldr	r3, [pc, #92]	@ (8000d68 <MX_USART1_UART_Init+0x90>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d0e:	4b16      	ldr	r3, [pc, #88]	@ (8000d68 <MX_USART1_UART_Init+0x90>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d14:	4b14      	ldr	r3, [pc, #80]	@ (8000d68 <MX_USART1_UART_Init+0x90>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d1a:	4b13      	ldr	r3, [pc, #76]	@ (8000d68 <MX_USART1_UART_Init+0x90>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d20:	4811      	ldr	r0, [pc, #68]	@ (8000d68 <MX_USART1_UART_Init+0x90>)
 8000d22:	f005 fda3 	bl	800686c <HAL_UART_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d2c:	f7ff fdb9 	bl	80008a2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d30:	2100      	movs	r1, #0
 8000d32:	480d      	ldr	r0, [pc, #52]	@ (8000d68 <MX_USART1_UART_Init+0x90>)
 8000d34:	f006 f9ea 	bl	800710c <HAL_UARTEx_SetTxFifoThreshold>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d3e:	f7ff fdb0 	bl	80008a2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d42:	2100      	movs	r1, #0
 8000d44:	4808      	ldr	r0, [pc, #32]	@ (8000d68 <MX_USART1_UART_Init+0x90>)
 8000d46:	f006 fa1f 	bl	8007188 <HAL_UARTEx_SetRxFifoThreshold>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d50:	f7ff fda7 	bl	80008a2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d54:	4804      	ldr	r0, [pc, #16]	@ (8000d68 <MX_USART1_UART_Init+0x90>)
 8000d56:	f006 f9a0 	bl	800709a <HAL_UARTEx_DisableFifoMode>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d60:	f7ff fd9f 	bl	80008a2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	200000b8 	.word	0x200000b8
 8000d6c:	40013800 	.word	0x40013800

08000d70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b0c0      	sub	sp, #256	@ 0x100
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d88:	f107 0310 	add.w	r3, r7, #16
 8000d8c:	22d8      	movs	r2, #216	@ 0xd8
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4618      	mov	r0, r3
 8000d92:	f006 fa85 	bl	80072a0 <memset>
  if(uartHandle->Instance==USART1)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a27      	ldr	r2, [pc, #156]	@ (8000e38 <HAL_UART_MspInit+0xc8>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d145      	bne.n	8000e2c <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000da0:	f04f 0201 	mov.w	r2, #1
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000dac:	2300      	movs	r3, #0
 8000dae:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db0:	f107 0310 	add.w	r3, r7, #16
 8000db4:	4618      	mov	r0, r3
 8000db6:	f001 ffc9 	bl	8002d4c <HAL_RCCEx_PeriphCLKConfig>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000dc0:	f7ff fd6f 	bl	80008a2 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e3c <HAL_UART_MspInit+0xcc>)
 8000dc6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000dca:	4a1c      	ldr	r2, [pc, #112]	@ (8000e3c <HAL_UART_MspInit+0xcc>)
 8000dcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dd0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000dd4:	4b19      	ldr	r3, [pc, #100]	@ (8000e3c <HAL_UART_MspInit+0xcc>)
 8000dd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000dda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	4b16      	ldr	r3, [pc, #88]	@ (8000e3c <HAL_UART_MspInit+0xcc>)
 8000de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000de8:	4a14      	ldr	r2, [pc, #80]	@ (8000e3c <HAL_UART_MspInit+0xcc>)
 8000dea:	f043 0301 	orr.w	r3, r3, #1
 8000dee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000df2:	4b12      	ldr	r3, [pc, #72]	@ (8000e3c <HAL_UART_MspInit+0xcc>)
 8000df4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e00:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e04:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e14:	2300      	movs	r3, #0
 8000e16:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e1a:	2307      	movs	r3, #7
 8000e1c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e20:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000e24:	4619      	mov	r1, r3
 8000e26:	4806      	ldr	r0, [pc, #24]	@ (8000e40 <HAL_UART_MspInit+0xd0>)
 8000e28:	f000 f9c2 	bl	80011b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000e2c:	bf00      	nop
 8000e2e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40013800 	.word	0x40013800
 8000e3c:	46020c00 	.word	0x46020c00
 8000e40:	42020000 	.word	0x42020000

08000e44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000e44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e7c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e48:	f7ff ff0e 	bl	8000c68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e4c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e4e:	e003      	b.n	8000e58 <LoopCopyDataInit>

08000e50 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e50:	4b0b      	ldr	r3, [pc, #44]	@ (8000e80 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e52:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e54:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e56:	3104      	adds	r1, #4

08000e58 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e58:	480a      	ldr	r0, [pc, #40]	@ (8000e84 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e88 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e5c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e5e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e60:	d3f6      	bcc.n	8000e50 <CopyDataInit>
	ldr	r2, =_sbss
 8000e62:	4a0a      	ldr	r2, [pc, #40]	@ (8000e8c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e64:	e002      	b.n	8000e6c <LoopFillZerobss>

08000e66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e66:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e68:	f842 3b04 	str.w	r3, [r2], #4

08000e6c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e6c:	4b08      	ldr	r3, [pc, #32]	@ (8000e90 <LoopForever+0x16>)
	cmp	r2, r3
 8000e6e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e70:	d3f9      	bcc.n	8000e66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e72:	f006 fa1d 	bl	80072b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e76:	f7ff fc83 	bl	8000780 <main>

08000e7a <LoopForever>:

LoopForever:
    b LoopForever
 8000e7a:	e7fe      	b.n	8000e7a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000e7c:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8000e80:	08007424 	.word	0x08007424
	ldr	r0, =_sdata
 8000e84:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e88:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8000e8c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000e90:	20000150 	.word	0x20000150

08000e94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e94:	e7fe      	b.n	8000e94 <ADC1_2_IRQHandler>
	...

08000e98 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <HAL_Init+0x4c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a10      	ldr	r2, [pc, #64]	@ (8000ee4 <HAL_Init+0x4c>)
 8000ea2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f000 f94f 	bl	800114c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000eae:	f001 fd69 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee8 <HAL_Init+0x50>)
 8000eb6:	6a1b      	ldr	r3, [r3, #32]
 8000eb8:	f003 030f 	and.w	r3, r3, #15
 8000ebc:	490b      	ldr	r1, [pc, #44]	@ (8000eec <HAL_Init+0x54>)
 8000ebe:	5ccb      	ldrb	r3, [r1, r3]
 8000ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ec4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef0 <HAL_Init+0x58>)
 8000ec6:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ec8:	200f      	movs	r0, #15
 8000eca:	f000 f813 	bl	8000ef4 <HAL_InitTick>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e002      	b.n	8000ede <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed8:	f7ff fe7c 	bl	8000bd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40022000 	.word	0x40022000
 8000ee8:	46020c00 	.word	0x46020c00
 8000eec:	08007314 	.word	0x08007314
 8000ef0:	20000000 	.word	0x20000000

08000ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000efc:	4b15      	ldr	r3, [pc, #84]	@ (8000f54 <HAL_InitTick+0x60>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d101      	bne.n	8000f08 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e021      	b.n	8000f4c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f08:	4b13      	ldr	r3, [pc, #76]	@ (8000f58 <HAL_InitTick+0x64>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b11      	ldr	r3, [pc, #68]	@ (8000f54 <HAL_InitTick+0x60>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4619      	mov	r1, r3
 8000f12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 f939 	bl	8001196 <HAL_SYSTICK_Config>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e00e      	b.n	8000f4c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2b0f      	cmp	r3, #15
 8000f32:	d80a      	bhi.n	8000f4a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f34:	2200      	movs	r2, #0
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295
 8000f3c:	f000 f911 	bl	8001162 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f40:	4a06      	ldr	r2, [pc, #24]	@ (8000f5c <HAL_InitTick+0x68>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f46:	2300      	movs	r3, #0
 8000f48:	e000      	b.n	8000f4c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000008 	.word	0x20000008
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	20000004 	.word	0x20000004

08000f60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f64:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <HAL_IncTick+0x20>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <HAL_IncTick+0x24>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	4a04      	ldr	r2, [pc, #16]	@ (8000f84 <HAL_IncTick+0x24>)
 8000f72:	6013      	str	r3, [r2, #0]
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000008 	.word	0x20000008
 8000f84:	2000014c 	.word	0x2000014c

08000f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f8c:	4b03      	ldr	r3, [pc, #12]	@ (8000f9c <HAL_GetTick+0x14>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	2000014c 	.word	0x2000014c

08000fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa8:	f7ff ffee 	bl	8000f88 <HAL_GetTick>
 8000fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb8:	d005      	beq.n	8000fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fba:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe4 <HAL_Delay+0x44>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fc6:	bf00      	nop
 8000fc8:	f7ff ffde 	bl	8000f88 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d8f7      	bhi.n	8000fc8 <HAL_Delay+0x28>
  {
  }
}
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000008 	.word	0x20000008

08000fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800102c <__NVIC_SetPriorityGrouping+0x44>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001004:	4013      	ands	r3, r2
 8001006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001010:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001014:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800101a:	4a04      	ldr	r2, [pc, #16]	@ (800102c <__NVIC_SetPriorityGrouping+0x44>)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	60d3      	str	r3, [r2, #12]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001034:	4b04      	ldr	r3, [pc, #16]	@ (8001048 <__NVIC_GetPriorityGrouping+0x18>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	0a1b      	lsrs	r3, r3, #8
 800103a:	f003 0307 	and.w	r3, r3, #7
}
 800103e:	4618      	mov	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001058:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800105c:	2b00      	cmp	r3, #0
 800105e:	db0a      	blt.n	8001076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	b2da      	uxtb	r2, r3
 8001064:	490c      	ldr	r1, [pc, #48]	@ (8001098 <__NVIC_SetPriority+0x4c>)
 8001066:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800106a:	0112      	lsls	r2, r2, #4
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	440b      	add	r3, r1
 8001070:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001074:	e00a      	b.n	800108c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4908      	ldr	r1, [pc, #32]	@ (800109c <__NVIC_SetPriority+0x50>)
 800107c:	88fb      	ldrh	r3, [r7, #6]
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	3b04      	subs	r3, #4
 8001084:	0112      	lsls	r2, r2, #4
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	440b      	add	r3, r1
 800108a:	761a      	strb	r2, [r3, #24]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000e100 	.word	0xe000e100
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b089      	sub	sp, #36	@ 0x24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f1c3 0307 	rsb	r3, r3, #7
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	bf28      	it	cs
 80010be:	2304      	movcs	r3, #4
 80010c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3304      	adds	r3, #4
 80010c6:	2b06      	cmp	r3, #6
 80010c8:	d902      	bls.n	80010d0 <NVIC_EncodePriority+0x30>
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3b03      	subs	r3, #3
 80010ce:	e000      	b.n	80010d2 <NVIC_EncodePriority+0x32>
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d4:	f04f 32ff 	mov.w	r2, #4294967295
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43da      	mvns	r2, r3
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	401a      	ands	r2, r3
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e8:	f04f 31ff 	mov.w	r1, #4294967295
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	fa01 f303 	lsl.w	r3, r1, r3
 80010f2:	43d9      	mvns	r1, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	4313      	orrs	r3, r2
         );
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3724      	adds	r7, #36	@ 0x24
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
	...

08001108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3b01      	subs	r3, #1
 8001114:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001118:	d301      	bcc.n	800111e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111a:	2301      	movs	r3, #1
 800111c:	e00f      	b.n	800113e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800111e:	4a0a      	ldr	r2, [pc, #40]	@ (8001148 <SysTick_Config+0x40>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001126:	210f      	movs	r1, #15
 8001128:	f04f 30ff 	mov.w	r0, #4294967295
 800112c:	f7ff ff8e 	bl	800104c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001130:	4b05      	ldr	r3, [pc, #20]	@ (8001148 <SysTick_Config+0x40>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001136:	4b04      	ldr	r3, [pc, #16]	@ (8001148 <SysTick_Config+0x40>)
 8001138:	2207      	movs	r2, #7
 800113a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	e000e010 	.word	0xe000e010

0800114c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ff47 	bl	8000fe8 <__NVIC_SetPriorityGrouping>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b086      	sub	sp, #24
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001170:	f7ff ff5e 	bl	8001030 <__NVIC_GetPriorityGrouping>
 8001174:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	68b9      	ldr	r1, [r7, #8]
 800117a:	6978      	ldr	r0, [r7, #20]
 800117c:	f7ff ff90 	bl	80010a0 <NVIC_EncodePriority>
 8001180:	4602      	mov	r2, r0
 8001182:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001186:	4611      	mov	r1, r2
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff5f 	bl	800104c <__NVIC_SetPriority>
}
 800118e:	bf00      	nop
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ffb2 	bl	8001108 <SysTick_Config>
 80011a4:	4603      	mov	r3, r0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	@ 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80011c2:	e1ba      	b.n	800153a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	2101      	movs	r1, #1
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	fa01 f303 	lsl.w	r3, r1, r3
 80011d0:	4013      	ands	r3, r2
 80011d2:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f000 81aa 	beq.w	8001534 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a55      	ldr	r2, [pc, #340]	@ (8001338 <HAL_GPIO_Init+0x188>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d15d      	bne.n	80012a4 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80011ee:	2201      	movs	r2, #1
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69fa      	ldr	r2, [r7, #28]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f003 0201 	and.w	r2, r3, #1
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	69fa      	ldr	r2, [r7, #28]
 800120e:	4313      	orrs	r3, r2
 8001210:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69fa      	ldr	r2, [r7, #28]
 8001216:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001218:	4a48      	ldr	r2, [pc, #288]	@ (800133c <HAL_GPIO_Init+0x18c>)
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001220:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001222:	4a46      	ldr	r2, [pc, #280]	@ (800133c <HAL_GPIO_Init+0x18c>)
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	4413      	add	r3, r2
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	08da      	lsrs	r2, r3, #3
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	3208      	adds	r2, #8
 8001236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800123a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	220f      	movs	r2, #15
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	69fa      	ldr	r2, [r7, #28]
 800124e:	4013      	ands	r3, r2
 8001250:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	f003 0307 	and.w	r3, r3, #7
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	220b      	movs	r2, #11
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	69fa      	ldr	r2, [r7, #28]
 8001262:	4313      	orrs	r3, r2
 8001264:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	08da      	lsrs	r2, r3, #3
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	3208      	adds	r2, #8
 800126e:	69f9      	ldr	r1, [r7, #28]
 8001270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	2203      	movs	r2, #3
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69fa      	ldr	r2, [r7, #28]
 8001288:	4013      	ands	r3, r2
 800128a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	2202      	movs	r2, #2
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	69fa      	ldr	r2, [r7, #28]
 8001298:	4313      	orrs	r3, r2
 800129a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	69fa      	ldr	r2, [r7, #28]
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	e067      	b.n	8001374 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x104>
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b12      	cmp	r3, #18
 80012b2:	d145      	bne.n	8001340 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	08da      	lsrs	r2, r3, #3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3208      	adds	r2, #8
 80012bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	f003 0307 	and.w	r3, r3, #7
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	220f      	movs	r2, #15
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69fa      	ldr	r2, [r7, #28]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	691b      	ldr	r3, [r3, #16]
 80012dc:	f003 020f 	and.w	r2, r3, #15
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	69fa      	ldr	r2, [r7, #28]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	08da      	lsrs	r2, r3, #3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	3208      	adds	r2, #8
 80012fa:	69f9      	ldr	r1, [r7, #28]
 80012fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	2203      	movs	r2, #3
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	69fa      	ldr	r2, [r7, #28]
 8001314:	4013      	ands	r3, r2
 8001316:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0203 	and.w	r2, r3, #3
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	69fa      	ldr	r2, [r7, #28]
 800132a:	4313      	orrs	r3, r2
 800132c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	69fa      	ldr	r2, [r7, #28]
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	e01e      	b.n	8001374 <HAL_GPIO_Init+0x1c4>
 8001336:	bf00      	nop
 8001338:	46020000 	.word	0x46020000
 800133c:	0800736c 	.word	0x0800736c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	2203      	movs	r2, #3
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	69fa      	ldr	r2, [r7, #28]
 8001354:	4013      	ands	r3, r2
 8001356:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 0203 	and.w	r2, r3, #3
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	69fa      	ldr	r2, [r7, #28]
 800136a:	4313      	orrs	r3, r2
 800136c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	69fa      	ldr	r2, [r7, #28]
 8001372:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d00b      	beq.n	8001394 <HAL_GPIO_Init+0x1e4>
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b02      	cmp	r3, #2
 8001382:	d007      	beq.n	8001394 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001388:	2b11      	cmp	r3, #17
 800138a:	d003      	beq.n	8001394 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b12      	cmp	r3, #18
 8001392:	d130      	bne.n	80013f6 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	2203      	movs	r2, #3
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	69fa      	ldr	r2, [r7, #28]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	68da      	ldr	r2, [r3, #12]
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	69fa      	ldr	r2, [r7, #28]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	69fa      	ldr	r2, [r7, #28]
 80013c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80013ca:	2201      	movs	r2, #1
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69fa      	ldr	r2, [r7, #28]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	091b      	lsrs	r3, r3, #4
 80013e0:	f003 0201 	and.w	r2, r3, #1
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	69fa      	ldr	r2, [r7, #28]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	69fa      	ldr	r2, [r7, #28]
 80013f4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2b03      	cmp	r3, #3
 80013fc:	d017      	beq.n	800142e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	2203      	movs	r2, #3
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	69fa      	ldr	r2, [r7, #28]
 8001412:	4013      	ands	r3, r2
 8001414:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	69fa      	ldr	r2, [r7, #28]
 8001424:	4313      	orrs	r3, r2
 8001426:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	69fa      	ldr	r2, [r7, #28]
 800142c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d07c      	beq.n	8001534 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800143a:	4a47      	ldr	r2, [pc, #284]	@ (8001558 <HAL_GPIO_Init+0x3a8>)
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	089b      	lsrs	r3, r3, #2
 8001440:	3318      	adds	r3, #24
 8001442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001446:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	f003 0303 	and.w	r3, r3, #3
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	220f      	movs	r2, #15
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	69fa      	ldr	r2, [r7, #28]
 800145a:	4013      	ands	r3, r2
 800145c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	0a9a      	lsrs	r2, r3, #10
 8001462:	4b3e      	ldr	r3, [pc, #248]	@ (800155c <HAL_GPIO_Init+0x3ac>)
 8001464:	4013      	ands	r3, r2
 8001466:	697a      	ldr	r2, [r7, #20]
 8001468:	f002 0203 	and.w	r2, r2, #3
 800146c:	00d2      	lsls	r2, r2, #3
 800146e:	4093      	lsls	r3, r2
 8001470:	69fa      	ldr	r2, [r7, #28]
 8001472:	4313      	orrs	r3, r2
 8001474:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001476:	4938      	ldr	r1, [pc, #224]	@ (8001558 <HAL_GPIO_Init+0x3a8>)
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	089b      	lsrs	r3, r3, #2
 800147c:	3318      	adds	r3, #24
 800147e:	69fa      	ldr	r2, [r7, #28]
 8001480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001484:	4b34      	ldr	r3, [pc, #208]	@ (8001558 <HAL_GPIO_Init+0x3a8>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	43db      	mvns	r3, r3
 800148e:	69fa      	ldr	r2, [r7, #28]
 8001490:	4013      	ands	r3, r2
 8001492:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d003      	beq.n	80014a8 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80014a0:	69fa      	ldr	r2, [r7, #28]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80014a8:	4a2b      	ldr	r2, [pc, #172]	@ (8001558 <HAL_GPIO_Init+0x3a8>)
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80014ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001558 <HAL_GPIO_Init+0x3a8>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	43db      	mvns	r3, r3
 80014b8:	69fa      	ldr	r2, [r7, #28]
 80014ba:	4013      	ands	r3, r2
 80014bc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d003      	beq.n	80014d2 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80014ca:	69fa      	ldr	r2, [r7, #28]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80014d2:	4a21      	ldr	r2, [pc, #132]	@ (8001558 <HAL_GPIO_Init+0x3a8>)
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80014d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001558 <HAL_GPIO_Init+0x3a8>)
 80014da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80014de:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	43db      	mvns	r3, r3
 80014e4:	69fa      	ldr	r2, [r7, #28]
 80014e6:	4013      	ands	r3, r2
 80014e8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80014f6:	69fa      	ldr	r2, [r7, #28]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80014fe:	4a16      	ldr	r2, [pc, #88]	@ (8001558 <HAL_GPIO_Init+0x3a8>)
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001506:	4b14      	ldr	r3, [pc, #80]	@ (8001558 <HAL_GPIO_Init+0x3a8>)
 8001508:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800150c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	43db      	mvns	r3, r3
 8001512:	69fa      	ldr	r2, [r7, #28]
 8001514:	4013      	ands	r3, r2
 8001516:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d003      	beq.n	800152c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8001524:	69fa      	ldr	r2, [r7, #28]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	4313      	orrs	r3, r2
 800152a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 800152c:	4a0a      	ldr	r2, [pc, #40]	@ (8001558 <HAL_GPIO_Init+0x3a8>)
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	3301      	adds	r3, #1
 8001538:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	fa22 f303 	lsr.w	r3, r2, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	f47f ae3d 	bne.w	80011c4 <HAL_GPIO_Init+0x14>
  }
}
 800154a:	bf00      	nop
 800154c:	bf00      	nop
 800154e:	3724      	adds	r7, #36	@ 0x24
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	46022000 	.word	0x46022000
 800155c:	002f7f7f 	.word	0x002f7f7f

08001560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	807b      	strh	r3, [r7, #2]
 800156c:	4613      	mov	r3, r2
 800156e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001570:	787b      	ldrb	r3, [r7, #1]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001576:	887a      	ldrh	r2, [r7, #2]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 800157c:	e002      	b.n	8001584 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800157e:	887a      	ldrh	r2, [r7, #2]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001598:	2300      	movs	r3, #0
 800159a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800159c:	4b0b      	ldr	r3, [pc, #44]	@ (80015cc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d002      	beq.n	80015ae <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	73fb      	strb	r3, [r7, #15]
 80015ac:	e007      	b.n	80015be <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80015ae:	4b07      	ldr	r3, [pc, #28]	@ (80015cc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f023 0204 	bic.w	r2, r3, #4
 80015b6:	4905      	ldr	r1, [pc, #20]	@ (80015cc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	600b      	str	r3, [r1, #0]
  }

  return status;
 80015be:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	40030400 	.word	0x40030400

080015d0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80015d4:	4b05      	ldr	r3, [pc, #20]	@ (80015ec <HAL_ICACHE_Enable+0x1c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a04      	ldr	r2, [pc, #16]	@ (80015ec <HAL_ICACHE_Enable+0x1c>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	40030400 	.word	0x40030400

080015f0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80015f8:	4b39      	ldr	r3, [pc, #228]	@ (80016e0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80015fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001600:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001602:	68ba      	ldr	r2, [r7, #8]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	429a      	cmp	r2, r3
 8001608:	d10b      	bne.n	8001622 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001610:	d905      	bls.n	800161e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001612:	4b33      	ldr	r3, [pc, #204]	@ (80016e0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	4a32      	ldr	r2, [pc, #200]	@ (80016e0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001618:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800161c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800161e:	2300      	movs	r3, #0
 8001620:	e057      	b.n	80016d2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001628:	d90a      	bls.n	8001640 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800162a:	4b2d      	ldr	r3, [pc, #180]	@ (80016e0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4313      	orrs	r3, r2
 8001636:	4a2a      	ldr	r2, [pc, #168]	@ (80016e0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001638:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800163c:	60d3      	str	r3, [r2, #12]
 800163e:	e007      	b.n	8001650 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8001640:	4b27      	ldr	r3, [pc, #156]	@ (80016e0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8001648:	4925      	ldr	r1, [pc, #148]	@ (80016e0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4313      	orrs	r3, r2
 800164e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001650:	4b24      	ldr	r3, [pc, #144]	@ (80016e4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a24      	ldr	r2, [pc, #144]	@ (80016e8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001656:	fba2 2303 	umull	r2, r3, r2, r3
 800165a:	099b      	lsrs	r3, r3, #6
 800165c:	2232      	movs	r2, #50	@ 0x32
 800165e:	fb02 f303 	mul.w	r3, r2, r3
 8001662:	4a21      	ldr	r2, [pc, #132]	@ (80016e8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001664:	fba2 2303 	umull	r2, r3, r2, r3
 8001668:	099b      	lsrs	r3, r3, #6
 800166a:	3301      	adds	r3, #1
 800166c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800166e:	e002      	b.n	8001676 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	3b01      	subs	r3, #1
 8001674:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001676:	4b1a      	ldr	r3, [pc, #104]	@ (80016e0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d102      	bne.n	8001688 <HAL_PWREx_ControlVoltageScaling+0x98>
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1f3      	bne.n	8001670 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d01b      	beq.n	80016c6 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800168e:	4b15      	ldr	r3, [pc, #84]	@ (80016e4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a15      	ldr	r2, [pc, #84]	@ (80016e8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001694:	fba2 2303 	umull	r2, r3, r2, r3
 8001698:	099b      	lsrs	r3, r3, #6
 800169a:	2232      	movs	r2, #50	@ 0x32
 800169c:	fb02 f303 	mul.w	r3, r2, r3
 80016a0:	4a11      	ldr	r2, [pc, #68]	@ (80016e8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80016a2:	fba2 2303 	umull	r2, r3, r2, r3
 80016a6:	099b      	lsrs	r3, r3, #6
 80016a8:	3301      	adds	r3, #1
 80016aa:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80016ac:	e002      	b.n	80016b4 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	3b01      	subs	r3, #1
 80016b2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80016b4:	4b0a      	ldr	r3, [pc, #40]	@ (80016e0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80016b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d102      	bne.n	80016c6 <HAL_PWREx_ControlVoltageScaling+0xd6>
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f3      	bne.n	80016ae <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e000      	b.n	80016d2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	46020800 	.word	0x46020800
 80016e4:	20000000 	.word	0x20000000
 80016e8:	10624dd3 	.word	0x10624dd3

080016ec <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80016f0:	4b04      	ldr	r3, [pc, #16]	@ (8001704 <HAL_PWREx_GetVoltageRange+0x18>)
 80016f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	46020800 	.word	0x46020800

08001708 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001710:	4b22      	ldr	r3, [pc, #136]	@ (800179c <HAL_PWREx_ConfigSupply+0x94>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a22      	ldr	r2, [pc, #136]	@ (80017a0 <HAL_PWREx_ConfigSupply+0x98>)
 8001716:	fba2 2303 	umull	r2, r3, r2, r3
 800171a:	099b      	lsrs	r3, r3, #6
 800171c:	2232      	movs	r2, #50	@ 0x32
 800171e:	fb02 f303 	mul.w	r3, r2, r3
 8001722:	4a1f      	ldr	r2, [pc, #124]	@ (80017a0 <HAL_PWREx_ConfigSupply+0x98>)
 8001724:	fba2 2303 	umull	r2, r3, r2, r3
 8001728:	099b      	lsrs	r3, r3, #6
 800172a:	3301      	adds	r3, #1
 800172c:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d113      	bne.n	800175c <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8001734:	4b1b      	ldr	r3, [pc, #108]	@ (80017a4 <HAL_PWREx_ConfigSupply+0x9c>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	4a1a      	ldr	r2, [pc, #104]	@ (80017a4 <HAL_PWREx_ConfigSupply+0x9c>)
 800173a:	f023 0302 	bic.w	r3, r3, #2
 800173e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001740:	e002      	b.n	8001748 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	3b01      	subs	r3, #1
 8001746:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001748:	4b16      	ldr	r3, [pc, #88]	@ (80017a4 <HAL_PWREx_ConfigSupply+0x9c>)
 800174a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b02      	cmp	r3, #2
 8001752:	d116      	bne.n	8001782 <HAL_PWREx_ConfigSupply+0x7a>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1f3      	bne.n	8001742 <HAL_PWREx_ConfigSupply+0x3a>
 800175a:	e012      	b.n	8001782 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800175c:	4b11      	ldr	r3, [pc, #68]	@ (80017a4 <HAL_PWREx_ConfigSupply+0x9c>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	4a10      	ldr	r2, [pc, #64]	@ (80017a4 <HAL_PWREx_ConfigSupply+0x9c>)
 8001762:	f043 0302 	orr.w	r3, r3, #2
 8001766:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001768:	e002      	b.n	8001770 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	3b01      	subs	r3, #1
 800176e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001770:	4b0c      	ldr	r3, [pc, #48]	@ (80017a4 <HAL_PWREx_ConfigSupply+0x9c>)
 8001772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d102      	bne.n	8001782 <HAL_PWREx_ConfigSupply+0x7a>
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f3      	bne.n	800176a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e000      	b.n	800178e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	20000000 	.word	0x20000000
 80017a0:	10624dd3 	.word	0x10624dd3
 80017a4:	46020800 	.word	0x46020800

080017a8 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80017ac:	4b05      	ldr	r3, [pc, #20]	@ (80017c4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	4a04      	ldr	r2, [pc, #16]	@ (80017c4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80017b2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80017b6:	6113      	str	r3, [r2, #16]
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	46020800 	.word	0x46020800

080017c8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 80017cc:	4b05      	ldr	r3, [pc, #20]	@ (80017e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80017ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017d0:	4a04      	ldr	r2, [pc, #16]	@ (80017e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80017d2:	f043 0301 	orr.w	r3, r3, #1
 80017d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	46020800 	.word	0x46020800

080017e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08e      	sub	sp, #56	@ 0x38
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80017f0:	2300      	movs	r3, #0
 80017f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d102      	bne.n	8001802 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	f000 bec8 	b.w	8002592 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001802:	4b99      	ldr	r3, [pc, #612]	@ (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	f003 030c 	and.w	r3, r3, #12
 800180a:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800180c:	4b96      	ldr	r3, [pc, #600]	@ (8001a68 <HAL_RCC_OscConfig+0x280>)
 800180e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0310 	and.w	r3, r3, #16
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 816c 	beq.w	8001afc <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001826:	2b00      	cmp	r3, #0
 8001828:	d007      	beq.n	800183a <HAL_RCC_OscConfig+0x52>
 800182a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800182c:	2b0c      	cmp	r3, #12
 800182e:	f040 80de 	bne.w	80019ee <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001834:	2b01      	cmp	r3, #1
 8001836:	f040 80da 	bne.w	80019ee <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d102      	bne.n	8001848 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	f000 bea5 	b.w	8002592 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800184c:	4b86      	ldr	r3, [pc, #536]	@ (8001a68 <HAL_RCC_OscConfig+0x280>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d004      	beq.n	8001862 <HAL_RCC_OscConfig+0x7a>
 8001858:	4b83      	ldr	r3, [pc, #524]	@ (8001a68 <HAL_RCC_OscConfig+0x280>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001860:	e005      	b.n	800186e <HAL_RCC_OscConfig+0x86>
 8001862:	4b81      	ldr	r3, [pc, #516]	@ (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001864:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001868:	041b      	lsls	r3, r3, #16
 800186a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800186e:	4293      	cmp	r3, r2
 8001870:	d255      	bcs.n	800191e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001874:	2b00      	cmp	r3, #0
 8001876:	d10a      	bne.n	800188e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187c:	4618      	mov	r0, r3
 800187e:	f001 f9df 	bl	8002c40 <RCC_SetFlashLatencyFromMSIRange>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d002      	beq.n	800188e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	f000 be82 	b.w	8002592 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800188e:	4b76      	ldr	r3, [pc, #472]	@ (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	4a75      	ldr	r2, [pc, #468]	@ (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001894:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001898:	6093      	str	r3, [r2, #8]
 800189a:	4b73      	ldr	r3, [pc, #460]	@ (8001a68 <HAL_RCC_OscConfig+0x280>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a6:	4970      	ldr	r1, [pc, #448]	@ (8001a68 <HAL_RCC_OscConfig+0x280>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80018b4:	d309      	bcc.n	80018ca <HAL_RCC_OscConfig+0xe2>
 80018b6:	4b6c      	ldr	r3, [pc, #432]	@ (8001a68 <HAL_RCC_OscConfig+0x280>)
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	f023 021f 	bic.w	r2, r3, #31
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a1b      	ldr	r3, [r3, #32]
 80018c2:	4969      	ldr	r1, [pc, #420]	@ (8001a68 <HAL_RCC_OscConfig+0x280>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	60cb      	str	r3, [r1, #12]
 80018c8:	e07e      	b.n	80019c8 <HAL_RCC_OscConfig+0x1e0>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	da0a      	bge.n	80018e8 <HAL_RCC_OscConfig+0x100>
 80018d2:	4b65      	ldr	r3, [pc, #404]	@ (8001a68 <HAL_RCC_OscConfig+0x280>)
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a1b      	ldr	r3, [r3, #32]
 80018de:	015b      	lsls	r3, r3, #5
 80018e0:	4961      	ldr	r1, [pc, #388]	@ (8001a68 <HAL_RCC_OscConfig+0x280>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	60cb      	str	r3, [r1, #12]
 80018e6:	e06f      	b.n	80019c8 <HAL_RCC_OscConfig+0x1e0>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018f0:	d30a      	bcc.n	8001908 <HAL_RCC_OscConfig+0x120>
 80018f2:	4b5d      	ldr	r3, [pc, #372]	@ (8001a68 <HAL_RCC_OscConfig+0x280>)
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	029b      	lsls	r3, r3, #10
 8001900:	4959      	ldr	r1, [pc, #356]	@ (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001902:	4313      	orrs	r3, r2
 8001904:	60cb      	str	r3, [r1, #12]
 8001906:	e05f      	b.n	80019c8 <HAL_RCC_OscConfig+0x1e0>
 8001908:	4b57      	ldr	r3, [pc, #348]	@ (8001a68 <HAL_RCC_OscConfig+0x280>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	03db      	lsls	r3, r3, #15
 8001916:	4954      	ldr	r1, [pc, #336]	@ (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001918:	4313      	orrs	r3, r2
 800191a:	60cb      	str	r3, [r1, #12]
 800191c:	e054      	b.n	80019c8 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800191e:	4b52      	ldr	r3, [pc, #328]	@ (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	4a51      	ldr	r2, [pc, #324]	@ (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001924:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001928:	6093      	str	r3, [r2, #8]
 800192a:	4b4f      	ldr	r3, [pc, #316]	@ (8001a68 <HAL_RCC_OscConfig+0x280>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001936:	494c      	ldr	r1, [pc, #304]	@ (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001938:	4313      	orrs	r3, r2
 800193a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001940:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001944:	d309      	bcc.n	800195a <HAL_RCC_OscConfig+0x172>
 8001946:	4b48      	ldr	r3, [pc, #288]	@ (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	f023 021f 	bic.w	r2, r3, #31
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a1b      	ldr	r3, [r3, #32]
 8001952:	4945      	ldr	r1, [pc, #276]	@ (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001954:	4313      	orrs	r3, r2
 8001956:	60cb      	str	r3, [r1, #12]
 8001958:	e028      	b.n	80019ac <HAL_RCC_OscConfig+0x1c4>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195e:	2b00      	cmp	r3, #0
 8001960:	da0a      	bge.n	8001978 <HAL_RCC_OscConfig+0x190>
 8001962:	4b41      	ldr	r3, [pc, #260]	@ (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a1b      	ldr	r3, [r3, #32]
 800196e:	015b      	lsls	r3, r3, #5
 8001970:	493d      	ldr	r1, [pc, #244]	@ (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001972:	4313      	orrs	r3, r2
 8001974:	60cb      	str	r3, [r1, #12]
 8001976:	e019      	b.n	80019ac <HAL_RCC_OscConfig+0x1c4>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001980:	d30a      	bcc.n	8001998 <HAL_RCC_OscConfig+0x1b0>
 8001982:	4b39      	ldr	r3, [pc, #228]	@ (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a1b      	ldr	r3, [r3, #32]
 800198e:	029b      	lsls	r3, r3, #10
 8001990:	4935      	ldr	r1, [pc, #212]	@ (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001992:	4313      	orrs	r3, r2
 8001994:	60cb      	str	r3, [r1, #12]
 8001996:	e009      	b.n	80019ac <HAL_RCC_OscConfig+0x1c4>
 8001998:	4b33      	ldr	r3, [pc, #204]	@ (8001a68 <HAL_RCC_OscConfig+0x280>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	03db      	lsls	r3, r3, #15
 80019a6:	4930      	ldr	r1, [pc, #192]	@ (8001a68 <HAL_RCC_OscConfig+0x280>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80019ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10a      	bne.n	80019c8 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b6:	4618      	mov	r0, r3
 80019b8:	f001 f942 	bl	8002c40 <RCC_SetFlashLatencyFromMSIRange>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d002      	beq.n	80019c8 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	f000 bde5 	b.w	8002592 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80019c8:	f001 f8e4 	bl	8002b94 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80019cc:	4b27      	ldr	r3, [pc, #156]	@ (8001a6c <HAL_RCC_OscConfig+0x284>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff fa8f 	bl	8000ef4 <HAL_InitTick>
 80019d6:	4603      	mov	r3, r0
 80019d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80019dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f000 808a 	beq.w	8001afa <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80019e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80019ea:	f000 bdd2 	b.w	8002592 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d066      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80019f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a68 <HAL_RCC_OscConfig+0x280>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a1b      	ldr	r2, [pc, #108]	@ (8001a68 <HAL_RCC_OscConfig+0x280>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001a02:	f7ff fac1 	bl	8000f88 <HAL_GetTick>
 8001a06:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001a08:	e009      	b.n	8001a1e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a0a:	f7ff fabd 	bl	8000f88 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d902      	bls.n	8001a1e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	f000 bdba 	b.w	8002592 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001a1e:	4b12      	ldr	r3, [pc, #72]	@ (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0304 	and.w	r3, r3, #4
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0ef      	beq.n	8001a0a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	4a0e      	ldr	r2, [pc, #56]	@ (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001a30:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a34:	6093      	str	r3, [r2, #8]
 8001a36:	4b0c      	ldr	r3, [pc, #48]	@ (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a42:	4909      	ldr	r1, [pc, #36]	@ (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001a50:	d30e      	bcc.n	8001a70 <HAL_RCC_OscConfig+0x288>
 8001a52:	4b05      	ldr	r3, [pc, #20]	@ (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	f023 021f 	bic.w	r2, r3, #31
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	4902      	ldr	r1, [pc, #8]	@ (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	60cb      	str	r3, [r1, #12]
 8001a64:	e04a      	b.n	8001afc <HAL_RCC_OscConfig+0x314>
 8001a66:	bf00      	nop
 8001a68:	46020c00 	.word	0x46020c00
 8001a6c:	20000004 	.word	0x20000004
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	da0a      	bge.n	8001a8e <HAL_RCC_OscConfig+0x2a6>
 8001a78:	4b98      	ldr	r3, [pc, #608]	@ (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	015b      	lsls	r3, r3, #5
 8001a86:	4995      	ldr	r1, [pc, #596]	@ (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	60cb      	str	r3, [r1, #12]
 8001a8c:	e036      	b.n	8001afc <HAL_RCC_OscConfig+0x314>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a96:	d30a      	bcc.n	8001aae <HAL_RCC_OscConfig+0x2c6>
 8001a98:	4b90      	ldr	r3, [pc, #576]	@ (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	029b      	lsls	r3, r3, #10
 8001aa6:	498d      	ldr	r1, [pc, #564]	@ (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	60cb      	str	r3, [r1, #12]
 8001aac:	e026      	b.n	8001afc <HAL_RCC_OscConfig+0x314>
 8001aae:	4b8b      	ldr	r3, [pc, #556]	@ (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
 8001aba:	03db      	lsls	r3, r3, #15
 8001abc:	4987      	ldr	r1, [pc, #540]	@ (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	60cb      	str	r3, [r1, #12]
 8001ac2:	e01b      	b.n	8001afc <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8001ac4:	4b85      	ldr	r3, [pc, #532]	@ (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a84      	ldr	r2, [pc, #528]	@ (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001aca:	f023 0301 	bic.w	r3, r3, #1
 8001ace:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001ad0:	f7ff fa5a 	bl	8000f88 <HAL_GetTick>
 8001ad4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001ad6:	e009      	b.n	8001aec <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ad8:	f7ff fa56 	bl	8000f88 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d902      	bls.n	8001aec <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	f000 bd53 	b.w	8002592 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001aec:	4b7b      	ldr	r3, [pc, #492]	@ (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1ef      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x2f0>
 8001af8:	e000      	b.n	8001afc <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001afa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f000 808b 	beq.w	8001c20 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b0c:	2b08      	cmp	r3, #8
 8001b0e:	d005      	beq.n	8001b1c <HAL_RCC_OscConfig+0x334>
 8001b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b12:	2b0c      	cmp	r3, #12
 8001b14:	d109      	bne.n	8001b2a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b18:	2b03      	cmp	r3, #3
 8001b1a:	d106      	bne.n	8001b2a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d17d      	bne.n	8001c20 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	f000 bd34 	b.w	8002592 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b32:	d106      	bne.n	8001b42 <HAL_RCC_OscConfig+0x35a>
 8001b34:	4b69      	ldr	r3, [pc, #420]	@ (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a68      	ldr	r2, [pc, #416]	@ (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001b3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	e041      	b.n	8001bc6 <HAL_RCC_OscConfig+0x3de>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b4a:	d112      	bne.n	8001b72 <HAL_RCC_OscConfig+0x38a>
 8001b4c:	4b63      	ldr	r3, [pc, #396]	@ (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a62      	ldr	r2, [pc, #392]	@ (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001b52:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	4b60      	ldr	r3, [pc, #384]	@ (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a5f      	ldr	r2, [pc, #380]	@ (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001b5e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	4b5d      	ldr	r3, [pc, #372]	@ (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a5c      	ldr	r2, [pc, #368]	@ (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001b6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b6e:	6013      	str	r3, [r2, #0]
 8001b70:	e029      	b.n	8001bc6 <HAL_RCC_OscConfig+0x3de>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001b7a:	d112      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x3ba>
 8001b7c:	4b57      	ldr	r3, [pc, #348]	@ (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a56      	ldr	r2, [pc, #344]	@ (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001b82:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b86:	6013      	str	r3, [r2, #0]
 8001b88:	4b54      	ldr	r3, [pc, #336]	@ (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a53      	ldr	r2, [pc, #332]	@ (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001b8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	4b51      	ldr	r3, [pc, #324]	@ (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a50      	ldr	r2, [pc, #320]	@ (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001b9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	e011      	b.n	8001bc6 <HAL_RCC_OscConfig+0x3de>
 8001ba2:	4b4e      	ldr	r3, [pc, #312]	@ (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a4d      	ldr	r2, [pc, #308]	@ (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001ba8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	4b4b      	ldr	r3, [pc, #300]	@ (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a4a      	ldr	r2, [pc, #296]	@ (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001bb4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	4b48      	ldr	r3, [pc, #288]	@ (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a47      	ldr	r2, [pc, #284]	@ (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001bc0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001bc4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d014      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8001bce:	f7ff f9db 	bl	8000f88 <HAL_GetTick>
 8001bd2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bd4:	e009      	b.n	8001bea <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd6:	f7ff f9d7 	bl	8000f88 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b64      	cmp	r3, #100	@ 0x64
 8001be2:	d902      	bls.n	8001bea <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	f000 bcd4 	b.w	8002592 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bea:	4b3c      	ldr	r3, [pc, #240]	@ (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0ef      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x3ee>
 8001bf6:	e013      	b.n	8001c20 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8001bf8:	f7ff f9c6 	bl	8000f88 <HAL_GetTick>
 8001bfc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bfe:	e009      	b.n	8001c14 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c00:	f7ff f9c2 	bl	8000f88 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b64      	cmp	r3, #100	@ 0x64
 8001c0c:	d902      	bls.n	8001c14 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	f000 bcbf 	b.w	8002592 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c14:	4b31      	ldr	r3, [pc, #196]	@ (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1ef      	bne.n	8001c00 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d05f      	beq.n	8001cec <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d005      	beq.n	8001c3e <HAL_RCC_OscConfig+0x456>
 8001c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c34:	2b0c      	cmp	r3, #12
 8001c36:	d114      	bne.n	8001c62 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d111      	bne.n	8001c62 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d102      	bne.n	8001c4c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	f000 bca3 	b.w	8002592 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001c4c:	4b23      	ldr	r3, [pc, #140]	@ (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	041b      	lsls	r3, r3, #16
 8001c5a:	4920      	ldr	r1, [pc, #128]	@ (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001c60:	e044      	b.n	8001cec <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d024      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8001c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a1b      	ldr	r2, [pc, #108]	@ (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001c70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c74:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001c76:	f7ff f987 	bl	8000f88 <HAL_GetTick>
 8001c7a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c7c:	e009      	b.n	8001c92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c7e:	f7ff f983 	bl	8000f88 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d902      	bls.n	8001c92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	f000 bc80 	b.w	8002592 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c92:	4b12      	ldr	r3, [pc, #72]	@ (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0ef      	beq.n	8001c7e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	041b      	lsls	r3, r3, #16
 8001cac:	490b      	ldr	r1, [pc, #44]	@ (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	610b      	str	r3, [r1, #16]
 8001cb2:	e01b      	b.n	8001cec <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8001cb4:	4b09      	ldr	r3, [pc, #36]	@ (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a08      	ldr	r2, [pc, #32]	@ (8001cdc <HAL_RCC_OscConfig+0x4f4>)
 8001cba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001cbe:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001cc0:	f7ff f962 	bl	8000f88 <HAL_GetTick>
 8001cc4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cc6:	e00b      	b.n	8001ce0 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc8:	f7ff f95e 	bl	8000f88 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d904      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	f000 bc5b 	b.w	8002592 <HAL_RCC_OscConfig+0xdaa>
 8001cdc:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ce0:	4baf      	ldr	r3, [pc, #700]	@ (8001fa0 <HAL_RCC_OscConfig+0x7b8>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1ed      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0308 	and.w	r3, r3, #8
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 80c8 	beq.w	8001e8a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d00:	4ba7      	ldr	r3, [pc, #668]	@ (8001fa0 <HAL_RCC_OscConfig+0x7b8>)
 8001d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d111      	bne.n	8001d32 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d0e:	4ba4      	ldr	r3, [pc, #656]	@ (8001fa0 <HAL_RCC_OscConfig+0x7b8>)
 8001d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d14:	4aa2      	ldr	r2, [pc, #648]	@ (8001fa0 <HAL_RCC_OscConfig+0x7b8>)
 8001d16:	f043 0304 	orr.w	r3, r3, #4
 8001d1a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001d1e:	4ba0      	ldr	r3, [pc, #640]	@ (8001fa0 <HAL_RCC_OscConfig+0x7b8>)
 8001d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001d32:	4b9c      	ldr	r3, [pc, #624]	@ (8001fa4 <HAL_RCC_OscConfig+0x7bc>)
 8001d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d119      	bne.n	8001d72 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001d3e:	4b99      	ldr	r3, [pc, #612]	@ (8001fa4 <HAL_RCC_OscConfig+0x7bc>)
 8001d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d42:	4a98      	ldr	r2, [pc, #608]	@ (8001fa4 <HAL_RCC_OscConfig+0x7bc>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d4a:	f7ff f91d 	bl	8000f88 <HAL_GetTick>
 8001d4e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001d50:	e009      	b.n	8001d66 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d52:	f7ff f919 	bl	8000f88 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d902      	bls.n	8001d66 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	f000 bc16 	b.w	8002592 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001d66:	4b8f      	ldr	r3, [pc, #572]	@ (8001fa4 <HAL_RCC_OscConfig+0x7bc>)
 8001d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0ef      	beq.n	8001d52 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d05f      	beq.n	8001e3a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8001d7a:	4b89      	ldr	r3, [pc, #548]	@ (8001fa0 <HAL_RCC_OscConfig+0x7b8>)
 8001d7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d80:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	699a      	ldr	r2, [r3, #24]
 8001d86:	6a3b      	ldr	r3, [r7, #32]
 8001d88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d037      	beq.n	8001e00 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001d90:	6a3b      	ldr	r3, [r7, #32]
 8001d92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d006      	beq.n	8001da8 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8001d9a:	6a3b      	ldr	r3, [r7, #32]
 8001d9c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e3f4      	b.n	8002592 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8001da8:	6a3b      	ldr	r3, [r7, #32]
 8001daa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d01b      	beq.n	8001dea <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8001db2:	4b7b      	ldr	r3, [pc, #492]	@ (8001fa0 <HAL_RCC_OscConfig+0x7b8>)
 8001db4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001db8:	4a79      	ldr	r2, [pc, #484]	@ (8001fa0 <HAL_RCC_OscConfig+0x7b8>)
 8001dba:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8001dbe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8001dc2:	f7ff f8e1 	bl	8000f88 <HAL_GetTick>
 8001dc6:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dca:	f7ff f8dd 	bl	8000f88 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b05      	cmp	r3, #5
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e3da      	b.n	8002592 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001ddc:	4b70      	ldr	r3, [pc, #448]	@ (8001fa0 <HAL_RCC_OscConfig+0x7b8>)
 8001dde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001de2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1ef      	bne.n	8001dca <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8001dea:	4b6d      	ldr	r3, [pc, #436]	@ (8001fa0 <HAL_RCC_OscConfig+0x7b8>)
 8001dec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001df0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	4969      	ldr	r1, [pc, #420]	@ (8001fa0 <HAL_RCC_OscConfig+0x7b8>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8001e00:	4b67      	ldr	r3, [pc, #412]	@ (8001fa0 <HAL_RCC_OscConfig+0x7b8>)
 8001e02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e06:	4a66      	ldr	r2, [pc, #408]	@ (8001fa0 <HAL_RCC_OscConfig+0x7b8>)
 8001e08:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001e0c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8001e10:	f7ff f8ba 	bl	8000f88 <HAL_GetTick>
 8001e14:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e18:	f7ff f8b6 	bl	8000f88 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b05      	cmp	r3, #5
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e3b3      	b.n	8002592 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001e2a:	4b5d      	ldr	r3, [pc, #372]	@ (8001fa0 <HAL_RCC_OscConfig+0x7b8>)
 8001e2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0ef      	beq.n	8001e18 <HAL_RCC_OscConfig+0x630>
 8001e38:	e01b      	b.n	8001e72 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8001e3a:	4b59      	ldr	r3, [pc, #356]	@ (8001fa0 <HAL_RCC_OscConfig+0x7b8>)
 8001e3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e40:	4a57      	ldr	r2, [pc, #348]	@ (8001fa0 <HAL_RCC_OscConfig+0x7b8>)
 8001e42:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8001e46:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8001e4a:	f7ff f89d 	bl	8000f88 <HAL_GetTick>
 8001e4e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e52:	f7ff f899 	bl	8000f88 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b05      	cmp	r3, #5
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e396      	b.n	8002592 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001e64:	4b4e      	ldr	r3, [pc, #312]	@ (8001fa0 <HAL_RCC_OscConfig+0x7b8>)
 8001e66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1ef      	bne.n	8001e52 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e72:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d107      	bne.n	8001e8a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e7a:	4b49      	ldr	r3, [pc, #292]	@ (8001fa0 <HAL_RCC_OscConfig+0x7b8>)
 8001e7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e80:	4a47      	ldr	r2, [pc, #284]	@ (8001fa0 <HAL_RCC_OscConfig+0x7b8>)
 8001e82:	f023 0304 	bic.w	r3, r3, #4
 8001e86:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0304 	and.w	r3, r3, #4
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 8111 	beq.w	80020ba <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e9e:	4b40      	ldr	r3, [pc, #256]	@ (8001fa0 <HAL_RCC_OscConfig+0x7b8>)
 8001ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d111      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eac:	4b3c      	ldr	r3, [pc, #240]	@ (8001fa0 <HAL_RCC_OscConfig+0x7b8>)
 8001eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eb2:	4a3b      	ldr	r2, [pc, #236]	@ (8001fa0 <HAL_RCC_OscConfig+0x7b8>)
 8001eb4:	f043 0304 	orr.w	r3, r3, #4
 8001eb8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001ebc:	4b38      	ldr	r3, [pc, #224]	@ (8001fa0 <HAL_RCC_OscConfig+0x7b8>)
 8001ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ec2:	f003 0304 	and.w	r3, r3, #4
 8001ec6:	613b      	str	r3, [r7, #16]
 8001ec8:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001ed0:	4b34      	ldr	r3, [pc, #208]	@ (8001fa4 <HAL_RCC_OscConfig+0x7bc>)
 8001ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d118      	bne.n	8001f0e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001edc:	4b31      	ldr	r3, [pc, #196]	@ (8001fa4 <HAL_RCC_OscConfig+0x7bc>)
 8001ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee0:	4a30      	ldr	r2, [pc, #192]	@ (8001fa4 <HAL_RCC_OscConfig+0x7bc>)
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ee8:	f7ff f84e 	bl	8000f88 <HAL_GetTick>
 8001eec:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef0:	f7ff f84a 	bl	8000f88 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e347      	b.n	8002592 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001f02:	4b28      	ldr	r3, [pc, #160]	@ (8001fa4 <HAL_RCC_OscConfig+0x7bc>)
 8001f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0f0      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d01f      	beq.n	8001f5a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d010      	beq.n	8001f48 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001f26:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa0 <HAL_RCC_OscConfig+0x7b8>)
 8001f28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f2c:	4a1c      	ldr	r2, [pc, #112]	@ (8001fa0 <HAL_RCC_OscConfig+0x7b8>)
 8001f2e:	f043 0304 	orr.w	r3, r3, #4
 8001f32:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f36:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa0 <HAL_RCC_OscConfig+0x7b8>)
 8001f38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f3c:	4a18      	ldr	r2, [pc, #96]	@ (8001fa0 <HAL_RCC_OscConfig+0x7b8>)
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f46:	e018      	b.n	8001f7a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f48:	4b15      	ldr	r3, [pc, #84]	@ (8001fa0 <HAL_RCC_OscConfig+0x7b8>)
 8001f4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f4e:	4a14      	ldr	r2, [pc, #80]	@ (8001fa0 <HAL_RCC_OscConfig+0x7b8>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f58:	e00f      	b.n	8001f7a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f5a:	4b11      	ldr	r3, [pc, #68]	@ (8001fa0 <HAL_RCC_OscConfig+0x7b8>)
 8001f5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f60:	4a0f      	ldr	r2, [pc, #60]	@ (8001fa0 <HAL_RCC_OscConfig+0x7b8>)
 8001f62:	f023 0301 	bic.w	r3, r3, #1
 8001f66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa0 <HAL_RCC_OscConfig+0x7b8>)
 8001f6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f70:	4a0b      	ldr	r2, [pc, #44]	@ (8001fa0 <HAL_RCC_OscConfig+0x7b8>)
 8001f72:	f023 0304 	bic.w	r3, r3, #4
 8001f76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d057      	beq.n	8002032 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8001f82:	f7ff f801 	bl	8000f88 <HAL_GetTick>
 8001f86:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f88:	e00e      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8a:	f7fe fffd 	bl	8000f88 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d905      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e2f8      	b.n	8002592 <HAL_RCC_OscConfig+0xdaa>
 8001fa0:	46020c00 	.word	0x46020c00
 8001fa4:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fa8:	4b9c      	ldr	r3, [pc, #624]	@ (800221c <HAL_RCC_OscConfig+0xa34>)
 8001faa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0e9      	beq.n	8001f8a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d01b      	beq.n	8001ffa <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001fc2:	4b96      	ldr	r3, [pc, #600]	@ (800221c <HAL_RCC_OscConfig+0xa34>)
 8001fc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fc8:	4a94      	ldr	r2, [pc, #592]	@ (800221c <HAL_RCC_OscConfig+0xa34>)
 8001fca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001fd2:	e00a      	b.n	8001fea <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd4:	f7fe ffd8 	bl	8000f88 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e2d3      	b.n	8002592 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001fea:	4b8c      	ldr	r3, [pc, #560]	@ (800221c <HAL_RCC_OscConfig+0xa34>)
 8001fec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ff0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0ed      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x7ec>
 8001ff8:	e053      	b.n	80020a2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001ffa:	4b88      	ldr	r3, [pc, #544]	@ (800221c <HAL_RCC_OscConfig+0xa34>)
 8001ffc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002000:	4a86      	ldr	r2, [pc, #536]	@ (800221c <HAL_RCC_OscConfig+0xa34>)
 8002002:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002006:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800200a:	e00a      	b.n	8002022 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800200c:	f7fe ffbc 	bl	8000f88 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	f241 3288 	movw	r2, #5000	@ 0x1388
 800201a:	4293      	cmp	r3, r2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e2b7      	b.n	8002592 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002022:	4b7e      	ldr	r3, [pc, #504]	@ (800221c <HAL_RCC_OscConfig+0xa34>)
 8002024:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002028:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1ed      	bne.n	800200c <HAL_RCC_OscConfig+0x824>
 8002030:	e037      	b.n	80020a2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8002032:	f7fe ffa9 	bl	8000f88 <HAL_GetTick>
 8002036:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002038:	e00a      	b.n	8002050 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800203a:	f7fe ffa5 	bl	8000f88 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002048:	4293      	cmp	r3, r2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e2a0      	b.n	8002592 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002050:	4b72      	ldr	r3, [pc, #456]	@ (800221c <HAL_RCC_OscConfig+0xa34>)
 8002052:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1ed      	bne.n	800203a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800205e:	4b6f      	ldr	r3, [pc, #444]	@ (800221c <HAL_RCC_OscConfig+0xa34>)
 8002060:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002064:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002068:	2b00      	cmp	r3, #0
 800206a:	d01a      	beq.n	80020a2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800206c:	4b6b      	ldr	r3, [pc, #428]	@ (800221c <HAL_RCC_OscConfig+0xa34>)
 800206e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002072:	4a6a      	ldr	r2, [pc, #424]	@ (800221c <HAL_RCC_OscConfig+0xa34>)
 8002074:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002078:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800207c:	e00a      	b.n	8002094 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800207e:	f7fe ff83 	bl	8000f88 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	f241 3288 	movw	r2, #5000	@ 0x1388
 800208c:	4293      	cmp	r3, r2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e27e      	b.n	8002592 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002094:	4b61      	ldr	r3, [pc, #388]	@ (800221c <HAL_RCC_OscConfig+0xa34>)
 8002096:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800209a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1ed      	bne.n	800207e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020a2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d107      	bne.n	80020ba <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020aa:	4b5c      	ldr	r3, [pc, #368]	@ (800221c <HAL_RCC_OscConfig+0xa34>)
 80020ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020b0:	4a5a      	ldr	r2, [pc, #360]	@ (800221c <HAL_RCC_OscConfig+0xa34>)
 80020b2:	f023 0304 	bic.w	r3, r3, #4
 80020b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0320 	and.w	r3, r3, #32
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d036      	beq.n	8002134 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d019      	beq.n	8002102 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80020ce:	4b53      	ldr	r3, [pc, #332]	@ (800221c <HAL_RCC_OscConfig+0xa34>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a52      	ldr	r2, [pc, #328]	@ (800221c <HAL_RCC_OscConfig+0xa34>)
 80020d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020d8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80020da:	f7fe ff55 	bl	8000f88 <HAL_GetTick>
 80020de:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020e2:	f7fe ff51 	bl	8000f88 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e24e      	b.n	8002592 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80020f4:	4b49      	ldr	r3, [pc, #292]	@ (800221c <HAL_RCC_OscConfig+0xa34>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0f0      	beq.n	80020e2 <HAL_RCC_OscConfig+0x8fa>
 8002100:	e018      	b.n	8002134 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8002102:	4b46      	ldr	r3, [pc, #280]	@ (800221c <HAL_RCC_OscConfig+0xa34>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a45      	ldr	r2, [pc, #276]	@ (800221c <HAL_RCC_OscConfig+0xa34>)
 8002108:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800210c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800210e:	f7fe ff3b 	bl	8000f88 <HAL_GetTick>
 8002112:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002116:	f7fe ff37 	bl	8000f88 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e234      	b.n	8002592 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002128:	4b3c      	ldr	r3, [pc, #240]	@ (800221c <HAL_RCC_OscConfig+0xa34>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1f0      	bne.n	8002116 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800213c:	2b00      	cmp	r3, #0
 800213e:	d036      	beq.n	80021ae <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002144:	2b00      	cmp	r3, #0
 8002146:	d019      	beq.n	800217c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8002148:	4b34      	ldr	r3, [pc, #208]	@ (800221c <HAL_RCC_OscConfig+0xa34>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a33      	ldr	r2, [pc, #204]	@ (800221c <HAL_RCC_OscConfig+0xa34>)
 800214e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002152:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002154:	f7fe ff18 	bl	8000f88 <HAL_GetTick>
 8002158:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800215c:	f7fe ff14 	bl	8000f88 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e211      	b.n	8002592 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800216e:	4b2b      	ldr	r3, [pc, #172]	@ (800221c <HAL_RCC_OscConfig+0xa34>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0f0      	beq.n	800215c <HAL_RCC_OscConfig+0x974>
 800217a:	e018      	b.n	80021ae <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800217c:	4b27      	ldr	r3, [pc, #156]	@ (800221c <HAL_RCC_OscConfig+0xa34>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a26      	ldr	r2, [pc, #152]	@ (800221c <HAL_RCC_OscConfig+0xa34>)
 8002182:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002186:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002188:	f7fe fefe 	bl	8000f88 <HAL_GetTick>
 800218c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002190:	f7fe fefa 	bl	8000f88 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e1f7      	b.n	8002592 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80021a2:	4b1e      	ldr	r3, [pc, #120]	@ (800221c <HAL_RCC_OscConfig+0xa34>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f0      	bne.n	8002190 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d07f      	beq.n	80022ba <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d062      	beq.n	8002288 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80021c2:	4b16      	ldr	r3, [pc, #88]	@ (800221c <HAL_RCC_OscConfig+0xa34>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	4a15      	ldr	r2, [pc, #84]	@ (800221c <HAL_RCC_OscConfig+0xa34>)
 80021c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80021cc:	6093      	str	r3, [r2, #8]
 80021ce:	4b13      	ldr	r3, [pc, #76]	@ (800221c <HAL_RCC_OscConfig+0xa34>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021da:	4910      	ldr	r1, [pc, #64]	@ (800221c <HAL_RCC_OscConfig+0xa34>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80021e8:	d309      	bcc.n	80021fe <HAL_RCC_OscConfig+0xa16>
 80021ea:	4b0c      	ldr	r3, [pc, #48]	@ (800221c <HAL_RCC_OscConfig+0xa34>)
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	f023 021f 	bic.w	r2, r3, #31
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	4909      	ldr	r1, [pc, #36]	@ (800221c <HAL_RCC_OscConfig+0xa34>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	60cb      	str	r3, [r1, #12]
 80021fc:	e02a      	b.n	8002254 <HAL_RCC_OscConfig+0xa6c>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002202:	2b00      	cmp	r3, #0
 8002204:	da0c      	bge.n	8002220 <HAL_RCC_OscConfig+0xa38>
 8002206:	4b05      	ldr	r3, [pc, #20]	@ (800221c <HAL_RCC_OscConfig+0xa34>)
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	015b      	lsls	r3, r3, #5
 8002214:	4901      	ldr	r1, [pc, #4]	@ (800221c <HAL_RCC_OscConfig+0xa34>)
 8002216:	4313      	orrs	r3, r2
 8002218:	60cb      	str	r3, [r1, #12]
 800221a:	e01b      	b.n	8002254 <HAL_RCC_OscConfig+0xa6c>
 800221c:	46020c00 	.word	0x46020c00
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002224:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002228:	d30a      	bcc.n	8002240 <HAL_RCC_OscConfig+0xa58>
 800222a:	4ba1      	ldr	r3, [pc, #644]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	029b      	lsls	r3, r3, #10
 8002238:	499d      	ldr	r1, [pc, #628]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 800223a:	4313      	orrs	r3, r2
 800223c:	60cb      	str	r3, [r1, #12]
 800223e:	e009      	b.n	8002254 <HAL_RCC_OscConfig+0xa6c>
 8002240:	4b9b      	ldr	r3, [pc, #620]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	03db      	lsls	r3, r3, #15
 800224e:	4998      	ldr	r1, [pc, #608]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 8002250:	4313      	orrs	r3, r2
 8002252:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8002254:	4b96      	ldr	r3, [pc, #600]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a95      	ldr	r2, [pc, #596]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 800225a:	f043 0310 	orr.w	r3, r3, #16
 800225e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002260:	f7fe fe92 	bl	8000f88 <HAL_GetTick>
 8002264:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002268:	f7fe fe8e 	bl	8000f88 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e18b      	b.n	8002592 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800227a:	4b8d      	ldr	r3, [pc, #564]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0320 	and.w	r3, r3, #32
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0f0      	beq.n	8002268 <HAL_RCC_OscConfig+0xa80>
 8002286:	e018      	b.n	80022ba <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8002288:	4b89      	ldr	r3, [pc, #548]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a88      	ldr	r2, [pc, #544]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 800228e:	f023 0310 	bic.w	r3, r3, #16
 8002292:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002294:	f7fe fe78 	bl	8000f88 <HAL_GetTick>
 8002298:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800229c:	f7fe fe74 	bl	8000f88 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e171      	b.n	8002592 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80022ae:	4b80      	ldr	r3, [pc, #512]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0320 	and.w	r3, r3, #32
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f0      	bne.n	800229c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 8166 	beq.w	8002590 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80022c4:	2300      	movs	r3, #0
 80022c6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022ca:	4b79      	ldr	r3, [pc, #484]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	f003 030c 	and.w	r3, r3, #12
 80022d2:	2b0c      	cmp	r3, #12
 80022d4:	f000 80f2 	beq.w	80024bc <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022dc:	2b02      	cmp	r3, #2
 80022de:	f040 80c5 	bne.w	800246c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80022e2:	4b73      	ldr	r3, [pc, #460]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a72      	ldr	r2, [pc, #456]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 80022e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022ec:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80022ee:	f7fe fe4b 	bl	8000f88 <HAL_GetTick>
 80022f2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f6:	f7fe fe47 	bl	8000f88 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e144      	b.n	8002592 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002308:	4b69      	ldr	r3, [pc, #420]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1f0      	bne.n	80022f6 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002314:	4b66      	ldr	r3, [pc, #408]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 8002316:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800231a:	f003 0304 	and.w	r3, r3, #4
 800231e:	2b00      	cmp	r3, #0
 8002320:	d111      	bne.n	8002346 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8002322:	4b63      	ldr	r3, [pc, #396]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 8002324:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002328:	4a61      	ldr	r2, [pc, #388]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 800232a:	f043 0304 	orr.w	r3, r3, #4
 800232e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002332:	4b5f      	ldr	r3, [pc, #380]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 8002334:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8002340:	2301      	movs	r3, #1
 8002342:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8002346:	4b5b      	ldr	r3, [pc, #364]	@ (80024b4 <HAL_RCC_OscConfig+0xccc>)
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800234e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002352:	d102      	bne.n	800235a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8002354:	2301      	movs	r3, #1
 8002356:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800235a:	4b56      	ldr	r3, [pc, #344]	@ (80024b4 <HAL_RCC_OscConfig+0xccc>)
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	4a55      	ldr	r2, [pc, #340]	@ (80024b4 <HAL_RCC_OscConfig+0xccc>)
 8002360:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002364:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8002366:	4b52      	ldr	r3, [pc, #328]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 8002368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800236a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800236e:	f023 0303 	bic.w	r3, r3, #3
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800237a:	3a01      	subs	r2, #1
 800237c:	0212      	lsls	r2, r2, #8
 800237e:	4311      	orrs	r1, r2
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002384:	430a      	orrs	r2, r1
 8002386:	494a      	ldr	r1, [pc, #296]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 8002388:	4313      	orrs	r3, r2
 800238a:	628b      	str	r3, [r1, #40]	@ 0x28
 800238c:	4b48      	ldr	r3, [pc, #288]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 800238e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002390:	4b49      	ldr	r3, [pc, #292]	@ (80024b8 <HAL_RCC_OscConfig+0xcd0>)
 8002392:	4013      	ands	r3, r2
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002398:	3a01      	subs	r2, #1
 800239a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80023a2:	3a01      	subs	r2, #1
 80023a4:	0252      	lsls	r2, r2, #9
 80023a6:	b292      	uxth	r2, r2
 80023a8:	4311      	orrs	r1, r2
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80023ae:	3a01      	subs	r2, #1
 80023b0:	0412      	lsls	r2, r2, #16
 80023b2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80023b6:	4311      	orrs	r1, r2
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80023bc:	3a01      	subs	r2, #1
 80023be:	0612      	lsls	r2, r2, #24
 80023c0:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80023c4:	430a      	orrs	r2, r1
 80023c6:	493a      	ldr	r1, [pc, #232]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80023cc:	4b38      	ldr	r3, [pc, #224]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 80023ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d0:	4a37      	ldr	r2, [pc, #220]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 80023d2:	f023 0310 	bic.w	r3, r3, #16
 80023d6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023dc:	4a34      	ldr	r2, [pc, #208]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80023e2:	4b33      	ldr	r3, [pc, #204]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 80023e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e6:	4a32      	ldr	r2, [pc, #200]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 80023e8:	f043 0310 	orr.w	r3, r3, #16
 80023ec:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80023ee:	4b30      	ldr	r3, [pc, #192]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 80023f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f2:	f023 020c 	bic.w	r2, r3, #12
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023fa:	492d      	ldr	r1, [pc, #180]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8002400:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002404:	2b01      	cmp	r3, #1
 8002406:	d105      	bne.n	8002414 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002408:	4b2a      	ldr	r3, [pc, #168]	@ (80024b4 <HAL_RCC_OscConfig+0xccc>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	4a29      	ldr	r2, [pc, #164]	@ (80024b4 <HAL_RCC_OscConfig+0xccc>)
 800240e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002412:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8002414:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002418:	2b01      	cmp	r3, #1
 800241a:	d107      	bne.n	800242c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800241c:	4b24      	ldr	r3, [pc, #144]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 800241e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002422:	4a23      	ldr	r2, [pc, #140]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 8002424:	f023 0304 	bic.w	r3, r3, #4
 8002428:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800242c:	4b20      	ldr	r3, [pc, #128]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 800242e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002430:	4a1f      	ldr	r2, [pc, #124]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 8002432:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002436:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8002438:	4b1d      	ldr	r3, [pc, #116]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a1c      	ldr	r2, [pc, #112]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 800243e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002442:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002444:	f7fe fda0 	bl	8000f88 <HAL_GetTick>
 8002448:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800244c:	f7fe fd9c 	bl	8000f88 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e099      	b.n	8002592 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800245e:	4b14      	ldr	r3, [pc, #80]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0f0      	beq.n	800244c <HAL_RCC_OscConfig+0xc64>
 800246a:	e091      	b.n	8002590 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800246c:	4b10      	ldr	r3, [pc, #64]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a0f      	ldr	r2, [pc, #60]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 8002472:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002476:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002478:	f7fe fd86 	bl	8000f88 <HAL_GetTick>
 800247c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002480:	f7fe fd82 	bl	8000f88 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e07f      	b.n	8002592 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002492:	4b07      	ldr	r3, [pc, #28]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f0      	bne.n	8002480 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800249e:	4b04      	ldr	r3, [pc, #16]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 80024a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a2:	4a03      	ldr	r2, [pc, #12]	@ (80024b0 <HAL_RCC_OscConfig+0xcc8>)
 80024a4:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80024a8:	f023 0303 	bic.w	r3, r3, #3
 80024ac:	6293      	str	r3, [r2, #40]	@ 0x28
 80024ae:	e06f      	b.n	8002590 <HAL_RCC_OscConfig+0xda8>
 80024b0:	46020c00 	.word	0x46020c00
 80024b4:	46020800 	.word	0x46020800
 80024b8:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80024bc:	4b37      	ldr	r3, [pc, #220]	@ (800259c <HAL_RCC_OscConfig+0xdb4>)
 80024be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c0:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80024c2:	4b36      	ldr	r3, [pc, #216]	@ (800259c <HAL_RCC_OscConfig+0xdb4>)
 80024c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024c6:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d039      	beq.n	8002544 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f003 0203 	and.w	r2, r3, #3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024da:	429a      	cmp	r2, r3
 80024dc:	d132      	bne.n	8002544 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	0a1b      	lsrs	r3, r3, #8
 80024e2:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ea:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d129      	bne.n	8002544 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d122      	bne.n	8002544 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002508:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800250a:	429a      	cmp	r2, r3
 800250c:	d11a      	bne.n	8002544 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	0a5b      	lsrs	r3, r3, #9
 8002512:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800251a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800251c:	429a      	cmp	r2, r3
 800251e:	d111      	bne.n	8002544 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	0c1b      	lsrs	r3, r3, #16
 8002524:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800252c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800252e:	429a      	cmp	r2, r3
 8002530:	d108      	bne.n	8002544 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	0e1b      	lsrs	r3, r3, #24
 8002536:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800253e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002540:	429a      	cmp	r2, r3
 8002542:	d001      	beq.n	8002548 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e024      	b.n	8002592 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002548:	4b14      	ldr	r3, [pc, #80]	@ (800259c <HAL_RCC_OscConfig+0xdb4>)
 800254a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800254c:	08db      	lsrs	r3, r3, #3
 800254e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002556:	429a      	cmp	r2, r3
 8002558:	d01a      	beq.n	8002590 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800255a:	4b10      	ldr	r3, [pc, #64]	@ (800259c <HAL_RCC_OscConfig+0xdb4>)
 800255c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255e:	4a0f      	ldr	r2, [pc, #60]	@ (800259c <HAL_RCC_OscConfig+0xdb4>)
 8002560:	f023 0310 	bic.w	r3, r3, #16
 8002564:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002566:	f7fe fd0f 	bl	8000f88 <HAL_GetTick>
 800256a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800256c:	bf00      	nop
 800256e:	f7fe fd0b 	bl	8000f88 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002576:	4293      	cmp	r3, r2
 8002578:	d0f9      	beq.n	800256e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800257e:	4a07      	ldr	r2, [pc, #28]	@ (800259c <HAL_RCC_OscConfig+0xdb4>)
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002584:	4b05      	ldr	r3, [pc, #20]	@ (800259c <HAL_RCC_OscConfig+0xdb4>)
 8002586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002588:	4a04      	ldr	r2, [pc, #16]	@ (800259c <HAL_RCC_OscConfig+0xdb4>)
 800258a:	f043 0310 	orr.w	r3, r3, #16
 800258e:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3738      	adds	r7, #56	@ 0x38
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	46020c00 	.word	0x46020c00

080025a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e1d9      	b.n	8002968 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025b4:	4b9b      	ldr	r3, [pc, #620]	@ (8002824 <HAL_RCC_ClockConfig+0x284>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 030f 	and.w	r3, r3, #15
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d910      	bls.n	80025e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c2:	4b98      	ldr	r3, [pc, #608]	@ (8002824 <HAL_RCC_ClockConfig+0x284>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f023 020f 	bic.w	r2, r3, #15
 80025ca:	4996      	ldr	r1, [pc, #600]	@ (8002824 <HAL_RCC_ClockConfig+0x284>)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d2:	4b94      	ldr	r3, [pc, #592]	@ (8002824 <HAL_RCC_ClockConfig+0x284>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d001      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e1c1      	b.n	8002968 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0310 	and.w	r3, r3, #16
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d010      	beq.n	8002612 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	695a      	ldr	r2, [r3, #20]
 80025f4:	4b8c      	ldr	r3, [pc, #560]	@ (8002828 <HAL_RCC_ClockConfig+0x288>)
 80025f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d908      	bls.n	8002612 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8002600:	4b89      	ldr	r3, [pc, #548]	@ (8002828 <HAL_RCC_ClockConfig+0x288>)
 8002602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002604:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	4986      	ldr	r1, [pc, #536]	@ (8002828 <HAL_RCC_ClockConfig+0x288>)
 800260e:	4313      	orrs	r3, r2
 8002610:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d012      	beq.n	8002644 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691a      	ldr	r2, [r3, #16]
 8002622:	4b81      	ldr	r3, [pc, #516]	@ (8002828 <HAL_RCC_ClockConfig+0x288>)
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	091b      	lsrs	r3, r3, #4
 8002628:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800262c:	429a      	cmp	r2, r3
 800262e:	d909      	bls.n	8002644 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002630:	4b7d      	ldr	r3, [pc, #500]	@ (8002828 <HAL_RCC_ClockConfig+0x288>)
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	497a      	ldr	r1, [pc, #488]	@ (8002828 <HAL_RCC_ClockConfig+0x288>)
 8002640:	4313      	orrs	r3, r2
 8002642:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	d010      	beq.n	8002672 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68da      	ldr	r2, [r3, #12]
 8002654:	4b74      	ldr	r3, [pc, #464]	@ (8002828 <HAL_RCC_ClockConfig+0x288>)
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800265c:	429a      	cmp	r2, r3
 800265e:	d908      	bls.n	8002672 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002660:	4b71      	ldr	r3, [pc, #452]	@ (8002828 <HAL_RCC_ClockConfig+0x288>)
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	496e      	ldr	r1, [pc, #440]	@ (8002828 <HAL_RCC_ClockConfig+0x288>)
 800266e:	4313      	orrs	r3, r2
 8002670:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d010      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	4b69      	ldr	r3, [pc, #420]	@ (8002828 <HAL_RCC_ClockConfig+0x288>)
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	429a      	cmp	r2, r3
 800268c:	d908      	bls.n	80026a0 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800268e:	4b66      	ldr	r3, [pc, #408]	@ (8002828 <HAL_RCC_ClockConfig+0x288>)
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	f023 020f 	bic.w	r2, r3, #15
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	4963      	ldr	r1, [pc, #396]	@ (8002828 <HAL_RCC_ClockConfig+0x288>)
 800269c:	4313      	orrs	r3, r2
 800269e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 80d2 	beq.w	8002852 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80026ae:	2300      	movs	r3, #0
 80026b0:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b03      	cmp	r3, #3
 80026b8:	d143      	bne.n	8002742 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ba:	4b5b      	ldr	r3, [pc, #364]	@ (8002828 <HAL_RCC_ClockConfig+0x288>)
 80026bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d110      	bne.n	80026ea <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80026c8:	4b57      	ldr	r3, [pc, #348]	@ (8002828 <HAL_RCC_ClockConfig+0x288>)
 80026ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026ce:	4a56      	ldr	r2, [pc, #344]	@ (8002828 <HAL_RCC_ClockConfig+0x288>)
 80026d0:	f043 0304 	orr.w	r3, r3, #4
 80026d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80026d8:	4b53      	ldr	r3, [pc, #332]	@ (8002828 <HAL_RCC_ClockConfig+0x288>)
 80026da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026de:	f003 0304 	and.w	r3, r3, #4
 80026e2:	60bb      	str	r3, [r7, #8]
 80026e4:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80026e6:	2301      	movs	r3, #1
 80026e8:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80026ea:	f7fe fc4d 	bl	8000f88 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80026f0:	4b4e      	ldr	r3, [pc, #312]	@ (800282c <HAL_RCC_ClockConfig+0x28c>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00f      	beq.n	800271c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80026fe:	f7fe fc43 	bl	8000f88 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e12b      	b.n	8002968 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002710:	4b46      	ldr	r3, [pc, #280]	@ (800282c <HAL_RCC_ClockConfig+0x28c>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0f0      	beq.n	80026fe <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800271c:	7dfb      	ldrb	r3, [r7, #23]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d107      	bne.n	8002732 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002722:	4b41      	ldr	r3, [pc, #260]	@ (8002828 <HAL_RCC_ClockConfig+0x288>)
 8002724:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002728:	4a3f      	ldr	r2, [pc, #252]	@ (8002828 <HAL_RCC_ClockConfig+0x288>)
 800272a:	f023 0304 	bic.w	r3, r3, #4
 800272e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002732:	4b3d      	ldr	r3, [pc, #244]	@ (8002828 <HAL_RCC_ClockConfig+0x288>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d121      	bne.n	8002782 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e112      	b.n	8002968 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b02      	cmp	r3, #2
 8002748:	d107      	bne.n	800275a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800274a:	4b37      	ldr	r3, [pc, #220]	@ (8002828 <HAL_RCC_ClockConfig+0x288>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d115      	bne.n	8002782 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e106      	b.n	8002968 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d107      	bne.n	8002772 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002762:	4b31      	ldr	r3, [pc, #196]	@ (8002828 <HAL_RCC_ClockConfig+0x288>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0304 	and.w	r3, r3, #4
 800276a:	2b00      	cmp	r3, #0
 800276c:	d109      	bne.n	8002782 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e0fa      	b.n	8002968 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002772:	4b2d      	ldr	r3, [pc, #180]	@ (8002828 <HAL_RCC_ClockConfig+0x288>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e0f2      	b.n	8002968 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8002782:	4b29      	ldr	r3, [pc, #164]	@ (8002828 <HAL_RCC_ClockConfig+0x288>)
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	f023 0203 	bic.w	r2, r3, #3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	4926      	ldr	r1, [pc, #152]	@ (8002828 <HAL_RCC_ClockConfig+0x288>)
 8002790:	4313      	orrs	r3, r2
 8002792:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8002794:	f7fe fbf8 	bl	8000f88 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b03      	cmp	r3, #3
 80027a0:	d112      	bne.n	80027c8 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027a2:	e00a      	b.n	80027ba <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a4:	f7fe fbf0 	bl	8000f88 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e0d6      	b.n	8002968 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002828 <HAL_RCC_ClockConfig+0x288>)
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	f003 030c 	and.w	r3, r3, #12
 80027c2:	2b0c      	cmp	r3, #12
 80027c4:	d1ee      	bne.n	80027a4 <HAL_RCC_ClockConfig+0x204>
 80027c6:	e044      	b.n	8002852 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d112      	bne.n	80027f6 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027d0:	e00a      	b.n	80027e8 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d2:	f7fe fbd9 	bl	8000f88 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e0bf      	b.n	8002968 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002828 <HAL_RCC_ClockConfig+0x288>)
 80027ea:	69db      	ldr	r3, [r3, #28]
 80027ec:	f003 030c 	and.w	r3, r3, #12
 80027f0:	2b08      	cmp	r3, #8
 80027f2:	d1ee      	bne.n	80027d2 <HAL_RCC_ClockConfig+0x232>
 80027f4:	e02d      	b.n	8002852 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d123      	bne.n	8002846 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80027fe:	e00a      	b.n	8002816 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002800:	f7fe fbc2 	bl	8000f88 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800280e:	4293      	cmp	r3, r2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e0a8      	b.n	8002968 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002816:	4b04      	ldr	r3, [pc, #16]	@ (8002828 <HAL_RCC_ClockConfig+0x288>)
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	f003 030c 	and.w	r3, r3, #12
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1ee      	bne.n	8002800 <HAL_RCC_ClockConfig+0x260>
 8002822:	e016      	b.n	8002852 <HAL_RCC_ClockConfig+0x2b2>
 8002824:	40022000 	.word	0x40022000
 8002828:	46020c00 	.word	0x46020c00
 800282c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002830:	f7fe fbaa 	bl	8000f88 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800283e:	4293      	cmp	r3, r2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e090      	b.n	8002968 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002846:	4b4a      	ldr	r3, [pc, #296]	@ (8002970 <HAL_RCC_ClockConfig+0x3d0>)
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	f003 030c 	and.w	r3, r3, #12
 800284e:	2b04      	cmp	r3, #4
 8002850:	d1ee      	bne.n	8002830 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d010      	beq.n	8002880 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	4b43      	ldr	r3, [pc, #268]	@ (8002970 <HAL_RCC_ClockConfig+0x3d0>)
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	429a      	cmp	r2, r3
 800286c:	d208      	bcs.n	8002880 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800286e:	4b40      	ldr	r3, [pc, #256]	@ (8002970 <HAL_RCC_ClockConfig+0x3d0>)
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	f023 020f 	bic.w	r2, r3, #15
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	493d      	ldr	r1, [pc, #244]	@ (8002970 <HAL_RCC_ClockConfig+0x3d0>)
 800287c:	4313      	orrs	r3, r2
 800287e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002880:	4b3c      	ldr	r3, [pc, #240]	@ (8002974 <HAL_RCC_ClockConfig+0x3d4>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 030f 	and.w	r3, r3, #15
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	429a      	cmp	r2, r3
 800288c:	d210      	bcs.n	80028b0 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288e:	4b39      	ldr	r3, [pc, #228]	@ (8002974 <HAL_RCC_ClockConfig+0x3d4>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f023 020f 	bic.w	r2, r3, #15
 8002896:	4937      	ldr	r1, [pc, #220]	@ (8002974 <HAL_RCC_ClockConfig+0x3d4>)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	4313      	orrs	r3, r2
 800289c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800289e:	4b35      	ldr	r3, [pc, #212]	@ (8002974 <HAL_RCC_ClockConfig+0x3d4>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d001      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e05b      	b.n	8002968 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d010      	beq.n	80028de <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002970 <HAL_RCC_ClockConfig+0x3d0>)
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d208      	bcs.n	80028de <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80028cc:	4b28      	ldr	r3, [pc, #160]	@ (8002970 <HAL_RCC_ClockConfig+0x3d0>)
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	4925      	ldr	r1, [pc, #148]	@ (8002970 <HAL_RCC_ClockConfig+0x3d0>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d012      	beq.n	8002910 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691a      	ldr	r2, [r3, #16]
 80028ee:	4b20      	ldr	r3, [pc, #128]	@ (8002970 <HAL_RCC_ClockConfig+0x3d0>)
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	091b      	lsrs	r3, r3, #4
 80028f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d209      	bcs.n	8002910 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80028fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002970 <HAL_RCC_ClockConfig+0x3d0>)
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	011b      	lsls	r3, r3, #4
 800290a:	4919      	ldr	r1, [pc, #100]	@ (8002970 <HAL_RCC_ClockConfig+0x3d0>)
 800290c:	4313      	orrs	r3, r2
 800290e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0310 	and.w	r3, r3, #16
 8002918:	2b00      	cmp	r3, #0
 800291a:	d010      	beq.n	800293e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	695a      	ldr	r2, [r3, #20]
 8002920:	4b13      	ldr	r3, [pc, #76]	@ (8002970 <HAL_RCC_ClockConfig+0x3d0>)
 8002922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002924:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002928:	429a      	cmp	r2, r3
 800292a:	d208      	bcs.n	800293e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800292c:	4b10      	ldr	r3, [pc, #64]	@ (8002970 <HAL_RCC_ClockConfig+0x3d0>)
 800292e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002930:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	490d      	ldr	r1, [pc, #52]	@ (8002970 <HAL_RCC_ClockConfig+0x3d0>)
 800293a:	4313      	orrs	r3, r2
 800293c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800293e:	f000 f821 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 8002942:	4602      	mov	r2, r0
 8002944:	4b0a      	ldr	r3, [pc, #40]	@ (8002970 <HAL_RCC_ClockConfig+0x3d0>)
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	f003 030f 	and.w	r3, r3, #15
 800294c:	490a      	ldr	r1, [pc, #40]	@ (8002978 <HAL_RCC_ClockConfig+0x3d8>)
 800294e:	5ccb      	ldrb	r3, [r1, r3]
 8002950:	fa22 f303 	lsr.w	r3, r2, r3
 8002954:	4a09      	ldr	r2, [pc, #36]	@ (800297c <HAL_RCC_ClockConfig+0x3dc>)
 8002956:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002958:	4b09      	ldr	r3, [pc, #36]	@ (8002980 <HAL_RCC_ClockConfig+0x3e0>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f7fe fac9 	bl	8000ef4 <HAL_InitTick>
 8002962:	4603      	mov	r3, r0
 8002964:	73fb      	strb	r3, [r7, #15]

  return status;
 8002966:	7bfb      	ldrb	r3, [r7, #15]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	46020c00 	.word	0x46020c00
 8002974:	40022000 	.word	0x40022000
 8002978:	08007314 	.word	0x08007314
 800297c:	20000000 	.word	0x20000000
 8002980:	20000004 	.word	0x20000004

08002984 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002984:	b480      	push	{r7}
 8002986:	b08b      	sub	sp, #44	@ 0x2c
 8002988:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800298a:	2300      	movs	r3, #0
 800298c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800298e:	2300      	movs	r3, #0
 8002990:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002992:	4b7b      	ldr	r3, [pc, #492]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	f003 030c 	and.w	r3, r3, #12
 800299a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800299c:	4b78      	ldr	r3, [pc, #480]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800299e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a0:	f003 0303 	and.w	r3, r3, #3
 80029a4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d005      	beq.n	80029b8 <HAL_RCC_GetSysClockFreq+0x34>
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	2b0c      	cmp	r3, #12
 80029b0:	d121      	bne.n	80029f6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d11e      	bne.n	80029f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80029b8:	4b71      	ldr	r3, [pc, #452]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d107      	bne.n	80029d4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80029c4:	4b6e      	ldr	r3, [pc, #440]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80029c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80029ca:	0b1b      	lsrs	r3, r3, #12
 80029cc:	f003 030f 	and.w	r3, r3, #15
 80029d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80029d2:	e005      	b.n	80029e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80029d4:	4b6a      	ldr	r3, [pc, #424]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	0f1b      	lsrs	r3, r3, #28
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80029e0:	4a68      	ldr	r2, [pc, #416]	@ (8002b84 <HAL_RCC_GetSysClockFreq+0x200>)
 80029e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e8:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d110      	bne.n	8002a12 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80029f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f2:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80029f4:	e00d      	b.n	8002a12 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029f6:	4b62      	ldr	r3, [pc, #392]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	f003 030c 	and.w	r3, r3, #12
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d102      	bne.n	8002a08 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a02:	4b61      	ldr	r3, [pc, #388]	@ (8002b88 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a04:	623b      	str	r3, [r7, #32]
 8002a06:	e004      	b.n	8002a12 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	d101      	bne.n	8002a12 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a0e:	4b5e      	ldr	r3, [pc, #376]	@ (8002b88 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a10:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	2b0c      	cmp	r3, #12
 8002a16:	f040 80ac 	bne.w	8002b72 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002a1a:	4b59      	ldr	r3, [pc, #356]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002a24:	4b56      	ldr	r3, [pc, #344]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a28:	0a1b      	lsrs	r3, r3, #8
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	3301      	adds	r3, #1
 8002a30:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002a32:	4b53      	ldr	r3, [pc, #332]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a36:	091b      	lsrs	r3, r3, #4
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002a3e:	4b50      	ldr	r3, [pc, #320]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a42:	08db      	lsrs	r3, r3, #3
 8002a44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a48:	68ba      	ldr	r2, [r7, #8]
 8002a4a:	fb02 f303 	mul.w	r3, r2, r3
 8002a4e:	ee07 3a90 	vmov	s15, r3
 8002a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a56:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f000 8086 	beq.w	8002b6e <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d003      	beq.n	8002a70 <HAL_RCC_GetSysClockFreq+0xec>
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	2b03      	cmp	r3, #3
 8002a6c:	d022      	beq.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x130>
 8002a6e:	e043      	b.n	8002af8 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	ee07 3a90 	vmov	s15, r3
 8002a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a7a:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8002b8c <HAL_RCC_GetSysClockFreq+0x208>
 8002a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a82:	4b3f      	ldr	r3, [pc, #252]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a8a:	ee07 3a90 	vmov	s15, r3
 8002a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002a92:	ed97 6a01 	vldr	s12, [r7, #4]
 8002a96:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8002b90 <HAL_RCC_GetSysClockFreq+0x20c>
 8002a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002aa2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aae:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002ab2:	e046      	b.n	8002b42 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	ee07 3a90 	vmov	s15, r3
 8002aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002abe:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8002b8c <HAL_RCC_GetSysClockFreq+0x208>
 8002ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ac6:	4b2e      	ldr	r3, [pc, #184]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ace:	ee07 3a90 	vmov	s15, r3
 8002ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002ad6:	ed97 6a01 	vldr	s12, [r7, #4]
 8002ada:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8002b90 <HAL_RCC_GetSysClockFreq+0x20c>
 8002ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002ae6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002af2:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002af6:	e024      	b.n	8002b42 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afa:	ee07 3a90 	vmov	s15, r3
 8002afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	ee07 3a90 	vmov	s15, r3
 8002b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b10:	4b1b      	ldr	r3, [pc, #108]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b18:	ee07 3a90 	vmov	s15, r3
 8002b1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002b20:	ed97 6a01 	vldr	s12, [r7, #4]
 8002b24:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8002b90 <HAL_RCC_GetSysClockFreq+0x20c>
 8002b28:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002b30:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b34:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b3c:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002b40:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002b42:	4b0f      	ldr	r3, [pc, #60]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b46:	0e1b      	lsrs	r3, r3, #24
 8002b48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	ee07 3a90 	vmov	s15, r3
 8002b56:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b66:	ee17 3a90 	vmov	r3, s15
 8002b6a:	623b      	str	r3, [r7, #32]
 8002b6c:	e001      	b.n	8002b72 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8002b72:	6a3b      	ldr	r3, [r7, #32]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	372c      	adds	r7, #44	@ 0x2c
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	46020c00 	.word	0x46020c00
 8002b84:	0800732c 	.word	0x0800732c
 8002b88:	00f42400 	.word	0x00f42400
 8002b8c:	4b742400 	.word	0x4b742400
 8002b90:	46000000 	.word	0x46000000

08002b94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002b98:	f7ff fef4 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	4b07      	ldr	r3, [pc, #28]	@ (8002bbc <HAL_RCC_GetHCLKFreq+0x28>)
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	4906      	ldr	r1, [pc, #24]	@ (8002bc0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002ba8:	5ccb      	ldrb	r3, [r1, r3]
 8002baa:	fa22 f303 	lsr.w	r3, r2, r3
 8002bae:	4a05      	ldr	r2, [pc, #20]	@ (8002bc4 <HAL_RCC_GetHCLKFreq+0x30>)
 8002bb0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8002bb2:	4b04      	ldr	r3, [pc, #16]	@ (8002bc4 <HAL_RCC_GetHCLKFreq+0x30>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	46020c00 	.word	0x46020c00
 8002bc0:	08007314 	.word	0x08007314
 8002bc4:	20000000 	.word	0x20000000

08002bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8002bcc:	f7ff ffe2 	bl	8002b94 <HAL_RCC_GetHCLKFreq>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	4b05      	ldr	r3, [pc, #20]	@ (8002be8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	091b      	lsrs	r3, r3, #4
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	4903      	ldr	r1, [pc, #12]	@ (8002bec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bde:	5ccb      	ldrb	r3, [r1, r3]
 8002be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	46020c00 	.word	0x46020c00
 8002bec:	08007324 	.word	0x08007324

08002bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8002bf4:	f7ff ffce 	bl	8002b94 <HAL_RCC_GetHCLKFreq>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	4b05      	ldr	r3, [pc, #20]	@ (8002c10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	0a1b      	lsrs	r3, r3, #8
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	4903      	ldr	r1, [pc, #12]	@ (8002c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c06:	5ccb      	ldrb	r3, [r1, r3]
 8002c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	46020c00 	.word	0x46020c00
 8002c14:	08007324 	.word	0x08007324

08002c18 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8002c1c:	f7ff ffba 	bl	8002b94 <HAL_RCC_GetHCLKFreq>
 8002c20:	4602      	mov	r2, r0
 8002c22:	4b05      	ldr	r3, [pc, #20]	@ (8002c38 <HAL_RCC_GetPCLK3Freq+0x20>)
 8002c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c26:	091b      	lsrs	r3, r3, #4
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	4903      	ldr	r1, [pc, #12]	@ (8002c3c <HAL_RCC_GetPCLK3Freq+0x24>)
 8002c2e:	5ccb      	ldrb	r3, [r1, r3]
 8002c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	46020c00 	.word	0x46020c00
 8002c3c:	08007324 	.word	0x08007324

08002c40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c48:	4b3e      	ldr	r3, [pc, #248]	@ (8002d44 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c4e:	f003 0304 	and.w	r3, r3, #4
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c56:	f7fe fd49 	bl	80016ec <HAL_PWREx_GetVoltageRange>
 8002c5a:	6178      	str	r0, [r7, #20]
 8002c5c:	e019      	b.n	8002c92 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c5e:	4b39      	ldr	r3, [pc, #228]	@ (8002d44 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002c60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c64:	4a37      	ldr	r2, [pc, #220]	@ (8002d44 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002c66:	f043 0304 	orr.w	r3, r3, #4
 8002c6a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002c6e:	4b35      	ldr	r3, [pc, #212]	@ (8002d44 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c7c:	f7fe fd36 	bl	80016ec <HAL_PWREx_GetVoltageRange>
 8002c80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c82:	4b30      	ldr	r3, [pc, #192]	@ (8002d44 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c88:	4a2e      	ldr	r2, [pc, #184]	@ (8002d44 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002c8a:	f023 0304 	bic.w	r3, r3, #4
 8002c8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002c98:	d003      	beq.n	8002ca2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ca0:	d109      	bne.n	8002cb6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ca8:	d202      	bcs.n	8002cb0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8002caa:	2301      	movs	r3, #1
 8002cac:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002cae:	e033      	b.n	8002d18 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002cb4:	e030      	b.n	8002d18 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002cbc:	d208      	bcs.n	8002cd0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cc4:	d102      	bne.n	8002ccc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	e025      	b.n	8002d18 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e035      	b.n	8002d3c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002cd6:	d90f      	bls.n	8002cf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d109      	bne.n	8002cf2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002ce4:	d902      	bls.n	8002cec <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	613b      	str	r3, [r7, #16]
 8002cea:	e015      	b.n	8002d18 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8002cec:	2301      	movs	r3, #1
 8002cee:	613b      	str	r3, [r7, #16]
 8002cf0:	e012      	b.n	8002d18 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	e00f      	b.n	8002d18 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002cfe:	d109      	bne.n	8002d14 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d06:	d102      	bne.n	8002d0e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8002d08:	2301      	movs	r3, #1
 8002d0a:	613b      	str	r3, [r7, #16]
 8002d0c:	e004      	b.n	8002d18 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8002d0e:	2302      	movs	r3, #2
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	e001      	b.n	8002d18 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8002d14:	2301      	movs	r3, #1
 8002d16:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d18:	4b0b      	ldr	r3, [pc, #44]	@ (8002d48 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f023 020f 	bic.w	r2, r3, #15
 8002d20:	4909      	ldr	r1, [pc, #36]	@ (8002d48 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002d28:	4b07      	ldr	r3, [pc, #28]	@ (8002d48 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 030f 	and.w	r3, r3, #15
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d001      	beq.n	8002d3a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	46020c00 	.word	0x46020c00
 8002d48:	40022000 	.word	0x40022000

08002d4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002d4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d50:	b0c4      	sub	sp, #272	@ 0x110
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d58:	2300      	movs	r3, #0
 8002d5a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6c:	f002 0401 	and.w	r4, r2, #1
 8002d70:	2500      	movs	r5, #0
 8002d72:	ea54 0305 	orrs.w	r3, r4, r5
 8002d76:	d00b      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002d78:	4bd5      	ldr	r3, [pc, #852]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d7e:	f023 0103 	bic.w	r1, r3, #3
 8002d82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d88:	4ad1      	ldr	r2, [pc, #836]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002d8a:	430b      	orrs	r3, r1
 8002d8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d98:	f002 0802 	and.w	r8, r2, #2
 8002d9c:	f04f 0900 	mov.w	r9, #0
 8002da0:	ea58 0309 	orrs.w	r3, r8, r9
 8002da4:	d00b      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002da6:	4bca      	ldr	r3, [pc, #808]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dac:	f023 010c 	bic.w	r1, r3, #12
 8002db0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db6:	4ac6      	ldr	r2, [pc, #792]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002db8:	430b      	orrs	r3, r1
 8002dba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc6:	f002 0a04 	and.w	sl, r2, #4
 8002dca:	f04f 0b00 	mov.w	fp, #0
 8002dce:	ea5a 030b 	orrs.w	r3, sl, fp
 8002dd2:	d00b      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002dd4:	4bbe      	ldr	r3, [pc, #760]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dda:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002dde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de4:	4aba      	ldr	r2, [pc, #744]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002de6:	430b      	orrs	r3, r1
 8002de8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df4:	f002 0308 	and.w	r3, r2, #8
 8002df8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002e02:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002e06:	460b      	mov	r3, r1
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	d00b      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002e0c:	4bb0      	ldr	r3, [pc, #704]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e12:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e1c:	4aac      	ldr	r2, [pc, #688]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e1e:	430b      	orrs	r3, r1
 8002e20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2c:	f002 0310 	and.w	r3, r2, #16
 8002e30:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002e34:	2300      	movs	r3, #0
 8002e36:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002e3a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002e3e:	460b      	mov	r3, r1
 8002e40:	4313      	orrs	r3, r2
 8002e42:	d00b      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002e44:	4ba2      	ldr	r3, [pc, #648]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e4a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002e4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e54:	4a9e      	ldr	r2, [pc, #632]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e56:	430b      	orrs	r3, r1
 8002e58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e64:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8002e68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002e72:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002e76:	460b      	mov	r3, r1
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	d00b      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8002e7c:	4b94      	ldr	r3, [pc, #592]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002e82:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e8c:	4a90      	ldr	r2, [pc, #576]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e8e:	430b      	orrs	r3, r1
 8002e90:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9c:	f002 0320 	and.w	r3, r2, #32
 8002ea0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002eaa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002eae:	460b      	mov	r3, r1
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	d00b      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002eb4:	4b86      	ldr	r3, [pc, #536]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002eb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002eba:	f023 0107 	bic.w	r1, r3, #7
 8002ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ec2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ec4:	4a82      	ldr	r2, [pc, #520]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002ec6:	430b      	orrs	r3, r1
 8002ec8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ecc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed4:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8002ed8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002edc:	2300      	movs	r3, #0
 8002ede:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002ee2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	d00b      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002eec:	4b78      	ldr	r3, [pc, #480]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ef2:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8002ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002efa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002efc:	4a74      	ldr	r2, [pc, #464]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002efe:	430b      	orrs	r3, r1
 8002f00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8002f10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f14:	2300      	movs	r3, #0
 8002f16:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002f1a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002f1e:	460b      	mov	r3, r1
 8002f20:	4313      	orrs	r3, r2
 8002f22:	d00b      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002f24:	4b6a      	ldr	r3, [pc, #424]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f2a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f34:	4a66      	ldr	r2, [pc, #408]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f36:	430b      	orrs	r3, r1
 8002f38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f44:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8002f48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f52:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002f56:	460b      	mov	r3, r1
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	d00b      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8002f5c:	4b5c      	ldr	r3, [pc, #368]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f62:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002f66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f6c:	4a58      	ldr	r2, [pc, #352]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f6e:	430b      	orrs	r3, r1
 8002f70:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002f80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f84:	2300      	movs	r3, #0
 8002f86:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002f8a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4313      	orrs	r3, r2
 8002f92:	d00b      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8002f94:	4b4e      	ldr	r3, [pc, #312]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f9a:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8002f9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fa2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002fa4:	4a4a      	ldr	r2, [pc, #296]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002fa6:	430b      	orrs	r3, r1
 8002fa8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8002fac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8002fb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002fc2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	d00b      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8002fcc:	4b40      	ldr	r3, [pc, #256]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002fce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002fd2:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8002fd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fdc:	4a3c      	ldr	r2, [pc, #240]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002fde:	430b      	orrs	r3, r1
 8002fe0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8002fe4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fec:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8002ff0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002ffa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002ffe:	460b      	mov	r3, r1
 8003000:	4313      	orrs	r3, r2
 8003002:	d00c      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8003004:	4b32      	ldr	r3, [pc, #200]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003006:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800300a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800300e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003012:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003016:	4a2e      	ldr	r2, [pc, #184]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003018:	430b      	orrs	r3, r1
 800301a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800301e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003026:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800302a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800302e:	2300      	movs	r3, #0
 8003030:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003034:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003038:	460b      	mov	r3, r1
 800303a:	4313      	orrs	r3, r2
 800303c:	d00c      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800303e:	4b24      	ldr	r3, [pc, #144]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003040:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003044:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8003048:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800304c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003050:	4a1f      	ldr	r2, [pc, #124]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003052:	430b      	orrs	r3, r1
 8003054:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800305c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003060:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003064:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003068:	2300      	movs	r3, #0
 800306a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800306e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003072:	460b      	mov	r3, r1
 8003074:	4313      	orrs	r3, r2
 8003076:	d00c      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003078:	4b15      	ldr	r3, [pc, #84]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800307a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800307e:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800308a:	4a11      	ldr	r2, [pc, #68]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800308c:	430b      	orrs	r3, r1
 800308e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8003092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800309e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80030a2:	2300      	movs	r3, #0
 80030a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80030a8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80030ac:	460b      	mov	r3, r1
 80030ae:	4313      	orrs	r3, r2
 80030b0:	d010      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80030b2:	4b07      	ldr	r3, [pc, #28]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80030b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80030b8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80030bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030c4:	4a02      	ldr	r2, [pc, #8]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80030c6:	430b      	orrs	r3, r1
 80030c8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80030cc:	e002      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x388>
 80030ce:	bf00      	nop
 80030d0:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80030d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030dc:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80030e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80030e4:	2300      	movs	r3, #0
 80030e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80030ea:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80030ee:	460b      	mov	r3, r1
 80030f0:	4313      	orrs	r3, r2
 80030f2:	d04c      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80030f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80030fc:	2b80      	cmp	r3, #128	@ 0x80
 80030fe:	d02d      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003100:	2b80      	cmp	r3, #128	@ 0x80
 8003102:	d827      	bhi.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003104:	2b60      	cmp	r3, #96	@ 0x60
 8003106:	d02b      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003108:	2b60      	cmp	r3, #96	@ 0x60
 800310a:	d823      	bhi.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800310c:	2b40      	cmp	r3, #64	@ 0x40
 800310e:	d006      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8003110:	2b40      	cmp	r3, #64	@ 0x40
 8003112:	d81f      	bhi.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003114:	2b00      	cmp	r3, #0
 8003116:	d009      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003118:	2b20      	cmp	r3, #32
 800311a:	d011      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800311c:	e01a      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800311e:	4bbe      	ldr	r3, [pc, #760]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003122:	4abd      	ldr	r2, [pc, #756]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003124:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003128:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800312a:	e01a      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800312c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003130:	3308      	adds	r3, #8
 8003132:	4618      	mov	r0, r3
 8003134:	f002 fc5c 	bl	80059f0 <RCCEx_PLL2_Config>
 8003138:	4603      	mov	r3, r0
 800313a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800313e:	e010      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003140:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003144:	332c      	adds	r3, #44	@ 0x2c
 8003146:	4618      	mov	r0, r3
 8003148:	f002 fcea 	bl	8005b20 <RCCEx_PLL3_Config>
 800314c:	4603      	mov	r3, r0
 800314e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003152:	e006      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800315a:	e002      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800315c:	bf00      	nop
 800315e:	e000      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8003160:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003162:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10d      	bne.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800316a:	4bab      	ldr	r3, [pc, #684]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800316c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003170:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8003174:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003178:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800317c:	4aa6      	ldr	r2, [pc, #664]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800317e:	430b      	orrs	r3, r1
 8003180:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003184:	e003      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003186:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800318a:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800318e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003196:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800319a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800319e:	2300      	movs	r3, #0
 80031a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80031a4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80031a8:	460b      	mov	r3, r1
 80031aa:	4313      	orrs	r3, r2
 80031ac:	d053      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80031ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80031b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031ba:	d033      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 80031bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031c0:	d82c      	bhi.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80031c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031c6:	d02f      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 80031c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031cc:	d826      	bhi.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80031ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031d2:	d008      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 80031d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031d8:	d820      	bhi.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00a      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80031de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031e2:	d011      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80031e4:	e01a      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80031e6:	4b8c      	ldr	r3, [pc, #560]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ea:	4a8b      	ldr	r2, [pc, #556]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031f0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80031f2:	e01a      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80031f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031f8:	3308      	adds	r3, #8
 80031fa:	4618      	mov	r0, r3
 80031fc:	f002 fbf8 	bl	80059f0 <RCCEx_PLL2_Config>
 8003200:	4603      	mov	r3, r0
 8003202:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003206:	e010      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003208:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800320c:	332c      	adds	r3, #44	@ 0x2c
 800320e:	4618      	mov	r0, r3
 8003210:	f002 fc86 	bl	8005b20 <RCCEx_PLL3_Config>
 8003214:	4603      	mov	r3, r0
 8003216:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800321a:	e006      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8003222:	e002      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8003224:	bf00      	nop
 8003226:	e000      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8003228:	bf00      	nop
    }

    if (ret == HAL_OK)
 800322a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10d      	bne.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8003232:	4b79      	ldr	r3, [pc, #484]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003234:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003238:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800323c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003240:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003244:	4a74      	ldr	r2, [pc, #464]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003246:	430b      	orrs	r3, r1
 8003248:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800324c:	e003      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800324e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003252:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003256:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800325a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003262:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003264:	2300      	movs	r3, #0
 8003266:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003268:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800326c:	460b      	mov	r3, r1
 800326e:	4313      	orrs	r3, r2
 8003270:	d046      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003276:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800327a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800327e:	d028      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003280:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003284:	d821      	bhi.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8003286:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800328a:	d022      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800328c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003290:	d81b      	bhi.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8003292:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003296:	d01c      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003298:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800329c:	d815      	bhi.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x57e>
 800329e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032a2:	d008      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x56a>
 80032a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032a8:	d80f      	bhi.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d011      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80032ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032b2:	d00e      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80032b4:	e009      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x57e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80032b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032ba:	3308      	adds	r3, #8
 80032bc:	4618      	mov	r0, r3
 80032be:	f002 fb97 	bl	80059f0 <RCCEx_PLL2_Config>
 80032c2:	4603      	mov	r3, r0
 80032c4:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80032c8:	e004      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x588>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80032d0:	e000      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x588>
        break;
 80032d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032d4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10d      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80032dc:	4b4e      	ldr	r3, [pc, #312]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80032e2:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80032e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80032ee:	4a4a      	ldr	r2, [pc, #296]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032f0:	430b      	orrs	r3, r1
 80032f2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80032f6:	e003      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80032fc:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003300:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003308:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800330c:	673b      	str	r3, [r7, #112]	@ 0x70
 800330e:	2300      	movs	r3, #0
 8003310:	677b      	str	r3, [r7, #116]	@ 0x74
 8003312:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003316:	460b      	mov	r3, r1
 8003318:	4313      	orrs	r3, r2
 800331a:	d03f      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800331c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003320:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003324:	2b04      	cmp	r3, #4
 8003326:	d81e      	bhi.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8003328:	a201      	add	r2, pc, #4	@ (adr r2, 8003330 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800332a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332e:	bf00      	nop
 8003330:	0800336f 	.word	0x0800336f
 8003334:	08003345 	.word	0x08003345
 8003338:	08003353 	.word	0x08003353
 800333c:	0800336f 	.word	0x0800336f
 8003340:	0800336f 	.word	0x0800336f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003344:	4b34      	ldr	r3, [pc, #208]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003348:	4a33      	ldr	r2, [pc, #204]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800334a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800334e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003350:	e00e      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003352:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003356:	332c      	adds	r3, #44	@ 0x2c
 8003358:	4618      	mov	r0, r3
 800335a:	f002 fbe1 	bl	8005b20 <RCCEx_PLL3_Config>
 800335e:	4603      	mov	r3, r0
 8003360:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8003364:	e004      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800336c:	e000      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x624>
        break;
 800336e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003370:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10d      	bne.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8003378:	4b27      	ldr	r3, [pc, #156]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800337a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800337e:	f023 0107 	bic.w	r1, r3, #7
 8003382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003386:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800338a:	4a23      	ldr	r2, [pc, #140]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800338c:	430b      	orrs	r3, r1
 800338e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003392:	e003      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x650>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003394:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003398:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800339c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a4:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80033a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80033aa:	2300      	movs	r3, #0
 80033ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80033ae:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80033b2:	460b      	mov	r3, r1
 80033b4:	4313      	orrs	r3, r2
 80033b6:	d04c      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x706>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80033b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80033c4:	d02a      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 80033c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80033ca:	d821      	bhi.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 80033cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80033d0:	d026      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 80033d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80033d6:	d81b      	bhi.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 80033d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80033dc:	d00e      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80033de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80033e2:	d815      	bhi.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d01d      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 80033e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033ec:	d110      	bne.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80033ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f2:	4a09      	ldr	r2, [pc, #36]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033f8:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80033fa:	e014      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80033fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003400:	332c      	adds	r3, #44	@ 0x2c
 8003402:	4618      	mov	r0, r3
 8003404:	f002 fb8c 	bl	8005b20 <RCCEx_PLL3_Config>
 8003408:	4603      	mov	r3, r0
 800340a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800340e:	e00a      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8003416:	e006      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8003418:	46020c00 	.word	0x46020c00
        break;
 800341c:	bf00      	nop
 800341e:	e002      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8003420:	bf00      	nop
 8003422:	e000      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8003424:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003426:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10d      	bne.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800342e:	4baf      	ldr	r3, [pc, #700]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003430:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003434:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003438:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800343c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003440:	4aaa      	ldr	r2, [pc, #680]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003442:	430b      	orrs	r3, r1
 8003444:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003448:	e003      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x706>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800344a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800344e:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800345e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003460:	2300      	movs	r3, #0
 8003462:	667b      	str	r3, [r7, #100]	@ 0x64
 8003464:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003468:	460b      	mov	r3, r1
 800346a:	4313      	orrs	r3, r2
 800346c:	f000 80b5 	beq.w	80035da <HAL_RCCEx_PeriphCLKConfig+0x88e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003470:	2300      	movs	r3, #0
 8003472:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003476:	4b9d      	ldr	r3, [pc, #628]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003478:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b00      	cmp	r3, #0
 8003482:	d113      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x760>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003484:	4b99      	ldr	r3, [pc, #612]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003486:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800348a:	4a98      	ldr	r2, [pc, #608]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800348c:	f043 0304 	orr.w	r3, r3, #4
 8003490:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003494:	4b95      	ldr	r3, [pc, #596]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003496:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800349a:	f003 0304 	and.w	r3, r3, #4
 800349e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80034a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
      pwrclkchanged = SET;
 80034a6:	2301      	movs	r3, #1
 80034a8:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80034ac:	4b90      	ldr	r3, [pc, #576]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 80034ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b0:	4a8f      	ldr	r2, [pc, #572]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 80034b2:	f043 0301 	orr.w	r3, r3, #1
 80034b6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034b8:	f7fd fd66 	bl	8000f88 <HAL_GetTick>
 80034bc:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80034c0:	e00b      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x78e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034c2:	f7fd fd61 	bl	8000f88 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d903      	bls.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        ret = HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80034d8:	e005      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x79a>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80034da:	4b85      	ldr	r3, [pc, #532]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 80034dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d0ed      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x776>
      }
    }

    if (ret == HAL_OK)
 80034e6:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d165      	bne.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034ee:	4b7f      	ldr	r3, [pc, #508]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80034f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034f8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80034fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003500:	2b00      	cmp	r3, #0
 8003502:	d023      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x800>
 8003504:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003508:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800350c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003510:	4293      	cmp	r3, r2
 8003512:	d01b      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x800>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003514:	4b75      	ldr	r3, [pc, #468]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003516:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800351a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800351e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003522:	4b72      	ldr	r3, [pc, #456]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003524:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003528:	4a70      	ldr	r2, [pc, #448]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800352a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800352e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003532:	4b6e      	ldr	r3, [pc, #440]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003534:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003538:	4a6c      	ldr	r2, [pc, #432]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800353a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800353e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003542:	4a6a      	ldr	r2, [pc, #424]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003544:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003548:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800354c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b00      	cmp	r3, #0
 8003556:	d019      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x840>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003558:	f7fd fd16 	bl	8000f88 <HAL_GetTick>
 800355c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003560:	e00d      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x832>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003562:	f7fd fd11 	bl	8000f88 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800356c:	1ad2      	subs	r2, r2, r3
 800356e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003572:	429a      	cmp	r2, r3
 8003574:	d903      	bls.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x832>
          {
            ret = HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
            break;
 800357c:	e006      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x840>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800357e:	4b5b      	ldr	r3, [pc, #364]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003580:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d0ea      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x816>
          }
        }
      }

      if (ret == HAL_OK)
 800358c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10d      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x864>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003594:	4b55      	ldr	r3, [pc, #340]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003596:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800359a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800359e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035a2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80035a6:	4a51      	ldr	r2, [pc, #324]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80035a8:	430b      	orrs	r3, r1
 80035aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80035ae:	e008      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035b0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80035b4:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
 80035b8:	e003      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ba:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80035be:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035c2:	f897 3109 	ldrb.w	r3, [r7, #265]	@ 0x109
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d107      	bne.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x88e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ca:	4b48      	ldr	r3, [pc, #288]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80035cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035d0:	4a46      	ldr	r2, [pc, #280]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80035d2:	f023 0304 	bic.w	r3, r3, #4
 80035d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80035da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e2:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80035e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80035e8:	2300      	movs	r3, #0
 80035ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035ec:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80035f0:	460b      	mov	r3, r1
 80035f2:	4313      	orrs	r3, r2
 80035f4:	d042      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80035f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80035fe:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003602:	d022      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8003604:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003608:	d81b      	bhi.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 800360a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800360e:	d011      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 8003610:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003614:	d815      	bhi.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8003616:	2b00      	cmp	r3, #0
 8003618:	d019      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x902>
 800361a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800361e:	d110      	bne.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003620:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003624:	3308      	adds	r3, #8
 8003626:	4618      	mov	r0, r3
 8003628:	f002 f9e2 	bl	80059f0 <RCCEx_PLL2_Config>
 800362c:	4603      	mov	r3, r0
 800362e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8003632:	e00d      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003634:	4b2d      	ldr	r3, [pc, #180]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003638:	4a2c      	ldr	r2, [pc, #176]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800363a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800363e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003640:	e006      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8003648:	e002      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 800364a:	bf00      	nop
 800364c:	e000      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 800364e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003650:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10d      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x928>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8003658:	4b24      	ldr	r3, [pc, #144]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800365a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800365e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003666:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800366a:	4a20      	ldr	r2, [pc, #128]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800366c:	430b      	orrs	r3, r1
 800366e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003672:	e003      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003674:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003678:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800367c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003684:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003688:	653b      	str	r3, [r7, #80]	@ 0x50
 800368a:	2300      	movs	r3, #0
 800368c:	657b      	str	r3, [r7, #84]	@ 0x54
 800368e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003692:	460b      	mov	r3, r1
 8003694:	4313      	orrs	r3, r2
 8003696:	d031      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003698:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800369c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80036a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036a4:	d00b      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x972>
 80036a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036aa:	d804      	bhi.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d008      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80036b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036b4:	d007      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x97a>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80036bc:	e004      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 80036be:	bf00      	nop
 80036c0:	e002      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 80036c2:	bf00      	nop
 80036c4:	e000      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 80036c6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80036c8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d111      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80036d0:	4b06      	ldr	r3, [pc, #24]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80036d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80036d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80036da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80036e2:	4a02      	ldr	r2, [pc, #8]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80036e4:	430b      	orrs	r3, r1
 80036e6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80036ea:	e007      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 80036ec:	46020c00 	.word	0x46020c00
 80036f0:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80036f8:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 80036fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003704:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003708:	64bb      	str	r3, [r7, #72]	@ 0x48
 800370a:	2300      	movs	r3, #0
 800370c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800370e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003712:	460b      	mov	r3, r1
 8003714:	4313      	orrs	r3, r2
 8003716:	d00c      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8003718:	4bb2      	ldr	r3, [pc, #712]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800371a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800371e:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8003722:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003726:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800372a:	4aae      	ldr	r2, [pc, #696]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800372c:	430b      	orrs	r3, r1
 800372e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8003732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800373e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003740:	2300      	movs	r3, #0
 8003742:	647b      	str	r3, [r7, #68]	@ 0x44
 8003744:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003748:	460b      	mov	r3, r1
 800374a:	4313      	orrs	r3, r2
 800374c:	d019      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800374e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003752:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003756:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800375a:	d105      	bne.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800375c:	4ba1      	ldr	r3, [pc, #644]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800375e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003760:	4aa0      	ldr	r2, [pc, #640]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003762:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003766:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8003768:	4b9e      	ldr	r3, [pc, #632]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800376a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800376e:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003776:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800377a:	4a9a      	ldr	r2, [pc, #616]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800377c:	430b      	orrs	r3, r1
 800377e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003782:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800378e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003790:	2300      	movs	r3, #0
 8003792:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003794:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003798:	460b      	mov	r3, r1
 800379a:	4313      	orrs	r3, r2
 800379c:	d00c      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800379e:	4b91      	ldr	r3, [pc, #580]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80037a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037a4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80037a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037ac:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80037b0:	4a8c      	ldr	r2, [pc, #560]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80037b2:	430b      	orrs	r3, r1
 80037b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80037b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80037c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80037c6:	2300      	movs	r3, #0
 80037c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80037ca:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80037ce:	460b      	mov	r3, r1
 80037d0:	4313      	orrs	r3, r2
 80037d2:	d00c      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80037d4:	4b83      	ldr	r3, [pc, #524]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80037d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037da:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80037de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037e2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80037e6:	4a7f      	ldr	r2, [pc, #508]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80037e8:	430b      	orrs	r3, r1
 80037ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80037ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f6:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80037fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037fc:	2300      	movs	r3, #0
 80037fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003800:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003804:	460b      	mov	r3, r1
 8003806:	4313      	orrs	r3, r2
 8003808:	d00c      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xad8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800380a:	4b76      	ldr	r3, [pc, #472]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800380c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003810:	f023 0218 	bic.w	r2, r3, #24
 8003814:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003818:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800381c:	4971      	ldr	r1, [pc, #452]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800381e:	4313      	orrs	r3, r2
 8003820:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003824:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382c:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8003830:	623b      	str	r3, [r7, #32]
 8003832:	2300      	movs	r3, #0
 8003834:	627b      	str	r3, [r7, #36]	@ 0x24
 8003836:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800383a:	460b      	mov	r3, r1
 800383c:	4313      	orrs	r3, r2
 800383e:	d032      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8003840:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003844:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003848:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800384c:	d105      	bne.n	800385a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800384e:	4b65      	ldr	r3, [pc, #404]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003852:	4a64      	ldr	r2, [pc, #400]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003854:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003858:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800385a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800385e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003862:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003866:	d108      	bne.n	800387a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003868:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800386c:	3308      	adds	r3, #8
 800386e:	4618      	mov	r0, r3
 8003870:	f002 f8be 	bl	80059f0 <RCCEx_PLL2_Config>
 8003874:	4603      	mov	r3, r0
 8003876:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
    }
    if (ret == HAL_OK)
 800387a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10d      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0xb52>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8003882:	4b58      	ldr	r3, [pc, #352]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003884:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003888:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800388c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003890:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003894:	4953      	ldr	r1, [pc, #332]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003896:	4313      	orrs	r3, r2
 8003898:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800389c:	e003      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800389e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80038a2:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 80038a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ae:	2100      	movs	r1, #0
 80038b0:	61b9      	str	r1, [r7, #24]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	61fb      	str	r3, [r7, #28]
 80038b8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80038bc:	460b      	mov	r3, r1
 80038be:	4313      	orrs	r3, r2
 80038c0:	d04a      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 80038c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038c6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80038ca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80038ce:	d01e      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 80038d0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80038d4:	d825      	bhi.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 80038d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80038da:	d00e      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80038dc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80038e0:	d81f      	bhi.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d021      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xbde>
 80038e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038ea:	d11a      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038ec:	4b3d      	ldr	r3, [pc, #244]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80038ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f0:	4a3c      	ldr	r2, [pc, #240]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80038f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038f6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80038f8:	e018      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80038fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038fe:	3308      	adds	r3, #8
 8003900:	4618      	mov	r0, r3
 8003902:	f002 f875 	bl	80059f0 <RCCEx_PLL2_Config>
 8003906:	4603      	mov	r3, r0
 8003908:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800390c:	e00e      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800390e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003912:	332c      	adds	r3, #44	@ 0x2c
 8003914:	4618      	mov	r0, r3
 8003916:	f002 f903 	bl	8005b20 <RCCEx_PLL3_Config>
 800391a:	4603      	mov	r3, r0
 800391c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8003920:	e004      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      default:
        ret = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8003928:	e000      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        break;
 800392a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800392c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10d      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xc04>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 8003934:	4b2b      	ldr	r3, [pc, #172]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003936:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800393a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800393e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003942:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003946:	4927      	ldr	r1, [pc, #156]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003948:	4313      	orrs	r3, r2
 800394a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800394e:	e003      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003950:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003954:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8003958:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800395c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003960:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8003964:	613b      	str	r3, [r7, #16]
 8003966:	2300      	movs	r3, #0
 8003968:	617b      	str	r3, [r7, #20]
 800396a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800396e:	460b      	mov	r3, r1
 8003970:	4313      	orrs	r3, r2
 8003972:	d03d      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8003974:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003978:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800397c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003980:	d00e      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8003982:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003986:	d815      	bhi.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003988:	2b00      	cmp	r3, #0
 800398a:	d017      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800398c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003990:	d110      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003992:	4b14      	ldr	r3, [pc, #80]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003996:	4a13      	ldr	r2, [pc, #76]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003998:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800399c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800399e:	e00e      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xc72>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80039a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039a4:	3308      	adds	r3, #8
 80039a6:	4618      	mov	r0, r3
 80039a8:	f002 f822 	bl	80059f0 <RCCEx_PLL2_Config>
 80039ac:	4603      	mov	r3, r0
 80039ae:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80039b2:	e004      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xc72>
      default:
        ret = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80039ba:	e000      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xc72>
        break;
 80039bc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80039be:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d110      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80039c6:	4b07      	ldr	r3, [pc, #28]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80039c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039cc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80039d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039d8:	4902      	ldr	r1, [pc, #8]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80039e0:	e006      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
 80039e2:	bf00      	nop
 80039e4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80039ec:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80039f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80039fc:	60bb      	str	r3, [r7, #8]
 80039fe:	2300      	movs	r3, #0
 8003a00:	60fb      	str	r3, [r7, #12]
 8003a02:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003a06:	460b      	mov	r3, r1
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	d00c      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0xcda>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8003a0c:	4b2c      	ldr	r3, [pc, #176]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8003a0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003a12:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003a16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a1a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003a1e:	4928      	ldr	r1, [pc, #160]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 8003a26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2e:	2100      	movs	r1, #0
 8003a30:	6039      	str	r1, [r7, #0]
 8003a32:	f003 0308 	and.w	r3, r3, #8
 8003a36:	607b      	str	r3, [r7, #4]
 8003a38:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	d036      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 8003a42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a46:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003a4a:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003a4e:	d00d      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003a50:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003a54:	d811      	bhi.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8003a56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a5a:	d012      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003a5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a60:	d80b      	bhi.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00d      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003a66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a6a:	d106      	bne.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0xd2e>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003a6c:	4b14      	ldr	r3, [pc, #80]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a70:	4a13      	ldr	r2, [pc, #76]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8003a72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a76:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8003a78:	e004      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xd38>

      default:
        ret = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8003a80:	e000      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xd38>
        break;
 8003a82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a84:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10d      	bne.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8003a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8003a8e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003a92:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003a96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a9a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003a9e:	4908      	ldr	r1, [pc, #32]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003aa6:	e003      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003aac:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8003ab0:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8003aba:	46bd      	mov	sp, r7
 8003abc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ac0:	46020c00 	.word	0x46020c00

08003ac4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b089      	sub	sp, #36	@ 0x24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003acc:	4bad      	ldr	r3, [pc, #692]	@ (8003d84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ad4:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003ad6:	4bab      	ldr	r3, [pc, #684]	@ (8003d84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ada:	f003 0303 	and.w	r3, r3, #3
 8003ade:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003ae0:	4ba8      	ldr	r3, [pc, #672]	@ (8003d84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae4:	0a1b      	lsrs	r3, r3, #8
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	3301      	adds	r3, #1
 8003aec:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003aee:	4ba5      	ldr	r3, [pc, #660]	@ (8003d84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af2:	091b      	lsrs	r3, r3, #4
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003afa:	4ba2      	ldr	r3, [pc, #648]	@ (8003d84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003afe:	08db      	lsrs	r3, r3, #3
 8003b00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	fb02 f303 	mul.w	r3, r2, r3
 8003b0a:	ee07 3a90 	vmov	s15, r3
 8003b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b12:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 8123 	beq.w	8003d64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2b03      	cmp	r3, #3
 8003b22:	d062      	beq.n	8003bea <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	2b03      	cmp	r3, #3
 8003b28:	f200 8081 	bhi.w	8003c2e <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d024      	beq.n	8003b7c <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d17a      	bne.n	8003c2e <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	ee07 3a90 	vmov	s15, r3
 8003b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b42:	eddf 6a91 	vldr	s13, [pc, #580]	@ 8003d88 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8003b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b4a:	4b8e      	ldr	r3, [pc, #568]	@ (8003d84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b52:	ee07 3a90 	vmov	s15, r3
 8003b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b5e:	eddf 5a8b 	vldr	s11, [pc, #556]	@ 8003d8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b7a:	e08f      	b.n	8003c9c <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003b7c:	4b81      	ldr	r3, [pc, #516]	@ (8003d84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d005      	beq.n	8003b94 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 8003b88:	4b7e      	ldr	r3, [pc, #504]	@ (8003d84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	0f1b      	lsrs	r3, r3, #28
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	e006      	b.n	8003ba2 <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 8003b94:	4b7b      	ldr	r3, [pc, #492]	@ (8003d84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003b96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003b9a:	041b      	lsls	r3, r3, #16
 8003b9c:	0f1b      	lsrs	r3, r3, #28
 8003b9e:	f003 030f 	and.w	r3, r3, #15
 8003ba2:	4a7b      	ldr	r2, [pc, #492]	@ (8003d90 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8003ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ba8:	ee07 3a90 	vmov	s15, r3
 8003bac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	ee07 3a90 	vmov	s15, r3
 8003bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	ee07 3a90 	vmov	s15, r3
 8003bc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bc8:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bcc:	eddf 5a6f 	vldr	s11, [pc, #444]	@ 8003d8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003bd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bd8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003be0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003be4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003be8:	e058      	b.n	8003c9c <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	ee07 3a90 	vmov	s15, r3
 8003bf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bf4:	eddf 6a64 	vldr	s13, [pc, #400]	@ 8003d88 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8003bf8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bfc:	4b61      	ldr	r3, [pc, #388]	@ (8003d84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003bfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c04:	ee07 3a90 	vmov	s15, r3
 8003c08:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c0c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c10:	eddf 5a5e 	vldr	s11, [pc, #376]	@ 8003d8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003c14:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c18:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c20:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c2c:	e036      	b.n	8003c9c <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003c2e:	4b55      	ldr	r3, [pc, #340]	@ (8003d84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d005      	beq.n	8003c46 <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 8003c3a:	4b52      	ldr	r3, [pc, #328]	@ (8003d84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	0f1b      	lsrs	r3, r3, #28
 8003c40:	f003 030f 	and.w	r3, r3, #15
 8003c44:	e006      	b.n	8003c54 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 8003c46:	4b4f      	ldr	r3, [pc, #316]	@ (8003d84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003c48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003c4c:	041b      	lsls	r3, r3, #16
 8003c4e:	0f1b      	lsrs	r3, r3, #28
 8003c50:	f003 030f 	and.w	r3, r3, #15
 8003c54:	4a4e      	ldr	r2, [pc, #312]	@ (8003d90 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8003c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c5a:	ee07 3a90 	vmov	s15, r3
 8003c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	ee07 3a90 	vmov	s15, r3
 8003c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	ee07 3a90 	vmov	s15, r3
 8003c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c7e:	eddf 5a43 	vldr	s11, [pc, #268]	@ 8003d8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c9a:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003c9c:	4b39      	ldr	r3, [pc, #228]	@ (8003d84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d017      	beq.n	8003cd8 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003ca8:	4b36      	ldr	r3, [pc, #216]	@ (8003d84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cac:	0a5b      	lsrs	r3, r3, #9
 8003cae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cb2:	ee07 3a90 	vmov	s15, r3
 8003cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8003cba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003cbe:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003cc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cce:	ee17 2a90 	vmov	r2, s15
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	e002      	b.n	8003cde <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8003cde:	4b29      	ldr	r3, [pc, #164]	@ (8003d84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d017      	beq.n	8003d1a <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003cea:	4b26      	ldr	r3, [pc, #152]	@ (8003d84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cee:	0c1b      	lsrs	r3, r3, #16
 8003cf0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cf4:	ee07 3a90 	vmov	s15, r3
 8003cf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003cfc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d00:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003d04:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d10:	ee17 2a90 	vmov	r2, s15
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	605a      	str	r2, [r3, #4]
 8003d18:	e002      	b.n	8003d20 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8003d20:	4b18      	ldr	r3, [pc, #96]	@ (8003d84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d017      	beq.n	8003d5c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003d2c:	4b15      	ldr	r3, [pc, #84]	@ (8003d84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003d2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d30:	0e1b      	lsrs	r3, r3, #24
 8003d32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d36:	ee07 3a90 	vmov	s15, r3
 8003d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8003d3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d42:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003d46:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d52:	ee17 2a90 	vmov	r2, s15
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003d5a:	e00c      	b.n	8003d76 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	609a      	str	r2, [r3, #8]
}
 8003d62:	e008      	b.n	8003d76 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	609a      	str	r2, [r3, #8]
}
 8003d76:	bf00      	nop
 8003d78:	3724      	adds	r7, #36	@ 0x24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	46020c00 	.word	0x46020c00
 8003d88:	4b742400 	.word	0x4b742400
 8003d8c:	46000000 	.word	0x46000000
 8003d90:	0800732c 	.word	0x0800732c

08003d94 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b089      	sub	sp, #36	@ 0x24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003d9c:	4bad      	ldr	r3, [pc, #692]	@ (8004054 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da4:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003da6:	4bab      	ldr	r3, [pc, #684]	@ (8004054 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003daa:	f003 0303 	and.w	r3, r3, #3
 8003dae:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8003db0:	4ba8      	ldr	r3, [pc, #672]	@ (8004054 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db4:	0a1b      	lsrs	r3, r3, #8
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	3301      	adds	r3, #1
 8003dbc:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8003dbe:	4ba5      	ldr	r3, [pc, #660]	@ (8004054 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc2:	091b      	lsrs	r3, r3, #4
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003dca:	4ba2      	ldr	r3, [pc, #648]	@ (8004054 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dce:	08db      	lsrs	r3, r3, #3
 8003dd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	fb02 f303 	mul.w	r3, r2, r3
 8003dda:	ee07 3a90 	vmov	s15, r3
 8003dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003de2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 8123 	beq.w	8004034 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	2b03      	cmp	r3, #3
 8003df2:	d062      	beq.n	8003eba <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	2b03      	cmp	r3, #3
 8003df8:	f200 8081 	bhi.w	8003efe <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d024      	beq.n	8003e4c <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d17a      	bne.n	8003efe <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	ee07 3a90 	vmov	s15, r3
 8003e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e12:	eddf 6a91 	vldr	s13, [pc, #580]	@ 8004058 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e1a:	4b8e      	ldr	r3, [pc, #568]	@ (8004054 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e22:	ee07 3a90 	vmov	s15, r3
 8003e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e2e:	eddf 5a8b 	vldr	s11, [pc, #556]	@ 800405c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e4a:	e08f      	b.n	8003f6c <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003e4c:	4b81      	ldr	r3, [pc, #516]	@ (8004054 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d005      	beq.n	8003e64 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 8003e58:	4b7e      	ldr	r3, [pc, #504]	@ (8004054 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	0f1b      	lsrs	r3, r3, #28
 8003e5e:	f003 030f 	and.w	r3, r3, #15
 8003e62:	e006      	b.n	8003e72 <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 8003e64:	4b7b      	ldr	r3, [pc, #492]	@ (8004054 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003e66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003e6a:	041b      	lsls	r3, r3, #16
 8003e6c:	0f1b      	lsrs	r3, r3, #28
 8003e6e:	f003 030f 	and.w	r3, r3, #15
 8003e72:	4a7b      	ldr	r2, [pc, #492]	@ (8004060 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8003e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e78:	ee07 3a90 	vmov	s15, r3
 8003e7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	ee07 3a90 	vmov	s15, r3
 8003e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	ee07 3a90 	vmov	s15, r3
 8003e94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e98:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e9c:	eddf 5a6f 	vldr	s11, [pc, #444]	@ 800405c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003ea0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ea4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ea8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003eac:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eb4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003eb8:	e058      	b.n	8003f6c <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	ee07 3a90 	vmov	s15, r3
 8003ec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ec4:	eddf 6a64 	vldr	s13, [pc, #400]	@ 8004058 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003ec8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ecc:	4b61      	ldr	r3, [pc, #388]	@ (8004054 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ed4:	ee07 3a90 	vmov	s15, r3
 8003ed8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003edc:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ee0:	eddf 5a5e 	vldr	s11, [pc, #376]	@ 800405c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003ee4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003ee8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003eec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ef0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003ef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ef8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003efc:	e036      	b.n	8003f6c <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003efe:	4b55      	ldr	r3, [pc, #340]	@ (8004054 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d005      	beq.n	8003f16 <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 8003f0a:	4b52      	ldr	r3, [pc, #328]	@ (8004054 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	0f1b      	lsrs	r3, r3, #28
 8003f10:	f003 030f 	and.w	r3, r3, #15
 8003f14:	e006      	b.n	8003f24 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 8003f16:	4b4f      	ldr	r3, [pc, #316]	@ (8004054 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003f18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003f1c:	041b      	lsls	r3, r3, #16
 8003f1e:	0f1b      	lsrs	r3, r3, #28
 8003f20:	f003 030f 	and.w	r3, r3, #15
 8003f24:	4a4e      	ldr	r2, [pc, #312]	@ (8004060 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8003f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f2a:	ee07 3a90 	vmov	s15, r3
 8003f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	ee07 3a90 	vmov	s15, r3
 8003f38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	ee07 3a90 	vmov	s15, r3
 8003f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f4e:	eddf 5a43 	vldr	s11, [pc, #268]	@ 800405c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003f52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f6a:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8003f6c:	4b39      	ldr	r3, [pc, #228]	@ (8004054 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d017      	beq.n	8003fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003f78:	4b36      	ldr	r3, [pc, #216]	@ (8004054 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f7c:	0a5b      	lsrs	r3, r3, #9
 8003f7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f82:	ee07 3a90 	vmov	s15, r3
 8003f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8003f8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f8e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003f92:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f9e:	ee17 2a90 	vmov	r2, s15
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	e002      	b.n	8003fae <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8003fae:	4b29      	ldr	r3, [pc, #164]	@ (8004054 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d017      	beq.n	8003fea <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003fba:	4b26      	ldr	r3, [pc, #152]	@ (8004054 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003fbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fbe:	0c1b      	lsrs	r3, r3, #16
 8003fc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fc4:	ee07 3a90 	vmov	s15, r3
 8003fc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8003fcc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003fd0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003fd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fe0:	ee17 2a90 	vmov	r2, s15
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	605a      	str	r2, [r3, #4]
 8003fe8:	e002      	b.n	8003ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8003ff0:	4b18      	ldr	r3, [pc, #96]	@ (8004054 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d017      	beq.n	800402c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003ffc:	4b15      	ldr	r3, [pc, #84]	@ (8004054 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004000:	0e1b      	lsrs	r3, r3, #24
 8004002:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004006:	ee07 3a90 	vmov	s15, r3
 800400a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800400e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004012:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004016:	edd7 6a07 	vldr	s13, [r7, #28]
 800401a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800401e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004022:	ee17 2a90 	vmov	r2, s15
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800402a:	e00c      	b.n	8004046 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	609a      	str	r2, [r3, #8]
}
 8004032:	e008      	b.n	8004046 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	609a      	str	r2, [r3, #8]
}
 8004046:	bf00      	nop
 8004048:	3724      	adds	r7, #36	@ 0x24
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	46020c00 	.word	0x46020c00
 8004058:	4b742400 	.word	0x4b742400
 800405c:	46000000 	.word	0x46000000
 8004060:	0800732c 	.word	0x0800732c

08004064 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004064:	b480      	push	{r7}
 8004066:	b089      	sub	sp, #36	@ 0x24
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800406c:	4bad      	ldr	r3, [pc, #692]	@ (8004324 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800406e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004074:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8004076:	4bab      	ldr	r3, [pc, #684]	@ (8004324 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800407a:	f003 0303 	and.w	r3, r3, #3
 800407e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8004080:	4ba8      	ldr	r3, [pc, #672]	@ (8004324 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004084:	0a1b      	lsrs	r3, r3, #8
 8004086:	f003 030f 	and.w	r3, r3, #15
 800408a:	3301      	adds	r3, #1
 800408c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800408e:	4ba5      	ldr	r3, [pc, #660]	@ (8004324 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004092:	091b      	lsrs	r3, r3, #4
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800409a:	4ba2      	ldr	r3, [pc, #648]	@ (8004324 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800409c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800409e:	08db      	lsrs	r3, r3, #3
 80040a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	fb02 f303 	mul.w	r3, r2, r3
 80040aa:	ee07 3a90 	vmov	s15, r3
 80040ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040b2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 8123 	beq.w	8004304 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	2b03      	cmp	r3, #3
 80040c2:	d062      	beq.n	800418a <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	2b03      	cmp	r3, #3
 80040c8:	f200 8081 	bhi.w	80041ce <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d024      	beq.n	800411c <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d17a      	bne.n	80041ce <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	ee07 3a90 	vmov	s15, r3
 80040de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040e2:	eddf 6a91 	vldr	s13, [pc, #580]	@ 8004328 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80040e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ea:	4b8e      	ldr	r3, [pc, #568]	@ (8004324 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80040ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040f2:	ee07 3a90 	vmov	s15, r3
 80040f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80040fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80040fe:	eddf 5a8b 	vldr	s11, [pc, #556]	@ 800432c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004102:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004106:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800410a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800410e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004116:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 800411a:	e08f      	b.n	800423c <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800411c:	4b81      	ldr	r3, [pc, #516]	@ (8004324 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d005      	beq.n	8004134 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 8004128:	4b7e      	ldr	r3, [pc, #504]	@ (8004324 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	0f1b      	lsrs	r3, r3, #28
 800412e:	f003 030f 	and.w	r3, r3, #15
 8004132:	e006      	b.n	8004142 <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 8004134:	4b7b      	ldr	r3, [pc, #492]	@ (8004324 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004136:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800413a:	041b      	lsls	r3, r3, #16
 800413c:	0f1b      	lsrs	r3, r3, #28
 800413e:	f003 030f 	and.w	r3, r3, #15
 8004142:	4a7b      	ldr	r2, [pc, #492]	@ (8004330 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8004144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004148:	ee07 3a90 	vmov	s15, r3
 800414c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	ee07 3a90 	vmov	s15, r3
 8004156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800415a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	ee07 3a90 	vmov	s15, r3
 8004164:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004168:	ed97 6a02 	vldr	s12, [r7, #8]
 800416c:	eddf 5a6f 	vldr	s11, [pc, #444]	@ 800432c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004170:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004174:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004178:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800417c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004180:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004184:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004188:	e058      	b.n	800423c <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	ee07 3a90 	vmov	s15, r3
 8004190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004194:	eddf 6a64 	vldr	s13, [pc, #400]	@ 8004328 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8004198:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800419c:	4b61      	ldr	r3, [pc, #388]	@ (8004324 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800419e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041a4:	ee07 3a90 	vmov	s15, r3
 80041a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80041ac:	ed97 6a02 	vldr	s12, [r7, #8]
 80041b0:	eddf 5a5e 	vldr	s11, [pc, #376]	@ 800432c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80041b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80041b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80041bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80041c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041cc:	e036      	b.n	800423c <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80041ce:	4b55      	ldr	r3, [pc, #340]	@ (8004324 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d005      	beq.n	80041e6 <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 80041da:	4b52      	ldr	r3, [pc, #328]	@ (8004324 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	0f1b      	lsrs	r3, r3, #28
 80041e0:	f003 030f 	and.w	r3, r3, #15
 80041e4:	e006      	b.n	80041f4 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 80041e6:	4b4f      	ldr	r3, [pc, #316]	@ (8004324 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80041e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80041ec:	041b      	lsls	r3, r3, #16
 80041ee:	0f1b      	lsrs	r3, r3, #28
 80041f0:	f003 030f 	and.w	r3, r3, #15
 80041f4:	4a4e      	ldr	r2, [pc, #312]	@ (8004330 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 80041f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041fa:	ee07 3a90 	vmov	s15, r3
 80041fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	ee07 3a90 	vmov	s15, r3
 8004208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800420c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	ee07 3a90 	vmov	s15, r3
 8004216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800421a:	ed97 6a02 	vldr	s12, [r7, #8]
 800421e:	eddf 5a43 	vldr	s11, [pc, #268]	@ 800432c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800422a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800422e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004236:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800423a:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800423c:	4b39      	ldr	r3, [pc, #228]	@ (8004324 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800423e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004240:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d017      	beq.n	8004278 <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004248:	4b36      	ldr	r3, [pc, #216]	@ (8004324 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800424a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800424c:	0a5b      	lsrs	r3, r3, #9
 800424e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004252:	ee07 3a90 	vmov	s15, r3
 8004256:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800425a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800425e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004262:	edd7 6a07 	vldr	s13, [r7, #28]
 8004266:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800426a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800426e:	ee17 2a90 	vmov	r2, s15
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	e002      	b.n	800427e <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800427e:	4b29      	ldr	r3, [pc, #164]	@ (8004324 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d017      	beq.n	80042ba <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800428a:	4b26      	ldr	r3, [pc, #152]	@ (8004324 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800428c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800428e:	0c1b      	lsrs	r3, r3, #16
 8004290:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004294:	ee07 3a90 	vmov	s15, r3
 8004298:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800429c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80042a0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80042a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80042a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042b0:	ee17 2a90 	vmov	r2, s15
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	605a      	str	r2, [r3, #4]
 80042b8:	e002      	b.n	80042c0 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80042c0:	4b18      	ldr	r3, [pc, #96]	@ (8004324 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80042c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d017      	beq.n	80042fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80042cc:	4b15      	ldr	r3, [pc, #84]	@ (8004324 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80042ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d0:	0e1b      	lsrs	r3, r3, #24
 80042d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042d6:	ee07 3a90 	vmov	s15, r3
 80042da:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80042de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80042e2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80042e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80042ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042f2:	ee17 2a90 	vmov	r2, s15
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80042fa:	e00c      	b.n	8004316 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	609a      	str	r2, [r3, #8]
}
 8004302:	e008      	b.n	8004316 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	609a      	str	r2, [r3, #8]
}
 8004316:	bf00      	nop
 8004318:	3724      	adds	r7, #36	@ 0x24
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	46020c00 	.word	0x46020c00
 8004328:	4b742400 	.word	0x4b742400
 800432c:	46000000 	.word	0x46000000
 8004330:	0800732c 	.word	0x0800732c

08004334 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08e      	sub	sp, #56	@ 0x38
 8004338:	af00      	add	r7, sp, #0
 800433a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800433e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004342:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8004346:	430b      	orrs	r3, r1
 8004348:	d145      	bne.n	80043d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800434a:	4ba7      	ldr	r3, [pc, #668]	@ (80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800434c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004350:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004354:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004356:	4ba4      	ldr	r3, [pc, #656]	@ (80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004358:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b02      	cmp	r3, #2
 8004362:	d108      	bne.n	8004376 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004366:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800436a:	d104      	bne.n	8004376 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800436c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004370:	637b      	str	r3, [r7, #52]	@ 0x34
 8004372:	f001 bb31 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004376:	4b9c      	ldr	r3, [pc, #624]	@ (80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004378:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800437c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004380:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004384:	d114      	bne.n	80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8004386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004388:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800438c:	d110      	bne.n	80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800438e:	4b96      	ldr	r3, [pc, #600]	@ (80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004390:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004394:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004398:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800439c:	d103      	bne.n	80043a6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800439e:	23fa      	movs	r3, #250	@ 0xfa
 80043a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80043a2:	f001 bb19 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 80043a6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80043aa:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80043ac:	f001 bb14 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80043b0:	4b8d      	ldr	r3, [pc, #564]	@ (80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043bc:	d107      	bne.n	80043ce <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80043be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043c4:	d103      	bne.n	80043ce <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80043c6:	4b89      	ldr	r3, [pc, #548]	@ (80045ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80043c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80043ca:	f001 bb05 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80043ce:	2300      	movs	r3, #0
 80043d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80043d2:	f001 bb01 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80043d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043da:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80043de:	430b      	orrs	r3, r1
 80043e0:	d151      	bne.n	8004486 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80043e2:	4b81      	ldr	r3, [pc, #516]	@ (80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80043e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80043e8:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80043ec:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80043ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f0:	2b80      	cmp	r3, #128	@ 0x80
 80043f2:	d035      	beq.n	8004460 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80043f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f6:	2b80      	cmp	r3, #128	@ 0x80
 80043f8:	d841      	bhi.n	800447e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80043fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043fc:	2b60      	cmp	r3, #96	@ 0x60
 80043fe:	d02a      	beq.n	8004456 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8004400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004402:	2b60      	cmp	r3, #96	@ 0x60
 8004404:	d83b      	bhi.n	800447e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004408:	2b40      	cmp	r3, #64	@ 0x40
 800440a:	d009      	beq.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800440c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800440e:	2b40      	cmp	r3, #64	@ 0x40
 8004410:	d835      	bhi.n	800447e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00c      	beq.n	8004432 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8004418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800441a:	2b20      	cmp	r3, #32
 800441c:	d012      	beq.n	8004444 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800441e:	e02e      	b.n	800447e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004420:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004424:	4618      	mov	r0, r3
 8004426:	f7ff fb4d 	bl	8003ac4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800442a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800442c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800442e:	f001 bad3 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004432:	f107 0318 	add.w	r3, r7, #24
 8004436:	4618      	mov	r0, r3
 8004438:	f7ff fcac 	bl	8003d94 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004440:	f001 baca 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004444:	f107 030c 	add.w	r3, r7, #12
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff fe0b 	bl	8004064 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004452:	f001 bac1 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004456:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800445a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800445c:	f001 babc 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004460:	4b61      	ldr	r3, [pc, #388]	@ (80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004468:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800446c:	d103      	bne.n	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800446e:	4b60      	ldr	r3, [pc, #384]	@ (80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004470:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004472:	f001 bab1 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004476:	2300      	movs	r3, #0
 8004478:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800447a:	f001 baad 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :
      {
        frequency = 0U;
 800447e:	2300      	movs	r3, #0
 8004480:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004482:	f001 baa9 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8004486:	e9d7 2300 	ldrd	r2, r3, [r7]
 800448a:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800448e:	430b      	orrs	r3, r1
 8004490:	d158      	bne.n	8004544 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004492:	4b55      	ldr	r3, [pc, #340]	@ (80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004494:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004498:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800449c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800449e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044a4:	d03b      	beq.n	800451e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80044a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044ac:	d846      	bhi.n	800453c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80044ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044b4:	d02e      	beq.n	8004514 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80044b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044bc:	d83e      	bhi.n	800453c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80044be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044c4:	d00b      	beq.n	80044de <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80044c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044cc:	d836      	bhi.n	800453c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80044ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00d      	beq.n	80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80044d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044da:	d012      	beq.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80044dc:	e02e      	b.n	800453c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80044de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7ff faee 	bl	8003ac4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80044e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80044ec:	f001 ba74 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80044f0:	f107 0318 	add.w	r3, r7, #24
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7ff fc4d 	bl	8003d94 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80044fe:	f001 ba6b 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004502:	f107 030c 	add.w	r3, r7, #12
 8004506:	4618      	mov	r0, r3
 8004508:	f7ff fdac 	bl	8004064 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004510:	f001 ba62 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004514:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004518:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800451a:	f001 ba5d 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800451e:	4b32      	ldr	r3, [pc, #200]	@ (80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004526:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800452a:	d103      	bne.n	8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800452c:	4b30      	ldr	r3, [pc, #192]	@ (80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800452e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004530:	f001 ba52 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004534:	2300      	movs	r3, #0
 8004536:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004538:	f001 ba4e 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 800453c:	2300      	movs	r3, #0
 800453e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004540:	f001 ba4a 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8004544:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004548:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800454c:	430b      	orrs	r3, r1
 800454e:	d126      	bne.n	800459e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8004550:	4b25      	ldr	r3, [pc, #148]	@ (80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004552:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004556:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800455a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800455c:	4b22      	ldr	r3, [pc, #136]	@ (80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004564:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004568:	d106      	bne.n	8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800456a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800456c:	2b00      	cmp	r3, #0
 800456e:	d103      	bne.n	8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8004570:	4b1f      	ldr	r3, [pc, #124]	@ (80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004572:	637b      	str	r3, [r7, #52]	@ 0x34
 8004574:	f001 ba30 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8004578:	4b1b      	ldr	r3, [pc, #108]	@ (80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004580:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004584:	d107      	bne.n	8004596 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8004586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004588:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800458c:	d103      	bne.n	8004596 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800458e:	4b19      	ldr	r3, [pc, #100]	@ (80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004590:	637b      	str	r3, [r7, #52]	@ 0x34
 8004592:	f001 ba21 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8004596:	2300      	movs	r3, #0
 8004598:	637b      	str	r3, [r7, #52]	@ 0x34
 800459a:	f001 ba1d 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800459e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045a2:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 80045a6:	430b      	orrs	r3, r1
 80045a8:	d16e      	bne.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80045aa:	4b0f      	ldr	r3, [pc, #60]	@ (80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80045ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80045b0:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80045b4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80045b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80045bc:	d03d      	beq.n	800463a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80045be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80045c4:	d85c      	bhi.n	8004680 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80045c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045cc:	d014      	beq.n	80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80045ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045d4:	d854      	bhi.n	8004680 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80045d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d01f      	beq.n	800461c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80045dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045e2:	d012      	beq.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80045e4:	e04c      	b.n	8004680 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80045e6:	bf00      	nop
 80045e8:	46020c00 	.word	0x46020c00
 80045ec:	0007a120 	.word	0x0007a120
 80045f0:	00f42400 	.word	0x00f42400
 80045f4:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80045f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7ff fa61 	bl	8003ac4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8004602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004604:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004606:	f001 b9e7 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800460a:	f107 0318 	add.w	r3, r7, #24
 800460e:	4618      	mov	r0, r3
 8004610:	f7ff fbc0 	bl	8003d94 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004618:	f001 b9de 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800461c:	4ba7      	ldr	r3, [pc, #668]	@ (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004624:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004628:	d103      	bne.n	8004632 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800462a:	4ba5      	ldr	r3, [pc, #660]	@ (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800462c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800462e:	f001 b9d3 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004636:	f001 b9cf 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800463a:	4ba0      	ldr	r3, [pc, #640]	@ (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0320 	and.w	r3, r3, #32
 8004642:	2b20      	cmp	r3, #32
 8004644:	d118      	bne.n	8004678 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004646:	4b9d      	ldr	r3, [pc, #628]	@ (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d005      	beq.n	800465e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8004652:	4b9a      	ldr	r3, [pc, #616]	@ (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	0e1b      	lsrs	r3, r3, #24
 8004658:	f003 030f 	and.w	r3, r3, #15
 800465c:	e006      	b.n	800466c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800465e:	4b97      	ldr	r3, [pc, #604]	@ (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004660:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004664:	041b      	lsls	r3, r3, #16
 8004666:	0e1b      	lsrs	r3, r3, #24
 8004668:	f003 030f 	and.w	r3, r3, #15
 800466c:	4a95      	ldr	r2, [pc, #596]	@ (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800466e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004672:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004674:	f001 b9b0 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800467c:	f001 b9ac 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 8004680:	2300      	movs	r3, #0
 8004682:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004684:	f001 b9a8 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004688:	e9d7 2300 	ldrd	r2, r3, [r7]
 800468c:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8004690:	430b      	orrs	r3, r1
 8004692:	d17f      	bne.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004694:	4b89      	ldr	r3, [pc, #548]	@ (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004696:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800469a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800469e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80046a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d165      	bne.n	8004772 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80046a6:	4b85      	ldr	r3, [pc, #532]	@ (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80046a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046ac:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80046b0:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 80046b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80046b8:	d034      	beq.n	8004724 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 80046ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046bc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80046c0:	d853      	bhi.n	800476a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80046c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046c8:	d00b      	beq.n	80046e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 80046ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046d0:	d84b      	bhi.n	800476a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80046d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d016      	beq.n	8004706 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 80046d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046de:	d009      	beq.n	80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80046e0:	e043      	b.n	800476a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80046e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7ff f9ec 	bl	8003ac4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80046ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ee:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80046f0:	f001 b972 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80046f4:	f107 0318 	add.w	r3, r7, #24
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff fb4b 	bl	8003d94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004702:	f001 b969 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004706:	4b6d      	ldr	r3, [pc, #436]	@ (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800470e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004712:	d103      	bne.n	800471c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8004714:	4b6a      	ldr	r3, [pc, #424]	@ (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004716:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004718:	f001 b95e 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 800471c:	2300      	movs	r3, #0
 800471e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004720:	f001 b95a 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004724:	4b65      	ldr	r3, [pc, #404]	@ (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0320 	and.w	r3, r3, #32
 800472c:	2b20      	cmp	r3, #32
 800472e:	d118      	bne.n	8004762 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004730:	4b62      	ldr	r3, [pc, #392]	@ (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d005      	beq.n	8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800473c:	4b5f      	ldr	r3, [pc, #380]	@ (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	0e1b      	lsrs	r3, r3, #24
 8004742:	f003 030f 	and.w	r3, r3, #15
 8004746:	e006      	b.n	8004756 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8004748:	4b5c      	ldr	r3, [pc, #368]	@ (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800474a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800474e:	041b      	lsls	r3, r3, #16
 8004750:	0e1b      	lsrs	r3, r3, #24
 8004752:	f003 030f 	and.w	r3, r3, #15
 8004756:	4a5b      	ldr	r2, [pc, #364]	@ (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800475c:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800475e:	f001 b93b 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 8004762:	2300      	movs	r3, #0
 8004764:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004766:	f001 b937 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        default :
        {
          frequency = 0U;
 800476a:	2300      	movs	r3, #0
 800476c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800476e:	f001 b933 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8004772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004774:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004778:	d108      	bne.n	800478c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800477a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800477e:	4618      	mov	r0, r3
 8004780:	f7ff f9a0 	bl	8003ac4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8004784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004786:	637b      	str	r3, [r7, #52]	@ 0x34
 8004788:	f001 b926 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else
    {
      frequency = 0U;
 800478c:	2300      	movs	r3, #0
 800478e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004790:	f001 b922 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8004794:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004798:	1e51      	subs	r1, r2, #1
 800479a:	430b      	orrs	r3, r1
 800479c:	d136      	bne.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800479e:	4b47      	ldr	r3, [pc, #284]	@ (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80047a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80047a4:	f003 0303 	and.w	r3, r3, #3
 80047a8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80047aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d104      	bne.n	80047ba <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80047b0:	f7fe fa1e 	bl	8002bf0 <HAL_RCC_GetPCLK2Freq>
 80047b4:	6378      	str	r0, [r7, #52]	@ 0x34
 80047b6:	f001 b90f 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80047ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d104      	bne.n	80047ca <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80047c0:	f7fe f8e0 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 80047c4:	6378      	str	r0, [r7, #52]	@ 0x34
 80047c6:	f001 b907 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80047ca:	4b3c      	ldr	r3, [pc, #240]	@ (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047d6:	d106      	bne.n	80047e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80047d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d103      	bne.n	80047e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 80047de:	4b3a      	ldr	r3, [pc, #232]	@ (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80047e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80047e2:	f001 b8f9 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80047e6:	4b35      	ldr	r3, [pc, #212]	@ (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80047e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d107      	bne.n	8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80047f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f6:	2b03      	cmp	r3, #3
 80047f8:	d104      	bne.n	8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 80047fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004800:	f001 b8ea 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	637b      	str	r3, [r7, #52]	@ 0x34
 8004808:	f001 b8e6 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800480c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004810:	1e91      	subs	r1, r2, #2
 8004812:	430b      	orrs	r3, r1
 8004814:	d136      	bne.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004816:	4b29      	ldr	r3, [pc, #164]	@ (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800481c:	f003 030c 	and.w	r3, r3, #12
 8004820:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8004822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004824:	2b00      	cmp	r3, #0
 8004826:	d104      	bne.n	8004832 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004828:	f7fe f9ce 	bl	8002bc8 <HAL_RCC_GetPCLK1Freq>
 800482c:	6378      	str	r0, [r7, #52]	@ 0x34
 800482e:	f001 b8d3 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8004832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004834:	2b04      	cmp	r3, #4
 8004836:	d104      	bne.n	8004842 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004838:	f7fe f8a4 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 800483c:	6378      	str	r0, [r7, #52]	@ 0x34
 800483e:	f001 b8cb 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8004842:	4b1e      	ldr	r3, [pc, #120]	@ (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800484a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800484e:	d106      	bne.n	800485e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8004850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004852:	2b08      	cmp	r3, #8
 8004854:	d103      	bne.n	800485e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8004856:	4b1c      	ldr	r3, [pc, #112]	@ (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004858:	637b      	str	r3, [r7, #52]	@ 0x34
 800485a:	f001 b8bd 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800485e:	4b17      	ldr	r3, [pc, #92]	@ (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004860:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b02      	cmp	r3, #2
 800486a:	d107      	bne.n	800487c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800486c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800486e:	2b0c      	cmp	r3, #12
 8004870:	d104      	bne.n	800487c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8004872:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004876:	637b      	str	r3, [r7, #52]	@ 0x34
 8004878:	f001 b8ae 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800487c:	2300      	movs	r3, #0
 800487e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004880:	f001 b8aa 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8004884:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004888:	1f11      	subs	r1, r2, #4
 800488a:	430b      	orrs	r3, r1
 800488c:	d13f      	bne.n	800490e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800488e:	4b0b      	ldr	r3, [pc, #44]	@ (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004894:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004898:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800489a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800489c:	2b00      	cmp	r3, #0
 800489e:	d104      	bne.n	80048aa <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80048a0:	f7fe f992 	bl	8002bc8 <HAL_RCC_GetPCLK1Freq>
 80048a4:	6378      	str	r0, [r7, #52]	@ 0x34
 80048a6:	f001 b897 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80048aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ac:	2b10      	cmp	r3, #16
 80048ae:	d10d      	bne.n	80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80048b0:	f7fe f868 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 80048b4:	6378      	str	r0, [r7, #52]	@ 0x34
 80048b6:	f001 b88f 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 80048ba:	bf00      	nop
 80048bc:	46020c00 	.word	0x46020c00
 80048c0:	02dc6c00 	.word	0x02dc6c00
 80048c4:	0800732c 	.word	0x0800732c
 80048c8:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80048cc:	4ba8      	ldr	r3, [pc, #672]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048d8:	d106      	bne.n	80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 80048da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048dc:	2b20      	cmp	r3, #32
 80048de:	d103      	bne.n	80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 80048e0:	4ba4      	ldr	r3, [pc, #656]	@ (8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80048e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80048e4:	f001 b878 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80048e8:	4ba1      	ldr	r3, [pc, #644]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80048ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d107      	bne.n	8004906 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80048f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f8:	2b30      	cmp	r3, #48	@ 0x30
 80048fa:	d104      	bne.n	8004906 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 80048fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004900:	637b      	str	r3, [r7, #52]	@ 0x34
 8004902:	f001 b869 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8004906:	2300      	movs	r3, #0
 8004908:	637b      	str	r3, [r7, #52]	@ 0x34
 800490a:	f001 b865 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800490e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004912:	f1a2 0108 	sub.w	r1, r2, #8
 8004916:	430b      	orrs	r3, r1
 8004918:	d136      	bne.n	8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800491a:	4b95      	ldr	r3, [pc, #596]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800491c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004920:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004924:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8004926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004928:	2b00      	cmp	r3, #0
 800492a:	d104      	bne.n	8004936 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800492c:	f7fe f94c 	bl	8002bc8 <HAL_RCC_GetPCLK1Freq>
 8004930:	6378      	str	r0, [r7, #52]	@ 0x34
 8004932:	f001 b851 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8004936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004938:	2b40      	cmp	r3, #64	@ 0x40
 800493a:	d104      	bne.n	8004946 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800493c:	f7fe f822 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 8004940:	6378      	str	r0, [r7, #52]	@ 0x34
 8004942:	f001 b849 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8004946:	4b8a      	ldr	r3, [pc, #552]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800494e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004952:	d106      	bne.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8004954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004956:	2b80      	cmp	r3, #128	@ 0x80
 8004958:	d103      	bne.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800495a:	4b86      	ldr	r3, [pc, #536]	@ (8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800495c:	637b      	str	r3, [r7, #52]	@ 0x34
 800495e:	f001 b83b 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8004962:	4b83      	ldr	r3, [pc, #524]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004964:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b02      	cmp	r3, #2
 800496e:	d107      	bne.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8004970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004972:	2bc0      	cmp	r3, #192	@ 0xc0
 8004974:	d104      	bne.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8004976:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800497a:	637b      	str	r3, [r7, #52]	@ 0x34
 800497c:	f001 b82c 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8004980:	2300      	movs	r3, #0
 8004982:	637b      	str	r3, [r7, #52]	@ 0x34
 8004984:	f001 b828 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8004988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800498c:	f1a2 0110 	sub.w	r1, r2, #16
 8004990:	430b      	orrs	r3, r1
 8004992:	d139      	bne.n	8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004994:	4b76      	ldr	r3, [pc, #472]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800499a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800499e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80049a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d104      	bne.n	80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80049a6:	f7fe f90f 	bl	8002bc8 <HAL_RCC_GetPCLK1Freq>
 80049aa:	6378      	str	r0, [r7, #52]	@ 0x34
 80049ac:	f001 b814 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80049b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049b6:	d104      	bne.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80049b8:	f7fd ffe4 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 80049bc:	6378      	str	r0, [r7, #52]	@ 0x34
 80049be:	f001 b80b 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80049c2:	4b6b      	ldr	r3, [pc, #428]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049ce:	d107      	bne.n	80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 80049d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049d6:	d103      	bne.n	80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 80049d8:	4b66      	ldr	r3, [pc, #408]	@ (8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80049da:	637b      	str	r3, [r7, #52]	@ 0x34
 80049dc:	f000 bffc 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80049e0:	4b63      	ldr	r3, [pc, #396]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80049e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d108      	bne.n	8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 80049ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049f4:	d104      	bne.n	8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 80049f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80049fc:	f000 bfec 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8004a00:	2300      	movs	r3, #0
 8004a02:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a04:	f000 bfe8 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 8004a08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a0c:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8004a10:	430b      	orrs	r3, r1
 8004a12:	d139      	bne.n	8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8004a14:	4b56      	ldr	r3, [pc, #344]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a16:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a1a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a1e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8004a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d104      	bne.n	8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004a26:	f7fe f8cf 	bl	8002bc8 <HAL_RCC_GetPCLK1Freq>
 8004a2a:	6378      	str	r0, [r7, #52]	@ 0x34
 8004a2c:	f000 bfd4 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 8004a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a36:	d104      	bne.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004a38:	f7fd ffa4 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 8004a3c:	6378      	str	r0, [r7, #52]	@ 0x34
 8004a3e:	f000 bfcb 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8004a42:	4b4b      	ldr	r3, [pc, #300]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a4e:	d107      	bne.n	8004a60 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8004a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a56:	d103      	bne.n	8004a60 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 8004a58:	4b46      	ldr	r3, [pc, #280]	@ (8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004a5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a5c:	f000 bfbc 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8004a60:	4b43      	ldr	r3, [pc, #268]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d108      	bne.n	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 8004a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a70:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004a74:	d104      	bne.n	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 8004a76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a7c:	f000 bfac 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8004a80:	2300      	movs	r3, #0
 8004a82:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a84:	f000 bfa8 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8004a88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a8c:	f1a2 0120 	sub.w	r1, r2, #32
 8004a90:	430b      	orrs	r3, r1
 8004a92:	d158      	bne.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004a94:	4b36      	ldr	r3, [pc, #216]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d104      	bne.n	8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8004aa6:	f7fe f8b7 	bl	8002c18 <HAL_RCC_GetPCLK3Freq>
 8004aaa:	6378      	str	r0, [r7, #52]	@ 0x34
 8004aac:	f000 bf94 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8004ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d104      	bne.n	8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004ab6:	f7fd ff65 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 8004aba:	6378      	str	r0, [r7, #52]	@ 0x34
 8004abc:	f000 bf8c 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004ac0:	4b2b      	ldr	r3, [pc, #172]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ac8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004acc:	d106      	bne.n	8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8004ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d103      	bne.n	8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 8004ad4:	4b27      	ldr	r3, [pc, #156]	@ (8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004ad6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ad8:	f000 bf7e 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004adc:	4b24      	ldr	r3, [pc, #144]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004ade:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d107      	bne.n	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8004aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aec:	2b03      	cmp	r3, #3
 8004aee:	d104      	bne.n	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 8004af0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004af4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004af6:	f000 bf6f 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8004afa:	4b1d      	ldr	r3, [pc, #116]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0320 	and.w	r3, r3, #32
 8004b02:	2b20      	cmp	r3, #32
 8004b04:	d11b      	bne.n	8004b3e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8004b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b08:	2b04      	cmp	r3, #4
 8004b0a:	d118      	bne.n	8004b3e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004b0c:	4b18      	ldr	r3, [pc, #96]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d005      	beq.n	8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 8004b18:	4b15      	ldr	r3, [pc, #84]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	0e1b      	lsrs	r3, r3, #24
 8004b1e:	f003 030f 	and.w	r3, r3, #15
 8004b22:	e006      	b.n	8004b32 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8004b24:	4b12      	ldr	r3, [pc, #72]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004b2a:	041b      	lsls	r3, r3, #16
 8004b2c:	0e1b      	lsrs	r3, r3, #24
 8004b2e:	f003 030f 	and.w	r3, r3, #15
 8004b32:	4a11      	ldr	r2, [pc, #68]	@ (8004b78 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b38:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b3a:	f000 bf4d 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b42:	f000 bf49 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8004b46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b4a:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8004b4e:	430b      	orrs	r3, r1
 8004b50:	d172      	bne.n	8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004b52:	4b07      	ldr	r3, [pc, #28]	@ (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b58:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004b5c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b64:	d10a      	bne.n	8004b7c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004b66:	f7fd ff0d 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 8004b6a:	6378      	str	r0, [r7, #52]	@ 0x34
 8004b6c:	f000 bf34 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8004b70:	46020c00 	.word	0x46020c00
 8004b74:	00f42400 	.word	0x00f42400
 8004b78:	0800732c 	.word	0x0800732c
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8004b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b82:	d108      	bne.n	8004b96 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b84:	f107 0318 	add.w	r3, r7, #24
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7ff f903 	bl	8003d94 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8004b8e:	6a3b      	ldr	r3, [r7, #32]
 8004b90:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b92:	f000 bf21 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d104      	bne.n	8004ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8004b9c:	f7fd fffa 	bl	8002b94 <HAL_RCC_GetHCLKFreq>
 8004ba0:	6378      	str	r0, [r7, #52]	@ 0x34
 8004ba2:	f000 bf19 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8004ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004bac:	d122      	bne.n	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004bae:	4bb0      	ldr	r3, [pc, #704]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0320 	and.w	r3, r3, #32
 8004bb6:	2b20      	cmp	r3, #32
 8004bb8:	d118      	bne.n	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004bba:	4bad      	ldr	r3, [pc, #692]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d005      	beq.n	8004bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 8004bc6:	4baa      	ldr	r3, [pc, #680]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	0e1b      	lsrs	r3, r3, #24
 8004bcc:	f003 030f 	and.w	r3, r3, #15
 8004bd0:	e006      	b.n	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8004bd2:	4ba7      	ldr	r3, [pc, #668]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004bd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004bd8:	041b      	lsls	r3, r3, #16
 8004bda:	0e1b      	lsrs	r3, r3, #24
 8004bdc:	f003 030f 	and.w	r3, r3, #15
 8004be0:	4aa4      	ldr	r2, [pc, #656]	@ (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8004be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004be6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004be8:	f000 bef6 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bf0:	f000 bef2 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004bf4:	4b9e      	ldr	r3, [pc, #632]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c00:	d107      	bne.n	8004c12 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8004c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c04:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c08:	d103      	bne.n	8004c12 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 8004c0a:	4b9b      	ldr	r3, [pc, #620]	@ (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8004c0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c0e:	f000 bee3 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004c12:	4b97      	ldr	r3, [pc, #604]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c1e:	d107      	bne.n	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8004c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c26:	d103      	bne.n	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 8004c28:	4b93      	ldr	r3, [pc, #588]	@ (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8004c2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c2c:	f000 bed4 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c34:	f000 bed0 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8004c38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c3c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8004c40:	430b      	orrs	r3, r1
 8004c42:	d158      	bne.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8004c44:	4b8a      	ldr	r3, [pc, #552]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004c46:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c4a:	f003 0307 	and.w	r3, r3, #7
 8004c4e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c52:	2b04      	cmp	r3, #4
 8004c54:	d84b      	bhi.n	8004cee <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 8004c56:	a201      	add	r2, pc, #4	@ (adr r2, 8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 8004c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5c:	08004c95 	.word	0x08004c95
 8004c60:	08004c71 	.word	0x08004c71
 8004c64:	08004c83 	.word	0x08004c83
 8004c68:	08004c9f 	.word	0x08004c9f
 8004c6c:	08004ca9 	.word	0x08004ca9
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7fe ff25 	bl	8003ac4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c7e:	f000 beab 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c82:	f107 030c 	add.w	r3, r7, #12
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7ff f9ec 	bl	8004064 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c90:	f000 bea2 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004c94:	f7fd ff7e 	bl	8002b94 <HAL_RCC_GetHCLKFreq>
 8004c98:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004c9a:	f000 be9d 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004c9e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004ca2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ca4:	f000 be98 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004ca8:	4b71      	ldr	r3, [pc, #452]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0320 	and.w	r3, r3, #32
 8004cb0:	2b20      	cmp	r3, #32
 8004cb2:	d118      	bne.n	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004cb4:	4b6e      	ldr	r3, [pc, #440]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d005      	beq.n	8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8004cc0:	4b6b      	ldr	r3, [pc, #428]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	0e1b      	lsrs	r3, r3, #24
 8004cc6:	f003 030f 	and.w	r3, r3, #15
 8004cca:	e006      	b.n	8004cda <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8004ccc:	4b68      	ldr	r3, [pc, #416]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004cce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004cd2:	041b      	lsls	r3, r3, #16
 8004cd4:	0e1b      	lsrs	r3, r3, #24
 8004cd6:	f003 030f 	and.w	r3, r3, #15
 8004cda:	4a66      	ldr	r2, [pc, #408]	@ (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8004cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ce0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004ce2:	f000 be79 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004cea:	f000 be75 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004cf2:	f000 be71 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8004cf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cfa:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8004cfe:	430b      	orrs	r3, r1
 8004d00:	d167      	bne.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8004d02:	4b5b      	ldr	r3, [pc, #364]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004d04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d08:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8004d0c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d10:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d14:	d036      	beq.n	8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8004d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d1c:	d855      	bhi.n	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8004d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d20:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004d24:	d029      	beq.n	8004d7a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8004d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d28:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004d2c:	d84d      	bhi.n	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8004d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d34:	d013      	beq.n	8004d5e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8004d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d3c:	d845      	bhi.n	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8004d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d015      	beq.n	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 8004d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d4a:	d13e      	bne.n	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7fe feb7 	bl	8003ac4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d58:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d5a:	f000 be3d 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d5e:	f107 030c 	add.w	r3, r7, #12
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7ff f97e 	bl	8004064 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d6c:	f000 be34 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004d70:	f7fd ff10 	bl	8002b94 <HAL_RCC_GetHCLKFreq>
 8004d74:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004d76:	f000 be2f 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004d7a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004d7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d80:	f000 be2a 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004d84:	4b3a      	ldr	r3, [pc, #232]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0320 	and.w	r3, r3, #32
 8004d8c:	2b20      	cmp	r3, #32
 8004d8e:	d118      	bne.n	8004dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004d90:	4b37      	ldr	r3, [pc, #220]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d005      	beq.n	8004da8 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8004d9c:	4b34      	ldr	r3, [pc, #208]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	0e1b      	lsrs	r3, r3, #24
 8004da2:	f003 030f 	and.w	r3, r3, #15
 8004da6:	e006      	b.n	8004db6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8004da8:	4b31      	ldr	r3, [pc, #196]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004daa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004dae:	041b      	lsls	r3, r3, #16
 8004db0:	0e1b      	lsrs	r3, r3, #24
 8004db2:	f003 030f 	and.w	r3, r3, #15
 8004db6:	4a2f      	ldr	r2, [pc, #188]	@ (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8004db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dbc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004dbe:	f000 be0b 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004dc6:	f000 be07 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004dce:	f000 be03 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8004dd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dd6:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8004dda:	430b      	orrs	r3, r1
 8004ddc:	d152      	bne.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004dde:	4b24      	ldr	r3, [pc, #144]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004de4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004de8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d104      	bne.n	8004dfa <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004df0:	f7fd feea 	bl	8002bc8 <HAL_RCC_GetPCLK1Freq>
 8004df4:	6378      	str	r0, [r7, #52]	@ 0x34
 8004df6:	f000 bdef 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8004dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e00:	d104      	bne.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004e02:	f7fd fdbf 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 8004e06:	6378      	str	r0, [r7, #52]	@ 0x34
 8004e08:	f000 bde6 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004e0c:	4b18      	ldr	r3, [pc, #96]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e18:	d107      	bne.n	8004e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 8004e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e20:	d103      	bne.n	8004e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 8004e22:	4b15      	ldr	r3, [pc, #84]	@ (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8004e24:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e26:	f000 bdd7 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8004e2a:	4b11      	ldr	r3, [pc, #68]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0320 	and.w	r3, r3, #32
 8004e32:	2b20      	cmp	r3, #32
 8004e34:	d122      	bne.n	8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 8004e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e38:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e3c:	d11e      	bne.n	8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d005      	beq.n	8004e56 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 8004e4a:	4b09      	ldr	r3, [pc, #36]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	0e1b      	lsrs	r3, r3, #24
 8004e50:	f003 030f 	and.w	r3, r3, #15
 8004e54:	e006      	b.n	8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 8004e56:	4b06      	ldr	r3, [pc, #24]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004e58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004e5c:	041b      	lsls	r3, r3, #16
 8004e5e:	0e1b      	lsrs	r3, r3, #24
 8004e60:	f003 030f 	and.w	r3, r3, #15
 8004e64:	4a03      	ldr	r2, [pc, #12]	@ (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8004e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e6c:	f000 bdb4 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8004e70:	46020c00 	.word	0x46020c00
 8004e74:	0800732c 	.word	0x0800732c
 8004e78:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e80:	f000 bdaa 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8004e84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e88:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8004e8c:	430b      	orrs	r3, r1
 8004e8e:	d14c      	bne.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004e90:	4ba8      	ldr	r3, [pc, #672]	@ (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e96:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004e9a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d104      	bne.n	8004eac <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004ea2:	f7fd fe91 	bl	8002bc8 <HAL_RCC_GetPCLK1Freq>
 8004ea6:	6378      	str	r0, [r7, #52]	@ 0x34
 8004ea8:	f000 bd96 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8004eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eb2:	d104      	bne.n	8004ebe <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004eb4:	f7fd fd66 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 8004eb8:	6378      	str	r0, [r7, #52]	@ 0x34
 8004eba:	f000 bd8d 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004ebe:	4b9d      	ldr	r3, [pc, #628]	@ (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ec6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eca:	d107      	bne.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8004ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ece:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ed2:	d103      	bne.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 8004ed4:	4b98      	ldr	r3, [pc, #608]	@ (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8004ed6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ed8:	f000 bd7e 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8004edc:	4b95      	ldr	r3, [pc, #596]	@ (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0320 	and.w	r3, r3, #32
 8004ee4:	2b20      	cmp	r3, #32
 8004ee6:	d11c      	bne.n	8004f22 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 8004ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004eee:	d118      	bne.n	8004f22 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004ef0:	4b90      	ldr	r3, [pc, #576]	@ (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d005      	beq.n	8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8004efc:	4b8d      	ldr	r3, [pc, #564]	@ (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	0e1b      	lsrs	r3, r3, #24
 8004f02:	f003 030f 	and.w	r3, r3, #15
 8004f06:	e006      	b.n	8004f16 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 8004f08:	4b8a      	ldr	r3, [pc, #552]	@ (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004f0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004f0e:	041b      	lsls	r3, r3, #16
 8004f10:	0e1b      	lsrs	r3, r3, #24
 8004f12:	f003 030f 	and.w	r3, r3, #15
 8004f16:	4a89      	ldr	r2, [pc, #548]	@ (800513c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8004f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f1e:	f000 bd5b 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8004f22:	2300      	movs	r3, #0
 8004f24:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f26:	f000 bd57 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8004f2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f2e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8004f32:	430b      	orrs	r3, r1
 8004f34:	d158      	bne.n	8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004f36:	4b7f      	ldr	r3, [pc, #508]	@ (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004f38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f3c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004f40:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f44:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f46:	d028      	beq.n	8004f9a <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 8004f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f4c:	d848      	bhi.n	8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8004f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f50:	2b80      	cmp	r3, #128	@ 0x80
 8004f52:	d00e      	beq.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8004f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f56:	2b80      	cmp	r3, #128	@ 0x80
 8004f58:	d842      	bhi.n	8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8004f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d003      	beq.n	8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 8004f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f62:	2b40      	cmp	r3, #64	@ 0x40
 8004f64:	d014      	beq.n	8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8004f66:	e03b      	b.n	8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8004f68:	f7fd fe56 	bl	8002c18 <HAL_RCC_GetPCLK3Freq>
 8004f6c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004f6e:	f000 bd33 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f72:	4b70      	ldr	r3, [pc, #448]	@ (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f7e:	d103      	bne.n	8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 8004f80:	4b6d      	ldr	r3, [pc, #436]	@ (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8004f82:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004f84:	f000 bd28 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f8c:	f000 bd24 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8004f90:	f7fd fcf8 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 8004f94:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004f96:	f000 bd1f 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004f9a:	4b66      	ldr	r3, [pc, #408]	@ (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0320 	and.w	r3, r3, #32
 8004fa2:	2b20      	cmp	r3, #32
 8004fa4:	d118      	bne.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004fa6:	4b63      	ldr	r3, [pc, #396]	@ (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d005      	beq.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 8004fb2:	4b60      	ldr	r3, [pc, #384]	@ (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	0e1b      	lsrs	r3, r3, #24
 8004fb8:	f003 030f 	and.w	r3, r3, #15
 8004fbc:	e006      	b.n	8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 8004fbe:	4b5d      	ldr	r3, [pc, #372]	@ (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004fc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004fc4:	041b      	lsls	r3, r3, #16
 8004fc6:	0e1b      	lsrs	r3, r3, #24
 8004fc8:	f003 030f 	and.w	r3, r3, #15
 8004fcc:	4a5b      	ldr	r2, [pc, #364]	@ (800513c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8004fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fd2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004fd4:	f000 bd00 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004fdc:	f000 bcfc 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      default:
      {
        frequency = 0U;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004fe4:	f000 bcf8 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8004fe8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fec:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8004ff0:	430b      	orrs	r3, r1
 8004ff2:	d14c      	bne.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004ff4:	4b4f      	ldr	r3, [pc, #316]	@ (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ffa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004ffe:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8005000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005002:	2b00      	cmp	r3, #0
 8005004:	d104      	bne.n	8005010 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005006:	f7fd fddf 	bl	8002bc8 <HAL_RCC_GetPCLK1Freq>
 800500a:	6378      	str	r0, [r7, #52]	@ 0x34
 800500c:	f000 bce4 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8005010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005012:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005016:	d104      	bne.n	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005018:	f7fd fcb4 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 800501c:	6378      	str	r0, [r7, #52]	@ 0x34
 800501e:	f000 bcdb 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8005022:	4b44      	ldr	r3, [pc, #272]	@ (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800502a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800502e:	d107      	bne.n	8005040 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 8005030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005032:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005036:	d103      	bne.n	8005040 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 8005038:	4b3f      	ldr	r3, [pc, #252]	@ (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800503a:	637b      	str	r3, [r7, #52]	@ 0x34
 800503c:	f000 bccc 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8005040:	4b3c      	ldr	r3, [pc, #240]	@ (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0320 	and.w	r3, r3, #32
 8005048:	2b20      	cmp	r3, #32
 800504a:	d11c      	bne.n	8005086 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800504c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005052:	d118      	bne.n	8005086 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005054:	4b37      	ldr	r3, [pc, #220]	@ (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d005      	beq.n	800506c <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8005060:	4b34      	ldr	r3, [pc, #208]	@ (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	0e1b      	lsrs	r3, r3, #24
 8005066:	f003 030f 	and.w	r3, r3, #15
 800506a:	e006      	b.n	800507a <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800506c:	4b31      	ldr	r3, [pc, #196]	@ (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800506e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005072:	041b      	lsls	r3, r3, #16
 8005074:	0e1b      	lsrs	r3, r3, #24
 8005076:	f003 030f 	and.w	r3, r3, #15
 800507a:	4a30      	ldr	r2, [pc, #192]	@ (800513c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800507c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005080:	637b      	str	r3, [r7, #52]	@ 0x34
 8005082:	f000 bca9 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8005086:	2300      	movs	r3, #0
 8005088:	637b      	str	r3, [r7, #52]	@ 0x34
 800508a:	f000 bca5 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800508e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005092:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 8005096:	430b      	orrs	r3, r1
 8005098:	d152      	bne.n	8005140 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800509a:	4b26      	ldr	r3, [pc, #152]	@ (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800509c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80050a0:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80050a4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 80050a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d104      	bne.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80050ac:	f7fd fd8c 	bl	8002bc8 <HAL_RCC_GetPCLK1Freq>
 80050b0:	6378      	str	r0, [r7, #52]	@ 0x34
 80050b2:	f000 bc91 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 80050b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050bc:	d104      	bne.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80050be:	f7fd fc61 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 80050c2:	6378      	str	r0, [r7, #52]	@ 0x34
 80050c4:	f000 bc88 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 80050c8:	4b1a      	ldr	r3, [pc, #104]	@ (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050d4:	d107      	bne.n	80050e6 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 80050d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050dc:	d103      	bne.n	80050e6 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 80050de:	4b16      	ldr	r3, [pc, #88]	@ (8005138 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80050e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80050e2:	f000 bc79 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 80050e6:	4b13      	ldr	r3, [pc, #76]	@ (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0320 	and.w	r3, r3, #32
 80050ee:	2b20      	cmp	r3, #32
 80050f0:	d11c      	bne.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 80050f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80050f8:	d118      	bne.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80050fa:	4b0e      	ldr	r3, [pc, #56]	@ (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d005      	beq.n	8005112 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 8005106:	4b0b      	ldr	r3, [pc, #44]	@ (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	0e1b      	lsrs	r3, r3, #24
 800510c:	f003 030f 	and.w	r3, r3, #15
 8005110:	e006      	b.n	8005120 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 8005112:	4b08      	ldr	r3, [pc, #32]	@ (8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005114:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005118:	041b      	lsls	r3, r3, #16
 800511a:	0e1b      	lsrs	r3, r3, #24
 800511c:	f003 030f 	and.w	r3, r3, #15
 8005120:	4a06      	ldr	r2, [pc, #24]	@ (800513c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8005122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005126:	637b      	str	r3, [r7, #52]	@ 0x34
 8005128:	f000 bc56 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800512c:	2300      	movs	r3, #0
 800512e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005130:	f000 bc52 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8005134:	46020c00 	.word	0x46020c00
 8005138:	00f42400 	.word	0x00f42400
 800513c:	0800732c 	.word	0x0800732c
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 8005140:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005144:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 8005148:	430b      	orrs	r3, r1
 800514a:	d14a      	bne.n	80051e2 <HAL_RCCEx_GetPeriphCLKFreq+0xeae>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800514c:	4ba5      	ldr	r3, [pc, #660]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800514e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005152:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8005156:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 8005158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800515a:	2b00      	cmp	r3, #0
 800515c:	d104      	bne.n	8005168 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800515e:	f7fd fd33 	bl	8002bc8 <HAL_RCC_GetPCLK1Freq>
 8005162:	6378      	str	r0, [r7, #52]	@ 0x34
 8005164:	f000 bc38 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 8005168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800516a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800516e:	d104      	bne.n	800517a <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005170:	f7fd fc08 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 8005174:	6378      	str	r0, [r7, #52]	@ 0x34
 8005176:	f000 bc2f 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800517a:	4b9a      	ldr	r3, [pc, #616]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005182:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005186:	d107      	bne.n	8005198 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800518a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800518e:	d103      	bne.n	8005198 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 8005190:	4b95      	ldr	r3, [pc, #596]	@ (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8005192:	637b      	str	r3, [r7, #52]	@ 0x34
 8005194:	f000 bc20 	b.w	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 8005198:	4b92      	ldr	r3, [pc, #584]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0320 	and.w	r3, r3, #32
 80051a0:	2b20      	cmp	r3, #32
 80051a2:	d11b      	bne.n	80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 80051a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80051aa:	d117      	bne.n	80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80051ac:	4b8d      	ldr	r3, [pc, #564]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d005      	beq.n	80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 80051b8:	4b8a      	ldr	r3, [pc, #552]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	0e1b      	lsrs	r3, r3, #24
 80051be:	f003 030f 	and.w	r3, r3, #15
 80051c2:	e006      	b.n	80051d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 80051c4:	4b87      	ldr	r3, [pc, #540]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80051c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80051ca:	041b      	lsls	r3, r3, #16
 80051cc:	0e1b      	lsrs	r3, r3, #24
 80051ce:	f003 030f 	and.w	r3, r3, #15
 80051d2:	4a86      	ldr	r2, [pc, #536]	@ (80053ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 80051d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80051da:	e3fd      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 80051dc:	2300      	movs	r3, #0
 80051de:	637b      	str	r3, [r7, #52]	@ 0x34
 80051e0:	e3fa      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80051e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051e6:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80051ea:	430b      	orrs	r3, r1
 80051ec:	d164      	bne.n	80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf84>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80051ee:	4b7d      	ldr	r3, [pc, #500]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80051f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80051f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051f8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80051fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d120      	bne.n	8005242 <HAL_RCCEx_GetPeriphCLKFreq+0xf0e>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005200:	4b78      	ldr	r3, [pc, #480]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0320 	and.w	r3, r3, #32
 8005208:	2b20      	cmp	r3, #32
 800520a:	d117      	bne.n	800523c <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800520c:	4b75      	ldr	r3, [pc, #468]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d005      	beq.n	8005224 <HAL_RCCEx_GetPeriphCLKFreq+0xef0>
 8005218:	4b72      	ldr	r3, [pc, #456]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	0e1b      	lsrs	r3, r3, #24
 800521e:	f003 030f 	and.w	r3, r3, #15
 8005222:	e006      	b.n	8005232 <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
 8005224:	4b6f      	ldr	r3, [pc, #444]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005226:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800522a:	041b      	lsls	r3, r3, #16
 800522c:	0e1b      	lsrs	r3, r3, #24
 800522e:	f003 030f 	and.w	r3, r3, #15
 8005232:	4a6e      	ldr	r2, [pc, #440]	@ (80053ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8005234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005238:	637b      	str	r3, [r7, #52]	@ 0x34
 800523a:	e3cd      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 800523c:	2300      	movs	r3, #0
 800523e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005240:	e3ca      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8005242:	4b68      	ldr	r3, [pc, #416]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005244:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005248:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800524c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005250:	d112      	bne.n	8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
 8005252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005254:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005258:	d10e      	bne.n	8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800525a:	4b62      	ldr	r3, [pc, #392]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800525c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005260:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005264:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005268:	d102      	bne.n	8005270 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
      {
        frequency = LSI_VALUE / 128U;
 800526a:	23fa      	movs	r3, #250	@ 0xfa
 800526c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800526e:	e3b3      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 8005270:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005274:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005276:	e3af      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8005278:	4b5a      	ldr	r3, [pc, #360]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005280:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005284:	d106      	bne.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8005286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005288:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800528c:	d102      	bne.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
    {
      frequency = HSI_VALUE;
 800528e:	4b56      	ldr	r3, [pc, #344]	@ (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8005290:	637b      	str	r3, [r7, #52]	@ 0x34
 8005292:	e3a1      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8005294:	4b53      	ldr	r3, [pc, #332]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005296:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d107      	bne.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
 80052a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052a8:	d103      	bne.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
    {
      frequency = LSE_VALUE;
 80052aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80052b0:	e392      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80052b6:	e38f      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80052b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052bc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80052c0:	430b      	orrs	r3, r1
 80052c2:	d164      	bne.n	800538e <HAL_RCCEx_GetPeriphCLKFreq+0x105a>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80052c4:	4b47      	ldr	r3, [pc, #284]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80052c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80052ca:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80052ce:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80052d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d120      	bne.n	8005318 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80052d6:	4b43      	ldr	r3, [pc, #268]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0320 	and.w	r3, r3, #32
 80052de:	2b20      	cmp	r3, #32
 80052e0:	d117      	bne.n	8005312 <HAL_RCCEx_GetPeriphCLKFreq+0xfde>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80052e2:	4b40      	ldr	r3, [pc, #256]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d005      	beq.n	80052fa <HAL_RCCEx_GetPeriphCLKFreq+0xfc6>
 80052ee:	4b3d      	ldr	r3, [pc, #244]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	0e1b      	lsrs	r3, r3, #24
 80052f4:	f003 030f 	and.w	r3, r3, #15
 80052f8:	e006      	b.n	8005308 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 80052fa:	4b3a      	ldr	r3, [pc, #232]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80052fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005300:	041b      	lsls	r3, r3, #16
 8005302:	0e1b      	lsrs	r3, r3, #24
 8005304:	f003 030f 	and.w	r3, r3, #15
 8005308:	4a38      	ldr	r2, [pc, #224]	@ (80053ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800530a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800530e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005310:	e362      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 8005312:	2300      	movs	r3, #0
 8005314:	637b      	str	r3, [r7, #52]	@ 0x34
 8005316:	e35f      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8005318:	4b32      	ldr	r3, [pc, #200]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800531a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800531e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005322:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005326:	d112      	bne.n	800534e <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
 8005328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800532a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800532e:	d10e      	bne.n	800534e <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005330:	4b2c      	ldr	r3, [pc, #176]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005332:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800533a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800533e:	d102      	bne.n	8005346 <HAL_RCCEx_GetPeriphCLKFreq+0x1012>
      {
        frequency = LSI_VALUE / 128U;
 8005340:	23fa      	movs	r3, #250	@ 0xfa
 8005342:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005344:	e348      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 8005346:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800534a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800534c:	e344      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800534e:	4b25      	ldr	r3, [pc, #148]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005356:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800535a:	d106      	bne.n	800536a <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
 800535c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800535e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005362:	d102      	bne.n	800536a <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
    {
      frequency = HSI_VALUE;
 8005364:	4b20      	ldr	r3, [pc, #128]	@ (80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8005366:	637b      	str	r3, [r7, #52]	@ 0x34
 8005368:	e336      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800536a:	4b1e      	ldr	r3, [pc, #120]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800536c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005370:	f003 0302 	and.w	r3, r3, #2
 8005374:	2b02      	cmp	r3, #2
 8005376:	d107      	bne.n	8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
 8005378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800537a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800537e:	d103      	bne.n	8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
    {
      frequency = LSE_VALUE;
 8005380:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005384:	637b      	str	r3, [r7, #52]	@ 0x34
 8005386:	e327      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8005388:	2300      	movs	r3, #0
 800538a:	637b      	str	r3, [r7, #52]	@ 0x34
 800538c:	e324      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800538e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005392:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005396:	430b      	orrs	r3, r1
 8005398:	d14e      	bne.n	8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x1104>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800539a:	4b12      	ldr	r3, [pc, #72]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800539c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053a0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80053a4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80053a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d103      	bne.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1080>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80053ac:	f7fd fc0c 	bl	8002bc8 <HAL_RCC_GetPCLK1Freq>
 80053b0:	6378      	str	r0, [r7, #52]	@ 0x34
 80053b2:	e311      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80053b4:	4b0b      	ldr	r3, [pc, #44]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80053b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053c2:	d119      	bne.n	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 80053c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80053ca:	d115      	bne.n	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80053cc:	4b05      	ldr	r3, [pc, #20]	@ (80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80053ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053da:	d109      	bne.n	80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>
      {
        frequency = LSI_VALUE / 128U;
 80053dc:	23fa      	movs	r3, #250	@ 0xfa
 80053de:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80053e0:	e2fa      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 80053e2:	bf00      	nop
 80053e4:	46020c00 	.word	0x46020c00
 80053e8:	00f42400 	.word	0x00f42400
 80053ec:	0800732c 	.word	0x0800732c
      }
      else
      {
        frequency = LSI_VALUE;
 80053f0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80053f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80053f6:	e2ef      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80053f8:	4ba8      	ldr	r3, [pc, #672]	@ (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005400:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005404:	d106      	bne.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
 8005406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005408:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800540c:	d102      	bne.n	8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
    {
      frequency = HSI_VALUE;
 800540e:	4ba4      	ldr	r3, [pc, #656]	@ (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8005410:	637b      	str	r3, [r7, #52]	@ 0x34
 8005412:	e2e1      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8005414:	4ba1      	ldr	r3, [pc, #644]	@ (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005416:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	2b02      	cmp	r3, #2
 8005420:	d107      	bne.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
 8005422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005424:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005428:	d103      	bne.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
    {
      frequency = LSE_VALUE;
 800542a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800542e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005430:	e2d2      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8005432:	2300      	movs	r3, #0
 8005434:	637b      	str	r3, [r7, #52]	@ 0x34
 8005436:	e2cf      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8005438:	e9d7 2300 	ldrd	r2, r3, [r7]
 800543c:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8005440:	430b      	orrs	r3, r1
 8005442:	d12d      	bne.n	80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8005444:	4b95      	ldr	r3, [pc, #596]	@ (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800544a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800544e:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8005450:	4b92      	ldr	r3, [pc, #584]	@ (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005458:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800545c:	d105      	bne.n	800546a <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
 800545e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005460:	2b00      	cmp	r3, #0
 8005462:	d102      	bne.n	800546a <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
    {
      frequency = HSE_VALUE;
 8005464:	4b8e      	ldr	r3, [pc, #568]	@ (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8005466:	637b      	str	r3, [r7, #52]	@ 0x34
 8005468:	e2b6      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800546a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005470:	d107      	bne.n	8005482 <HAL_RCCEx_GetPeriphCLKFreq+0x114e>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005472:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005476:	4618      	mov	r0, r3
 8005478:	f7fe fb24 	bl	8003ac4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800547c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800547e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005480:	e2aa      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8005482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005484:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005488:	d107      	bne.n	800549a <HAL_RCCEx_GetPeriphCLKFreq+0x1166>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800548a:	f107 0318 	add.w	r3, r7, #24
 800548e:	4618      	mov	r0, r3
 8005490:	f7fe fc80 	bl	8003d94 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	637b      	str	r3, [r7, #52]	@ 0x34
 8005498:	e29e      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800549a:	2300      	movs	r3, #0
 800549c:	637b      	str	r3, [r7, #52]	@ 0x34
 800549e:	e29b      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80054a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054a4:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 80054a8:	430b      	orrs	r3, r1
 80054aa:	d156      	bne.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80054ac:	4b7b      	ldr	r3, [pc, #492]	@ (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80054ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80054b2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80054b6:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80054b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80054be:	d028      	beq.n	8005512 <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
 80054c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80054c6:	d845      	bhi.n	8005554 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 80054c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054ce:	d013      	beq.n	80054f8 <HAL_RCCEx_GetPeriphCLKFreq+0x11c4>
 80054d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054d6:	d83d      	bhi.n	8005554 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 80054d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d004      	beq.n	80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x11b4>
 80054de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054e4:	d004      	beq.n	80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x11bc>
 80054e6:	e035      	b.n	8005554 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80054e8:	f7fd fb82 	bl	8002bf0 <HAL_RCC_GetPCLK2Freq>
 80054ec:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80054ee:	e273      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80054f0:	f7fd fa48 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 80054f4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80054f6:	e26f      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80054f8:	4b68      	ldr	r3, [pc, #416]	@ (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005500:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005504:	d102      	bne.n	800550c <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        {
          frequency = HSI_VALUE;
 8005506:	4b66      	ldr	r3, [pc, #408]	@ (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8005508:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800550a:	e265      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800550c:	2300      	movs	r3, #0
 800550e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005510:	e262      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005512:	4b62      	ldr	r3, [pc, #392]	@ (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	2b20      	cmp	r3, #32
 800551c:	d117      	bne.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0x121a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800551e:	4b5f      	ldr	r3, [pc, #380]	@ (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d005      	beq.n	8005536 <HAL_RCCEx_GetPeriphCLKFreq+0x1202>
 800552a:	4b5c      	ldr	r3, [pc, #368]	@ (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	0e1b      	lsrs	r3, r3, #24
 8005530:	f003 030f 	and.w	r3, r3, #15
 8005534:	e006      	b.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x1210>
 8005536:	4b59      	ldr	r3, [pc, #356]	@ (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005538:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800553c:	041b      	lsls	r3, r3, #16
 800553e:	0e1b      	lsrs	r3, r3, #24
 8005540:	f003 030f 	and.w	r3, r3, #15
 8005544:	4a57      	ldr	r2, [pc, #348]	@ (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8005546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800554a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800554c:	e244      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800554e:	2300      	movs	r3, #0
 8005550:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005552:	e241      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8005554:	2300      	movs	r3, #0
 8005556:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005558:	e23e      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800555a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800555e:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8005562:	430b      	orrs	r3, r1
 8005564:	d156      	bne.n	8005614 <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005566:	4b4d      	ldr	r3, [pc, #308]	@ (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800556c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005570:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8005572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005574:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005578:	d028      	beq.n	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x1298>
 800557a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005580:	d845      	bhi.n	800560e <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 8005582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005584:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005588:	d013      	beq.n	80055b2 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 800558a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800558c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005590:	d83d      	bhi.n	800560e <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 8005592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005594:	2b00      	cmp	r3, #0
 8005596:	d004      	beq.n	80055a2 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8005598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800559e:	d004      	beq.n	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 80055a0:	e035      	b.n	800560e <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80055a2:	f7fd fb11 	bl	8002bc8 <HAL_RCC_GetPCLK1Freq>
 80055a6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80055a8:	e216      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80055aa:	f7fd f9eb 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 80055ae:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80055b0:	e212      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80055b2:	4b3a      	ldr	r3, [pc, #232]	@ (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055be:	d102      	bne.n	80055c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
        {
          frequency = HSI_VALUE;
 80055c0:	4b37      	ldr	r3, [pc, #220]	@ (80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80055c2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80055c4:	e208      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80055c6:	2300      	movs	r3, #0
 80055c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80055ca:	e205      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80055cc:	4b33      	ldr	r3, [pc, #204]	@ (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0320 	and.w	r3, r3, #32
 80055d4:	2b20      	cmp	r3, #32
 80055d6:	d117      	bne.n	8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x12d4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80055d8:	4b30      	ldr	r3, [pc, #192]	@ (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d005      	beq.n	80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12bc>
 80055e4:	4b2d      	ldr	r3, [pc, #180]	@ (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	0e1b      	lsrs	r3, r3, #24
 80055ea:	f003 030f 	and.w	r3, r3, #15
 80055ee:	e006      	b.n	80055fe <HAL_RCCEx_GetPeriphCLKFreq+0x12ca>
 80055f0:	4b2a      	ldr	r3, [pc, #168]	@ (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80055f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80055f6:	041b      	lsls	r3, r3, #16
 80055f8:	0e1b      	lsrs	r3, r3, #24
 80055fa:	f003 030f 	and.w	r3, r3, #15
 80055fe:	4a29      	ldr	r2, [pc, #164]	@ (80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8005600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005604:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005606:	e1e7      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8005608:	2300      	movs	r3, #0
 800560a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800560c:	e1e4      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 800560e:	2300      	movs	r3, #0
 8005610:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005612:	e1e1      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8005614:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005618:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800561c:	430b      	orrs	r3, r1
 800561e:	d17c      	bne.n	800571a <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8005620:	4b1e      	ldr	r3, [pc, #120]	@ (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005622:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005626:	f003 0318 	and.w	r3, r3, #24
 800562a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800562c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800562e:	2b18      	cmp	r3, #24
 8005630:	d870      	bhi.n	8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>
 8005632:	a201      	add	r2, pc, #4	@ (adr r2, 8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x1304>)
 8005634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005638:	080056a9 	.word	0x080056a9
 800563c:	08005715 	.word	0x08005715
 8005640:	08005715 	.word	0x08005715
 8005644:	08005715 	.word	0x08005715
 8005648:	08005715 	.word	0x08005715
 800564c:	08005715 	.word	0x08005715
 8005650:	08005715 	.word	0x08005715
 8005654:	08005715 	.word	0x08005715
 8005658:	080056b1 	.word	0x080056b1
 800565c:	08005715 	.word	0x08005715
 8005660:	08005715 	.word	0x08005715
 8005664:	08005715 	.word	0x08005715
 8005668:	08005715 	.word	0x08005715
 800566c:	08005715 	.word	0x08005715
 8005670:	08005715 	.word	0x08005715
 8005674:	08005715 	.word	0x08005715
 8005678:	080056b9 	.word	0x080056b9
 800567c:	08005715 	.word	0x08005715
 8005680:	08005715 	.word	0x08005715
 8005684:	08005715 	.word	0x08005715
 8005688:	08005715 	.word	0x08005715
 800568c:	08005715 	.word	0x08005715
 8005690:	08005715 	.word	0x08005715
 8005694:	08005715 	.word	0x08005715
 8005698:	080056d3 	.word	0x080056d3
 800569c:	46020c00 	.word	0x46020c00
 80056a0:	00f42400 	.word	0x00f42400
 80056a4:	0800732c 	.word	0x0800732c
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80056a8:	f7fd fab6 	bl	8002c18 <HAL_RCC_GetPCLK3Freq>
 80056ac:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80056ae:	e193      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80056b0:	f7fd f968 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 80056b4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80056b6:	e18f      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80056b8:	4b9f      	ldr	r3, [pc, #636]	@ (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056c4:	d102      	bne.n	80056cc <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
        {
          frequency = HSI_VALUE;
 80056c6:	4b9d      	ldr	r3, [pc, #628]	@ (800593c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80056c8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80056ca:	e185      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80056cc:	2300      	movs	r3, #0
 80056ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80056d0:	e182      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80056d2:	4b99      	ldr	r3, [pc, #612]	@ (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0320 	and.w	r3, r3, #32
 80056da:	2b20      	cmp	r3, #32
 80056dc:	d117      	bne.n	800570e <HAL_RCCEx_GetPeriphCLKFreq+0x13da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80056de:	4b96      	ldr	r3, [pc, #600]	@ (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d005      	beq.n	80056f6 <HAL_RCCEx_GetPeriphCLKFreq+0x13c2>
 80056ea:	4b93      	ldr	r3, [pc, #588]	@ (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	0e1b      	lsrs	r3, r3, #24
 80056f0:	f003 030f 	and.w	r3, r3, #15
 80056f4:	e006      	b.n	8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x13d0>
 80056f6:	4b90      	ldr	r3, [pc, #576]	@ (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80056f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80056fc:	041b      	lsls	r3, r3, #16
 80056fe:	0e1b      	lsrs	r3, r3, #24
 8005700:	f003 030f 	and.w	r3, r3, #15
 8005704:	4a8e      	ldr	r2, [pc, #568]	@ (8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8005706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800570a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800570c:	e164      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800570e:	2300      	movs	r3, #0
 8005710:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005712:	e161      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8005714:	2300      	movs	r3, #0
 8005716:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005718:	e15e      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800571a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800571e:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8005722:	430b      	orrs	r3, r1
 8005724:	d155      	bne.n	80057d2 <HAL_RCCEx_GetPeriphCLKFreq+0x149e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005726:	4b84      	ldr	r3, [pc, #528]	@ (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005728:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800572c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005730:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005734:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005738:	d013      	beq.n	8005762 <HAL_RCCEx_GetPeriphCLKFreq+0x142e>
 800573a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800573c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005740:	d844      	bhi.n	80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 8005742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005744:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005748:	d013      	beq.n	8005772 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
 800574a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800574c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005750:	d83c      	bhi.n	80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 8005752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005754:	2b00      	cmp	r3, #0
 8005756:	d014      	beq.n	8005782 <HAL_RCCEx_GetPeriphCLKFreq+0x144e>
 8005758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800575a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800575e:	d014      	beq.n	800578a <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 8005760:	e034      	b.n	80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005762:	f107 0318 	add.w	r3, r7, #24
 8005766:	4618      	mov	r0, r3
 8005768:	f7fe fb14 	bl	8003d94 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005770:	e132      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005772:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005776:	4618      	mov	r0, r3
 8005778:	f7fe f9a4 	bl	8003ac4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800577c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800577e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005780:	e12a      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005782:	f7fd f8ff 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 8005786:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005788:	e126      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800578a:	4b6b      	ldr	r3, [pc, #428]	@ (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0320 	and.w	r3, r3, #32
 8005792:	2b20      	cmp	r3, #32
 8005794:	d117      	bne.n	80057c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005796:	4b68      	ldr	r3, [pc, #416]	@ (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d005      	beq.n	80057ae <HAL_RCCEx_GetPeriphCLKFreq+0x147a>
 80057a2:	4b65      	ldr	r3, [pc, #404]	@ (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	0e1b      	lsrs	r3, r3, #24
 80057a8:	f003 030f 	and.w	r3, r3, #15
 80057ac:	e006      	b.n	80057bc <HAL_RCCEx_GetPeriphCLKFreq+0x1488>
 80057ae:	4b62      	ldr	r3, [pc, #392]	@ (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80057b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80057b4:	041b      	lsls	r3, r3, #16
 80057b6:	0e1b      	lsrs	r3, r3, #24
 80057b8:	f003 030f 	and.w	r3, r3, #15
 80057bc:	4a60      	ldr	r2, [pc, #384]	@ (8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80057be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057c2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80057c4:	e108      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80057c6:	2300      	movs	r3, #0
 80057c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80057ca:	e105      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80057cc:	2300      	movs	r3, #0
 80057ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80057d0:	e102      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 80057d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057d6:	1e59      	subs	r1, r3, #1
 80057d8:	ea52 0301 	orrs.w	r3, r2, r1
 80057dc:	d13c      	bne.n	8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 80057de:	4b56      	ldr	r3, [pc, #344]	@ (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80057e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80057e4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80057e8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80057ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80057f0:	d027      	beq.n	8005842 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 80057f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80057f8:	d82b      	bhi.n	8005852 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 80057fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005800:	d017      	beq.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x14fe>
 8005802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005804:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005808:	d823      	bhi.n	8005852 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 800580a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800580c:	2b00      	cmp	r3, #0
 800580e:	d004      	beq.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x14e6>
 8005810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005812:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005816:	d004      	beq.n	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 8005818:	e01b      	b.n	8005852 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800581a:	f7fd f8b3 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 800581e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005820:	e0da      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005822:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005826:	4618      	mov	r0, r3
 8005828:	f7fe f94c 	bl	8003ac4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800582c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800582e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005830:	e0d2      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005832:	f107 0318 	add.w	r3, r7, #24
 8005836:	4618      	mov	r0, r3
 8005838:	f7fe faac 	bl	8003d94 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005840:	e0ca      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005842:	f107 030c 	add.w	r3, r7, #12
 8005846:	4618      	mov	r0, r3
 8005848:	f7fe fc0c 	bl	8004064 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005850:	e0c2      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8005852:	2300      	movs	r3, #0
 8005854:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005856:	e0bf      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8005858:	e9d7 2300 	ldrd	r2, r3, [r7]
 800585c:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8005860:	430b      	orrs	r3, r1
 8005862:	d131      	bne.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1594>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8005864:	4b34      	ldr	r3, [pc, #208]	@ (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005866:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800586a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800586e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8005870:	4b31      	ldr	r3, [pc, #196]	@ (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005872:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b02      	cmp	r3, #2
 800587c:	d106      	bne.n	800588c <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
 800587e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005880:	2b00      	cmp	r3, #0
 8005882:	d103      	bne.n	800588c <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
    {
      frequency = LSE_VALUE;
 8005884:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005888:	637b      	str	r3, [r7, #52]	@ 0x34
 800588a:	e0a5      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800588c:	4b2a      	ldr	r3, [pc, #168]	@ (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800588e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005892:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005896:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800589a:	d112      	bne.n	80058c2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
 800589c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800589e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058a2:	d10e      	bne.n	80058c2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80058a4:	4b24      	ldr	r3, [pc, #144]	@ (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80058a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80058b2:	d102      	bne.n	80058ba <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
      {
        frequency = LSI_VALUE / 128U;
 80058b4:	23fa      	movs	r3, #250	@ 0xfa
 80058b6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80058b8:	e08e      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 80058ba:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80058be:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80058c0:	e08a      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80058c2:	2300      	movs	r3, #0
 80058c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80058c6:	e087      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80058c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058cc:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80058d0:	430b      	orrs	r3, r1
 80058d2:	d13b      	bne.n	800594c <HAL_RCCEx_GetPeriphCLKFreq+0x1618>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80058d4:	4b18      	ldr	r3, [pc, #96]	@ (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80058d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80058da:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80058de:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80058e0:	4b15      	ldr	r3, [pc, #84]	@ (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058ec:	d105      	bne.n	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
 80058ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d102      	bne.n	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
    {
      frequency = HSI48_VALUE;
 80058f4:	4b13      	ldr	r3, [pc, #76]	@ (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 80058f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80058f8:	e06e      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 80058fa:	4b0f      	ldr	r3, [pc, #60]	@ (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005902:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005906:	d106      	bne.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
 8005908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800590a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800590e:	d102      	bne.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
    {
      frequency = HSI48_VALUE >> 1U ;
 8005910:	4b0d      	ldr	r3, [pc, #52]	@ (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 8005912:	637b      	str	r3, [r7, #52]	@ 0x34
 8005914:	e060      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8005916:	4b08      	ldr	r3, [pc, #32]	@ (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800591e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005922:	d106      	bne.n	8005932 <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
 8005924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005926:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800592a:	d102      	bne.n	8005932 <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
    {
      frequency = HSI_VALUE;
 800592c:	4b03      	ldr	r3, [pc, #12]	@ (800593c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800592e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005930:	e052      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8005932:	2300      	movs	r3, #0
 8005934:	637b      	str	r3, [r7, #52]	@ 0x34
 8005936:	e04f      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8005938:	46020c00 	.word	0x46020c00
 800593c:	00f42400 	.word	0x00f42400
 8005940:	0800732c 	.word	0x0800732c
 8005944:	02dc6c00 	.word	0x02dc6c00
 8005948:	016e3600 	.word	0x016e3600
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800594c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005950:	f1a3 0108 	sub.w	r1, r3, #8
 8005954:	ea52 0301 	orrs.w	r3, r2, r1
 8005958:	d13c      	bne.n	80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800595a:	4b22      	ldr	r3, [pc, #136]	@ (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 800595c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005960:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005964:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 8005966:	4b1f      	ldr	r3, [pc, #124]	@ (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800596e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005972:	d105      	bne.n	8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
 8005974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005976:	2b00      	cmp	r3, #0
 8005978:	d102      	bne.n	8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    {
      frequency = HSE_VALUE;
 800597a:	4b1b      	ldr	r3, [pc, #108]	@ (80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x16b4>)
 800597c:	637b      	str	r3, [r7, #52]	@ 0x34
 800597e:	e02b      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 8005980:	4b18      	ldr	r3, [pc, #96]	@ (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005988:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800598c:	d106      	bne.n	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
 800598e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005990:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005994:	d102      	bne.n	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
    {
      frequency = HSE_VALUE >> 1U ;
 8005996:	4b15      	ldr	r3, [pc, #84]	@ (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 8005998:	637b      	str	r3, [r7, #52]	@ 0x34
 800599a:	e01d      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800599c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800599e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059a2:	d107      	bne.n	80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1680>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7fe f88b 	bl	8003ac4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80059ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80059b2:	e011      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 80059b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b6:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80059ba:	d108      	bne.n	80059ce <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7fe f87f 	bl	8003ac4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 80059c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c8:	085b      	lsrs	r3, r3, #1
 80059ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80059cc:	e004      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 80059ce:	2300      	movs	r3, #0
 80059d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80059d2:	e001      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80059d4:	2300      	movs	r3, #0
 80059d6:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 80059d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3738      	adds	r7, #56	@ 0x38
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	46020c00 	.word	0x46020c00
 80059e8:	00f42400 	.word	0x00f42400
 80059ec:	007a1200 	.word	0x007a1200

080059f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80059f8:	4b47      	ldr	r3, [pc, #284]	@ (8005b18 <RCCEx_PLL2_Config+0x128>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a46      	ldr	r2, [pc, #280]	@ (8005b18 <RCCEx_PLL2_Config+0x128>)
 80059fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005a02:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005a04:	f7fb fac0 	bl	8000f88 <HAL_GetTick>
 8005a08:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a0a:	e008      	b.n	8005a1e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005a0c:	f7fb fabc 	bl	8000f88 <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d901      	bls.n	8005a1e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e077      	b.n	8005b0e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a1e:	4b3e      	ldr	r3, [pc, #248]	@ (8005b18 <RCCEx_PLL2_Config+0x128>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1f0      	bne.n	8005a0c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005a2a:	4b3b      	ldr	r3, [pc, #236]	@ (8005b18 <RCCEx_PLL2_Config+0x128>)
 8005a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005a32:	f023 0303 	bic.w	r3, r3, #3
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	6811      	ldr	r1, [r2, #0]
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	6852      	ldr	r2, [r2, #4]
 8005a3e:	3a01      	subs	r2, #1
 8005a40:	0212      	lsls	r2, r2, #8
 8005a42:	430a      	orrs	r2, r1
 8005a44:	4934      	ldr	r1, [pc, #208]	@ (8005b18 <RCCEx_PLL2_Config+0x128>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005a4a:	4b33      	ldr	r3, [pc, #204]	@ (8005b18 <RCCEx_PLL2_Config+0x128>)
 8005a4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a4e:	4b33      	ldr	r3, [pc, #204]	@ (8005b1c <RCCEx_PLL2_Config+0x12c>)
 8005a50:	4013      	ands	r3, r2
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	6892      	ldr	r2, [r2, #8]
 8005a56:	3a01      	subs	r2, #1
 8005a58:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	68d2      	ldr	r2, [r2, #12]
 8005a60:	3a01      	subs	r2, #1
 8005a62:	0252      	lsls	r2, r2, #9
 8005a64:	b292      	uxth	r2, r2
 8005a66:	4311      	orrs	r1, r2
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	6912      	ldr	r2, [r2, #16]
 8005a6c:	3a01      	subs	r2, #1
 8005a6e:	0412      	lsls	r2, r2, #16
 8005a70:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005a74:	4311      	orrs	r1, r2
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	6952      	ldr	r2, [r2, #20]
 8005a7a:	3a01      	subs	r2, #1
 8005a7c:	0612      	lsls	r2, r2, #24
 8005a7e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005a82:	430a      	orrs	r2, r1
 8005a84:	4924      	ldr	r1, [pc, #144]	@ (8005b18 <RCCEx_PLL2_Config+0x128>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005a8a:	4b23      	ldr	r3, [pc, #140]	@ (8005b18 <RCCEx_PLL2_Config+0x128>)
 8005a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a8e:	f023 020c 	bic.w	r2, r3, #12
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	4920      	ldr	r1, [pc, #128]	@ (8005b18 <RCCEx_PLL2_Config+0x128>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005a9c:	4b1e      	ldr	r3, [pc, #120]	@ (8005b18 <RCCEx_PLL2_Config+0x128>)
 8005a9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a1b      	ldr	r3, [r3, #32]
 8005aa4:	491c      	ldr	r1, [pc, #112]	@ (8005b18 <RCCEx_PLL2_Config+0x128>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8005aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8005b18 <RCCEx_PLL2_Config+0x128>)
 8005aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aae:	4a1a      	ldr	r2, [pc, #104]	@ (8005b18 <RCCEx_PLL2_Config+0x128>)
 8005ab0:	f023 0310 	bic.w	r3, r3, #16
 8005ab4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005ab6:	4b18      	ldr	r3, [pc, #96]	@ (8005b18 <RCCEx_PLL2_Config+0x128>)
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005abe:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	69d2      	ldr	r2, [r2, #28]
 8005ac6:	00d2      	lsls	r2, r2, #3
 8005ac8:	4913      	ldr	r1, [pc, #76]	@ (8005b18 <RCCEx_PLL2_Config+0x128>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8005ace:	4b12      	ldr	r3, [pc, #72]	@ (8005b18 <RCCEx_PLL2_Config+0x128>)
 8005ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad2:	4a11      	ldr	r2, [pc, #68]	@ (8005b18 <RCCEx_PLL2_Config+0x128>)
 8005ad4:	f043 0310 	orr.w	r3, r3, #16
 8005ad8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8005ada:	4b0f      	ldr	r3, [pc, #60]	@ (8005b18 <RCCEx_PLL2_Config+0x128>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a0e      	ldr	r2, [pc, #56]	@ (8005b18 <RCCEx_PLL2_Config+0x128>)
 8005ae0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005ae4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005ae6:	f7fb fa4f 	bl	8000f88 <HAL_GetTick>
 8005aea:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005aec:	e008      	b.n	8005b00 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005aee:	f7fb fa4b 	bl	8000f88 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d901      	bls.n	8005b00 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e006      	b.n	8005b0e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b00:	4b05      	ldr	r3, [pc, #20]	@ (8005b18 <RCCEx_PLL2_Config+0x128>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d0f0      	beq.n	8005aee <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0

}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	46020c00 	.word	0x46020c00
 8005b1c:	80800000 	.word	0x80800000

08005b20 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8005b28:	4b47      	ldr	r3, [pc, #284]	@ (8005c48 <RCCEx_PLL3_Config+0x128>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a46      	ldr	r2, [pc, #280]	@ (8005c48 <RCCEx_PLL3_Config+0x128>)
 8005b2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b32:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005b34:	f7fb fa28 	bl	8000f88 <HAL_GetTick>
 8005b38:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b3a:	e008      	b.n	8005b4e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005b3c:	f7fb fa24 	bl	8000f88 <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d901      	bls.n	8005b4e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e077      	b.n	8005c3e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b4e:	4b3e      	ldr	r3, [pc, #248]	@ (8005c48 <RCCEx_PLL3_Config+0x128>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1f0      	bne.n	8005b3c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8005b5a:	4b3b      	ldr	r3, [pc, #236]	@ (8005c48 <RCCEx_PLL3_Config+0x128>)
 8005b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b5e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005b62:	f023 0303 	bic.w	r3, r3, #3
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	6811      	ldr	r1, [r2, #0]
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	6852      	ldr	r2, [r2, #4]
 8005b6e:	3a01      	subs	r2, #1
 8005b70:	0212      	lsls	r2, r2, #8
 8005b72:	430a      	orrs	r2, r1
 8005b74:	4934      	ldr	r1, [pc, #208]	@ (8005c48 <RCCEx_PLL3_Config+0x128>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	630b      	str	r3, [r1, #48]	@ 0x30
 8005b7a:	4b33      	ldr	r3, [pc, #204]	@ (8005c48 <RCCEx_PLL3_Config+0x128>)
 8005b7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b7e:	4b33      	ldr	r3, [pc, #204]	@ (8005c4c <RCCEx_PLL3_Config+0x12c>)
 8005b80:	4013      	ands	r3, r2
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	6892      	ldr	r2, [r2, #8]
 8005b86:	3a01      	subs	r2, #1
 8005b88:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	68d2      	ldr	r2, [r2, #12]
 8005b90:	3a01      	subs	r2, #1
 8005b92:	0252      	lsls	r2, r2, #9
 8005b94:	b292      	uxth	r2, r2
 8005b96:	4311      	orrs	r1, r2
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	6912      	ldr	r2, [r2, #16]
 8005b9c:	3a01      	subs	r2, #1
 8005b9e:	0412      	lsls	r2, r2, #16
 8005ba0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005ba4:	4311      	orrs	r1, r2
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	6952      	ldr	r2, [r2, #20]
 8005baa:	3a01      	subs	r2, #1
 8005bac:	0612      	lsls	r2, r2, #24
 8005bae:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	4924      	ldr	r1, [pc, #144]	@ (8005c48 <RCCEx_PLL3_Config+0x128>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8005bba:	4b23      	ldr	r3, [pc, #140]	@ (8005c48 <RCCEx_PLL3_Config+0x128>)
 8005bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bbe:	f023 020c 	bic.w	r2, r3, #12
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	4920      	ldr	r1, [pc, #128]	@ (8005c48 <RCCEx_PLL3_Config+0x128>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005bcc:	4b1e      	ldr	r3, [pc, #120]	@ (8005c48 <RCCEx_PLL3_Config+0x128>)
 8005bce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	491c      	ldr	r1, [pc, #112]	@ (8005c48 <RCCEx_PLL3_Config+0x128>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8005bda:	4b1b      	ldr	r3, [pc, #108]	@ (8005c48 <RCCEx_PLL3_Config+0x128>)
 8005bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bde:	4a1a      	ldr	r2, [pc, #104]	@ (8005c48 <RCCEx_PLL3_Config+0x128>)
 8005be0:	f023 0310 	bic.w	r3, r3, #16
 8005be4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005be6:	4b18      	ldr	r3, [pc, #96]	@ (8005c48 <RCCEx_PLL3_Config+0x128>)
 8005be8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005bee:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	69d2      	ldr	r2, [r2, #28]
 8005bf6:	00d2      	lsls	r2, r2, #3
 8005bf8:	4913      	ldr	r1, [pc, #76]	@ (8005c48 <RCCEx_PLL3_Config+0x128>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8005bfe:	4b12      	ldr	r3, [pc, #72]	@ (8005c48 <RCCEx_PLL3_Config+0x128>)
 8005c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c02:	4a11      	ldr	r2, [pc, #68]	@ (8005c48 <RCCEx_PLL3_Config+0x128>)
 8005c04:	f043 0310 	orr.w	r3, r3, #16
 8005c08:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8005c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8005c48 <RCCEx_PLL3_Config+0x128>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a0e      	ldr	r2, [pc, #56]	@ (8005c48 <RCCEx_PLL3_Config+0x128>)
 8005c10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c14:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005c16:	f7fb f9b7 	bl	8000f88 <HAL_GetTick>
 8005c1a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c1c:	e008      	b.n	8005c30 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005c1e:	f7fb f9b3 	bl	8000f88 <HAL_GetTick>
 8005c22:	4602      	mov	r2, r0
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d901      	bls.n	8005c30 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e006      	b.n	8005c3e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c30:	4b05      	ldr	r3, [pc, #20]	@ (8005c48 <RCCEx_PLL3_Config+0x128>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d0f0      	beq.n	8005c1e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	46020c00 	.word	0x46020c00
 8005c4c:	80800000 	.word	0x80800000

08005c50 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e0fb      	b.n	8005e5a <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a7f      	ldr	r2, [pc, #508]	@ (8005e64 <HAL_SPI_Init+0x214>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d004      	beq.n	8005c76 <HAL_SPI_Init+0x26>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a7d      	ldr	r2, [pc, #500]	@ (8005e68 <HAL_SPI_Init+0x218>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	e000      	b.n	8005c78 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8005c76:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a78      	ldr	r2, [pc, #480]	@ (8005e64 <HAL_SPI_Init+0x214>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d004      	beq.n	8005c92 <HAL_SPI_Init+0x42>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a76      	ldr	r2, [pc, #472]	@ (8005e68 <HAL_SPI_Init+0x218>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d105      	bne.n	8005c9e <HAL_SPI_Init+0x4e>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	2b0f      	cmp	r3, #15
 8005c98:	d901      	bls.n	8005c9e <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e0dd      	b.n	8005e5a <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 fd88 	bl	80067b4 <SPI_GetPacketSize>
 8005ca4:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a6e      	ldr	r2, [pc, #440]	@ (8005e64 <HAL_SPI_Init+0x214>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d004      	beq.n	8005cba <HAL_SPI_Init+0x6a>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a6c      	ldr	r2, [pc, #432]	@ (8005e68 <HAL_SPI_Init+0x218>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d102      	bne.n	8005cc0 <HAL_SPI_Init+0x70>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2b08      	cmp	r3, #8
 8005cbe:	d816      	bhi.n	8005cee <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005cc4:	4a69      	ldr	r2, [pc, #420]	@ (8005e6c <HAL_SPI_Init+0x21c>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d00e      	beq.n	8005ce8 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a68      	ldr	r2, [pc, #416]	@ (8005e70 <HAL_SPI_Init+0x220>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d009      	beq.n	8005ce8 <HAL_SPI_Init+0x98>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a66      	ldr	r2, [pc, #408]	@ (8005e74 <HAL_SPI_Init+0x224>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d004      	beq.n	8005ce8 <HAL_SPI_Init+0x98>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a65      	ldr	r2, [pc, #404]	@ (8005e78 <HAL_SPI_Init+0x228>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d104      	bne.n	8005cf2 <HAL_SPI_Init+0xa2>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2b10      	cmp	r3, #16
 8005cec:	d901      	bls.n	8005cf2 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e0b3      	b.n	8005e5a <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d106      	bne.n	8005d0c <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f7fa fefa 	bl	8000b00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2202      	movs	r2, #2
 8005d10:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f022 0201 	bic.w	r2, r2, #1
 8005d22:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8005d2e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d38:	d119      	bne.n	8005d6e <HAL_SPI_Init+0x11e>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d42:	d103      	bne.n	8005d4c <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d008      	beq.n	8005d5e <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10c      	bne.n	8005d6e <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005d58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d5c:	d107      	bne.n	8005d6e <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005d6c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00f      	beq.n	8005d9a <HAL_SPI_Init+0x14a>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	2b06      	cmp	r3, #6
 8005d80:	d90b      	bls.n	8005d9a <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	430a      	orrs	r2, r1
 8005d96:	601a      	str	r2, [r3, #0]
 8005d98:	e007      	b.n	8005daa <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005da8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	69da      	ldr	r2, [r3, #28]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005db2:	431a      	orrs	r2, r3
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	431a      	orrs	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dbc:	ea42 0103 	orr.w	r1, r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68da      	ldr	r2, [r3, #12]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dd4:	431a      	orrs	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dda:	431a      	orrs	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	431a      	orrs	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	431a      	orrs	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	695b      	ldr	r3, [r3, #20]
 8005dec:	431a      	orrs	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	431a      	orrs	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	431a      	orrs	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dfe:	431a      	orrs	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	431a      	orrs	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e0a:	431a      	orrs	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e10:	431a      	orrs	r2, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e16:	ea42 0103 	orr.w	r1, r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	430a      	orrs	r2, r1
 8005e24:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00a      	beq.n	8005e48 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	430a      	orrs	r2, r1
 8005e46:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	46002000 	.word	0x46002000
 8005e68:	56002000 	.word	0x56002000
 8005e6c:	40013000 	.word	0x40013000
 8005e70:	50013000 	.word	0x50013000
 8005e74:	40003800 	.word	0x40003800
 8005e78:	50003800 	.word	0x50003800

08005e7c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b08a      	sub	sp, #40	@ 0x28
 8005e80:	af02      	add	r7, sp, #8
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	603b      	str	r3, [r7, #0]
 8005e88:	4613      	mov	r3, r2
 8005e8a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	3320      	adds	r3, #32
 8005e92:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e94:	2300      	movs	r3, #0
 8005e96:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d101      	bne.n	8005ea6 <HAL_SPI_Transmit+0x2a>
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	e203      	b.n	80062ae <HAL_SPI_Transmit+0x432>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005eae:	f7fb f86b 	bl	8000f88 <HAL_GetTick>
 8005eb2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d007      	beq.n	8005ed0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return errorcode;
 8005ecc:	7efb      	ldrb	r3, [r7, #27]
 8005ece:	e1ee      	b.n	80062ae <HAL_SPI_Transmit+0x432>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d002      	beq.n	8005edc <HAL_SPI_Transmit+0x60>
 8005ed6:	88fb      	ldrh	r3, [r7, #6]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d107      	bne.n	8005eec <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return errorcode;
 8005ee8:	7efb      	ldrb	r3, [r7, #27]
 8005eea:	e1e0      	b.n	80062ae <HAL_SPI_Transmit+0x432>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2203      	movs	r2, #3
 8005ef0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	88fa      	ldrh	r2, [r7, #6]
 8005f06:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	88fa      	ldrh	r2, [r7, #6]
 8005f0e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005f3c:	d108      	bne.n	8005f50 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f4c:	601a      	str	r2, [r3, #0]
 8005f4e:	e009      	b.n	8005f64 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005f62:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	0c1b      	lsrs	r3, r3, #16
 8005f6c:	041b      	lsls	r3, r3, #16
 8005f6e:	88f9      	ldrh	r1, [r7, #6]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	6812      	ldr	r2, [r2, #0]
 8005f74:	430b      	orrs	r3, r1
 8005f76:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f042 0201 	orr.w	r2, r2, #1
 8005f86:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10c      	bne.n	8005fb0 <HAL_SPI_Transmit+0x134>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f9e:	d107      	bne.n	8005fb0 <HAL_SPI_Transmit+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	2b0f      	cmp	r3, #15
 8005fb6:	d95b      	bls.n	8006070 <HAL_SPI_Transmit+0x1f4>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a8f      	ldr	r2, [pc, #572]	@ (80061fc <HAL_SPI_Transmit+0x380>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d04f      	beq.n	8006062 <HAL_SPI_Transmit+0x1e6>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a8e      	ldr	r2, [pc, #568]	@ (8006200 <HAL_SPI_Transmit+0x384>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d04a      	beq.n	8006062 <HAL_SPI_Transmit+0x1e6>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a8c      	ldr	r2, [pc, #560]	@ (8006204 <HAL_SPI_Transmit+0x388>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d045      	beq.n	8006062 <HAL_SPI_Transmit+0x1e6>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a8b      	ldr	r2, [pc, #556]	@ (8006208 <HAL_SPI_Transmit+0x38c>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d147      	bne.n	8006070 <HAL_SPI_Transmit+0x1f4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005fe0:	e03f      	b.n	8006062 <HAL_SPI_Transmit+0x1e6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	f003 0302 	and.w	r3, r3, #2
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d114      	bne.n	800601a <HAL_SPI_Transmit+0x19e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	6812      	ldr	r2, [r2, #0]
 8005ffa:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006000:	1d1a      	adds	r2, r3, #4
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800600c:	b29b      	uxth	r3, r3
 800600e:	3b01      	subs	r3, #1
 8006010:	b29a      	uxth	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006018:	e023      	b.n	8006062 <HAL_SPI_Transmit+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800601a:	f7fa ffb5 	bl	8000f88 <HAL_GetTick>
 800601e:	4602      	mov	r2, r0
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	429a      	cmp	r2, r3
 8006028:	d803      	bhi.n	8006032 <HAL_SPI_Transmit+0x1b6>
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006030:	d102      	bne.n	8006038 <HAL_SPI_Transmit+0x1bc>
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d114      	bne.n	8006062 <HAL_SPI_Transmit+0x1e6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f000 faed 	bl	8006618 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800604c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
          return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e125      	b.n	80062ae <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006068:	b29b      	uxth	r3, r3
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1b9      	bne.n	8005fe2 <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800606e:	e0f8      	b.n	8006262 <HAL_SPI_Transmit+0x3e6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	2b07      	cmp	r3, #7
 8006076:	f240 80ed 	bls.w	8006254 <HAL_SPI_Transmit+0x3d8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800607a:	e05d      	b.n	8006138 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	f003 0302 	and.w	r3, r3, #2
 8006086:	2b02      	cmp	r3, #2
 8006088:	d132      	bne.n	80060f0 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006090:	b29b      	uxth	r3, r3
 8006092:	2b01      	cmp	r3, #1
 8006094:	d918      	bls.n	80060c8 <HAL_SPI_Transmit+0x24c>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800609a:	2b00      	cmp	r3, #0
 800609c:	d014      	beq.n	80060c8 <HAL_SPI_Transmit+0x24c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	6812      	ldr	r2, [r2, #0]
 80060a8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060ae:	1d1a      	adds	r2, r3, #4
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	3b02      	subs	r3, #2
 80060be:	b29a      	uxth	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80060c6:	e037      	b.n	8006138 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060cc:	881a      	ldrh	r2, [r3, #0]
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060d6:	1c9a      	adds	r2, r3, #2
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	3b01      	subs	r3, #1
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80060ee:	e023      	b.n	8006138 <HAL_SPI_Transmit+0x2bc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060f0:	f7fa ff4a 	bl	8000f88 <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d803      	bhi.n	8006108 <HAL_SPI_Transmit+0x28c>
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006106:	d102      	bne.n	800610e <HAL_SPI_Transmit+0x292>
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d114      	bne.n	8006138 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f000 fa82 	bl	8006618 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006122:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
          return HAL_TIMEOUT;
 8006134:	2303      	movs	r3, #3
 8006136:	e0ba      	b.n	80062ae <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800613e:	b29b      	uxth	r3, r3
 8006140:	2b00      	cmp	r3, #0
 8006142:	d19b      	bne.n	800607c <HAL_SPI_Transmit+0x200>
 8006144:	e08d      	b.n	8006262 <HAL_SPI_Transmit+0x3e6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	f003 0302 	and.w	r3, r3, #2
 8006150:	2b02      	cmp	r3, #2
 8006152:	d15b      	bne.n	800620c <HAL_SPI_Transmit+0x390>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800615a:	b29b      	uxth	r3, r3
 800615c:	2b03      	cmp	r3, #3
 800615e:	d918      	bls.n	8006192 <HAL_SPI_Transmit+0x316>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006164:	2b40      	cmp	r3, #64	@ 0x40
 8006166:	d914      	bls.n	8006192 <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	6812      	ldr	r2, [r2, #0]
 8006172:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006178:	1d1a      	adds	r2, r3, #4
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006184:	b29b      	uxth	r3, r3
 8006186:	3b04      	subs	r3, #4
 8006188:	b29a      	uxth	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006190:	e060      	b.n	8006254 <HAL_SPI_Transmit+0x3d8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006198:	b29b      	uxth	r3, r3
 800619a:	2b01      	cmp	r3, #1
 800619c:	d917      	bls.n	80061ce <HAL_SPI_Transmit+0x352>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d013      	beq.n	80061ce <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061aa:	881a      	ldrh	r2, [r3, #0]
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061b4:	1c9a      	adds	r2, r3, #2
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	3b02      	subs	r3, #2
 80061c4:	b29a      	uxth	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80061cc:	e042      	b.n	8006254 <HAL_SPI_Transmit+0x3d8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	3320      	adds	r3, #32
 80061d8:	7812      	ldrb	r2, [r2, #0]
 80061da:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061e0:	1c5a      	adds	r2, r3, #1
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	3b01      	subs	r3, #1
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80061f8:	e02c      	b.n	8006254 <HAL_SPI_Transmit+0x3d8>
 80061fa:	bf00      	nop
 80061fc:	40013000 	.word	0x40013000
 8006200:	50013000 	.word	0x50013000
 8006204:	40003800 	.word	0x40003800
 8006208:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800620c:	f7fa febc 	bl	8000f88 <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	683a      	ldr	r2, [r7, #0]
 8006218:	429a      	cmp	r2, r3
 800621a:	d803      	bhi.n	8006224 <HAL_SPI_Transmit+0x3a8>
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006222:	d102      	bne.n	800622a <HAL_SPI_Transmit+0x3ae>
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d114      	bne.n	8006254 <HAL_SPI_Transmit+0x3d8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f000 f9f4 	bl	8006618 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800623e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
          return HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	e02c      	b.n	80062ae <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800625a:	b29b      	uxth	r3, r3
 800625c:	2b00      	cmp	r3, #0
 800625e:	f47f af72 	bne.w	8006146 <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	9300      	str	r3, [sp, #0]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	2200      	movs	r2, #0
 800626a:	2108      	movs	r1, #8
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f000 fa73 	bl	8006758 <SPI_WaitOnFlagUntilTimeout>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d007      	beq.n	8006288 <HAL_SPI_Transmit+0x40c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800627e:	f043 0220 	orr.w	r2, r3, #32
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f000 f9c5 	bl	8006618 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d001      	beq.n	80062ac <HAL_SPI_Transmit+0x430>
  {
    return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e000      	b.n	80062ae <HAL_SPI_Transmit+0x432>
  }
  return errorcode;
 80062ac:	7efb      	ldrb	r3, [r7, #27]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3720      	adds	r7, #32
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop

080062b8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b088      	sub	sp, #32
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	603b      	str	r3, [r7, #0]
 80062c4:	4613      	mov	r3, r2
 80062c6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80062c8:	2300      	movs	r3, #0
 80062ca:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	3330      	adds	r3, #48	@ 0x30
 80062d2:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d101      	bne.n	80062e2 <HAL_SPI_Receive+0x2a>
 80062de:	2302      	movs	r3, #2
 80062e0:	e18e      	b.n	8006600 <HAL_SPI_Receive+0x348>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062ea:	f7fa fe4d 	bl	8000f88 <HAL_GetTick>
 80062ee:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d007      	beq.n	800630c <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 80062fc:	2302      	movs	r3, #2
 80062fe:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return errorcode;
 8006308:	7ffb      	ldrb	r3, [r7, #31]
 800630a:	e179      	b.n	8006600 <HAL_SPI_Receive+0x348>
  }

  if ((pData == NULL) || (Size == 0UL))
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d002      	beq.n	8006318 <HAL_SPI_Receive+0x60>
 8006312:	88fb      	ldrh	r3, [r7, #6]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d107      	bne.n	8006328 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return errorcode;
 8006324:	7ffb      	ldrb	r3, [r7, #31]
 8006326:	e16b      	b.n	8006600 <HAL_SPI_Receive+0x348>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2204      	movs	r2, #4
 800632c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	88fa      	ldrh	r2, [r7, #6]
 8006342:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	88fa      	ldrh	r2, [r7, #6]
 800634a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006378:	d108      	bne.n	800638c <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006388:	601a      	str	r2, [r3, #0]
 800638a:	e009      	b.n	80063a0 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800639e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	0c1b      	lsrs	r3, r3, #16
 80063a8:	041b      	lsls	r3, r3, #16
 80063aa:	88f9      	ldrh	r1, [r7, #6]
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	6812      	ldr	r2, [r2, #0]
 80063b0:	430b      	orrs	r3, r1
 80063b2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f042 0201 	orr.w	r2, r2, #1
 80063c2:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	69db      	ldr	r3, [r3, #28]
 80063ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10c      	bne.n	80063ec <HAL_SPI_Receive+0x134>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80063da:	d107      	bne.n	80063ec <HAL_SPI_Receive+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063ea:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	2b0f      	cmp	r3, #15
 80063f2:	d95c      	bls.n	80064ae <HAL_SPI_Receive+0x1f6>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a83      	ldr	r2, [pc, #524]	@ (8006608 <HAL_SPI_Receive+0x350>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d050      	beq.n	80064a0 <HAL_SPI_Receive+0x1e8>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a82      	ldr	r2, [pc, #520]	@ (800660c <HAL_SPI_Receive+0x354>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d04b      	beq.n	80064a0 <HAL_SPI_Receive+0x1e8>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a80      	ldr	r2, [pc, #512]	@ (8006610 <HAL_SPI_Receive+0x358>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d046      	beq.n	80064a0 <HAL_SPI_Receive+0x1e8>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a7f      	ldr	r2, [pc, #508]	@ (8006614 <HAL_SPI_Receive+0x35c>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d148      	bne.n	80064ae <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800641c:	e040      	b.n	80064a0 <HAL_SPI_Receive+0x1e8>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	695a      	ldr	r2, [r3, #20]
 8006424:	f248 0308 	movw	r3, #32776	@ 0x8008
 8006428:	4013      	ands	r3, r2
 800642a:	2b00      	cmp	r3, #0
 800642c:	d014      	beq.n	8006458 <HAL_SPI_Receive+0x1a0>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006436:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006438:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800643e:	1d1a      	adds	r2, r3, #4
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800644a:	b29b      	uxth	r3, r3
 800644c:	3b01      	subs	r3, #1
 800644e:	b29a      	uxth	r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8006456:	e023      	b.n	80064a0 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006458:	f7fa fd96 	bl	8000f88 <HAL_GetTick>
 800645c:	4602      	mov	r2, r0
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	683a      	ldr	r2, [r7, #0]
 8006464:	429a      	cmp	r2, r3
 8006466:	d803      	bhi.n	8006470 <HAL_SPI_Receive+0x1b8>
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800646e:	d102      	bne.n	8006476 <HAL_SPI_Receive+0x1be>
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d114      	bne.n	80064a0 <HAL_SPI_Receive+0x1e8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f000 f8ce 	bl	8006618 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800648a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
          return HAL_TIMEOUT;
 800649c:	2303      	movs	r3, #3
 800649e:	e0af      	b.n	8006600 <HAL_SPI_Receive+0x348>
    while (hspi->RxXferCount > 0UL)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1b8      	bne.n	800641e <HAL_SPI_Receive+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80064ac:	e095      	b.n	80065da <HAL_SPI_Receive+0x322>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	2b07      	cmp	r3, #7
 80064b4:	f240 808b 	bls.w	80065ce <HAL_SPI_Receive+0x316>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80064b8:	e03f      	b.n	800653a <HAL_SPI_Receive+0x282>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	695b      	ldr	r3, [r3, #20]
 80064c0:	f003 0301 	and.w	r3, r3, #1
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d114      	bne.n	80064f2 <HAL_SPI_Receive+0x23a>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064cc:	69ba      	ldr	r2, [r7, #24]
 80064ce:	8812      	ldrh	r2, [r2, #0]
 80064d0:	b292      	uxth	r2, r2
 80064d2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064d8:	1c9a      	adds	r2, r3, #2
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	3b01      	subs	r3, #1
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80064f0:	e023      	b.n	800653a <HAL_SPI_Receive+0x282>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064f2:	f7fa fd49 	bl	8000f88 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	683a      	ldr	r2, [r7, #0]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d803      	bhi.n	800650a <HAL_SPI_Receive+0x252>
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006508:	d102      	bne.n	8006510 <HAL_SPI_Receive+0x258>
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d114      	bne.n	800653a <HAL_SPI_Receive+0x282>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f000 f881 	bl	8006618 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006524:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2201      	movs	r2, #1
 8006532:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
          return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e062      	b.n	8006600 <HAL_SPI_Receive+0x348>
    while (hspi->RxXferCount > 0UL)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006540:	b29b      	uxth	r3, r3
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1b9      	bne.n	80064ba <HAL_SPI_Receive+0x202>
 8006546:	e048      	b.n	80065da <HAL_SPI_Receive+0x322>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	f003 0301 	and.w	r3, r3, #1
 8006552:	2b01      	cmp	r3, #1
 8006554:	d117      	bne.n	8006586 <HAL_SPI_Receive+0x2ce>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006562:	7812      	ldrb	r2, [r2, #0]
 8006564:	b2d2      	uxtb	r2, r2
 8006566:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800656c:	1c5a      	adds	r2, r3, #1
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006578:	b29b      	uxth	r3, r3
 800657a:	3b01      	subs	r3, #1
 800657c:	b29a      	uxth	r2, r3
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8006584:	e023      	b.n	80065ce <HAL_SPI_Receive+0x316>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006586:	f7fa fcff 	bl	8000f88 <HAL_GetTick>
 800658a:	4602      	mov	r2, r0
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	683a      	ldr	r2, [r7, #0]
 8006592:	429a      	cmp	r2, r3
 8006594:	d803      	bhi.n	800659e <HAL_SPI_Receive+0x2e6>
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800659c:	d102      	bne.n	80065a4 <HAL_SPI_Receive+0x2ec>
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d114      	bne.n	80065ce <HAL_SPI_Receive+0x316>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f000 f837 	bl	8006618 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065b8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
          return HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e018      	b.n	8006600 <HAL_SPI_Receive+0x348>
    while (hspi->RxXferCount > 0UL)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1b6      	bne.n	8006548 <HAL_SPI_Receive+0x290>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f000 f81c 	bl	8006618 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  hspi->State = HAL_SPI_STATE_READY;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d001      	beq.n	80065fe <HAL_SPI_Receive+0x346>
  {
    return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e000      	b.n	8006600 <HAL_SPI_Receive+0x348>
  }
  return errorcode;
 80065fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8006600:	4618      	mov	r0, r3
 8006602:	3720      	adds	r7, #32
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	40013000 	.word	0x40013000
 800660c:	50013000 	.word	0x50013000
 8006610:	40003800 	.word	0x40003800
 8006614:	50003800 	.word	0x50003800

08006618 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	699a      	ldr	r2, [r3, #24]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f042 0208 	orr.w	r2, r2, #8
 8006636:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	699a      	ldr	r2, [r3, #24]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f042 0210 	orr.w	r2, r2, #16
 8006646:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f022 0201 	bic.w	r2, r2, #1
 8006656:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	6812      	ldr	r2, [r2, #0]
 8006662:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8006666:	f023 0303 	bic.w	r3, r3, #3
 800666a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689a      	ldr	r2, [r3, #8]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800667a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b04      	cmp	r3, #4
 8006686:	d014      	beq.n	80066b2 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f003 0320 	and.w	r3, r3, #32
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00f      	beq.n	80066b2 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006698:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	699a      	ldr	r2, [r3, #24]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f042 0220 	orr.w	r2, r2, #32
 80066b0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b03      	cmp	r3, #3
 80066bc:	d014      	beq.n	80066e8 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00f      	beq.n	80066e8 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066ce:	f043 0204 	orr.w	r2, r3, #4
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	699a      	ldr	r2, [r3, #24]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066e6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00f      	beq.n	8006712 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066f8:	f043 0201 	orr.w	r2, r3, #1
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	699a      	ldr	r2, [r3, #24]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006710:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00f      	beq.n	800673c <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006722:	f043 0208 	orr.w	r2, r3, #8
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	699a      	ldr	r2, [r3, #24]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800673a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800674c:	bf00      	nop
 800674e:	3714      	adds	r7, #20
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	603b      	str	r3, [r7, #0]
 8006764:	4613      	mov	r3, r2
 8006766:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006768:	e010      	b.n	800678c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800676a:	f7fa fc0d 	bl	8000f88 <HAL_GetTick>
 800676e:	4602      	mov	r2, r0
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	683a      	ldr	r2, [r7, #0]
 8006776:	429a      	cmp	r2, r3
 8006778:	d803      	bhi.n	8006782 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006780:	d102      	bne.n	8006788 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d101      	bne.n	800678c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e00f      	b.n	80067ac <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	695a      	ldr	r2, [r3, #20]
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	4013      	ands	r3, r2
 8006796:	68ba      	ldr	r2, [r7, #8]
 8006798:	429a      	cmp	r2, r3
 800679a:	bf0c      	ite	eq
 800679c:	2301      	moveq	r3, #1
 800679e:	2300      	movne	r3, #0
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	461a      	mov	r2, r3
 80067a4:	79fb      	ldrb	r3, [r7, #7]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d0df      	beq.n	800676a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067c0:	095b      	lsrs	r3, r3, #5
 80067c2:	3301      	adds	r3, #1
 80067c4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	3301      	adds	r3, #1
 80067cc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	3307      	adds	r3, #7
 80067d2:	08db      	lsrs	r3, r3, #3
 80067d4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	fb02 f303 	mul.w	r3, r2, r3
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3714      	adds	r7, #20
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr

080067ea <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 80067ea:	b480      	push	{r7}
 80067ec:	b083      	sub	sp, #12
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
 80067f2:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d12e      	bne.n	800685e <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8006806:	2b01      	cmp	r3, #1
 8006808:	d101      	bne.n	800680e <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800680a:	2302      	movs	r3, #2
 800680c:	e028      	b.n	8006860 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2202      	movs	r2, #2
 800681a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f022 0201 	bic.w	r2, r2, #1
 800682c:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800683a:	ea42 0103 	orr.w	r1, r2, r3
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	689a      	ldr	r2, [r3, #8]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	430a      	orrs	r2, r1
 8006848:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800685a:	2300      	movs	r3, #0
 800685c:	e000      	b.n	8006860 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
  }
}
 8006860:	4618      	mov	r0, r3
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d101      	bne.n	800687e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e042      	b.n	8006904 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006884:	2b00      	cmp	r3, #0
 8006886:	d106      	bne.n	8006896 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f7fa fa6d 	bl	8000d70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2224      	movs	r2, #36	@ 0x24
 800689a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f022 0201 	bic.w	r2, r2, #1
 80068ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 f82c 	bl	800690c <UART_SetConfig>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d101      	bne.n	80068be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e022      	b.n	8006904 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d002      	beq.n	80068cc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f9ce 	bl	8006c68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80068da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	689a      	ldr	r2, [r3, #8]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80068ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f042 0201 	orr.w	r2, r2, #1
 80068fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 fa55 	bl	8006dac <UART_CheckIdleState>
 8006902:	4603      	mov	r3, r0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800690c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006910:	b094      	sub	sp, #80	@ 0x50
 8006912:	af00      	add	r7, sp, #0
 8006914:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006916:	2300      	movs	r3, #0
 8006918:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800691c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	4b83      	ldr	r3, [pc, #524]	@ (8006b30 <UART_SetConfig+0x224>)
 8006922:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006926:	689a      	ldr	r2, [r3, #8]
 8006928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	431a      	orrs	r2, r3
 800692e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	431a      	orrs	r2, r3
 8006934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006936:	69db      	ldr	r3, [r3, #28]
 8006938:	4313      	orrs	r3, r2
 800693a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800693c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	497c      	ldr	r1, [pc, #496]	@ (8006b34 <UART_SetConfig+0x228>)
 8006944:	4019      	ands	r1, r3
 8006946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800694c:	430b      	orrs	r3, r1
 800694e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800695a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800695c:	68d9      	ldr	r1, [r3, #12]
 800695e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	ea40 0301 	orr.w	r3, r0, r1
 8006966:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800696e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	4b6f      	ldr	r3, [pc, #444]	@ (8006b30 <UART_SetConfig+0x224>)
 8006974:	429a      	cmp	r2, r3
 8006976:	d009      	beq.n	800698c <UART_SetConfig+0x80>
 8006978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	4b6e      	ldr	r3, [pc, #440]	@ (8006b38 <UART_SetConfig+0x22c>)
 800697e:	429a      	cmp	r2, r3
 8006980:	d004      	beq.n	800698c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006984:	6a1a      	ldr	r2, [r3, #32]
 8006986:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006988:	4313      	orrs	r3, r2
 800698a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800698c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8006996:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800699a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069a0:	430b      	orrs	r3, r1
 80069a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80069a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069aa:	f023 000f 	bic.w	r0, r3, #15
 80069ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069b0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80069b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	ea40 0301 	orr.w	r3, r0, r1
 80069ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	4b5e      	ldr	r3, [pc, #376]	@ (8006b3c <UART_SetConfig+0x230>)
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d102      	bne.n	80069cc <UART_SetConfig+0xc0>
 80069c6:	2301      	movs	r3, #1
 80069c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069ca:	e032      	b.n	8006a32 <UART_SetConfig+0x126>
 80069cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	4b5b      	ldr	r3, [pc, #364]	@ (8006b40 <UART_SetConfig+0x234>)
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d102      	bne.n	80069dc <UART_SetConfig+0xd0>
 80069d6:	2302      	movs	r3, #2
 80069d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069da:	e02a      	b.n	8006a32 <UART_SetConfig+0x126>
 80069dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	4b58      	ldr	r3, [pc, #352]	@ (8006b44 <UART_SetConfig+0x238>)
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d102      	bne.n	80069ec <UART_SetConfig+0xe0>
 80069e6:	2304      	movs	r3, #4
 80069e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069ea:	e022      	b.n	8006a32 <UART_SetConfig+0x126>
 80069ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	4b55      	ldr	r3, [pc, #340]	@ (8006b48 <UART_SetConfig+0x23c>)
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d102      	bne.n	80069fc <UART_SetConfig+0xf0>
 80069f6:	2308      	movs	r3, #8
 80069f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069fa:	e01a      	b.n	8006a32 <UART_SetConfig+0x126>
 80069fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	4b52      	ldr	r3, [pc, #328]	@ (8006b4c <UART_SetConfig+0x240>)
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d102      	bne.n	8006a0c <UART_SetConfig+0x100>
 8006a06:	2310      	movs	r3, #16
 8006a08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a0a:	e012      	b.n	8006a32 <UART_SetConfig+0x126>
 8006a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	4b4f      	ldr	r3, [pc, #316]	@ (8006b50 <UART_SetConfig+0x244>)
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d103      	bne.n	8006a1e <UART_SetConfig+0x112>
 8006a16:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8006a1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a1c:	e009      	b.n	8006a32 <UART_SetConfig+0x126>
 8006a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	4b43      	ldr	r3, [pc, #268]	@ (8006b30 <UART_SetConfig+0x224>)
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d102      	bne.n	8006a2e <UART_SetConfig+0x122>
 8006a28:	2320      	movs	r3, #32
 8006a2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a2c:	e001      	b.n	8006a32 <UART_SetConfig+0x126>
 8006a2e:	2300      	movs	r3, #0
 8006a30:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	4b3e      	ldr	r3, [pc, #248]	@ (8006b30 <UART_SetConfig+0x224>)
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d005      	beq.n	8006a48 <UART_SetConfig+0x13c>
 8006a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	4b3d      	ldr	r3, [pc, #244]	@ (8006b38 <UART_SetConfig+0x22c>)
 8006a42:	429a      	cmp	r2, r3
 8006a44:	f040 8088 	bne.w	8006b58 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006a48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	623b      	str	r3, [r7, #32]
 8006a4e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006a50:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006a54:	f7fd fc6e 	bl	8004334 <HAL_RCCEx_GetPeriphCLKFreq>
 8006a58:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f000 80eb 	beq.w	8006c38 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a66:	4a3b      	ldr	r2, [pc, #236]	@ (8006b54 <UART_SetConfig+0x248>)
 8006a68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a70:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a74:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a78:	685a      	ldr	r2, [r3, #4]
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	005b      	lsls	r3, r3, #1
 8006a7e:	4413      	add	r3, r2
 8006a80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d305      	bcc.n	8006a92 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d903      	bls.n	8006a9a <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006a98:	e048      	b.n	8006b2c <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	61bb      	str	r3, [r7, #24]
 8006aa0:	61fa      	str	r2, [r7, #28]
 8006aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa6:	4a2b      	ldr	r2, [pc, #172]	@ (8006b54 <UART_SetConfig+0x248>)
 8006aa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	2200      	movs	r2, #0
 8006ab0:	613b      	str	r3, [r7, #16]
 8006ab2:	617a      	str	r2, [r7, #20]
 8006ab4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006ab8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006abc:	f7f9 fbe8 	bl	8000290 <__aeabi_uldivmod>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	4610      	mov	r0, r2
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	f04f 0200 	mov.w	r2, #0
 8006acc:	f04f 0300 	mov.w	r3, #0
 8006ad0:	020b      	lsls	r3, r1, #8
 8006ad2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006ad6:	0202      	lsls	r2, r0, #8
 8006ad8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ada:	6849      	ldr	r1, [r1, #4]
 8006adc:	0849      	lsrs	r1, r1, #1
 8006ade:	2000      	movs	r0, #0
 8006ae0:	460c      	mov	r4, r1
 8006ae2:	4605      	mov	r5, r0
 8006ae4:	eb12 0804 	adds.w	r8, r2, r4
 8006ae8:	eb43 0905 	adc.w	r9, r3, r5
 8006aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	60bb      	str	r3, [r7, #8]
 8006af4:	60fa      	str	r2, [r7, #12]
 8006af6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006afa:	4640      	mov	r0, r8
 8006afc:	4649      	mov	r1, r9
 8006afe:	f7f9 fbc7 	bl	8000290 <__aeabi_uldivmod>
 8006b02:	4602      	mov	r2, r0
 8006b04:	460b      	mov	r3, r1
 8006b06:	4613      	mov	r3, r2
 8006b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b10:	d308      	bcc.n	8006b24 <UART_SetConfig+0x218>
 8006b12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b18:	d204      	bcs.n	8006b24 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 8006b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006b20:	60da      	str	r2, [r3, #12]
 8006b22:	e003      	b.n	8006b2c <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8006b2a:	e085      	b.n	8006c38 <UART_SetConfig+0x32c>
 8006b2c:	e084      	b.n	8006c38 <UART_SetConfig+0x32c>
 8006b2e:	bf00      	nop
 8006b30:	46002400 	.word	0x46002400
 8006b34:	cfff69f3 	.word	0xcfff69f3
 8006b38:	56002400 	.word	0x56002400
 8006b3c:	40013800 	.word	0x40013800
 8006b40:	40004400 	.word	0x40004400
 8006b44:	40004800 	.word	0x40004800
 8006b48:	40004c00 	.word	0x40004c00
 8006b4c:	40005000 	.word	0x40005000
 8006b50:	40006400 	.word	0x40006400
 8006b54:	080073ec 	.word	0x080073ec
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b5a:	69db      	ldr	r3, [r3, #28]
 8006b5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b60:	d13c      	bne.n	8006bdc <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006b62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b64:	2200      	movs	r2, #0
 8006b66:	603b      	str	r3, [r7, #0]
 8006b68:	607a      	str	r2, [r7, #4]
 8006b6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b6e:	f7fd fbe1 	bl	8004334 <HAL_RCCEx_GetPeriphCLKFreq>
 8006b72:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d05e      	beq.n	8006c38 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b7e:	4a39      	ldr	r2, [pc, #228]	@ (8006c64 <UART_SetConfig+0x358>)
 8006b80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b84:	461a      	mov	r2, r3
 8006b86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b88:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b8c:	005a      	lsls	r2, r3, #1
 8006b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	085b      	lsrs	r3, r3, #1
 8006b94:	441a      	add	r2, r3
 8006b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ba0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ba2:	2b0f      	cmp	r3, #15
 8006ba4:	d916      	bls.n	8006bd4 <UART_SetConfig+0x2c8>
 8006ba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bac:	d212      	bcs.n	8006bd4 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	f023 030f 	bic.w	r3, r3, #15
 8006bb6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bba:	085b      	lsrs	r3, r3, #1
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	f003 0307 	and.w	r3, r3, #7
 8006bc2:	b29a      	uxth	r2, r3
 8006bc4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8006bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8006bd0:	60da      	str	r2, [r3, #12]
 8006bd2:	e031      	b.n	8006c38 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006bda:	e02d      	b.n	8006c38 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006bdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bde:	2200      	movs	r2, #0
 8006be0:	469a      	mov	sl, r3
 8006be2:	4693      	mov	fp, r2
 8006be4:	4650      	mov	r0, sl
 8006be6:	4659      	mov	r1, fp
 8006be8:	f7fd fba4 	bl	8004334 <HAL_RCCEx_GetPeriphCLKFreq>
 8006bec:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8006bee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d021      	beq.n	8006c38 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf8:	4a1a      	ldr	r2, [pc, #104]	@ (8006c64 <UART_SetConfig+0x358>)
 8006bfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bfe:	461a      	mov	r2, r3
 8006c00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c02:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	085b      	lsrs	r3, r3, #1
 8006c0c:	441a      	add	r2, r3
 8006c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c1a:	2b0f      	cmp	r3, #15
 8006c1c:	d909      	bls.n	8006c32 <UART_SetConfig+0x326>
 8006c1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c24:	d205      	bcs.n	8006c32 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c28:	b29a      	uxth	r2, r3
 8006c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	60da      	str	r2, [r3, #12]
 8006c30:	e002      	b.n	8006c38 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c42:	2201      	movs	r2, #1
 8006c44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c50:	2200      	movs	r2, #0
 8006c52:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006c54:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3750      	adds	r7, #80	@ 0x50
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c62:	bf00      	nop
 8006c64:	080073ec 	.word	0x080073ec

08006c68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c74:	f003 0301 	and.w	r3, r3, #1
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00a      	beq.n	8006c92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c96:	f003 0302 	and.w	r3, r3, #2
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00a      	beq.n	8006cb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	430a      	orrs	r2, r1
 8006cb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cb8:	f003 0304 	and.w	r3, r3, #4
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00a      	beq.n	8006cd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	430a      	orrs	r2, r1
 8006cd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cda:	f003 0308 	and.w	r3, r3, #8
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00a      	beq.n	8006cf8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cfc:	f003 0310 	and.w	r3, r3, #16
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00a      	beq.n	8006d1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	430a      	orrs	r2, r1
 8006d18:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d1e:	f003 0320 	and.w	r3, r3, #32
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00a      	beq.n	8006d3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d01a      	beq.n	8006d7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d66:	d10a      	bne.n	8006d7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	430a      	orrs	r2, r1
 8006d7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00a      	beq.n	8006da0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	430a      	orrs	r2, r1
 8006d9e:	605a      	str	r2, [r3, #4]
  }
}
 8006da0:	bf00      	nop
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b098      	sub	sp, #96	@ 0x60
 8006db0:	af02      	add	r7, sp, #8
 8006db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006dbc:	f7fa f8e4 	bl	8000f88 <HAL_GetTick>
 8006dc0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0308 	and.w	r3, r3, #8
 8006dcc:	2b08      	cmp	r3, #8
 8006dce:	d12f      	bne.n	8006e30 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dd0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f88e 	bl	8006f00 <UART_WaitOnFlagUntilTimeout>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d022      	beq.n	8006e30 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df2:	e853 3f00 	ldrex	r3, [r3]
 8006df6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006dfe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	461a      	mov	r2, r3
 8006e06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e08:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e0a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e10:	e841 2300 	strex	r3, r2, [r1]
 8006e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1e6      	bne.n	8006dea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2220      	movs	r2, #32
 8006e20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e063      	b.n	8006ef8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0304 	and.w	r3, r3, #4
 8006e3a:	2b04      	cmp	r3, #4
 8006e3c:	d149      	bne.n	8006ed2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e3e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e42:	9300      	str	r3, [sp, #0]
 8006e44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e46:	2200      	movs	r2, #0
 8006e48:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 f857 	bl	8006f00 <UART_WaitOnFlagUntilTimeout>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d03c      	beq.n	8006ed2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e60:	e853 3f00 	ldrex	r3, [r3]
 8006e64:	623b      	str	r3, [r7, #32]
   return(result);
 8006e66:	6a3b      	ldr	r3, [r7, #32]
 8006e68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	461a      	mov	r2, r3
 8006e74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e76:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e78:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e7e:	e841 2300 	strex	r3, r2, [r1]
 8006e82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1e6      	bne.n	8006e58 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	3308      	adds	r3, #8
 8006e90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	e853 3f00 	ldrex	r3, [r3]
 8006e98:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f023 0301 	bic.w	r3, r3, #1
 8006ea0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	3308      	adds	r3, #8
 8006ea8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006eaa:	61fa      	str	r2, [r7, #28]
 8006eac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eae:	69b9      	ldr	r1, [r7, #24]
 8006eb0:	69fa      	ldr	r2, [r7, #28]
 8006eb2:	e841 2300 	strex	r3, r2, [r1]
 8006eb6:	617b      	str	r3, [r7, #20]
   return(result);
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1e5      	bne.n	8006e8a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2220      	movs	r2, #32
 8006ec2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e012      	b.n	8006ef8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2220      	movs	r2, #32
 8006ed6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2220      	movs	r2, #32
 8006ede:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3758      	adds	r7, #88	@ 0x58
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	603b      	str	r3, [r7, #0]
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f10:	e049      	b.n	8006fa6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f18:	d045      	beq.n	8006fa6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f1a:	f7fa f835 	bl	8000f88 <HAL_GetTick>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	69ba      	ldr	r2, [r7, #24]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d302      	bcc.n	8006f30 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d101      	bne.n	8006f34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	e048      	b.n	8006fc6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0304 	and.w	r3, r3, #4
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d031      	beq.n	8006fa6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	69db      	ldr	r3, [r3, #28]
 8006f48:	f003 0308 	and.w	r3, r3, #8
 8006f4c:	2b08      	cmp	r3, #8
 8006f4e:	d110      	bne.n	8006f72 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2208      	movs	r2, #8
 8006f56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f000 f838 	bl	8006fce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2208      	movs	r2, #8
 8006f62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e029      	b.n	8006fc6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	69db      	ldr	r3, [r3, #28]
 8006f78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f80:	d111      	bne.n	8006fa6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006f8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f000 f81e 	bl	8006fce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2220      	movs	r2, #32
 8006f96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e00f      	b.n	8006fc6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	69da      	ldr	r2, [r3, #28]
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	4013      	ands	r3, r2
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	bf0c      	ite	eq
 8006fb6:	2301      	moveq	r3, #1
 8006fb8:	2300      	movne	r3, #0
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	79fb      	ldrb	r3, [r7, #7]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d0a6      	beq.n	8006f12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fce:	b480      	push	{r7}
 8006fd0:	b095      	sub	sp, #84	@ 0x54
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fde:	e853 3f00 	ldrex	r3, [r3]
 8006fe2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ff4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ff6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ffa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ffc:	e841 2300 	strex	r3, r2, [r1]
 8007000:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007004:	2b00      	cmp	r3, #0
 8007006:	d1e6      	bne.n	8006fd6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	3308      	adds	r3, #8
 800700e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007010:	6a3b      	ldr	r3, [r7, #32]
 8007012:	e853 3f00 	ldrex	r3, [r3]
 8007016:	61fb      	str	r3, [r7, #28]
   return(result);
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800701e:	f023 0301 	bic.w	r3, r3, #1
 8007022:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	3308      	adds	r3, #8
 800702a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800702c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800702e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007030:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007032:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007034:	e841 2300 	strex	r3, r2, [r1]
 8007038:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800703a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800703c:	2b00      	cmp	r3, #0
 800703e:	d1e3      	bne.n	8007008 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007044:	2b01      	cmp	r3, #1
 8007046:	d118      	bne.n	800707a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	e853 3f00 	ldrex	r3, [r3]
 8007054:	60bb      	str	r3, [r7, #8]
   return(result);
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	f023 0310 	bic.w	r3, r3, #16
 800705c:	647b      	str	r3, [r7, #68]	@ 0x44
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	461a      	mov	r2, r3
 8007064:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007066:	61bb      	str	r3, [r7, #24]
 8007068:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706a:	6979      	ldr	r1, [r7, #20]
 800706c:	69ba      	ldr	r2, [r7, #24]
 800706e:	e841 2300 	strex	r3, r2, [r1]
 8007072:	613b      	str	r3, [r7, #16]
   return(result);
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1e6      	bne.n	8007048 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2220      	movs	r2, #32
 800707e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800708e:	bf00      	nop
 8007090:	3754      	adds	r7, #84	@ 0x54
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr

0800709a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800709a:	b480      	push	{r7}
 800709c:	b085      	sub	sp, #20
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d101      	bne.n	80070b0 <HAL_UARTEx_DisableFifoMode+0x16>
 80070ac:	2302      	movs	r3, #2
 80070ae:	e027      	b.n	8007100 <HAL_UARTEx_DisableFifoMode+0x66>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2224      	movs	r2, #36	@ 0x24
 80070bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f022 0201 	bic.w	r2, r2, #1
 80070d6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80070de:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2220      	movs	r2, #32
 80070f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	3714      	adds	r7, #20
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800711c:	2b01      	cmp	r3, #1
 800711e:	d101      	bne.n	8007124 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007120:	2302      	movs	r3, #2
 8007122:	e02d      	b.n	8007180 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2224      	movs	r2, #36	@ 0x24
 8007130:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f022 0201 	bic.w	r2, r2, #1
 800714a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	683a      	ldr	r2, [r7, #0]
 800715c:	430a      	orrs	r2, r1
 800715e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 f84f 	bl	8007204 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2220      	movs	r2, #32
 8007172:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007198:	2b01      	cmp	r3, #1
 800719a:	d101      	bne.n	80071a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800719c:	2302      	movs	r3, #2
 800719e:	e02d      	b.n	80071fc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2224      	movs	r2, #36	@ 0x24
 80071ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f022 0201 	bic.w	r2, r2, #1
 80071c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	683a      	ldr	r2, [r7, #0]
 80071d8:	430a      	orrs	r2, r1
 80071da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 f811 	bl	8007204 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2220      	movs	r2, #32
 80071ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007210:	2b00      	cmp	r3, #0
 8007212:	d108      	bne.n	8007226 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007224:	e031      	b.n	800728a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007226:	2308      	movs	r3, #8
 8007228:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800722a:	2308      	movs	r3, #8
 800722c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	0e5b      	lsrs	r3, r3, #25
 8007236:	b2db      	uxtb	r3, r3
 8007238:	f003 0307 	and.w	r3, r3, #7
 800723c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	0f5b      	lsrs	r3, r3, #29
 8007246:	b2db      	uxtb	r3, r3
 8007248:	f003 0307 	and.w	r3, r3, #7
 800724c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800724e:	7bbb      	ldrb	r3, [r7, #14]
 8007250:	7b3a      	ldrb	r2, [r7, #12]
 8007252:	4911      	ldr	r1, [pc, #68]	@ (8007298 <UARTEx_SetNbDataToProcess+0x94>)
 8007254:	5c8a      	ldrb	r2, [r1, r2]
 8007256:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800725a:	7b3a      	ldrb	r2, [r7, #12]
 800725c:	490f      	ldr	r1, [pc, #60]	@ (800729c <UARTEx_SetNbDataToProcess+0x98>)
 800725e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007260:	fb93 f3f2 	sdiv	r3, r3, r2
 8007264:	b29a      	uxth	r2, r3
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800726c:	7bfb      	ldrb	r3, [r7, #15]
 800726e:	7b7a      	ldrb	r2, [r7, #13]
 8007270:	4909      	ldr	r1, [pc, #36]	@ (8007298 <UARTEx_SetNbDataToProcess+0x94>)
 8007272:	5c8a      	ldrb	r2, [r1, r2]
 8007274:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007278:	7b7a      	ldrb	r2, [r7, #13]
 800727a:	4908      	ldr	r1, [pc, #32]	@ (800729c <UARTEx_SetNbDataToProcess+0x98>)
 800727c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800727e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007282:	b29a      	uxth	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800728a:	bf00      	nop
 800728c:	3714      	adds	r7, #20
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop
 8007298:	08007404 	.word	0x08007404
 800729c:	0800740c 	.word	0x0800740c

080072a0 <memset>:
 80072a0:	4402      	add	r2, r0
 80072a2:	4603      	mov	r3, r0
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d100      	bne.n	80072aa <memset+0xa>
 80072a8:	4770      	bx	lr
 80072aa:	f803 1b01 	strb.w	r1, [r3], #1
 80072ae:	e7f9      	b.n	80072a4 <memset+0x4>

080072b0 <__libc_init_array>:
 80072b0:	b570      	push	{r4, r5, r6, lr}
 80072b2:	4d0d      	ldr	r5, [pc, #52]	@ (80072e8 <__libc_init_array+0x38>)
 80072b4:	2600      	movs	r6, #0
 80072b6:	4c0d      	ldr	r4, [pc, #52]	@ (80072ec <__libc_init_array+0x3c>)
 80072b8:	1b64      	subs	r4, r4, r5
 80072ba:	10a4      	asrs	r4, r4, #2
 80072bc:	42a6      	cmp	r6, r4
 80072be:	d109      	bne.n	80072d4 <__libc_init_array+0x24>
 80072c0:	4d0b      	ldr	r5, [pc, #44]	@ (80072f0 <__libc_init_array+0x40>)
 80072c2:	2600      	movs	r6, #0
 80072c4:	4c0b      	ldr	r4, [pc, #44]	@ (80072f4 <__libc_init_array+0x44>)
 80072c6:	f000 f817 	bl	80072f8 <_init>
 80072ca:	1b64      	subs	r4, r4, r5
 80072cc:	10a4      	asrs	r4, r4, #2
 80072ce:	42a6      	cmp	r6, r4
 80072d0:	d105      	bne.n	80072de <__libc_init_array+0x2e>
 80072d2:	bd70      	pop	{r4, r5, r6, pc}
 80072d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80072d8:	3601      	adds	r6, #1
 80072da:	4798      	blx	r3
 80072dc:	e7ee      	b.n	80072bc <__libc_init_array+0xc>
 80072de:	f855 3b04 	ldr.w	r3, [r5], #4
 80072e2:	3601      	adds	r6, #1
 80072e4:	4798      	blx	r3
 80072e6:	e7f2      	b.n	80072ce <__libc_init_array+0x1e>
 80072e8:	0800741c 	.word	0x0800741c
 80072ec:	0800741c 	.word	0x0800741c
 80072f0:	0800741c 	.word	0x0800741c
 80072f4:	08007420 	.word	0x08007420

080072f8 <_init>:
 80072f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072fa:	bf00      	nop
 80072fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072fe:	bc08      	pop	{r3}
 8007300:	469e      	mov	lr, r3
 8007302:	4770      	bx	lr

08007304 <_fini>:
 8007304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007306:	bf00      	nop
 8007308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800730a:	bc08      	pop	{r3}
 800730c:	469e      	mov	lr, r3
 800730e:	4770      	bx	lr
