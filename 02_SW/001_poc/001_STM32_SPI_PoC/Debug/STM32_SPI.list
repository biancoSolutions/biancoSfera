
STM32_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b94  08000250  08000250  00010250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08006de4  08006de4  00016de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006ee8  08006ee8  00016ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006ef0  08006ef0  00016ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006ef4  08006ef4  00016ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000009  20000000  08006ef8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000144  2000000c  08006f01  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000150  08006f01  00020150  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020009  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003f  2**0
                  CONTENTS, READONLY
 11 .debug_info   000131e2  00000000  00000000  00020082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002715  00000000  00000000  00033264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000ea8  00000000  00000000  00035980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000b30  00000000  00000000  00036828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00035900  00000000  00000000  00037358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000148d9  00000000  00000000  0006cc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0014c5d7  00000000  00000000  00081531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00003bbc  00000000  00000000  001cdb08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000083  00000000  00000000  001d16c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	; (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	2000000c 	.word	0x2000000c
 800026c:	00000000 	.word	0x00000000
 8000270:	08006dcc 	.word	0x08006dcc

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	; (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000010 	.word	0x20000010
 800028c:	08006dcc 	.word	0x08006dcc

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b982 	b.w	80005ac <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d146      	bne.n	800035e <__udivmoddi4+0x9e>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d95e      	bls.n	8000394 <__udivmoddi4+0xd4>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	409c      	lsls	r4, r3
 80002e8:	fa20 f202 	lsr.w	r2, r0, r2
 80002ec:	4317      	orrs	r7, r2
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	0c22      	lsrs	r2, r4, #16
 80002f8:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	fb01 f005 	mul.w	r0, r1, r5
 8000304:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000308:	4290      	cmp	r0, r2
 800030a:	d908      	bls.n	800031e <__udivmoddi4+0x5e>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x5c>
 8000316:	4290      	cmp	r0, r2
 8000318:	f200 8134 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 800031c:	4639      	mov	r1, r7
 800031e:	1a12      	subs	r2, r2, r0
 8000320:	b2a4      	uxth	r4, r4
 8000322:	fbb2 f0fe 	udiv	r0, r2, lr
 8000326:	fb0e 2210 	mls	r2, lr, r0, r2
 800032a:	fb00 f505 	mul.w	r5, r0, r5
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	42a5      	cmp	r5, r4
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x88>
 8000336:	eb1c 0404 	adds.w	r4, ip, r4
 800033a:	f100 32ff 	add.w	r2, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x86>
 8000340:	42a5      	cmp	r5, r4
 8000342:	f200 8119 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 8000346:	4610      	mov	r0, r2
 8000348:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034c:	1b64      	subs	r4, r4, r5
 800034e:	2100      	movs	r1, #0
 8000350:	b11e      	cbz	r6, 800035a <__udivmoddi4+0x9a>
 8000352:	40dc      	lsrs	r4, r3
 8000354:	2300      	movs	r3, #0
 8000356:	e9c6 4300 	strd	r4, r3, [r6]
 800035a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0xb4>
 8000362:	2e00      	cmp	r6, #0
 8000364:	f000 80fc 	beq.w	8000560 <__udivmoddi4+0x2a0>
 8000368:	2100      	movs	r1, #0
 800036a:	e9c6 0500 	strd	r0, r5, [r6]
 800036e:	4608      	mov	r0, r1
 8000370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000374:	fab3 f183 	clz	r1, r3
 8000378:	2900      	cmp	r1, #0
 800037a:	d14c      	bne.n	8000416 <__udivmoddi4+0x156>
 800037c:	42ab      	cmp	r3, r5
 800037e:	f0c0 80f2 	bcc.w	8000566 <__udivmoddi4+0x2a6>
 8000382:	4282      	cmp	r2, r0
 8000384:	f240 80ef 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000388:	4608      	mov	r0, r1
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e5      	beq.n	800035a <__udivmoddi4+0x9a>
 800038e:	e9c6 4700 	strd	r4, r7, [r6]
 8000392:	e7e2      	b.n	800035a <__udivmoddi4+0x9a>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xd8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f382 	clz	r3, r2
 800039c:	2b00      	cmp	r3, #0
 800039e:	f040 809f 	bne.w	80004e0 <__udivmoddi4+0x220>
 80003a2:	1a8a      	subs	r2, r1, r2
 80003a4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a8:	fa1f f78c 	uxth.w	r7, ip
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb2 f5fe 	udiv	r5, r2, lr
 80003b2:	fb0e 2015 	mls	r0, lr, r5, r2
 80003b6:	0c22      	lsrs	r2, r4, #16
 80003b8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003bc:	fb07 f005 	mul.w	r0, r7, r5
 80003c0:	4290      	cmp	r0, r2
 80003c2:	d90f      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003c4:	eb1c 0202 	adds.w	r2, ip, r2
 80003c8:	f105 38ff 	add.w	r8, r5, #4294967295
 80003cc:	bf2c      	ite	cs
 80003ce:	f04f 0901 	movcs.w	r9, #1
 80003d2:	f04f 0900 	movcc.w	r9, #0
 80003d6:	4290      	cmp	r0, r2
 80003d8:	d903      	bls.n	80003e2 <__udivmoddi4+0x122>
 80003da:	f1b9 0f00 	cmp.w	r9, #0
 80003de:	f000 80ce 	beq.w	800057e <__udivmoddi4+0x2be>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ec:	fb0e 2210 	mls	r2, lr, r0, r2
 80003f0:	fb00 f707 	mul.w	r7, r0, r7
 80003f4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f8:	42a7      	cmp	r7, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	42a7      	cmp	r7, r4
 8000408:	f200 80b3 	bhi.w	8000572 <__udivmoddi4+0x2b2>
 800040c:	4610      	mov	r0, r2
 800040e:	1be4      	subs	r4, r4, r7
 8000410:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000414:	e79c      	b.n	8000350 <__udivmoddi4+0x90>
 8000416:	f1c1 0420 	rsb	r4, r1, #32
 800041a:	408b      	lsls	r3, r1
 800041c:	fa05 fc01 	lsl.w	ip, r5, r1
 8000420:	fa22 f704 	lsr.w	r7, r2, r4
 8000424:	40e5      	lsrs	r5, r4
 8000426:	408a      	lsls	r2, r1
 8000428:	431f      	orrs	r7, r3
 800042a:	fa20 f304 	lsr.w	r3, r0, r4
 800042e:	4088      	lsls	r0, r1
 8000430:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000440:	fbb5 fef8 	udiv	lr, r5, r8
 8000444:	fb08 551e 	mls	r5, r8, lr, r5
 8000448:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800044c:	fb0e f90c 	mul.w	r9, lr, ip
 8000450:	45a9      	cmp	r9, r5
 8000452:	d90e      	bls.n	8000472 <__udivmoddi4+0x1b2>
 8000454:	197d      	adds	r5, r7, r5
 8000456:	f10e 3aff 	add.w	sl, lr, #4294967295
 800045a:	bf2c      	ite	cs
 800045c:	f04f 0b01 	movcs.w	fp, #1
 8000460:	f04f 0b00 	movcc.w	fp, #0
 8000464:	45a9      	cmp	r9, r5
 8000466:	d903      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000468:	f1bb 0f00 	cmp.w	fp, #0
 800046c:	f000 808d 	beq.w	800058a <__udivmoddi4+0x2ca>
 8000470:	46d6      	mov	lr, sl
 8000472:	eba5 0509 	sub.w	r5, r5, r9
 8000476:	fa1f f983 	uxth.w	r9, r3
 800047a:	fbb5 f3f8 	udiv	r3, r5, r8
 800047e:	fb08 5513 	mls	r5, r8, r3, r5
 8000482:	fb03 fc0c 	mul.w	ip, r3, ip
 8000486:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800048a:	45ac      	cmp	ip, r5
 800048c:	d906      	bls.n	800049c <__udivmoddi4+0x1dc>
 800048e:	197d      	adds	r5, r7, r5
 8000490:	f103 38ff 	add.w	r8, r3, #4294967295
 8000494:	d201      	bcs.n	800049a <__udivmoddi4+0x1da>
 8000496:	45ac      	cmp	ip, r5
 8000498:	d87e      	bhi.n	8000598 <__udivmoddi4+0x2d8>
 800049a:	4643      	mov	r3, r8
 800049c:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80004a0:	eba5 050c 	sub.w	r5, r5, ip
 80004a4:	fba3 9802 	umull	r9, r8, r3, r2
 80004a8:	4545      	cmp	r5, r8
 80004aa:	46ce      	mov	lr, r9
 80004ac:	46c4      	mov	ip, r8
 80004ae:	d302      	bcc.n	80004b6 <__udivmoddi4+0x1f6>
 80004b0:	d106      	bne.n	80004c0 <__udivmoddi4+0x200>
 80004b2:	4548      	cmp	r0, r9
 80004b4:	d204      	bcs.n	80004c0 <__udivmoddi4+0x200>
 80004b6:	3b01      	subs	r3, #1
 80004b8:	ebb9 0e02 	subs.w	lr, r9, r2
 80004bc:	eb68 0c07 	sbc.w	ip, r8, r7
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d06f      	beq.n	80005a4 <__udivmoddi4+0x2e4>
 80004c4:	ebb0 020e 	subs.w	r2, r0, lr
 80004c8:	eb65 050c 	sbc.w	r5, r5, ip
 80004cc:	40ca      	lsrs	r2, r1
 80004ce:	fa05 f404 	lsl.w	r4, r5, r4
 80004d2:	40cd      	lsrs	r5, r1
 80004d4:	4618      	mov	r0, r3
 80004d6:	4314      	orrs	r4, r2
 80004d8:	2100      	movs	r1, #0
 80004da:	e9c6 4500 	strd	r4, r5, [r6]
 80004de:	e73c      	b.n	800035a <__udivmoddi4+0x9a>
 80004e0:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e4:	f1c3 0220 	rsb	r2, r3, #32
 80004e8:	4099      	lsls	r1, r3
 80004ea:	409c      	lsls	r4, r3
 80004ec:	40d5      	lsrs	r5, r2
 80004ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004f2:	fa20 f202 	lsr.w	r2, r0, r2
 80004f6:	fa1f f78c 	uxth.w	r7, ip
 80004fa:	fbb5 f0fe 	udiv	r0, r5, lr
 80004fe:	430a      	orrs	r2, r1
 8000500:	fb0e 5510 	mls	r5, lr, r0, r5
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f507 	mul.w	r5, r0, r7
 800050e:	428d      	cmp	r5, r1
 8000510:	d90e      	bls.n	8000530 <__udivmoddi4+0x270>
 8000512:	eb1c 0101 	adds.w	r1, ip, r1
 8000516:	f100 38ff 	add.w	r8, r0, #4294967295
 800051a:	bf2c      	ite	cs
 800051c:	f04f 0901 	movcs.w	r9, #1
 8000520:	f04f 0900 	movcc.w	r9, #0
 8000524:	428d      	cmp	r5, r1
 8000526:	d902      	bls.n	800052e <__udivmoddi4+0x26e>
 8000528:	f1b9 0f00 	cmp.w	r9, #0
 800052c:	d031      	beq.n	8000592 <__udivmoddi4+0x2d2>
 800052e:	4640      	mov	r0, r8
 8000530:	1b49      	subs	r1, r1, r5
 8000532:	b292      	uxth	r2, r2
 8000534:	fbb1 f5fe 	udiv	r5, r1, lr
 8000538:	fb0e 1115 	mls	r1, lr, r5, r1
 800053c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000540:	fb05 f107 	mul.w	r1, r5, r7
 8000544:	4291      	cmp	r1, r2
 8000546:	d907      	bls.n	8000558 <__udivmoddi4+0x298>
 8000548:	eb1c 0202 	adds.w	r2, ip, r2
 800054c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x296>
 8000552:	4291      	cmp	r1, r2
 8000554:	d823      	bhi.n	800059e <__udivmoddi4+0x2de>
 8000556:	4645      	mov	r5, r8
 8000558:	1a52      	subs	r2, r2, r1
 800055a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800055e:	e726      	b.n	80003ae <__udivmoddi4+0xee>
 8000560:	4631      	mov	r1, r6
 8000562:	4630      	mov	r0, r6
 8000564:	e6f9      	b.n	800035a <__udivmoddi4+0x9a>
 8000566:	1a84      	subs	r4, r0, r2
 8000568:	eb65 0203 	sbc.w	r2, r5, r3
 800056c:	2001      	movs	r0, #1
 800056e:	4617      	mov	r7, r2
 8000570:	e70b      	b.n	800038a <__udivmoddi4+0xca>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e74a      	b.n	800040e <__udivmoddi4+0x14e>
 8000578:	4464      	add	r4, ip
 800057a:	3802      	subs	r0, #2
 800057c:	e6e4      	b.n	8000348 <__udivmoddi4+0x88>
 800057e:	3d02      	subs	r5, #2
 8000580:	4462      	add	r2, ip
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	3902      	subs	r1, #2
 8000586:	4462      	add	r2, ip
 8000588:	e6c9      	b.n	800031e <__udivmoddi4+0x5e>
 800058a:	f1ae 0e02 	sub.w	lr, lr, #2
 800058e:	443d      	add	r5, r7
 8000590:	e76f      	b.n	8000472 <__udivmoddi4+0x1b2>
 8000592:	3802      	subs	r0, #2
 8000594:	4461      	add	r1, ip
 8000596:	e7cb      	b.n	8000530 <__udivmoddi4+0x270>
 8000598:	3b02      	subs	r3, #2
 800059a:	443d      	add	r5, r7
 800059c:	e77e      	b.n	800049c <__udivmoddi4+0x1dc>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	e7d9      	b.n	8000558 <__udivmoddi4+0x298>
 80005a4:	4618      	mov	r0, r3
 80005a6:	4631      	mov	r1, r6
 80005a8:	e6d7      	b.n	800035a <__udivmoddi4+0x9a>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08c      	sub	sp, #48	; 0x30
 80005b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	f107 031c 	add.w	r3, r7, #28
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	4b60      	ldr	r3, [pc, #384]	; (8000748 <MX_GPIO_Init+0x198>)
 80005c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005cc:	4a5e      	ldr	r2, [pc, #376]	; (8000748 <MX_GPIO_Init+0x198>)
 80005ce:	f043 0301 	orr.w	r3, r3, #1
 80005d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80005d6:	4b5c      	ldr	r3, [pc, #368]	; (8000748 <MX_GPIO_Init+0x198>)
 80005d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005dc:	f003 0301 	and.w	r3, r3, #1
 80005e0:	61bb      	str	r3, [r7, #24]
 80005e2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005e4:	4b58      	ldr	r3, [pc, #352]	; (8000748 <MX_GPIO_Init+0x198>)
 80005e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005ea:	4a57      	ldr	r2, [pc, #348]	; (8000748 <MX_GPIO_Init+0x198>)
 80005ec:	f043 0320 	orr.w	r3, r3, #32
 80005f0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80005f4:	4b54      	ldr	r3, [pc, #336]	; (8000748 <MX_GPIO_Init+0x198>)
 80005f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005fa:	f003 0320 	and.w	r3, r3, #32
 80005fe:	617b      	str	r3, [r7, #20]
 8000600:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000602:	4b51      	ldr	r3, [pc, #324]	; (8000748 <MX_GPIO_Init+0x198>)
 8000604:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000608:	4a4f      	ldr	r2, [pc, #316]	; (8000748 <MX_GPIO_Init+0x198>)
 800060a:	f043 0308 	orr.w	r3, r3, #8
 800060e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000612:	4b4d      	ldr	r3, [pc, #308]	; (8000748 <MX_GPIO_Init+0x198>)
 8000614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000618:	f003 0308 	and.w	r3, r3, #8
 800061c:	613b      	str	r3, [r7, #16]
 800061e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000620:	4b49      	ldr	r3, [pc, #292]	; (8000748 <MX_GPIO_Init+0x198>)
 8000622:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000626:	4a48      	ldr	r2, [pc, #288]	; (8000748 <MX_GPIO_Init+0x198>)
 8000628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800062c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000630:	4b45      	ldr	r3, [pc, #276]	; (8000748 <MX_GPIO_Init+0x198>)
 8000632:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063e:	4b42      	ldr	r3, [pc, #264]	; (8000748 <MX_GPIO_Init+0x198>)
 8000640:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000644:	4a40      	ldr	r2, [pc, #256]	; (8000748 <MX_GPIO_Init+0x198>)
 8000646:	f043 0304 	orr.w	r3, r3, #4
 800064a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800064e:	4b3e      	ldr	r3, [pc, #248]	; (8000748 <MX_GPIO_Init+0x198>)
 8000650:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000654:	f003 0304 	and.w	r3, r3, #4
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065c:	4b3a      	ldr	r3, [pc, #232]	; (8000748 <MX_GPIO_Init+0x198>)
 800065e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000662:	4a39      	ldr	r2, [pc, #228]	; (8000748 <MX_GPIO_Init+0x198>)
 8000664:	f043 0302 	orr.w	r3, r3, #2
 8000668:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800066c:	4b36      	ldr	r3, [pc, #216]	; (8000748 <MX_GPIO_Init+0x198>)
 800066e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000672:	f003 0302 	and.w	r3, r3, #2
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000680:	4832      	ldr	r0, [pc, #200]	; (800074c <MX_GPIO_Init+0x19c>)
 8000682:	f000 fe95 	bl	80013b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800068c:	4830      	ldr	r0, [pc, #192]	; (8000750 <MX_GPIO_Init+0x1a0>)
 800068e:	f000 fe8f 	bl	80013b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000692:	2201      	movs	r2, #1
 8000694:	2104      	movs	r1, #4
 8000696:	482f      	ldr	r0, [pc, #188]	; (8000754 <MX_GPIO_Init+0x1a4>)
 8000698:	f000 fe8a 	bl	80013b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800069c:	2201      	movs	r2, #1
 800069e:	2180      	movs	r1, #128	; 0x80
 80006a0:	482d      	ldr	r0, [pc, #180]	; (8000758 <MX_GPIO_Init+0x1a8>)
 80006a2:	f000 fe85 	bl	80013b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2180      	movs	r1, #128	; 0x80
 80006aa:	482c      	ldr	r0, [pc, #176]	; (800075c <MX_GPIO_Init+0x1ac>)
 80006ac:	f000 fe80 	bl	80013b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 80006b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b6:	2301      	movs	r3, #1
 80006b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006be:	2300      	movs	r3, #0
 80006c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	4619      	mov	r1, r3
 80006c8:	4820      	ldr	r0, [pc, #128]	; (800074c <MX_GPIO_Init+0x19c>)
 80006ca:	f000 fc99 	bl	8001000 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 80006ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	2301      	movs	r3, #1
 80006d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	2300      	movs	r3, #0
 80006de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	4619      	mov	r1, r3
 80006e6:	481a      	ldr	r0, [pc, #104]	; (8000750 <MX_GPIO_Init+0x1a0>)
 80006e8:	f000 fc8a 	bl	8001000 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80006ec:	2304      	movs	r3, #4
 80006ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f0:	2301      	movs	r3, #1
 80006f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f8:	2300      	movs	r3, #0
 80006fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80006fc:	f107 031c 	add.w	r3, r7, #28
 8000700:	4619      	mov	r1, r3
 8000702:	4814      	ldr	r0, [pc, #80]	; (8000754 <MX_GPIO_Init+0x1a4>)
 8000704:	f000 fc7c 	bl	8001000 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000708:	2380      	movs	r3, #128	; 0x80
 800070a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070c:	2301      	movs	r3, #1
 800070e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	2300      	movs	r3, #0
 8000716:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000718:	f107 031c 	add.w	r3, r7, #28
 800071c:	4619      	mov	r1, r3
 800071e:	480e      	ldr	r0, [pc, #56]	; (8000758 <MX_GPIO_Init+0x1a8>)
 8000720:	f000 fc6e 	bl	8001000 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8000724:	2380      	movs	r3, #128	; 0x80
 8000726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	2300      	movs	r3, #0
 8000732:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000734:	f107 031c 	add.w	r3, r7, #28
 8000738:	4619      	mov	r1, r3
 800073a:	4808      	ldr	r0, [pc, #32]	; (800075c <MX_GPIO_Init+0x1ac>)
 800073c:	f000 fc60 	bl	8001000 <HAL_GPIO_Init>

}
 8000740:	bf00      	nop
 8000742:	3730      	adds	r7, #48	; 0x30
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	46020c00 	.word	0x46020c00
 800074c:	42021400 	.word	0x42021400
 8000750:	42020c00 	.word	0x42020c00
 8000754:	42021800 	.word	0x42021800
 8000758:	42020800 	.word	0x42020800
 800075c:	42020400 	.word	0x42020400

08000760 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000764:	2000      	movs	r0, #0
 8000766:	f000 fe3b 	bl	80013e0 <HAL_ICACHE_ConfigAssociativityMode>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000770:	f000 f8a9 	bl	80008c6 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000774:	f000 fe54 	bl	8001420 <HAL_ICACHE_Enable>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800077e:	f000 f8a2 	bl	80008c6 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t RX_Data[5] = {0};
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	2300      	movs	r3, #0
 8000794:	733b      	strb	r3, [r7, #12]
  uint8_t RX_Data_BREAK[] = "\r\n";
 8000796:	4a1b      	ldr	r2, [pc, #108]	; (8000804 <main+0x7c>)
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	6812      	ldr	r2, [r2, #0]
 800079c:	4611      	mov	r1, r2
 800079e:	8019      	strh	r1, [r3, #0]
 80007a0:	3302      	adds	r3, #2
 80007a2:	0c12      	lsrs	r2, r2, #16
 80007a4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a6:	f000 fac3 	bl	8000d30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007aa:	f000 f833 	bl	8000814 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80007ae:	f000 f87a 	bl	80008a6 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b2:	f7ff fefd 	bl	80005b0 <MX_GPIO_Init>
  MX_ICACHE_Init();
 80007b6:	f7ff ffd3 	bl	8000760 <MX_ICACHE_Init>
  MX_SPI1_Init();
 80007ba:	f000 f889 	bl	80008d0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80007be:	f000 f9d7 	bl	8000b70 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_SPI_Receive(&hspi1, RX_Data, sizeof(RX_Data), 1000);
 80007c2:	f107 0108 	add.w	r1, r7, #8
 80007c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ca:	2205      	movs	r2, #5
 80007cc:	480e      	ldr	r0, [pc, #56]	; (8000808 <main+0x80>)
 80007ce:	f005 fa7d 	bl	8005ccc <HAL_SPI_Receive>
	HAL_UART_Transmit(&huart1, RX_Data, sizeof(RX_Data), 1000);
 80007d2:	f107 0108 	add.w	r1, r7, #8
 80007d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007da:	2205      	movs	r2, #5
 80007dc:	480b      	ldr	r0, [pc, #44]	; (800080c <main+0x84>)
 80007de:	f005 fd71 	bl	80062c4 <HAL_UART_Transmit>


	HAL_UART_Transmit(&huart1, RX_Data_BREAK, sizeof(RX_Data_BREAK), 100);
 80007e2:	1d39      	adds	r1, r7, #4
 80007e4:	2364      	movs	r3, #100	; 0x64
 80007e6:	2203      	movs	r2, #3
 80007e8:	4808      	ldr	r0, [pc, #32]	; (800080c <main+0x84>)
 80007ea:	f005 fd6b 	bl	80062c4 <HAL_UART_Transmit>


	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2180      	movs	r1, #128	; 0x80
 80007f2:	4807      	ldr	r0, [pc, #28]	; (8000810 <main+0x88>)
 80007f4:	f000 fddc 	bl	80013b0 <HAL_GPIO_WritePin>
	//HAL_Delay(200);
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	2180      	movs	r1, #128	; 0x80
 80007fc:	4804      	ldr	r0, [pc, #16]	; (8000810 <main+0x88>)
 80007fe:	f000 fdd7 	bl	80013b0 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, RX_Data, sizeof(RX_Data), 1000);
 8000802:	e7de      	b.n	80007c2 <main+0x3a>
 8000804:	08006de4 	.word	0x08006de4
 8000808:	20000028 	.word	0x20000028
 800080c:	200000b8 	.word	0x200000b8
 8000810:	42020400 	.word	0x42020400

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b09e      	sub	sp, #120	; 0x78
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 0318 	add.w	r3, r7, #24
 800081e:	2260      	movs	r2, #96	; 0x60
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f006 faa6 	bl	8006d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	463b      	mov	r3, r7
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]
 8000836:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE3) != HAL_OK)
 8000838:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800083c:	f000 fe00 	bl	8001440 <HAL_PWREx_ControlVoltageScaling>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000846:	f000 f83e 	bl	80008c6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800084a:	2310      	movs	r3, #16
 800084c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800084e:	2301      	movs	r3, #1
 8000850:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000852:	2310      	movs	r3, #16
 8000854:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8000856:	2300      	movs	r3, #0
 8000858:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800085a:	2300      	movs	r3, #0
 800085c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085e:	f107 0318 	add.w	r3, r7, #24
 8000862:	4618      	mov	r0, r3
 8000864:	f000 fee8 	bl	8001638 <HAL_RCC_OscConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800086e:	f000 f82a 	bl	80008c6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000872:	231f      	movs	r3, #31
 8000874:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8000882:	2360      	movs	r3, #96	; 0x60
 8000884:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800088a:	463b      	mov	r3, r7
 800088c:	2101      	movs	r1, #1
 800088e:	4618      	mov	r0, r3
 8000890:	f001 fdae 	bl	80023f0 <HAL_RCC_ClockConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800089a:	f000 f814 	bl	80008c6 <Error_Handler>
  }
}
 800089e:	bf00      	nop
 80008a0:	3778      	adds	r7, #120	; 0x78
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 80008aa:	f000 fea5 	bl	80015f8 <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008ae:	f000 feb3 	bl	8001618 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80008b2:	2002      	movs	r0, #2
 80008b4:	f000 fe50 	bl	8001558 <HAL_PWREx_ConfigSupply>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemPower_Config+0x1c>
  {
    Error_Handler();
 80008be:	f000 f802 	bl	80008c6 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ca:	b672      	cpsid	i
}
 80008cc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ce:	e7fe      	b.n	80008ce <Error_Handler+0x8>

080008d0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80008e0:	4b2e      	ldr	r3, [pc, #184]	; (800099c <MX_SPI1_Init+0xcc>)
 80008e2:	4a2f      	ldr	r2, [pc, #188]	; (80009a0 <MX_SPI1_Init+0xd0>)
 80008e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80008e6:	4b2d      	ldr	r3, [pc, #180]	; (800099c <MX_SPI1_Init+0xcc>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80008ec:	4b2b      	ldr	r3, [pc, #172]	; (800099c <MX_SPI1_Init+0xcc>)
 80008ee:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80008f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008f4:	4b29      	ldr	r3, [pc, #164]	; (800099c <MX_SPI1_Init+0xcc>)
 80008f6:	2207      	movs	r2, #7
 80008f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008fa:	4b28      	ldr	r3, [pc, #160]	; (800099c <MX_SPI1_Init+0xcc>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000900:	4b26      	ldr	r3, [pc, #152]	; (800099c <MX_SPI1_Init+0xcc>)
 8000902:	2200      	movs	r2, #0
 8000904:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000906:	4b25      	ldr	r3, [pc, #148]	; (800099c <MX_SPI1_Init+0xcc>)
 8000908:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800090c:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800090e:	4b23      	ldr	r3, [pc, #140]	; (800099c <MX_SPI1_Init+0xcc>)
 8000910:	2200      	movs	r2, #0
 8000912:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000914:	4b21      	ldr	r3, [pc, #132]	; (800099c <MX_SPI1_Init+0xcc>)
 8000916:	2200      	movs	r2, #0
 8000918:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800091a:	4b20      	ldr	r3, [pc, #128]	; (800099c <MX_SPI1_Init+0xcc>)
 800091c:	2200      	movs	r2, #0
 800091e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000920:	4b1e      	ldr	r3, [pc, #120]	; (800099c <MX_SPI1_Init+0xcc>)
 8000922:	2207      	movs	r2, #7
 8000924:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000926:	4b1d      	ldr	r3, [pc, #116]	; (800099c <MX_SPI1_Init+0xcc>)
 8000928:	2200      	movs	r2, #0
 800092a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800092c:	4b1b      	ldr	r3, [pc, #108]	; (800099c <MX_SPI1_Init+0xcc>)
 800092e:	2200      	movs	r2, #0
 8000930:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000932:	4b1a      	ldr	r3, [pc, #104]	; (800099c <MX_SPI1_Init+0xcc>)
 8000934:	2200      	movs	r2, #0
 8000936:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000938:	4b18      	ldr	r3, [pc, #96]	; (800099c <MX_SPI1_Init+0xcc>)
 800093a:	2200      	movs	r2, #0
 800093c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800093e:	4b17      	ldr	r3, [pc, #92]	; (800099c <MX_SPI1_Init+0xcc>)
 8000940:	2200      	movs	r2, #0
 8000942:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000944:	4b15      	ldr	r3, [pc, #84]	; (800099c <MX_SPI1_Init+0xcc>)
 8000946:	2200      	movs	r2, #0
 8000948:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800094a:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_SPI1_Init+0xcc>)
 800094c:	2200      	movs	r2, #0
 800094e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_SPI1_Init+0xcc>)
 8000952:	2200      	movs	r2, #0
 8000954:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_SPI1_Init+0xcc>)
 8000958:	2200      	movs	r2, #0
 800095a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_SPI1_Init+0xcc>)
 800095e:	2200      	movs	r2, #0
 8000960:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000962:	480e      	ldr	r0, [pc, #56]	; (800099c <MX_SPI1_Init+0xcc>)
 8000964:	f005 f89c 	bl	8005aa0 <HAL_SPI_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800096e:	f7ff ffaa 	bl	80008c6 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000976:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800097a:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 800097c:	2300      	movs	r3, #0
 800097e:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	4619      	mov	r1, r3
 8000984:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_SPI1_Init+0xcc>)
 8000986:	f005 fc0c 	bl	80061a2 <HAL_SPIEx_SetConfigAutonomousMode>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_SPI1_Init+0xc4>
  {
    Error_Handler();
 8000990:	f7ff ff99 	bl	80008c6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000994:	bf00      	nop
 8000996:	3710      	adds	r7, #16
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000028 	.word	0x20000028
 80009a0:	40013000 	.word	0x40013000

080009a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b0c0      	sub	sp, #256	; 0x100
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009bc:	f107 0310 	add.w	r3, r7, #16
 80009c0:	22d8      	movs	r2, #216	; 0xd8
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f006 f9d5 	bl	8006d74 <memset>
  if(spiHandle->Instance==SPI1)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a27      	ldr	r2, [pc, #156]	; (8000a6c <HAL_SPI_MspInit+0xc8>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d145      	bne.n	8000a60 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80009d4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009d8:	f04f 0300 	mov.w	r3, #0
 80009dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PCLK2;
 80009e0:	2300      	movs	r3, #0
 80009e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009e6:	f107 0310 	add.w	r3, r7, #16
 80009ea:	4618      	mov	r0, r3
 80009ec:	f002 f8d6 	bl	8002b9c <HAL_RCCEx_PeriphCLKConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80009f6:	f7ff ff66 	bl	80008c6 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009fa:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <HAL_SPI_MspInit+0xcc>)
 80009fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000a00:	4a1b      	ldr	r2, [pc, #108]	; (8000a70 <HAL_SPI_MspInit+0xcc>)
 8000a02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a06:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000a0a:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <HAL_SPI_MspInit+0xcc>)
 8000a0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000a10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a18:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <HAL_SPI_MspInit+0xcc>)
 8000a1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a1e:	4a14      	ldr	r2, [pc, #80]	; (8000a70 <HAL_SPI_MspInit+0xcc>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a28:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <HAL_SPI_MspInit+0xcc>)
 8000a2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000a36:	23a0      	movs	r3, #160	; 0xa0
 8000a38:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a4e:	2305      	movs	r3, #5
 8000a50:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a54:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4806      	ldr	r0, [pc, #24]	; (8000a74 <HAL_SPI_MspInit+0xd0>)
 8000a5c:	f000 fad0 	bl	8001000 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000a60:	bf00      	nop
 8000a62:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40013000 	.word	0x40013000
 8000a70:	46020c00 	.word	0x46020c00
 8000a74:	42020000 	.word	0x42020000

08000a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <HAL_MspInit+0x30>)
 8000a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000a84:	4a08      	ldr	r2, [pc, #32]	; (8000aa8 <HAL_MspInit+0x30>)
 8000a86:	f043 0304 	orr.w	r3, r3, #4
 8000a8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_MspInit+0x30>)
 8000a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000a94:	f003 0304 	and.w	r3, r3, #4
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	46020c00 	.word	0x46020c00

08000aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <NMI_Handler+0x4>

08000ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <HardFault_Handler+0x4>

08000ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <MemManage_Handler+0x4>

08000abe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <BusFault_Handler+0x4>

08000ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <UsageFault_Handler+0x4>

08000aca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af8:	f000 f97e 	bl	8000df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b04:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <SystemInit+0x68>)
 8000b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b0a:	4a17      	ldr	r2, [pc, #92]	; (8000b68 <SystemInit+0x68>)
 8000b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000b14:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <SystemInit+0x6c>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <SystemInit+0x6c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000b20:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <SystemInit+0x6c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000b26:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <SystemInit+0x6c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <SystemInit+0x6c>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a0e      	ldr	r2, [pc, #56]	; (8000b6c <SystemInit+0x6c>)
 8000b32:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b36:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b3a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000b3c:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <SystemInit+0x6c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000b42:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <SystemInit+0x6c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a09      	ldr	r2, [pc, #36]	; (8000b6c <SystemInit+0x6c>)
 8000b48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b4c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000b4e:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <SystemInit+0x6c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b54:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <SystemInit+0x68>)
 8000b56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b5a:	609a      	str	r2, [r3, #8]
  #endif
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000ed00 	.word	0xe000ed00
 8000b6c:	46020c00 	.word	0x46020c00

08000b70 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b74:	4b22      	ldr	r3, [pc, #136]	; (8000c00 <MX_USART1_UART_Init+0x90>)
 8000b76:	4a23      	ldr	r2, [pc, #140]	; (8000c04 <MX_USART1_UART_Init+0x94>)
 8000b78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b7a:	4b21      	ldr	r3, [pc, #132]	; (8000c00 <MX_USART1_UART_Init+0x90>)
 8000b7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b82:	4b1f      	ldr	r3, [pc, #124]	; (8000c00 <MX_USART1_UART_Init+0x90>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b88:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <MX_USART1_UART_Init+0x90>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <MX_USART1_UART_Init+0x90>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b94:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <MX_USART1_UART_Init+0x90>)
 8000b96:	220c      	movs	r2, #12
 8000b98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9a:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <MX_USART1_UART_Init+0x90>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba0:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <MX_USART1_UART_Init+0x90>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ba6:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <MX_USART1_UART_Init+0x90>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bac:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <MX_USART1_UART_Init+0x90>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bb2:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <MX_USART1_UART_Init+0x90>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bb8:	4811      	ldr	r0, [pc, #68]	; (8000c00 <MX_USART1_UART_Init+0x90>)
 8000bba:	f005 fb33 	bl	8006224 <HAL_UART_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000bc4:	f7ff fe7f 	bl	80008c6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc8:	2100      	movs	r1, #0
 8000bca:	480d      	ldr	r0, [pc, #52]	; (8000c00 <MX_USART1_UART_Init+0x90>)
 8000bcc:	f006 f808 	bl	8006be0 <HAL_UARTEx_SetTxFifoThreshold>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000bd6:	f7ff fe76 	bl	80008c6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4808      	ldr	r0, [pc, #32]	; (8000c00 <MX_USART1_UART_Init+0x90>)
 8000bde:	f006 f83d 	bl	8006c5c <HAL_UARTEx_SetRxFifoThreshold>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000be8:	f7ff fe6d 	bl	80008c6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000bec:	4804      	ldr	r0, [pc, #16]	; (8000c00 <MX_USART1_UART_Init+0x90>)
 8000bee:	f005 ffbe 	bl	8006b6e <HAL_UARTEx_DisableFifoMode>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000bf8:	f7ff fe65 	bl	80008c6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	200000b8 	.word	0x200000b8
 8000c04:	40013800 	.word	0x40013800

08000c08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b0c0      	sub	sp, #256	; 0x100
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c20:	f107 0310 	add.w	r3, r7, #16
 8000c24:	22d8      	movs	r2, #216	; 0xd8
 8000c26:	2100      	movs	r1, #0
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f006 f8a3 	bl	8006d74 <memset>
  if(uartHandle->Instance==USART1)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a27      	ldr	r2, [pc, #156]	; (8000cd0 <HAL_UART_MspInit+0xc8>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d145      	bne.n	8000cc4 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c38:	f04f 0201 	mov.w	r2, #1
 8000c3c:	f04f 0300 	mov.w	r3, #0
 8000c40:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c44:	2300      	movs	r3, #0
 8000c46:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c48:	f107 0310 	add.w	r3, r7, #16
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f001 ffa5 	bl	8002b9c <HAL_RCCEx_PeriphCLKConfig>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000c58:	f7ff fe35 	bl	80008c6 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c5c:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <HAL_UART_MspInit+0xcc>)
 8000c5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000c62:	4a1c      	ldr	r2, [pc, #112]	; (8000cd4 <HAL_UART_MspInit+0xcc>)
 8000c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c68:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000c6c:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <HAL_UART_MspInit+0xcc>)
 8000c6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <HAL_UART_MspInit+0xcc>)
 8000c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c80:	4a14      	ldr	r2, [pc, #80]	; (8000cd4 <HAL_UART_MspInit+0xcc>)
 8000c82:	f043 0301 	orr.w	r3, r3, #1
 8000c86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c8a:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <HAL_UART_MspInit+0xcc>)
 8000c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c90:	f003 0301 	and.w	r3, r3, #1
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c98:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cb2:	2307      	movs	r3, #7
 8000cb4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4806      	ldr	r0, [pc, #24]	; (8000cd8 <HAL_UART_MspInit+0xd0>)
 8000cc0:	f000 f99e 	bl	8001000 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000cc4:	bf00      	nop
 8000cc6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40013800 	.word	0x40013800
 8000cd4:	46020c00 	.word	0x46020c00
 8000cd8:	42020000 	.word	0x42020000

08000cdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000cdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d14 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ce0:	f7ff ff0e 	bl	8000b00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ce4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ce6:	e003      	b.n	8000cf0 <LoopCopyDataInit>

08000ce8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000cea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000cec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000cee:	3104      	adds	r1, #4

08000cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000cf0:	480a      	ldr	r0, [pc, #40]	; (8000d1c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000cf4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000cf6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000cf8:	d3f6      	bcc.n	8000ce8 <CopyDataInit>
	ldr	r2, =_sbss
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000cfc:	e002      	b.n	8000d04 <LoopFillZerobss>

08000cfe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000cfe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d00:	f842 3b04 	str.w	r3, [r2], #4

08000d04 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <LoopForever+0x16>)
	cmp	r2, r3
 8000d06:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d08:	d3f9      	bcc.n	8000cfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d0a:	f006 f83b 	bl	8006d84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d0e:	f7ff fd3b 	bl	8000788 <main>

08000d12 <LoopForever>:

LoopForever:
    b LoopForever
 8000d12:	e7fe      	b.n	8000d12 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000d14:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8000d18:	08006ef8 	.word	0x08006ef8
	ldr	r0, =_sdata
 8000d1c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d20:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8000d24:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000d28:	20000150 	.word	0x20000150

08000d2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d2c:	e7fe      	b.n	8000d2c <ADC1_2_IRQHandler>
	...

08000d30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <HAL_Init+0x4c>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a10      	ldr	r2, [pc, #64]	; (8000d7c <HAL_Init+0x4c>)
 8000d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d40:	2003      	movs	r0, #3
 8000d42:	f000 f92b 	bl	8000f9c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000d46:	f001 fd45 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <HAL_Init+0x50>)
 8000d4e:	6a1b      	ldr	r3, [r3, #32]
 8000d50:	f003 030f 	and.w	r3, r3, #15
 8000d54:	490b      	ldr	r1, [pc, #44]	; (8000d84 <HAL_Init+0x54>)
 8000d56:	5ccb      	ldrb	r3, [r1, r3]
 8000d58:	fa22 f303 	lsr.w	r3, r2, r3
 8000d5c:	4a0a      	ldr	r2, [pc, #40]	; (8000d88 <HAL_Init+0x58>)
 8000d5e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d60:	200f      	movs	r0, #15
 8000d62:	f000 f813 	bl	8000d8c <HAL_InitTick>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e002      	b.n	8000d76 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d70:	f7ff fe82 	bl	8000a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40022000 	.word	0x40022000
 8000d80:	46020c00 	.word	0x46020c00
 8000d84:	08006de8 	.word	0x08006de8
 8000d88:	20000000 	.word	0x20000000

08000d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000d94:	4b15      	ldr	r3, [pc, #84]	; (8000dec <HAL_InitTick+0x60>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d101      	bne.n	8000da0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e021      	b.n	8000de4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000da0:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <HAL_InitTick+0x64>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4b11      	ldr	r3, [pc, #68]	; (8000dec <HAL_InitTick+0x60>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	4619      	mov	r1, r3
 8000daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 f915 	bl	8000fe6 <HAL_SYSTICK_Config>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e00e      	b.n	8000de4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b0f      	cmp	r3, #15
 8000dca:	d80a      	bhi.n	8000de2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	6879      	ldr	r1, [r7, #4]
 8000dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd4:	f000 f8ed 	bl	8000fb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd8:	4a06      	ldr	r2, [pc, #24]	; (8000df4 <HAL_InitTick+0x68>)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dde:	2300      	movs	r3, #0
 8000de0:	e000      	b.n	8000de4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000008 	.word	0x20000008
 8000df0:	20000000 	.word	0x20000000
 8000df4:	20000004 	.word	0x20000004

08000df8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_IncTick+0x20>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	461a      	mov	r2, r3
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_IncTick+0x24>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4413      	add	r3, r2
 8000e08:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <HAL_IncTick+0x24>)
 8000e0a:	6013      	str	r3, [r2, #0]
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20000008 	.word	0x20000008
 8000e1c:	2000014c 	.word	0x2000014c

08000e20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return uwTick;
 8000e24:	4b03      	ldr	r3, [pc, #12]	; (8000e34 <HAL_GetTick+0x14>)
 8000e26:	681b      	ldr	r3, [r3, #0]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	2000014c 	.word	0x2000014c

08000e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e54:	4013      	ands	r3, r2
 8000e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e6a:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	60d3      	str	r3, [r2, #12]
}
 8000e70:	bf00      	nop
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e84:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <__NVIC_GetPriorityGrouping+0x18>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	0a1b      	lsrs	r3, r3, #8
 8000e8a:	f003 0307 	and.w	r3, r3, #7
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	6039      	str	r1, [r7, #0]
 8000ea6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ea8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	db0a      	blt.n	8000ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	490c      	ldr	r1, [pc, #48]	; (8000ee8 <__NVIC_SetPriority+0x4c>)
 8000eb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eba:	0112      	lsls	r2, r2, #4
 8000ebc:	b2d2      	uxtb	r2, r2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec4:	e00a      	b.n	8000edc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4908      	ldr	r1, [pc, #32]	; (8000eec <__NVIC_SetPriority+0x50>)
 8000ecc:	88fb      	ldrh	r3, [r7, #6]
 8000ece:	f003 030f 	and.w	r3, r3, #15
 8000ed2:	3b04      	subs	r3, #4
 8000ed4:	0112      	lsls	r2, r2, #4
 8000ed6:	b2d2      	uxtb	r2, r2
 8000ed8:	440b      	add	r3, r1
 8000eda:	761a      	strb	r2, [r3, #24]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000e100 	.word	0xe000e100
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	; 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f1c3 0307 	rsb	r3, r3, #7
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	bf28      	it	cs
 8000f0e:	2304      	movcs	r3, #4
 8000f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3304      	adds	r3, #4
 8000f16:	2b06      	cmp	r3, #6
 8000f18:	d902      	bls.n	8000f20 <NVIC_EncodePriority+0x30>
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3b03      	subs	r3, #3
 8000f1e:	e000      	b.n	8000f22 <NVIC_EncodePriority+0x32>
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	f04f 32ff 	mov.w	r2, #4294967295
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	401a      	ands	r2, r3
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f38:	f04f 31ff 	mov.w	r1, #4294967295
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f42:	43d9      	mvns	r1, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	4313      	orrs	r3, r2
         );
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3724      	adds	r7, #36	; 0x24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
	...

08000f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f68:	d301      	bcc.n	8000f6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00f      	b.n	8000f8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <SysTick_Config+0x40>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f76:	210f      	movs	r1, #15
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f7ff ff8e 	bl	8000e9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <SysTick_Config+0x40>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f86:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <SysTick_Config+0x40>)
 8000f88:	2207      	movs	r2, #7
 8000f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	e000e010 	.word	0xe000e010

08000f9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ff47 	bl	8000e38 <__NVIC_SetPriorityGrouping>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b086      	sub	sp, #24
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	4603      	mov	r3, r0
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
 8000fbe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc0:	f7ff ff5e 	bl	8000e80 <__NVIC_GetPriorityGrouping>
 8000fc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	68b9      	ldr	r1, [r7, #8]
 8000fca:	6978      	ldr	r0, [r7, #20]
 8000fcc:	f7ff ff90 	bl	8000ef0 <NVIC_EncodePriority>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff5f 	bl	8000e9c <__NVIC_SetPriority>
}
 8000fde:	bf00      	nop
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff ffb2 	bl	8000f58 <SysTick_Config>
 8000ff4:	4603      	mov	r3, r0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001000:	b480      	push	{r7}
 8001002:	b089      	sub	sp, #36	; 0x24
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001012:	e1ba      	b.n	800138a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	2101      	movs	r1, #1
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	fa01 f303 	lsl.w	r3, r1, r3
 8001020:	4013      	ands	r3, r2
 8001022:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2b00      	cmp	r3, #0
 800102c:	f000 81aa 	beq.w	8001384 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a55      	ldr	r2, [pc, #340]	; (8001188 <HAL_GPIO_Init+0x188>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d15d      	bne.n	80010f4 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800103e:	2201      	movs	r2, #1
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	69fa      	ldr	r2, [r7, #28]
 800104a:	4013      	ands	r3, r2
 800104c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 0201 	and.w	r2, r3, #1
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	69fa      	ldr	r2, [r7, #28]
 800105e:	4313      	orrs	r3, r2
 8001060:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69fa      	ldr	r2, [r7, #28]
 8001066:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001068:	4a48      	ldr	r2, [pc, #288]	; (800118c <HAL_GPIO_Init+0x18c>)
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001070:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001072:	4a46      	ldr	r2, [pc, #280]	; (800118c <HAL_GPIO_Init+0x18c>)
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	4413      	add	r3, r2
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	08da      	lsrs	r2, r3, #3
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	3208      	adds	r2, #8
 8001086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800108a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	220f      	movs	r2, #15
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	69fa      	ldr	r2, [r7, #28]
 800109e:	4013      	ands	r3, r2
 80010a0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	f003 0307 	and.w	r3, r3, #7
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	220b      	movs	r2, #11
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69fa      	ldr	r2, [r7, #28]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	08da      	lsrs	r2, r3, #3
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	3208      	adds	r2, #8
 80010be:	69f9      	ldr	r1, [r7, #28]
 80010c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	2203      	movs	r2, #3
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69fa      	ldr	r2, [r7, #28]
 80010d8:	4013      	ands	r3, r2
 80010da:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	2202      	movs	r2, #2
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	69fa      	ldr	r2, [r7, #28]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	69fa      	ldr	r2, [r7, #28]
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	e067      	b.n	80011c4 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_Init+0x104>
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	2b12      	cmp	r3, #18
 8001102:	d145      	bne.n	8001190 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	08da      	lsrs	r2, r3, #3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3208      	adds	r2, #8
 800110c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001110:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	f003 0307 	and.w	r3, r3, #7
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	220f      	movs	r2, #15
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69fa      	ldr	r2, [r7, #28]
 8001124:	4013      	ands	r3, r2
 8001126:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	f003 020f 	and.w	r2, r3, #15
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69fa      	ldr	r2, [r7, #28]
 800113e:	4313      	orrs	r3, r2
 8001140:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	08da      	lsrs	r2, r3, #3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	3208      	adds	r2, #8
 800114a:	69f9      	ldr	r1, [r7, #28]
 800114c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	2203      	movs	r2, #3
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69fa      	ldr	r2, [r7, #28]
 8001164:	4013      	ands	r3, r2
 8001166:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 0203 	and.w	r2, r3, #3
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69fa      	ldr	r2, [r7, #28]
 800117a:	4313      	orrs	r3, r2
 800117c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	69fa      	ldr	r2, [r7, #28]
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	e01e      	b.n	80011c4 <HAL_GPIO_Init+0x1c4>
 8001186:	bf00      	nop
 8001188:	46020000 	.word	0x46020000
 800118c:	08006e40 	.word	0x08006e40
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	2203      	movs	r2, #3
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69fa      	ldr	r2, [r7, #28]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0203 	and.w	r2, r3, #3
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	69fa      	ldr	r2, [r7, #28]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	69fa      	ldr	r2, [r7, #28]
 80011c2:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d00b      	beq.n	80011e4 <HAL_GPIO_Init+0x1e4>
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d007      	beq.n	80011e4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011d8:	2b11      	cmp	r3, #17
 80011da:	d003      	beq.n	80011e4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	2b12      	cmp	r3, #18
 80011e2:	d130      	bne.n	8001246 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	2203      	movs	r2, #3
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69fa      	ldr	r2, [r7, #28]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	68da      	ldr	r2, [r3, #12]
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	69fa      	ldr	r2, [r7, #28]
 800120a:	4313      	orrs	r3, r2
 800120c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	69fa      	ldr	r2, [r7, #28]
 8001212:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800121a:	2201      	movs	r2, #1
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	69fa      	ldr	r2, [r7, #28]
 8001226:	4013      	ands	r3, r2
 8001228:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	091b      	lsrs	r3, r3, #4
 8001230:	f003 0201 	and.w	r2, r3, #1
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	69fa      	ldr	r2, [r7, #28]
 800123c:	4313      	orrs	r3, r2
 800123e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	69fa      	ldr	r2, [r7, #28]
 8001244:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2b03      	cmp	r3, #3
 800124c:	d017      	beq.n	800127e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	2203      	movs	r2, #3
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43db      	mvns	r3, r3
 8001260:	69fa      	ldr	r2, [r7, #28]
 8001262:	4013      	ands	r3, r2
 8001264:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	689a      	ldr	r2, [r3, #8]
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	69fa      	ldr	r2, [r7, #28]
 8001274:	4313      	orrs	r3, r2
 8001276:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	69fa      	ldr	r2, [r7, #28]
 800127c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d07c      	beq.n	8001384 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800128a:	4a47      	ldr	r2, [pc, #284]	; (80013a8 <HAL_GPIO_Init+0x3a8>)
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	089b      	lsrs	r3, r3, #2
 8001290:	3318      	adds	r3, #24
 8001292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001296:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	f003 0303 	and.w	r3, r3, #3
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	220f      	movs	r2, #15
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69fa      	ldr	r2, [r7, #28]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	0a9a      	lsrs	r2, r3, #10
 80012b2:	4b3e      	ldr	r3, [pc, #248]	; (80013ac <HAL_GPIO_Init+0x3ac>)
 80012b4:	4013      	ands	r3, r2
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	f002 0203 	and.w	r2, r2, #3
 80012bc:	00d2      	lsls	r2, r2, #3
 80012be:	4093      	lsls	r3, r2
 80012c0:	69fa      	ldr	r2, [r7, #28]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80012c6:	4938      	ldr	r1, [pc, #224]	; (80013a8 <HAL_GPIO_Init+0x3a8>)
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	089b      	lsrs	r3, r3, #2
 80012cc:	3318      	adds	r3, #24
 80012ce:	69fa      	ldr	r2, [r7, #28]
 80012d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80012d4:	4b34      	ldr	r3, [pc, #208]	; (80013a8 <HAL_GPIO_Init+0x3a8>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	43db      	mvns	r3, r3
 80012de:	69fa      	ldr	r2, [r7, #28]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80012f0:	69fa      	ldr	r2, [r7, #28]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80012f8:	4a2b      	ldr	r2, [pc, #172]	; (80013a8 <HAL_GPIO_Init+0x3a8>)
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80012fe:	4b2a      	ldr	r3, [pc, #168]	; (80013a8 <HAL_GPIO_Init+0x3a8>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	43db      	mvns	r3, r3
 8001308:	69fa      	ldr	r2, [r7, #28]
 800130a:	4013      	ands	r3, r2
 800130c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800131a:	69fa      	ldr	r2, [r7, #28]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4313      	orrs	r3, r2
 8001320:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8001322:	4a21      	ldr	r2, [pc, #132]	; (80013a8 <HAL_GPIO_Init+0x3a8>)
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001328:	4b1f      	ldr	r3, [pc, #124]	; (80013a8 <HAL_GPIO_Init+0x3a8>)
 800132a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800132e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	43db      	mvns	r3, r3
 8001334:	69fa      	ldr	r2, [r7, #28]
 8001336:	4013      	ands	r3, r2
 8001338:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8001346:	69fa      	ldr	r2, [r7, #28]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4313      	orrs	r3, r2
 800134c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800134e:	4a16      	ldr	r2, [pc, #88]	; (80013a8 <HAL_GPIO_Init+0x3a8>)
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8001356:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <HAL_GPIO_Init+0x3a8>)
 8001358:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800135c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	43db      	mvns	r3, r3
 8001362:	69fa      	ldr	r2, [r7, #28]
 8001364:	4013      	ands	r3, r2
 8001366:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8001374:	69fa      	ldr	r2, [r7, #28]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4313      	orrs	r3, r2
 800137a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 800137c:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <HAL_GPIO_Init+0x3a8>)
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	3301      	adds	r3, #1
 8001388:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	fa22 f303 	lsr.w	r3, r2, r3
 8001394:	2b00      	cmp	r3, #0
 8001396:	f47f ae3d 	bne.w	8001014 <HAL_GPIO_Init+0x14>
  }
}
 800139a:	bf00      	nop
 800139c:	bf00      	nop
 800139e:	3724      	adds	r7, #36	; 0x24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	46022000 	.word	0x46022000
 80013ac:	002f7f7f 	.word	0x002f7f7f

080013b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	807b      	strh	r3, [r7, #2]
 80013bc:	4613      	mov	r3, r2
 80013be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013c0:	787b      	ldrb	r3, [r7, #1]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013c6:	887a      	ldrh	r2, [r7, #2]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80013cc:	e002      	b.n	80013d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80013ce:	887a      	ldrh	r2, [r7, #2]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013e8:	2300      	movs	r3, #0
 80013ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80013ec:	4b0b      	ldr	r3, [pc, #44]	; (800141c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d002      	beq.n	80013fe <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	73fb      	strb	r3, [r7, #15]
 80013fc:	e007      	b.n	800140e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80013fe:	4b07      	ldr	r3, [pc, #28]	; (800141c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f023 0204 	bic.w	r2, r3, #4
 8001406:	4905      	ldr	r1, [pc, #20]	; (800141c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4313      	orrs	r3, r2
 800140c:	600b      	str	r3, [r1, #0]
  }

  return status;
 800140e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	40030400 	.word	0x40030400

08001420 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <HAL_ICACHE_Enable+0x1c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a04      	ldr	r2, [pc, #16]	; (800143c <HAL_ICACHE_Enable+0x1c>)
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	40030400 	.word	0x40030400

08001440 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8001448:	4b39      	ldr	r3, [pc, #228]	; (8001530 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800144a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800144c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001450:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	429a      	cmp	r2, r3
 8001458:	d10b      	bne.n	8001472 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001460:	d905      	bls.n	800146e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001462:	4b33      	ldr	r3, [pc, #204]	; (8001530 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	4a32      	ldr	r2, [pc, #200]	; (8001530 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800146c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800146e:	2300      	movs	r3, #0
 8001470:	e057      	b.n	8001522 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001478:	d90a      	bls.n	8001490 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800147a:	4b2d      	ldr	r3, [pc, #180]	; (8001530 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4313      	orrs	r3, r2
 8001486:	4a2a      	ldr	r2, [pc, #168]	; (8001530 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800148c:	60d3      	str	r3, [r2, #12]
 800148e:	e007      	b.n	80014a0 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8001490:	4b27      	ldr	r3, [pc, #156]	; (8001530 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8001498:	4925      	ldr	r1, [pc, #148]	; (8001530 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4313      	orrs	r3, r2
 800149e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80014a0:	4b24      	ldr	r3, [pc, #144]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a24      	ldr	r2, [pc, #144]	; (8001538 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80014a6:	fba2 2303 	umull	r2, r3, r2, r3
 80014aa:	099b      	lsrs	r3, r3, #6
 80014ac:	2232      	movs	r2, #50	; 0x32
 80014ae:	fb02 f303 	mul.w	r3, r2, r3
 80014b2:	4a21      	ldr	r2, [pc, #132]	; (8001538 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80014b4:	fba2 2303 	umull	r2, r3, r2, r3
 80014b8:	099b      	lsrs	r3, r3, #6
 80014ba:	3301      	adds	r3, #1
 80014bc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80014be:	e002      	b.n	80014c6 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80014c6:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d102      	bne.n	80014d8 <HAL_PWREx_ControlVoltageScaling+0x98>
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1f3      	bne.n	80014c0 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d01b      	beq.n	8001516 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a15      	ldr	r2, [pc, #84]	; (8001538 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80014e4:	fba2 2303 	umull	r2, r3, r2, r3
 80014e8:	099b      	lsrs	r3, r3, #6
 80014ea:	2232      	movs	r2, #50	; 0x32
 80014ec:	fb02 f303 	mul.w	r3, r2, r3
 80014f0:	4a11      	ldr	r2, [pc, #68]	; (8001538 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80014f2:	fba2 2303 	umull	r2, r3, r2, r3
 80014f6:	099b      	lsrs	r3, r3, #6
 80014f8:	3301      	adds	r3, #1
 80014fa:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80014fc:	e002      	b.n	8001504 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	3b01      	subs	r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001504:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001508:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d102      	bne.n	8001516 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f3      	bne.n	80014fe <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e000      	b.n	8001522 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	46020800 	.word	0x46020800
 8001534:	20000000 	.word	0x20000000
 8001538:	10624dd3 	.word	0x10624dd3

0800153c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <HAL_PWREx_GetVoltageRange+0x18>)
 8001542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001544:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8001548:	4618      	mov	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	46020800 	.word	0x46020800

08001558 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001560:	4b22      	ldr	r3, [pc, #136]	; (80015ec <HAL_PWREx_ConfigSupply+0x94>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a22      	ldr	r2, [pc, #136]	; (80015f0 <HAL_PWREx_ConfigSupply+0x98>)
 8001566:	fba2 2303 	umull	r2, r3, r2, r3
 800156a:	099b      	lsrs	r3, r3, #6
 800156c:	2232      	movs	r2, #50	; 0x32
 800156e:	fb02 f303 	mul.w	r3, r2, r3
 8001572:	4a1f      	ldr	r2, [pc, #124]	; (80015f0 <HAL_PWREx_ConfigSupply+0x98>)
 8001574:	fba2 2303 	umull	r2, r3, r2, r3
 8001578:	099b      	lsrs	r3, r3, #6
 800157a:	3301      	adds	r3, #1
 800157c:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d113      	bne.n	80015ac <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8001584:	4b1b      	ldr	r3, [pc, #108]	; (80015f4 <HAL_PWREx_ConfigSupply+0x9c>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	4a1a      	ldr	r2, [pc, #104]	; (80015f4 <HAL_PWREx_ConfigSupply+0x9c>)
 800158a:	f023 0302 	bic.w	r3, r3, #2
 800158e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001590:	e002      	b.n	8001598 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	3b01      	subs	r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001598:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <HAL_PWREx_ConfigSupply+0x9c>)
 800159a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d116      	bne.n	80015d2 <HAL_PWREx_ConfigSupply+0x7a>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f3      	bne.n	8001592 <HAL_PWREx_ConfigSupply+0x3a>
 80015aa:	e012      	b.n	80015d2 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80015ac:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <HAL_PWREx_ConfigSupply+0x9c>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	4a10      	ldr	r2, [pc, #64]	; (80015f4 <HAL_PWREx_ConfigSupply+0x9c>)
 80015b2:	f043 0302 	orr.w	r3, r3, #2
 80015b6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80015b8:	e002      	b.n	80015c0 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	3b01      	subs	r3, #1
 80015be:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <HAL_PWREx_ConfigSupply+0x9c>)
 80015c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d102      	bne.n	80015d2 <HAL_PWREx_ConfigSupply+0x7a>
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f3      	bne.n	80015ba <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d101      	bne.n	80015dc <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e000      	b.n	80015de <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	20000000 	.word	0x20000000
 80015f0:	10624dd3 	.word	0x10624dd3
 80015f4:	46020800 	.word	0x46020800

080015f8 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <HAL_PWREx_EnableVddIO2+0x1c>)
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	4a04      	ldr	r2, [pc, #16]	; (8001614 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001602:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001606:	6113      	str	r3, [r2, #16]
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	46020800 	.word	0x46020800

08001618 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800161e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001620:	4a04      	ldr	r2, [pc, #16]	; (8001634 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	46020800 	.word	0x46020800

08001638 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08e      	sub	sp, #56	; 0x38
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8001640:	2300      	movs	r3, #0
 8001642:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d102      	bne.n	8001652 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	f000 bec8 	b.w	80023e2 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001652:	4b99      	ldr	r3, [pc, #612]	; (80018b8 <HAL_RCC_OscConfig+0x280>)
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	f003 030c 	and.w	r3, r3, #12
 800165a:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800165c:	4b96      	ldr	r3, [pc, #600]	; (80018b8 <HAL_RCC_OscConfig+0x280>)
 800165e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0310 	and.w	r3, r3, #16
 800166e:	2b00      	cmp	r3, #0
 8001670:	f000 816c 	beq.w	800194c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001676:	2b00      	cmp	r3, #0
 8001678:	d007      	beq.n	800168a <HAL_RCC_OscConfig+0x52>
 800167a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800167c:	2b0c      	cmp	r3, #12
 800167e:	f040 80de 	bne.w	800183e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001684:	2b01      	cmp	r3, #1
 8001686:	f040 80da 	bne.w	800183e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d102      	bne.n	8001698 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	f000 bea5 	b.w	80023e2 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800169c:	4b86      	ldr	r3, [pc, #536]	; (80018b8 <HAL_RCC_OscConfig+0x280>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d004      	beq.n	80016b2 <HAL_RCC_OscConfig+0x7a>
 80016a8:	4b83      	ldr	r3, [pc, #524]	; (80018b8 <HAL_RCC_OscConfig+0x280>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80016b0:	e005      	b.n	80016be <HAL_RCC_OscConfig+0x86>
 80016b2:	4b81      	ldr	r3, [pc, #516]	; (80018b8 <HAL_RCC_OscConfig+0x280>)
 80016b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016b8:	041b      	lsls	r3, r3, #16
 80016ba:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80016be:	4293      	cmp	r3, r2
 80016c0:	d255      	bcs.n	800176e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80016c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d10a      	bne.n	80016de <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016cc:	4618      	mov	r0, r3
 80016ce:	f001 f9df 	bl	8002a90 <RCC_SetFlashLatencyFromMSIRange>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d002      	beq.n	80016de <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	f000 be82 	b.w	80023e2 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80016de:	4b76      	ldr	r3, [pc, #472]	; (80018b8 <HAL_RCC_OscConfig+0x280>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	4a75      	ldr	r2, [pc, #468]	; (80018b8 <HAL_RCC_OscConfig+0x280>)
 80016e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016e8:	6093      	str	r3, [r2, #8]
 80016ea:	4b73      	ldr	r3, [pc, #460]	; (80018b8 <HAL_RCC_OscConfig+0x280>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f6:	4970      	ldr	r1, [pc, #448]	; (80018b8 <HAL_RCC_OscConfig+0x280>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001700:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001704:	d309      	bcc.n	800171a <HAL_RCC_OscConfig+0xe2>
 8001706:	4b6c      	ldr	r3, [pc, #432]	; (80018b8 <HAL_RCC_OscConfig+0x280>)
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	f023 021f 	bic.w	r2, r3, #31
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	4969      	ldr	r1, [pc, #420]	; (80018b8 <HAL_RCC_OscConfig+0x280>)
 8001714:	4313      	orrs	r3, r2
 8001716:	60cb      	str	r3, [r1, #12]
 8001718:	e07e      	b.n	8001818 <HAL_RCC_OscConfig+0x1e0>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171e:	2b00      	cmp	r3, #0
 8001720:	da0a      	bge.n	8001738 <HAL_RCC_OscConfig+0x100>
 8001722:	4b65      	ldr	r3, [pc, #404]	; (80018b8 <HAL_RCC_OscConfig+0x280>)
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	015b      	lsls	r3, r3, #5
 8001730:	4961      	ldr	r1, [pc, #388]	; (80018b8 <HAL_RCC_OscConfig+0x280>)
 8001732:	4313      	orrs	r3, r2
 8001734:	60cb      	str	r3, [r1, #12]
 8001736:	e06f      	b.n	8001818 <HAL_RCC_OscConfig+0x1e0>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001740:	d30a      	bcc.n	8001758 <HAL_RCC_OscConfig+0x120>
 8001742:	4b5d      	ldr	r3, [pc, #372]	; (80018b8 <HAL_RCC_OscConfig+0x280>)
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	029b      	lsls	r3, r3, #10
 8001750:	4959      	ldr	r1, [pc, #356]	; (80018b8 <HAL_RCC_OscConfig+0x280>)
 8001752:	4313      	orrs	r3, r2
 8001754:	60cb      	str	r3, [r1, #12]
 8001756:	e05f      	b.n	8001818 <HAL_RCC_OscConfig+0x1e0>
 8001758:	4b57      	ldr	r3, [pc, #348]	; (80018b8 <HAL_RCC_OscConfig+0x280>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	03db      	lsls	r3, r3, #15
 8001766:	4954      	ldr	r1, [pc, #336]	; (80018b8 <HAL_RCC_OscConfig+0x280>)
 8001768:	4313      	orrs	r3, r2
 800176a:	60cb      	str	r3, [r1, #12]
 800176c:	e054      	b.n	8001818 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800176e:	4b52      	ldr	r3, [pc, #328]	; (80018b8 <HAL_RCC_OscConfig+0x280>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	4a51      	ldr	r2, [pc, #324]	; (80018b8 <HAL_RCC_OscConfig+0x280>)
 8001774:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001778:	6093      	str	r3, [r2, #8]
 800177a:	4b4f      	ldr	r3, [pc, #316]	; (80018b8 <HAL_RCC_OscConfig+0x280>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001786:	494c      	ldr	r1, [pc, #304]	; (80018b8 <HAL_RCC_OscConfig+0x280>)
 8001788:	4313      	orrs	r3, r2
 800178a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001790:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001794:	d309      	bcc.n	80017aa <HAL_RCC_OscConfig+0x172>
 8001796:	4b48      	ldr	r3, [pc, #288]	; (80018b8 <HAL_RCC_OscConfig+0x280>)
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	f023 021f 	bic.w	r2, r3, #31
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a1b      	ldr	r3, [r3, #32]
 80017a2:	4945      	ldr	r1, [pc, #276]	; (80018b8 <HAL_RCC_OscConfig+0x280>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	60cb      	str	r3, [r1, #12]
 80017a8:	e028      	b.n	80017fc <HAL_RCC_OscConfig+0x1c4>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	da0a      	bge.n	80017c8 <HAL_RCC_OscConfig+0x190>
 80017b2:	4b41      	ldr	r3, [pc, #260]	; (80018b8 <HAL_RCC_OscConfig+0x280>)
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a1b      	ldr	r3, [r3, #32]
 80017be:	015b      	lsls	r3, r3, #5
 80017c0:	493d      	ldr	r1, [pc, #244]	; (80018b8 <HAL_RCC_OscConfig+0x280>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	60cb      	str	r3, [r1, #12]
 80017c6:	e019      	b.n	80017fc <HAL_RCC_OscConfig+0x1c4>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017d0:	d30a      	bcc.n	80017e8 <HAL_RCC_OscConfig+0x1b0>
 80017d2:	4b39      	ldr	r3, [pc, #228]	; (80018b8 <HAL_RCC_OscConfig+0x280>)
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a1b      	ldr	r3, [r3, #32]
 80017de:	029b      	lsls	r3, r3, #10
 80017e0:	4935      	ldr	r1, [pc, #212]	; (80018b8 <HAL_RCC_OscConfig+0x280>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	60cb      	str	r3, [r1, #12]
 80017e6:	e009      	b.n	80017fc <HAL_RCC_OscConfig+0x1c4>
 80017e8:	4b33      	ldr	r3, [pc, #204]	; (80018b8 <HAL_RCC_OscConfig+0x280>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	03db      	lsls	r3, r3, #15
 80017f6:	4930      	ldr	r1, [pc, #192]	; (80018b8 <HAL_RCC_OscConfig+0x280>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80017fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10a      	bne.n	8001818 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001806:	4618      	mov	r0, r3
 8001808:	f001 f942 	bl	8002a90 <RCC_SetFlashLatencyFromMSIRange>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d002      	beq.n	8001818 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	f000 bde5 	b.w	80023e2 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8001818:	f001 f8e4 	bl	80029e4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800181c:	4b27      	ldr	r3, [pc, #156]	; (80018bc <HAL_RCC_OscConfig+0x284>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fab3 	bl	8000d8c <HAL_InitTick>
 8001826:	4603      	mov	r3, r0
 8001828:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 800182c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001830:	2b00      	cmp	r3, #0
 8001832:	f000 808a 	beq.w	800194a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8001836:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800183a:	f000 bdd2 	b.w	80023e2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d066      	beq.n	8001914 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8001846:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <HAL_RCC_OscConfig+0x280>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a1b      	ldr	r2, [pc, #108]	; (80018b8 <HAL_RCC_OscConfig+0x280>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001852:	f7ff fae5 	bl	8000e20 <HAL_GetTick>
 8001856:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001858:	e009      	b.n	800186e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800185a:	f7ff fae1 	bl	8000e20 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d902      	bls.n	800186e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	f000 bdba 	b.w	80023e2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800186e:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <HAL_RCC_OscConfig+0x280>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	2b00      	cmp	r3, #0
 8001878:	d0ef      	beq.n	800185a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800187a:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <HAL_RCC_OscConfig+0x280>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	4a0e      	ldr	r2, [pc, #56]	; (80018b8 <HAL_RCC_OscConfig+0x280>)
 8001880:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001884:	6093      	str	r3, [r2, #8]
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <HAL_RCC_OscConfig+0x280>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001892:	4909      	ldr	r1, [pc, #36]	; (80018b8 <HAL_RCC_OscConfig+0x280>)
 8001894:	4313      	orrs	r3, r2
 8001896:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80018a0:	d30e      	bcc.n	80018c0 <HAL_RCC_OscConfig+0x288>
 80018a2:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <HAL_RCC_OscConfig+0x280>)
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	f023 021f 	bic.w	r2, r3, #31
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a1b      	ldr	r3, [r3, #32]
 80018ae:	4902      	ldr	r1, [pc, #8]	; (80018b8 <HAL_RCC_OscConfig+0x280>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	60cb      	str	r3, [r1, #12]
 80018b4:	e04a      	b.n	800194c <HAL_RCC_OscConfig+0x314>
 80018b6:	bf00      	nop
 80018b8:	46020c00 	.word	0x46020c00
 80018bc:	20000004 	.word	0x20000004
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	da0a      	bge.n	80018de <HAL_RCC_OscConfig+0x2a6>
 80018c8:	4b98      	ldr	r3, [pc, #608]	; (8001b2c <HAL_RCC_OscConfig+0x4f4>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	015b      	lsls	r3, r3, #5
 80018d6:	4995      	ldr	r1, [pc, #596]	; (8001b2c <HAL_RCC_OscConfig+0x4f4>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	60cb      	str	r3, [r1, #12]
 80018dc:	e036      	b.n	800194c <HAL_RCC_OscConfig+0x314>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018e6:	d30a      	bcc.n	80018fe <HAL_RCC_OscConfig+0x2c6>
 80018e8:	4b90      	ldr	r3, [pc, #576]	; (8001b2c <HAL_RCC_OscConfig+0x4f4>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	029b      	lsls	r3, r3, #10
 80018f6:	498d      	ldr	r1, [pc, #564]	; (8001b2c <HAL_RCC_OscConfig+0x4f4>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	60cb      	str	r3, [r1, #12]
 80018fc:	e026      	b.n	800194c <HAL_RCC_OscConfig+0x314>
 80018fe:	4b8b      	ldr	r3, [pc, #556]	; (8001b2c <HAL_RCC_OscConfig+0x4f4>)
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a1b      	ldr	r3, [r3, #32]
 800190a:	03db      	lsls	r3, r3, #15
 800190c:	4987      	ldr	r1, [pc, #540]	; (8001b2c <HAL_RCC_OscConfig+0x4f4>)
 800190e:	4313      	orrs	r3, r2
 8001910:	60cb      	str	r3, [r1, #12]
 8001912:	e01b      	b.n	800194c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8001914:	4b85      	ldr	r3, [pc, #532]	; (8001b2c <HAL_RCC_OscConfig+0x4f4>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a84      	ldr	r2, [pc, #528]	; (8001b2c <HAL_RCC_OscConfig+0x4f4>)
 800191a:	f023 0301 	bic.w	r3, r3, #1
 800191e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001920:	f7ff fa7e 	bl	8000e20 <HAL_GetTick>
 8001924:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001926:	e009      	b.n	800193c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001928:	f7ff fa7a 	bl	8000e20 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d902      	bls.n	800193c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	f000 bd53 	b.w	80023e2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800193c:	4b7b      	ldr	r3, [pc, #492]	; (8001b2c <HAL_RCC_OscConfig+0x4f4>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1ef      	bne.n	8001928 <HAL_RCC_OscConfig+0x2f0>
 8001948:	e000      	b.n	800194c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800194a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 808b 	beq.w	8001a70 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800195a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800195c:	2b08      	cmp	r3, #8
 800195e:	d005      	beq.n	800196c <HAL_RCC_OscConfig+0x334>
 8001960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001962:	2b0c      	cmp	r3, #12
 8001964:	d109      	bne.n	800197a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001968:	2b03      	cmp	r3, #3
 800196a:	d106      	bne.n	800197a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d17d      	bne.n	8001a70 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	f000 bd34 	b.w	80023e2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001982:	d106      	bne.n	8001992 <HAL_RCC_OscConfig+0x35a>
 8001984:	4b69      	ldr	r3, [pc, #420]	; (8001b2c <HAL_RCC_OscConfig+0x4f4>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a68      	ldr	r2, [pc, #416]	; (8001b2c <HAL_RCC_OscConfig+0x4f4>)
 800198a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800198e:	6013      	str	r3, [r2, #0]
 8001990:	e041      	b.n	8001a16 <HAL_RCC_OscConfig+0x3de>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800199a:	d112      	bne.n	80019c2 <HAL_RCC_OscConfig+0x38a>
 800199c:	4b63      	ldr	r3, [pc, #396]	; (8001b2c <HAL_RCC_OscConfig+0x4f4>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a62      	ldr	r2, [pc, #392]	; (8001b2c <HAL_RCC_OscConfig+0x4f4>)
 80019a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	4b60      	ldr	r3, [pc, #384]	; (8001b2c <HAL_RCC_OscConfig+0x4f4>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a5f      	ldr	r2, [pc, #380]	; (8001b2c <HAL_RCC_OscConfig+0x4f4>)
 80019ae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	4b5d      	ldr	r3, [pc, #372]	; (8001b2c <HAL_RCC_OscConfig+0x4f4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a5c      	ldr	r2, [pc, #368]	; (8001b2c <HAL_RCC_OscConfig+0x4f4>)
 80019ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	e029      	b.n	8001a16 <HAL_RCC_OscConfig+0x3de>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80019ca:	d112      	bne.n	80019f2 <HAL_RCC_OscConfig+0x3ba>
 80019cc:	4b57      	ldr	r3, [pc, #348]	; (8001b2c <HAL_RCC_OscConfig+0x4f4>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a56      	ldr	r2, [pc, #344]	; (8001b2c <HAL_RCC_OscConfig+0x4f4>)
 80019d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	4b54      	ldr	r3, [pc, #336]	; (8001b2c <HAL_RCC_OscConfig+0x4f4>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a53      	ldr	r2, [pc, #332]	; (8001b2c <HAL_RCC_OscConfig+0x4f4>)
 80019de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80019e2:	6013      	str	r3, [r2, #0]
 80019e4:	4b51      	ldr	r3, [pc, #324]	; (8001b2c <HAL_RCC_OscConfig+0x4f4>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a50      	ldr	r2, [pc, #320]	; (8001b2c <HAL_RCC_OscConfig+0x4f4>)
 80019ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	e011      	b.n	8001a16 <HAL_RCC_OscConfig+0x3de>
 80019f2:	4b4e      	ldr	r3, [pc, #312]	; (8001b2c <HAL_RCC_OscConfig+0x4f4>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a4d      	ldr	r2, [pc, #308]	; (8001b2c <HAL_RCC_OscConfig+0x4f4>)
 80019f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	4b4b      	ldr	r3, [pc, #300]	; (8001b2c <HAL_RCC_OscConfig+0x4f4>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a4a      	ldr	r2, [pc, #296]	; (8001b2c <HAL_RCC_OscConfig+0x4f4>)
 8001a04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	4b48      	ldr	r3, [pc, #288]	; (8001b2c <HAL_RCC_OscConfig+0x4f4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a47      	ldr	r2, [pc, #284]	; (8001b2c <HAL_RCC_OscConfig+0x4f4>)
 8001a10:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001a14:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d014      	beq.n	8001a48 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8001a1e:	f7ff f9ff 	bl	8000e20 <HAL_GetTick>
 8001a22:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a24:	e009      	b.n	8001a3a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a26:	f7ff f9fb 	bl	8000e20 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b64      	cmp	r3, #100	; 0x64
 8001a32:	d902      	bls.n	8001a3a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	f000 bcd4 	b.w	80023e2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a3a:	4b3c      	ldr	r3, [pc, #240]	; (8001b2c <HAL_RCC_OscConfig+0x4f4>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0ef      	beq.n	8001a26 <HAL_RCC_OscConfig+0x3ee>
 8001a46:	e013      	b.n	8001a70 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8001a48:	f7ff f9ea 	bl	8000e20 <HAL_GetTick>
 8001a4c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a4e:	e009      	b.n	8001a64 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a50:	f7ff f9e6 	bl	8000e20 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b64      	cmp	r3, #100	; 0x64
 8001a5c:	d902      	bls.n	8001a64 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	f000 bcbf 	b.w	80023e2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a64:	4b31      	ldr	r3, [pc, #196]	; (8001b2c <HAL_RCC_OscConfig+0x4f4>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1ef      	bne.n	8001a50 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d05f      	beq.n	8001b3c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	d005      	beq.n	8001a8e <HAL_RCC_OscConfig+0x456>
 8001a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a84:	2b0c      	cmp	r3, #12
 8001a86:	d114      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d111      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d102      	bne.n	8001a9c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	f000 bca3 	b.w	80023e2 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001a9c:	4b23      	ldr	r3, [pc, #140]	; (8001b2c <HAL_RCC_OscConfig+0x4f4>)
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	041b      	lsls	r3, r3, #16
 8001aaa:	4920      	ldr	r1, [pc, #128]	; (8001b2c <HAL_RCC_OscConfig+0x4f4>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001ab0:	e044      	b.n	8001b3c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d024      	beq.n	8001b04 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8001aba:	4b1c      	ldr	r3, [pc, #112]	; (8001b2c <HAL_RCC_OscConfig+0x4f4>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a1b      	ldr	r2, [pc, #108]	; (8001b2c <HAL_RCC_OscConfig+0x4f4>)
 8001ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001ac6:	f7ff f9ab 	bl	8000e20 <HAL_GetTick>
 8001aca:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001acc:	e009      	b.n	8001ae2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ace:	f7ff f9a7 	bl	8000e20 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d902      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	f000 bc80 	b.w	80023e2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae2:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <HAL_RCC_OscConfig+0x4f4>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d0ef      	beq.n	8001ace <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001aee:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <HAL_RCC_OscConfig+0x4f4>)
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	041b      	lsls	r3, r3, #16
 8001afc:	490b      	ldr	r1, [pc, #44]	; (8001b2c <HAL_RCC_OscConfig+0x4f4>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	610b      	str	r3, [r1, #16]
 8001b02:	e01b      	b.n	8001b3c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8001b04:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <HAL_RCC_OscConfig+0x4f4>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a08      	ldr	r2, [pc, #32]	; (8001b2c <HAL_RCC_OscConfig+0x4f4>)
 8001b0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b0e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001b10:	f7ff f986 	bl	8000e20 <HAL_GetTick>
 8001b14:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b16:	e00b      	b.n	8001b30 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b18:	f7ff f982 	bl	8000e20 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d904      	bls.n	8001b30 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	f000 bc5b 	b.w	80023e2 <HAL_RCC_OscConfig+0xdaa>
 8001b2c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b30:	4baf      	ldr	r3, [pc, #700]	; (8001df0 <HAL_RCC_OscConfig+0x7b8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1ed      	bne.n	8001b18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0308 	and.w	r3, r3, #8
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 80c8 	beq.w	8001cda <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b50:	4ba7      	ldr	r3, [pc, #668]	; (8001df0 <HAL_RCC_OscConfig+0x7b8>)
 8001b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b56:	f003 0304 	and.w	r3, r3, #4
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d111      	bne.n	8001b82 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b5e:	4ba4      	ldr	r3, [pc, #656]	; (8001df0 <HAL_RCC_OscConfig+0x7b8>)
 8001b60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b64:	4aa2      	ldr	r2, [pc, #648]	; (8001df0 <HAL_RCC_OscConfig+0x7b8>)
 8001b66:	f043 0304 	orr.w	r3, r3, #4
 8001b6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001b6e:	4ba0      	ldr	r3, [pc, #640]	; (8001df0 <HAL_RCC_OscConfig+0x7b8>)
 8001b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001b82:	4b9c      	ldr	r3, [pc, #624]	; (8001df4 <HAL_RCC_OscConfig+0x7bc>)
 8001b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d119      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001b8e:	4b99      	ldr	r3, [pc, #612]	; (8001df4 <HAL_RCC_OscConfig+0x7bc>)
 8001b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b92:	4a98      	ldr	r2, [pc, #608]	; (8001df4 <HAL_RCC_OscConfig+0x7bc>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b9a:	f7ff f941 	bl	8000e20 <HAL_GetTick>
 8001b9e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001ba0:	e009      	b.n	8001bb6 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ba2:	f7ff f93d 	bl	8000e20 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d902      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	f000 bc16 	b.w	80023e2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001bb6:	4b8f      	ldr	r3, [pc, #572]	; (8001df4 <HAL_RCC_OscConfig+0x7bc>)
 8001bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0ef      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d05f      	beq.n	8001c8a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8001bca:	4b89      	ldr	r3, [pc, #548]	; (8001df0 <HAL_RCC_OscConfig+0x7b8>)
 8001bcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bd0:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	699a      	ldr	r2, [r3, #24]
 8001bd6:	6a3b      	ldr	r3, [r7, #32]
 8001bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d037      	beq.n	8001c50 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001be0:	6a3b      	ldr	r3, [r7, #32]
 8001be2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d006      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8001bea:	6a3b      	ldr	r3, [r7, #32]
 8001bec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e3f4      	b.n	80023e2 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
 8001bfa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d01b      	beq.n	8001c3a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8001c02:	4b7b      	ldr	r3, [pc, #492]	; (8001df0 <HAL_RCC_OscConfig+0x7b8>)
 8001c04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c08:	4a79      	ldr	r2, [pc, #484]	; (8001df0 <HAL_RCC_OscConfig+0x7b8>)
 8001c0a:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001c0e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8001c12:	f7ff f905 	bl	8000e20 <HAL_GetTick>
 8001c16:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c1a:	f7ff f901 	bl	8000e20 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b05      	cmp	r3, #5
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e3da      	b.n	80023e2 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001c2c:	4b70      	ldr	r3, [pc, #448]	; (8001df0 <HAL_RCC_OscConfig+0x7b8>)
 8001c2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1ef      	bne.n	8001c1a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8001c3a:	4b6d      	ldr	r3, [pc, #436]	; (8001df0 <HAL_RCC_OscConfig+0x7b8>)
 8001c3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c40:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	4969      	ldr	r1, [pc, #420]	; (8001df0 <HAL_RCC_OscConfig+0x7b8>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8001c50:	4b67      	ldr	r3, [pc, #412]	; (8001df0 <HAL_RCC_OscConfig+0x7b8>)
 8001c52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c56:	4a66      	ldr	r2, [pc, #408]	; (8001df0 <HAL_RCC_OscConfig+0x7b8>)
 8001c58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001c5c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001c60:	f7ff f8de 	bl	8000e20 <HAL_GetTick>
 8001c64:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c68:	f7ff f8da 	bl	8000e20 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b05      	cmp	r3, #5
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e3b3      	b.n	80023e2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001c7a:	4b5d      	ldr	r3, [pc, #372]	; (8001df0 <HAL_RCC_OscConfig+0x7b8>)
 8001c7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0ef      	beq.n	8001c68 <HAL_RCC_OscConfig+0x630>
 8001c88:	e01b      	b.n	8001cc2 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8001c8a:	4b59      	ldr	r3, [pc, #356]	; (8001df0 <HAL_RCC_OscConfig+0x7b8>)
 8001c8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c90:	4a57      	ldr	r2, [pc, #348]	; (8001df0 <HAL_RCC_OscConfig+0x7b8>)
 8001c92:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001c96:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001c9a:	f7ff f8c1 	bl	8000e20 <HAL_GetTick>
 8001c9e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca2:	f7ff f8bd 	bl	8000e20 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b05      	cmp	r3, #5
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e396      	b.n	80023e2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001cb4:	4b4e      	ldr	r3, [pc, #312]	; (8001df0 <HAL_RCC_OscConfig+0x7b8>)
 8001cb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1ef      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001cc2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d107      	bne.n	8001cda <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cca:	4b49      	ldr	r3, [pc, #292]	; (8001df0 <HAL_RCC_OscConfig+0x7b8>)
 8001ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cd0:	4a47      	ldr	r2, [pc, #284]	; (8001df0 <HAL_RCC_OscConfig+0x7b8>)
 8001cd2:	f023 0304 	bic.w	r3, r3, #4
 8001cd6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 8111 	beq.w	8001f0a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cee:	4b40      	ldr	r3, [pc, #256]	; (8001df0 <HAL_RCC_OscConfig+0x7b8>)
 8001cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d111      	bne.n	8001d20 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cfc:	4b3c      	ldr	r3, [pc, #240]	; (8001df0 <HAL_RCC_OscConfig+0x7b8>)
 8001cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d02:	4a3b      	ldr	r2, [pc, #236]	; (8001df0 <HAL_RCC_OscConfig+0x7b8>)
 8001d04:	f043 0304 	orr.w	r3, r3, #4
 8001d08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001d0c:	4b38      	ldr	r3, [pc, #224]	; (8001df0 <HAL_RCC_OscConfig+0x7b8>)
 8001d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d12:	f003 0304 	and.w	r3, r3, #4
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001d20:	4b34      	ldr	r3, [pc, #208]	; (8001df4 <HAL_RCC_OscConfig+0x7bc>)
 8001d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d118      	bne.n	8001d5e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001d2c:	4b31      	ldr	r3, [pc, #196]	; (8001df4 <HAL_RCC_OscConfig+0x7bc>)
 8001d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d30:	4a30      	ldr	r2, [pc, #192]	; (8001df4 <HAL_RCC_OscConfig+0x7bc>)
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d38:	f7ff f872 	bl	8000e20 <HAL_GetTick>
 8001d3c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d40:	f7ff f86e 	bl	8000e20 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e347      	b.n	80023e2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001d52:	4b28      	ldr	r3, [pc, #160]	; (8001df4 <HAL_RCC_OscConfig+0x7bc>)
 8001d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0f0      	beq.n	8001d40 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d01f      	beq.n	8001daa <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 0304 	and.w	r3, r3, #4
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d010      	beq.n	8001d98 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001d76:	4b1e      	ldr	r3, [pc, #120]	; (8001df0 <HAL_RCC_OscConfig+0x7b8>)
 8001d78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d7c:	4a1c      	ldr	r2, [pc, #112]	; (8001df0 <HAL_RCC_OscConfig+0x7b8>)
 8001d7e:	f043 0304 	orr.w	r3, r3, #4
 8001d82:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d86:	4b1a      	ldr	r3, [pc, #104]	; (8001df0 <HAL_RCC_OscConfig+0x7b8>)
 8001d88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d8c:	4a18      	ldr	r2, [pc, #96]	; (8001df0 <HAL_RCC_OscConfig+0x7b8>)
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001d96:	e018      	b.n	8001dca <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d98:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <HAL_RCC_OscConfig+0x7b8>)
 8001d9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d9e:	4a14      	ldr	r2, [pc, #80]	; (8001df0 <HAL_RCC_OscConfig+0x7b8>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001da8:	e00f      	b.n	8001dca <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001daa:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <HAL_RCC_OscConfig+0x7b8>)
 8001dac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001db0:	4a0f      	ldr	r2, [pc, #60]	; (8001df0 <HAL_RCC_OscConfig+0x7b8>)
 8001db2:	f023 0301 	bic.w	r3, r3, #1
 8001db6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001dba:	4b0d      	ldr	r3, [pc, #52]	; (8001df0 <HAL_RCC_OscConfig+0x7b8>)
 8001dbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dc0:	4a0b      	ldr	r2, [pc, #44]	; (8001df0 <HAL_RCC_OscConfig+0x7b8>)
 8001dc2:	f023 0304 	bic.w	r3, r3, #4
 8001dc6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d057      	beq.n	8001e82 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8001dd2:	f7ff f825 	bl	8000e20 <HAL_GetTick>
 8001dd6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dd8:	e00e      	b.n	8001df8 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dda:	f7ff f821 	bl	8000e20 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d905      	bls.n	8001df8 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e2f8      	b.n	80023e2 <HAL_RCC_OscConfig+0xdaa>
 8001df0:	46020c00 	.word	0x46020c00
 8001df4:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001df8:	4b9c      	ldr	r3, [pc, #624]	; (800206c <HAL_RCC_OscConfig+0xa34>)
 8001dfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d0e9      	beq.n	8001dda <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d01b      	beq.n	8001e4a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001e12:	4b96      	ldr	r3, [pc, #600]	; (800206c <HAL_RCC_OscConfig+0xa34>)
 8001e14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e18:	4a94      	ldr	r2, [pc, #592]	; (800206c <HAL_RCC_OscConfig+0xa34>)
 8001e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e1e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001e22:	e00a      	b.n	8001e3a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e24:	f7fe fffc 	bl	8000e20 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e2d3      	b.n	80023e2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001e3a:	4b8c      	ldr	r3, [pc, #560]	; (800206c <HAL_RCC_OscConfig+0xa34>)
 8001e3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0ed      	beq.n	8001e24 <HAL_RCC_OscConfig+0x7ec>
 8001e48:	e053      	b.n	8001ef2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001e4a:	4b88      	ldr	r3, [pc, #544]	; (800206c <HAL_RCC_OscConfig+0xa34>)
 8001e4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e50:	4a86      	ldr	r2, [pc, #536]	; (800206c <HAL_RCC_OscConfig+0xa34>)
 8001e52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e56:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001e5a:	e00a      	b.n	8001e72 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e5c:	f7fe ffe0 	bl	8000e20 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e2b7      	b.n	80023e2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001e72:	4b7e      	ldr	r3, [pc, #504]	; (800206c <HAL_RCC_OscConfig+0xa34>)
 8001e74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1ed      	bne.n	8001e5c <HAL_RCC_OscConfig+0x824>
 8001e80:	e037      	b.n	8001ef2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8001e82:	f7fe ffcd 	bl	8000e20 <HAL_GetTick>
 8001e86:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e88:	e00a      	b.n	8001ea0 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8a:	f7fe ffc9 	bl	8000e20 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e2a0      	b.n	80023e2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ea0:	4b72      	ldr	r3, [pc, #456]	; (800206c <HAL_RCC_OscConfig+0xa34>)
 8001ea2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1ed      	bne.n	8001e8a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001eae:	4b6f      	ldr	r3, [pc, #444]	; (800206c <HAL_RCC_OscConfig+0xa34>)
 8001eb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d01a      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001ebc:	4b6b      	ldr	r3, [pc, #428]	; (800206c <HAL_RCC_OscConfig+0xa34>)
 8001ebe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ec2:	4a6a      	ldr	r2, [pc, #424]	; (800206c <HAL_RCC_OscConfig+0xa34>)
 8001ec4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ec8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001ecc:	e00a      	b.n	8001ee4 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ece:	f7fe ffa7 	bl	8000e20 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e27e      	b.n	80023e2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001ee4:	4b61      	ldr	r3, [pc, #388]	; (800206c <HAL_RCC_OscConfig+0xa34>)
 8001ee6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001eea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1ed      	bne.n	8001ece <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ef2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d107      	bne.n	8001f0a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001efa:	4b5c      	ldr	r3, [pc, #368]	; (800206c <HAL_RCC_OscConfig+0xa34>)
 8001efc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f00:	4a5a      	ldr	r2, [pc, #360]	; (800206c <HAL_RCC_OscConfig+0xa34>)
 8001f02:	f023 0304 	bic.w	r3, r3, #4
 8001f06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0320 	and.w	r3, r3, #32
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d036      	beq.n	8001f84 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d019      	beq.n	8001f52 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8001f1e:	4b53      	ldr	r3, [pc, #332]	; (800206c <HAL_RCC_OscConfig+0xa34>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a52      	ldr	r2, [pc, #328]	; (800206c <HAL_RCC_OscConfig+0xa34>)
 8001f24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f28:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001f2a:	f7fe ff79 	bl	8000e20 <HAL_GetTick>
 8001f2e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f32:	f7fe ff75 	bl	8000e20 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e24e      	b.n	80023e2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001f44:	4b49      	ldr	r3, [pc, #292]	; (800206c <HAL_RCC_OscConfig+0xa34>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0f0      	beq.n	8001f32 <HAL_RCC_OscConfig+0x8fa>
 8001f50:	e018      	b.n	8001f84 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8001f52:	4b46      	ldr	r3, [pc, #280]	; (800206c <HAL_RCC_OscConfig+0xa34>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a45      	ldr	r2, [pc, #276]	; (800206c <HAL_RCC_OscConfig+0xa34>)
 8001f58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f5c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001f5e:	f7fe ff5f 	bl	8000e20 <HAL_GetTick>
 8001f62:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f66:	f7fe ff5b 	bl	8000e20 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e234      	b.n	80023e2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001f78:	4b3c      	ldr	r3, [pc, #240]	; (800206c <HAL_RCC_OscConfig+0xa34>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1f0      	bne.n	8001f66 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d036      	beq.n	8001ffe <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d019      	beq.n	8001fcc <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8001f98:	4b34      	ldr	r3, [pc, #208]	; (800206c <HAL_RCC_OscConfig+0xa34>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a33      	ldr	r2, [pc, #204]	; (800206c <HAL_RCC_OscConfig+0xa34>)
 8001f9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fa2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001fa4:	f7fe ff3c 	bl	8000e20 <HAL_GetTick>
 8001fa8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001fac:	f7fe ff38 	bl	8000e20 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e211      	b.n	80023e2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001fbe:	4b2b      	ldr	r3, [pc, #172]	; (800206c <HAL_RCC_OscConfig+0xa34>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0f0      	beq.n	8001fac <HAL_RCC_OscConfig+0x974>
 8001fca:	e018      	b.n	8001ffe <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8001fcc:	4b27      	ldr	r3, [pc, #156]	; (800206c <HAL_RCC_OscConfig+0xa34>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a26      	ldr	r2, [pc, #152]	; (800206c <HAL_RCC_OscConfig+0xa34>)
 8001fd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fd6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001fd8:	f7fe ff22 	bl	8000e20 <HAL_GetTick>
 8001fdc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001fe0:	f7fe ff1e 	bl	8000e20 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e1f7      	b.n	80023e2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001ff2:	4b1e      	ldr	r3, [pc, #120]	; (800206c <HAL_RCC_OscConfig+0xa34>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f0      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002006:	2b00      	cmp	r3, #0
 8002008:	d07f      	beq.n	800210a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800200e:	2b00      	cmp	r3, #0
 8002010:	d062      	beq.n	80020d8 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002012:	4b16      	ldr	r3, [pc, #88]	; (800206c <HAL_RCC_OscConfig+0xa34>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	4a15      	ldr	r2, [pc, #84]	; (800206c <HAL_RCC_OscConfig+0xa34>)
 8002018:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800201c:	6093      	str	r3, [r2, #8]
 800201e:	4b13      	ldr	r3, [pc, #76]	; (800206c <HAL_RCC_OscConfig+0xa34>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202a:	4910      	ldr	r1, [pc, #64]	; (800206c <HAL_RCC_OscConfig+0xa34>)
 800202c:	4313      	orrs	r3, r2
 800202e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002038:	d309      	bcc.n	800204e <HAL_RCC_OscConfig+0xa16>
 800203a:	4b0c      	ldr	r3, [pc, #48]	; (800206c <HAL_RCC_OscConfig+0xa34>)
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	f023 021f 	bic.w	r2, r3, #31
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	4909      	ldr	r1, [pc, #36]	; (800206c <HAL_RCC_OscConfig+0xa34>)
 8002048:	4313      	orrs	r3, r2
 800204a:	60cb      	str	r3, [r1, #12]
 800204c:	e02a      	b.n	80020a4 <HAL_RCC_OscConfig+0xa6c>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	2b00      	cmp	r3, #0
 8002054:	da0c      	bge.n	8002070 <HAL_RCC_OscConfig+0xa38>
 8002056:	4b05      	ldr	r3, [pc, #20]	; (800206c <HAL_RCC_OscConfig+0xa34>)
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	015b      	lsls	r3, r3, #5
 8002064:	4901      	ldr	r1, [pc, #4]	; (800206c <HAL_RCC_OscConfig+0xa34>)
 8002066:	4313      	orrs	r3, r2
 8002068:	60cb      	str	r3, [r1, #12]
 800206a:	e01b      	b.n	80020a4 <HAL_RCC_OscConfig+0xa6c>
 800206c:	46020c00 	.word	0x46020c00
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002078:	d30a      	bcc.n	8002090 <HAL_RCC_OscConfig+0xa58>
 800207a:	4ba1      	ldr	r3, [pc, #644]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	029b      	lsls	r3, r3, #10
 8002088:	499d      	ldr	r1, [pc, #628]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 800208a:	4313      	orrs	r3, r2
 800208c:	60cb      	str	r3, [r1, #12]
 800208e:	e009      	b.n	80020a4 <HAL_RCC_OscConfig+0xa6c>
 8002090:	4b9b      	ldr	r3, [pc, #620]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	03db      	lsls	r3, r3, #15
 800209e:	4998      	ldr	r1, [pc, #608]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80020a4:	4b96      	ldr	r3, [pc, #600]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a95      	ldr	r2, [pc, #596]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 80020aa:	f043 0310 	orr.w	r3, r3, #16
 80020ae:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80020b0:	f7fe feb6 	bl	8000e20 <HAL_GetTick>
 80020b4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80020b8:	f7fe feb2 	bl	8000e20 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e18b      	b.n	80023e2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80020ca:	4b8d      	ldr	r3, [pc, #564]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0320 	and.w	r3, r3, #32
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f0      	beq.n	80020b8 <HAL_RCC_OscConfig+0xa80>
 80020d6:	e018      	b.n	800210a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80020d8:	4b89      	ldr	r3, [pc, #548]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a88      	ldr	r2, [pc, #544]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 80020de:	f023 0310 	bic.w	r3, r3, #16
 80020e2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80020e4:	f7fe fe9c 	bl	8000e20 <HAL_GetTick>
 80020e8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80020ec:	f7fe fe98 	bl	8000e20 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e171      	b.n	80023e2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80020fe:	4b80      	ldr	r3, [pc, #512]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0320 	and.w	r3, r3, #32
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1f0      	bne.n	80020ec <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 8166 	beq.w	80023e0 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002114:	2300      	movs	r3, #0
 8002116:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800211a:	4b79      	ldr	r3, [pc, #484]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	f003 030c 	and.w	r3, r3, #12
 8002122:	2b0c      	cmp	r3, #12
 8002124:	f000 80f2 	beq.w	800230c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212c:	2b02      	cmp	r3, #2
 800212e:	f040 80c5 	bne.w	80022bc <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002132:	4b73      	ldr	r3, [pc, #460]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a72      	ldr	r2, [pc, #456]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 8002138:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800213c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800213e:	f7fe fe6f 	bl	8000e20 <HAL_GetTick>
 8002142:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002144:	e008      	b.n	8002158 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002146:	f7fe fe6b 	bl	8000e20 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e144      	b.n	80023e2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002158:	4b69      	ldr	r3, [pc, #420]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1f0      	bne.n	8002146 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002164:	4b66      	ldr	r3, [pc, #408]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 8002166:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800216a:	f003 0304 	and.w	r3, r3, #4
 800216e:	2b00      	cmp	r3, #0
 8002170:	d111      	bne.n	8002196 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8002172:	4b63      	ldr	r3, [pc, #396]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 8002174:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002178:	4a61      	ldr	r2, [pc, #388]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 800217a:	f043 0304 	orr.w	r3, r3, #4
 800217e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002182:	4b5f      	ldr	r3, [pc, #380]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 8002184:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8002190:	2301      	movs	r3, #1
 8002192:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8002196:	4b5b      	ldr	r3, [pc, #364]	; (8002304 <HAL_RCC_OscConfig+0xccc>)
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800219e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80021a2:	d102      	bne.n	80021aa <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80021a4:	2301      	movs	r3, #1
 80021a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80021aa:	4b56      	ldr	r3, [pc, #344]	; (8002304 <HAL_RCC_OscConfig+0xccc>)
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	4a55      	ldr	r2, [pc, #340]	; (8002304 <HAL_RCC_OscConfig+0xccc>)
 80021b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021b4:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80021b6:	4b52      	ldr	r3, [pc, #328]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 80021b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021be:	f023 0303 	bic.w	r3, r3, #3
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021ca:	3a01      	subs	r2, #1
 80021cc:	0212      	lsls	r2, r2, #8
 80021ce:	4311      	orrs	r1, r2
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80021d4:	430a      	orrs	r2, r1
 80021d6:	494a      	ldr	r1, [pc, #296]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	628b      	str	r3, [r1, #40]	; 0x28
 80021dc:	4b48      	ldr	r3, [pc, #288]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 80021de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021e0:	4b49      	ldr	r3, [pc, #292]	; (8002308 <HAL_RCC_OscConfig+0xcd0>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80021e8:	3a01      	subs	r2, #1
 80021ea:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80021f2:	3a01      	subs	r2, #1
 80021f4:	0252      	lsls	r2, r2, #9
 80021f6:	b292      	uxth	r2, r2
 80021f8:	4311      	orrs	r1, r2
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80021fe:	3a01      	subs	r2, #1
 8002200:	0412      	lsls	r2, r2, #16
 8002202:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8002206:	4311      	orrs	r1, r2
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800220c:	3a01      	subs	r2, #1
 800220e:	0612      	lsls	r2, r2, #24
 8002210:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8002214:	430a      	orrs	r2, r1
 8002216:	493a      	ldr	r1, [pc, #232]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 8002218:	4313      	orrs	r3, r2
 800221a:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800221c:	4b38      	ldr	r3, [pc, #224]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 800221e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002220:	4a37      	ldr	r2, [pc, #220]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 8002222:	f023 0310 	bic.w	r3, r3, #16
 8002226:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222c:	4a34      	ldr	r2, [pc, #208]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002232:	4b33      	ldr	r3, [pc, #204]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 8002234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002236:	4a32      	ldr	r2, [pc, #200]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 8002238:	f043 0310 	orr.w	r3, r3, #16
 800223c:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800223e:	4b30      	ldr	r3, [pc, #192]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 8002240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002242:	f023 020c 	bic.w	r2, r3, #12
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224a:	492d      	ldr	r1, [pc, #180]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 800224c:	4313      	orrs	r3, r2
 800224e:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8002250:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002254:	2b01      	cmp	r3, #1
 8002256:	d105      	bne.n	8002264 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002258:	4b2a      	ldr	r3, [pc, #168]	; (8002304 <HAL_RCC_OscConfig+0xccc>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	4a29      	ldr	r2, [pc, #164]	; (8002304 <HAL_RCC_OscConfig+0xccc>)
 800225e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002262:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8002264:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002268:	2b01      	cmp	r3, #1
 800226a:	d107      	bne.n	800227c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800226c:	4b24      	ldr	r3, [pc, #144]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 800226e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002272:	4a23      	ldr	r2, [pc, #140]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 8002274:	f023 0304 	bic.w	r3, r3, #4
 8002278:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800227c:	4b20      	ldr	r3, [pc, #128]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 800227e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002280:	4a1f      	ldr	r2, [pc, #124]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 8002282:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002286:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8002288:	4b1d      	ldr	r3, [pc, #116]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a1c      	ldr	r2, [pc, #112]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 800228e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002292:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002294:	f7fe fdc4 	bl	8000e20 <HAL_GetTick>
 8002298:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800229c:	f7fe fdc0 	bl	8000e20 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e099      	b.n	80023e2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80022ae:	4b14      	ldr	r3, [pc, #80]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f0      	beq.n	800229c <HAL_RCC_OscConfig+0xc64>
 80022ba:	e091      	b.n	80023e0 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80022bc:	4b10      	ldr	r3, [pc, #64]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a0f      	ldr	r2, [pc, #60]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 80022c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022c6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80022c8:	f7fe fdaa 	bl	8000e20 <HAL_GetTick>
 80022cc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d0:	f7fe fda6 	bl	8000e20 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e07f      	b.n	80023e2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80022e2:	4b07      	ldr	r3, [pc, #28]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80022ee:	4b04      	ldr	r3, [pc, #16]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 80022f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f2:	4a03      	ldr	r2, [pc, #12]	; (8002300 <HAL_RCC_OscConfig+0xcc8>)
 80022f4:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80022f8:	f023 0303 	bic.w	r3, r3, #3
 80022fc:	6293      	str	r3, [r2, #40]	; 0x28
 80022fe:	e06f      	b.n	80023e0 <HAL_RCC_OscConfig+0xda8>
 8002300:	46020c00 	.word	0x46020c00
 8002304:	46020800 	.word	0x46020800
 8002308:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800230c:	4b37      	ldr	r3, [pc, #220]	; (80023ec <HAL_RCC_OscConfig+0xdb4>)
 800230e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002310:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002312:	4b36      	ldr	r3, [pc, #216]	; (80023ec <HAL_RCC_OscConfig+0xdb4>)
 8002314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002316:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800231c:	2b01      	cmp	r3, #1
 800231e:	d039      	beq.n	8002394 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f003 0203 	and.w	r2, r3, #3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800232a:	429a      	cmp	r2, r3
 800232c:	d132      	bne.n	8002394 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	0a1b      	lsrs	r3, r3, #8
 8002332:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800233c:	429a      	cmp	r2, r3
 800233e:	d129      	bne.n	8002394 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800234a:	429a      	cmp	r2, r3
 800234c:	d122      	bne.n	8002394 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002358:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800235a:	429a      	cmp	r2, r3
 800235c:	d11a      	bne.n	8002394 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	0a5b      	lsrs	r3, r3, #9
 8002362:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800236c:	429a      	cmp	r2, r3
 800236e:	d111      	bne.n	8002394 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	0c1b      	lsrs	r3, r3, #16
 8002374:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800237c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800237e:	429a      	cmp	r2, r3
 8002380:	d108      	bne.n	8002394 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	0e1b      	lsrs	r3, r3, #24
 8002386:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002390:	429a      	cmp	r2, r3
 8002392:	d001      	beq.n	8002398 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e024      	b.n	80023e2 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002398:	4b14      	ldr	r3, [pc, #80]	; (80023ec <HAL_RCC_OscConfig+0xdb4>)
 800239a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239c:	08db      	lsrs	r3, r3, #3
 800239e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d01a      	beq.n	80023e0 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80023aa:	4b10      	ldr	r3, [pc, #64]	; (80023ec <HAL_RCC_OscConfig+0xdb4>)
 80023ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ae:	4a0f      	ldr	r2, [pc, #60]	; (80023ec <HAL_RCC_OscConfig+0xdb4>)
 80023b0:	f023 0310 	bic.w	r3, r3, #16
 80023b4:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b6:	f7fe fd33 	bl	8000e20 <HAL_GetTick>
 80023ba:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80023bc:	bf00      	nop
 80023be:	f7fe fd2f 	bl	8000e20 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d0f9      	beq.n	80023be <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ce:	4a07      	ldr	r2, [pc, #28]	; (80023ec <HAL_RCC_OscConfig+0xdb4>)
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80023d4:	4b05      	ldr	r3, [pc, #20]	; (80023ec <HAL_RCC_OscConfig+0xdb4>)
 80023d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d8:	4a04      	ldr	r2, [pc, #16]	; (80023ec <HAL_RCC_OscConfig+0xdb4>)
 80023da:	f043 0310 	orr.w	r3, r3, #16
 80023de:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3738      	adds	r7, #56	; 0x38
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	46020c00 	.word	0x46020c00

080023f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e1d9      	b.n	80027b8 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002404:	4b9b      	ldr	r3, [pc, #620]	; (8002674 <HAL_RCC_ClockConfig+0x284>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 030f 	and.w	r3, r3, #15
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	429a      	cmp	r2, r3
 8002410:	d910      	bls.n	8002434 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002412:	4b98      	ldr	r3, [pc, #608]	; (8002674 <HAL_RCC_ClockConfig+0x284>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f023 020f 	bic.w	r2, r3, #15
 800241a:	4996      	ldr	r1, [pc, #600]	; (8002674 <HAL_RCC_ClockConfig+0x284>)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	4313      	orrs	r3, r2
 8002420:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002422:	4b94      	ldr	r3, [pc, #592]	; (8002674 <HAL_RCC_ClockConfig+0x284>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	429a      	cmp	r2, r3
 800242e:	d001      	beq.n	8002434 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e1c1      	b.n	80027b8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0310 	and.w	r3, r3, #16
 800243c:	2b00      	cmp	r3, #0
 800243e:	d010      	beq.n	8002462 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	695a      	ldr	r2, [r3, #20]
 8002444:	4b8c      	ldr	r3, [pc, #560]	; (8002678 <HAL_RCC_ClockConfig+0x288>)
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800244c:	429a      	cmp	r2, r3
 800244e:	d908      	bls.n	8002462 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8002450:	4b89      	ldr	r3, [pc, #548]	; (8002678 <HAL_RCC_ClockConfig+0x288>)
 8002452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002454:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	4986      	ldr	r1, [pc, #536]	; (8002678 <HAL_RCC_ClockConfig+0x288>)
 800245e:	4313      	orrs	r3, r2
 8002460:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	2b00      	cmp	r3, #0
 800246c:	d012      	beq.n	8002494 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691a      	ldr	r2, [r3, #16]
 8002472:	4b81      	ldr	r3, [pc, #516]	; (8002678 <HAL_RCC_ClockConfig+0x288>)
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	091b      	lsrs	r3, r3, #4
 8002478:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800247c:	429a      	cmp	r2, r3
 800247e:	d909      	bls.n	8002494 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002480:	4b7d      	ldr	r3, [pc, #500]	; (8002678 <HAL_RCC_ClockConfig+0x288>)
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	011b      	lsls	r3, r3, #4
 800248e:	497a      	ldr	r1, [pc, #488]	; (8002678 <HAL_RCC_ClockConfig+0x288>)
 8002490:	4313      	orrs	r3, r2
 8002492:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b00      	cmp	r3, #0
 800249e:	d010      	beq.n	80024c2 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	4b74      	ldr	r3, [pc, #464]	; (8002678 <HAL_RCC_ClockConfig+0x288>)
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d908      	bls.n	80024c2 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80024b0:	4b71      	ldr	r3, [pc, #452]	; (8002678 <HAL_RCC_ClockConfig+0x288>)
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	496e      	ldr	r1, [pc, #440]	; (8002678 <HAL_RCC_ClockConfig+0x288>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d010      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689a      	ldr	r2, [r3, #8]
 80024d2:	4b69      	ldr	r3, [pc, #420]	; (8002678 <HAL_RCC_ClockConfig+0x288>)
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	429a      	cmp	r2, r3
 80024dc:	d908      	bls.n	80024f0 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80024de:	4b66      	ldr	r3, [pc, #408]	; (8002678 <HAL_RCC_ClockConfig+0x288>)
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	f023 020f 	bic.w	r2, r3, #15
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	4963      	ldr	r1, [pc, #396]	; (8002678 <HAL_RCC_ClockConfig+0x288>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 80d2 	beq.w	80026a2 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80024fe:	2300      	movs	r3, #0
 8002500:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b03      	cmp	r3, #3
 8002508:	d143      	bne.n	8002592 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800250a:	4b5b      	ldr	r3, [pc, #364]	; (8002678 <HAL_RCC_ClockConfig+0x288>)
 800250c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	d110      	bne.n	800253a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002518:	4b57      	ldr	r3, [pc, #348]	; (8002678 <HAL_RCC_ClockConfig+0x288>)
 800251a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800251e:	4a56      	ldr	r2, [pc, #344]	; (8002678 <HAL_RCC_ClockConfig+0x288>)
 8002520:	f043 0304 	orr.w	r3, r3, #4
 8002524:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002528:	4b53      	ldr	r3, [pc, #332]	; (8002678 <HAL_RCC_ClockConfig+0x288>)
 800252a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800252e:	f003 0304 	and.w	r3, r3, #4
 8002532:	60bb      	str	r3, [r7, #8]
 8002534:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8002536:	2301      	movs	r3, #1
 8002538:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800253a:	f7fe fc71 	bl	8000e20 <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002540:	4b4e      	ldr	r3, [pc, #312]	; (800267c <HAL_RCC_ClockConfig+0x28c>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00f      	beq.n	800256c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800254c:	e008      	b.n	8002560 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800254e:	f7fe fc67 	bl	8000e20 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e12b      	b.n	80027b8 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002560:	4b46      	ldr	r3, [pc, #280]	; (800267c <HAL_RCC_ClockConfig+0x28c>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0f0      	beq.n	800254e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800256c:	7dfb      	ldrb	r3, [r7, #23]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d107      	bne.n	8002582 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002572:	4b41      	ldr	r3, [pc, #260]	; (8002678 <HAL_RCC_ClockConfig+0x288>)
 8002574:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002578:	4a3f      	ldr	r2, [pc, #252]	; (8002678 <HAL_RCC_ClockConfig+0x288>)
 800257a:	f023 0304 	bic.w	r3, r3, #4
 800257e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002582:	4b3d      	ldr	r3, [pc, #244]	; (8002678 <HAL_RCC_ClockConfig+0x288>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d121      	bne.n	80025d2 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e112      	b.n	80027b8 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b02      	cmp	r3, #2
 8002598:	d107      	bne.n	80025aa <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800259a:	4b37      	ldr	r3, [pc, #220]	; (8002678 <HAL_RCC_ClockConfig+0x288>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d115      	bne.n	80025d2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e106      	b.n	80027b8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d107      	bne.n	80025c2 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80025b2:	4b31      	ldr	r3, [pc, #196]	; (8002678 <HAL_RCC_ClockConfig+0x288>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0304 	and.w	r3, r3, #4
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d109      	bne.n	80025d2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e0fa      	b.n	80027b8 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025c2:	4b2d      	ldr	r3, [pc, #180]	; (8002678 <HAL_RCC_ClockConfig+0x288>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e0f2      	b.n	80027b8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80025d2:	4b29      	ldr	r3, [pc, #164]	; (8002678 <HAL_RCC_ClockConfig+0x288>)
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	f023 0203 	bic.w	r2, r3, #3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	4926      	ldr	r1, [pc, #152]	; (8002678 <HAL_RCC_ClockConfig+0x288>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80025e4:	f7fe fc1c 	bl	8000e20 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	2b03      	cmp	r3, #3
 80025f0:	d112      	bne.n	8002618 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025f2:	e00a      	b.n	800260a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f4:	f7fe fc14 	bl	8000e20 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002602:	4293      	cmp	r3, r2
 8002604:	d901      	bls.n	800260a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e0d6      	b.n	80027b8 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800260a:	4b1b      	ldr	r3, [pc, #108]	; (8002678 <HAL_RCC_ClockConfig+0x288>)
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	2b0c      	cmp	r3, #12
 8002614:	d1ee      	bne.n	80025f4 <HAL_RCC_ClockConfig+0x204>
 8002616:	e044      	b.n	80026a2 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d112      	bne.n	8002646 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002620:	e00a      	b.n	8002638 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002622:	f7fe fbfd 	bl	8000e20 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002630:	4293      	cmp	r3, r2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e0bf      	b.n	80027b8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002638:	4b0f      	ldr	r3, [pc, #60]	; (8002678 <HAL_RCC_ClockConfig+0x288>)
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	f003 030c 	and.w	r3, r3, #12
 8002640:	2b08      	cmp	r3, #8
 8002642:	d1ee      	bne.n	8002622 <HAL_RCC_ClockConfig+0x232>
 8002644:	e02d      	b.n	80026a2 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d123      	bne.n	8002696 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800264e:	e00a      	b.n	8002666 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002650:	f7fe fbe6 	bl	8000e20 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	f241 3288 	movw	r2, #5000	; 0x1388
 800265e:	4293      	cmp	r3, r2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e0a8      	b.n	80027b8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002666:	4b04      	ldr	r3, [pc, #16]	; (8002678 <HAL_RCC_ClockConfig+0x288>)
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	f003 030c 	and.w	r3, r3, #12
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1ee      	bne.n	8002650 <HAL_RCC_ClockConfig+0x260>
 8002672:	e016      	b.n	80026a2 <HAL_RCC_ClockConfig+0x2b2>
 8002674:	40022000 	.word	0x40022000
 8002678:	46020c00 	.word	0x46020c00
 800267c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002680:	f7fe fbce 	bl	8000e20 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	f241 3288 	movw	r2, #5000	; 0x1388
 800268e:	4293      	cmp	r3, r2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e090      	b.n	80027b8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002696:	4b4a      	ldr	r3, [pc, #296]	; (80027c0 <HAL_RCC_ClockConfig+0x3d0>)
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	f003 030c 	and.w	r3, r3, #12
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d1ee      	bne.n	8002680 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d010      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689a      	ldr	r2, [r3, #8]
 80026b2:	4b43      	ldr	r3, [pc, #268]	; (80027c0 <HAL_RCC_ClockConfig+0x3d0>)
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d208      	bcs.n	80026d0 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80026be:	4b40      	ldr	r3, [pc, #256]	; (80027c0 <HAL_RCC_ClockConfig+0x3d0>)
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	f023 020f 	bic.w	r2, r3, #15
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	493d      	ldr	r1, [pc, #244]	; (80027c0 <HAL_RCC_ClockConfig+0x3d0>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026d0:	4b3c      	ldr	r3, [pc, #240]	; (80027c4 <HAL_RCC_ClockConfig+0x3d4>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 030f 	and.w	r3, r3, #15
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d210      	bcs.n	8002700 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026de:	4b39      	ldr	r3, [pc, #228]	; (80027c4 <HAL_RCC_ClockConfig+0x3d4>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 020f 	bic.w	r2, r3, #15
 80026e6:	4937      	ldr	r1, [pc, #220]	; (80027c4 <HAL_RCC_ClockConfig+0x3d4>)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ee:	4b35      	ldr	r3, [pc, #212]	; (80027c4 <HAL_RCC_ClockConfig+0x3d4>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d001      	beq.n	8002700 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e05b      	b.n	80027b8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	d010      	beq.n	800272e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	4b2b      	ldr	r3, [pc, #172]	; (80027c0 <HAL_RCC_ClockConfig+0x3d0>)
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002718:	429a      	cmp	r2, r3
 800271a:	d208      	bcs.n	800272e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800271c:	4b28      	ldr	r3, [pc, #160]	; (80027c0 <HAL_RCC_ClockConfig+0x3d0>)
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	4925      	ldr	r1, [pc, #148]	; (80027c0 <HAL_RCC_ClockConfig+0x3d0>)
 800272a:	4313      	orrs	r3, r2
 800272c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b00      	cmp	r3, #0
 8002738:	d012      	beq.n	8002760 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691a      	ldr	r2, [r3, #16]
 800273e:	4b20      	ldr	r3, [pc, #128]	; (80027c0 <HAL_RCC_ClockConfig+0x3d0>)
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	091b      	lsrs	r3, r3, #4
 8002744:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002748:	429a      	cmp	r2, r3
 800274a:	d209      	bcs.n	8002760 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800274c:	4b1c      	ldr	r3, [pc, #112]	; (80027c0 <HAL_RCC_ClockConfig+0x3d0>)
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	011b      	lsls	r3, r3, #4
 800275a:	4919      	ldr	r1, [pc, #100]	; (80027c0 <HAL_RCC_ClockConfig+0x3d0>)
 800275c:	4313      	orrs	r3, r2
 800275e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0310 	and.w	r3, r3, #16
 8002768:	2b00      	cmp	r3, #0
 800276a:	d010      	beq.n	800278e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	695a      	ldr	r2, [r3, #20]
 8002770:	4b13      	ldr	r3, [pc, #76]	; (80027c0 <HAL_RCC_ClockConfig+0x3d0>)
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002778:	429a      	cmp	r2, r3
 800277a:	d208      	bcs.n	800278e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800277c:	4b10      	ldr	r3, [pc, #64]	; (80027c0 <HAL_RCC_ClockConfig+0x3d0>)
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	490d      	ldr	r1, [pc, #52]	; (80027c0 <HAL_RCC_ClockConfig+0x3d0>)
 800278a:	4313      	orrs	r3, r2
 800278c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800278e:	f000 f821 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 8002792:	4602      	mov	r2, r0
 8002794:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <HAL_RCC_ClockConfig+0x3d0>)
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	f003 030f 	and.w	r3, r3, #15
 800279c:	490a      	ldr	r1, [pc, #40]	; (80027c8 <HAL_RCC_ClockConfig+0x3d8>)
 800279e:	5ccb      	ldrb	r3, [r1, r3]
 80027a0:	fa22 f303 	lsr.w	r3, r2, r3
 80027a4:	4a09      	ldr	r2, [pc, #36]	; (80027cc <HAL_RCC_ClockConfig+0x3dc>)
 80027a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027a8:	4b09      	ldr	r3, [pc, #36]	; (80027d0 <HAL_RCC_ClockConfig+0x3e0>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7fe faed 	bl	8000d8c <HAL_InitTick>
 80027b2:	4603      	mov	r3, r0
 80027b4:	73fb      	strb	r3, [r7, #15]

  return status;
 80027b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3718      	adds	r7, #24
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	46020c00 	.word	0x46020c00
 80027c4:	40022000 	.word	0x40022000
 80027c8:	08006de8 	.word	0x08006de8
 80027cc:	20000000 	.word	0x20000000
 80027d0:	20000004 	.word	0x20000004

080027d4 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b08b      	sub	sp, #44	; 0x2c
 80027d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80027de:	2300      	movs	r3, #0
 80027e0:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027e2:	4b7b      	ldr	r3, [pc, #492]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	f003 030c 	and.w	r3, r3, #12
 80027ea:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027ec:	4b78      	ldr	r3, [pc, #480]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80027ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f0:	f003 0303 	and.w	r3, r3, #3
 80027f4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d005      	beq.n	8002808 <HAL_RCC_GetSysClockFreq+0x34>
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	2b0c      	cmp	r3, #12
 8002800:	d121      	bne.n	8002846 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d11e      	bne.n	8002846 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8002808:	4b71      	ldr	r3, [pc, #452]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d107      	bne.n	8002824 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002814:	4b6e      	ldr	r3, [pc, #440]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002816:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800281a:	0b1b      	lsrs	r3, r3, #12
 800281c:	f003 030f 	and.w	r3, r3, #15
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
 8002822:	e005      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002824:	4b6a      	ldr	r3, [pc, #424]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	0f1b      	lsrs	r3, r3, #28
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002830:	4a68      	ldr	r2, [pc, #416]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002838:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d110      	bne.n	8002862 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002844:	e00d      	b.n	8002862 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002846:	4b62      	ldr	r3, [pc, #392]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	f003 030c 	and.w	r3, r3, #12
 800284e:	2b04      	cmp	r3, #4
 8002850:	d102      	bne.n	8002858 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002852:	4b61      	ldr	r3, [pc, #388]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002854:	623b      	str	r3, [r7, #32]
 8002856:	e004      	b.n	8002862 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	2b08      	cmp	r3, #8
 800285c:	d101      	bne.n	8002862 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800285e:	4b5e      	ldr	r3, [pc, #376]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002860:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	2b0c      	cmp	r3, #12
 8002866:	f040 80ac 	bne.w	80029c2 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800286a:	4b59      	ldr	r3, [pc, #356]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800286c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002874:	4b56      	ldr	r3, [pc, #344]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002878:	0a1b      	lsrs	r3, r3, #8
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	3301      	adds	r3, #1
 8002880:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002882:	4b53      	ldr	r3, [pc, #332]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002886:	091b      	lsrs	r3, r3, #4
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800288e:	4b50      	ldr	r3, [pc, #320]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002892:	08db      	lsrs	r3, r3, #3
 8002894:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	fb02 f303 	mul.w	r3, r2, r3
 800289e:	ee07 3a90 	vmov	s15, r3
 80028a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028a6:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 8086 	beq.w	80029be <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d003      	beq.n	80028c0 <HAL_RCC_GetSysClockFreq+0xec>
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	2b03      	cmp	r3, #3
 80028bc:	d022      	beq.n	8002904 <HAL_RCC_GetSysClockFreq+0x130>
 80028be:	e043      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	ee07 3a90 	vmov	s15, r3
 80028c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028ca:	eddf 6a44 	vldr	s13, [pc, #272]	; 80029dc <HAL_RCC_GetSysClockFreq+0x208>
 80028ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028d2:	4b3f      	ldr	r3, [pc, #252]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80028d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028da:	ee07 3a90 	vmov	s15, r3
 80028de:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80028e2:	ed97 6a01 	vldr	s12, [r7, #4]
 80028e6:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80029e0 <HAL_RCC_GetSysClockFreq+0x20c>
 80028ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80028ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80028f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80028fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028fe:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002902:	e046      	b.n	8002992 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	ee07 3a90 	vmov	s15, r3
 800290a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800290e:	eddf 6a33 	vldr	s13, [pc, #204]	; 80029dc <HAL_RCC_GetSysClockFreq+0x208>
 8002912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002916:	4b2e      	ldr	r3, [pc, #184]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800291a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800291e:	ee07 3a90 	vmov	s15, r3
 8002922:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002926:	ed97 6a01 	vldr	s12, [r7, #4]
 800292a:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80029e0 <HAL_RCC_GetSysClockFreq+0x20c>
 800292e:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002932:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800293a:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800293e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002942:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002946:	e024      	b.n	8002992 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	ee07 3a90 	vmov	s15, r3
 800294e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	ee07 3a90 	vmov	s15, r3
 8002958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800295c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002960:	4b1b      	ldr	r3, [pc, #108]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002968:	ee07 3a90 	vmov	s15, r3
 800296c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002970:	ed97 6a01 	vldr	s12, [r7, #4]
 8002974:	eddf 5a1a 	vldr	s11, [pc, #104]	; 80029e0 <HAL_RCC_GetSysClockFreq+0x20c>
 8002978:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800297c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002980:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002984:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800298c:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002990:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002992:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002996:	0e1b      	lsrs	r3, r3, #24
 8002998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800299c:	3301      	adds	r3, #1
 800299e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	ee07 3a90 	vmov	s15, r3
 80029a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80029ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029b6:	ee17 3a90 	vmov	r3, s15
 80029ba:	623b      	str	r3, [r7, #32]
 80029bc:	e001      	b.n	80029c2 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 80029be:	2300      	movs	r3, #0
 80029c0:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 80029c2:	6a3b      	ldr	r3, [r7, #32]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	372c      	adds	r7, #44	; 0x2c
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	46020c00 	.word	0x46020c00
 80029d4:	08006e00 	.word	0x08006e00
 80029d8:	00f42400 	.word	0x00f42400
 80029dc:	4b742400 	.word	0x4b742400
 80029e0:	46000000 	.word	0x46000000

080029e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80029e8:	f7ff fef4 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 80029ec:	4602      	mov	r2, r0
 80029ee:	4b07      	ldr	r3, [pc, #28]	; (8002a0c <HAL_RCC_GetHCLKFreq+0x28>)
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	f003 030f 	and.w	r3, r3, #15
 80029f6:	4906      	ldr	r1, [pc, #24]	; (8002a10 <HAL_RCC_GetHCLKFreq+0x2c>)
 80029f8:	5ccb      	ldrb	r3, [r1, r3]
 80029fa:	fa22 f303 	lsr.w	r3, r2, r3
 80029fe:	4a05      	ldr	r2, [pc, #20]	; (8002a14 <HAL_RCC_GetHCLKFreq+0x30>)
 8002a00:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8002a02:	4b04      	ldr	r3, [pc, #16]	; (8002a14 <HAL_RCC_GetHCLKFreq+0x30>)
 8002a04:	681b      	ldr	r3, [r3, #0]
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	46020c00 	.word	0x46020c00
 8002a10:	08006de8 	.word	0x08006de8
 8002a14:	20000000 	.word	0x20000000

08002a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8002a1c:	f7ff ffe2 	bl	80029e4 <HAL_RCC_GetHCLKFreq>
 8002a20:	4602      	mov	r2, r0
 8002a22:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	091b      	lsrs	r3, r3, #4
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	4903      	ldr	r1, [pc, #12]	; (8002a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a2e:	5ccb      	ldrb	r3, [r1, r3]
 8002a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	46020c00 	.word	0x46020c00
 8002a3c:	08006df8 	.word	0x08006df8

08002a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8002a44:	f7ff ffce 	bl	80029e4 <HAL_RCC_GetHCLKFreq>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	0a1b      	lsrs	r3, r3, #8
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	4903      	ldr	r1, [pc, #12]	; (8002a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a56:	5ccb      	ldrb	r3, [r1, r3]
 8002a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	46020c00 	.word	0x46020c00
 8002a64:	08006df8 	.word	0x08006df8

08002a68 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8002a6c:	f7ff ffba 	bl	80029e4 <HAL_RCC_GetHCLKFreq>
 8002a70:	4602      	mov	r2, r0
 8002a72:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <HAL_RCC_GetPCLK3Freq+0x20>)
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a76:	091b      	lsrs	r3, r3, #4
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	4903      	ldr	r1, [pc, #12]	; (8002a8c <HAL_RCC_GetPCLK3Freq+0x24>)
 8002a7e:	5ccb      	ldrb	r3, [r1, r3]
 8002a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	46020c00 	.word	0x46020c00
 8002a8c:	08006df8 	.word	0x08006df8

08002a90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a98:	4b3e      	ldr	r3, [pc, #248]	; (8002b94 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002aa6:	f7fe fd49 	bl	800153c <HAL_PWREx_GetVoltageRange>
 8002aaa:	6178      	str	r0, [r7, #20]
 8002aac:	e019      	b.n	8002ae2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002aae:	4b39      	ldr	r3, [pc, #228]	; (8002b94 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002ab0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ab4:	4a37      	ldr	r2, [pc, #220]	; (8002b94 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002ab6:	f043 0304 	orr.w	r3, r3, #4
 8002aba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002abe:	4b35      	ldr	r3, [pc, #212]	; (8002b94 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002ac0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002acc:	f7fe fd36 	bl	800153c <HAL_PWREx_GetVoltageRange>
 8002ad0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ad2:	4b30      	ldr	r3, [pc, #192]	; (8002b94 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002ad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ad8:	4a2e      	ldr	r2, [pc, #184]	; (8002b94 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002ada:	f023 0304 	bic.w	r3, r3, #4
 8002ade:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ae8:	d003      	beq.n	8002af2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002af0:	d109      	bne.n	8002b06 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002af8:	d202      	bcs.n	8002b00 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8002afa:	2301      	movs	r3, #1
 8002afc:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002afe:	e033      	b.n	8002b68 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8002b00:	2300      	movs	r3, #0
 8002b02:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002b04:	e030      	b.n	8002b68 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b0c:	d208      	bcs.n	8002b20 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b14:	d102      	bne.n	8002b1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8002b16:	2303      	movs	r3, #3
 8002b18:	613b      	str	r3, [r7, #16]
 8002b1a:	e025      	b.n	8002b68 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e035      	b.n	8002b8c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b26:	d90f      	bls.n	8002b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d109      	bne.n	8002b42 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002b34:	d902      	bls.n	8002b3c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8002b36:	2300      	movs	r3, #0
 8002b38:	613b      	str	r3, [r7, #16]
 8002b3a:	e015      	b.n	8002b68 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	613b      	str	r3, [r7, #16]
 8002b40:	e012      	b.n	8002b68 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8002b42:	2300      	movs	r3, #0
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	e00f      	b.n	8002b68 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b4e:	d109      	bne.n	8002b64 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b56:	d102      	bne.n	8002b5e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8002b58:	2301      	movs	r3, #1
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	e004      	b.n	8002b68 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8002b5e:	2302      	movs	r3, #2
 8002b60:	613b      	str	r3, [r7, #16]
 8002b62:	e001      	b.n	8002b68 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8002b64:	2301      	movs	r3, #1
 8002b66:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b68:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f023 020f 	bic.w	r2, r3, #15
 8002b70:	4909      	ldr	r1, [pc, #36]	; (8002b98 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002b78:	4b07      	ldr	r3, [pc, #28]	; (8002b98 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 030f 	and.w	r3, r3, #15
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d001      	beq.n	8002b8a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e000      	b.n	8002b8c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	46020c00 	.word	0x46020c00
 8002b98:	40022000 	.word	0x40022000

08002b9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ba0:	b0c4      	sub	sp, #272	; 0x110
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ba8:	2300      	movs	r3, #0
 8002baa:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bae:	2300      	movs	r3, #0
 8002bb0:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bbc:	f002 0401 	and.w	r4, r2, #1
 8002bc0:	2500      	movs	r5, #0
 8002bc2:	ea54 0305 	orrs.w	r3, r4, r5
 8002bc6:	d00b      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002bc8:	4bd5      	ldr	r3, [pc, #852]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bce:	f023 0103 	bic.w	r1, r3, #3
 8002bd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd8:	4ad1      	ldr	r2, [pc, #836]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002bda:	430b      	orrs	r3, r1
 8002bdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002be0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be8:	f002 0802 	and.w	r8, r2, #2
 8002bec:	f04f 0900 	mov.w	r9, #0
 8002bf0:	ea58 0309 	orrs.w	r3, r8, r9
 8002bf4:	d00b      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002bf6:	4bca      	ldr	r3, [pc, #808]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bfc:	f023 010c 	bic.w	r1, r3, #12
 8002c00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c06:	4ac6      	ldr	r2, [pc, #792]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002c08:	430b      	orrs	r3, r1
 8002c0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c16:	f002 0a04 	and.w	sl, r2, #4
 8002c1a:	f04f 0b00 	mov.w	fp, #0
 8002c1e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002c22:	d00b      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002c24:	4bbe      	ldr	r3, [pc, #760]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c2a:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c34:	4aba      	ldr	r2, [pc, #744]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002c36:	430b      	orrs	r3, r1
 8002c38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c44:	f002 0308 	and.w	r3, r2, #8
 8002c48:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002c52:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	d00b      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002c5c:	4bb0      	ldr	r3, [pc, #704]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6c:	4aac      	ldr	r2, [pc, #688]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002c6e:	430b      	orrs	r3, r1
 8002c70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7c:	f002 0310 	and.w	r3, r2, #16
 8002c80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c84:	2300      	movs	r3, #0
 8002c86:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002c8a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4313      	orrs	r3, r2
 8002c92:	d00b      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002c94:	4ba2      	ldr	r3, [pc, #648]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca4:	4a9e      	ldr	r2, [pc, #632]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002ca6:	430b      	orrs	r3, r1
 8002ca8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002cac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8002cb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002cc2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	d00b      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8002ccc:	4b94      	ldr	r3, [pc, #592]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002cce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002cd2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cdc:	4a90      	ldr	r2, [pc, #576]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002cde:	430b      	orrs	r3, r1
 8002ce0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ce4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cec:	f002 0320 	and.w	r3, r2, #32
 8002cf0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002cfa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4313      	orrs	r3, r2
 8002d02:	d00b      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002d04:	4b86      	ldr	r3, [pc, #536]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002d06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d0a:	f023 0107 	bic.w	r1, r3, #7
 8002d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d14:	4a82      	ldr	r2, [pc, #520]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002d16:	430b      	orrs	r3, r1
 8002d18:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d24:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002d28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002d32:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	d00b      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002d3c:	4b78      	ldr	r3, [pc, #480]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d42:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8002d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d4c:	4a74      	ldr	r2, [pc, #464]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002d4e:	430b      	orrs	r3, r1
 8002d50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8002d60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d64:	2300      	movs	r3, #0
 8002d66:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d6a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4313      	orrs	r3, r2
 8002d72:	d00b      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002d74:	4b6a      	ldr	r3, [pc, #424]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d84:	4a66      	ldr	r2, [pc, #408]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002d86:	430b      	orrs	r3, r1
 8002d88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d94:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8002d98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002da2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002da6:	460b      	mov	r3, r1
 8002da8:	4313      	orrs	r3, r2
 8002daa:	d00b      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8002dac:	4b5c      	ldr	r3, [pc, #368]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002dae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002db2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002db6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dbc:	4a58      	ldr	r2, [pc, #352]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002dbe:	430b      	orrs	r3, r1
 8002dc0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002dc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dcc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002dd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002dda:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002dde:	460b      	mov	r3, r1
 8002de0:	4313      	orrs	r3, r2
 8002de2:	d00b      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8002de4:	4b4e      	ldr	r3, [pc, #312]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dea:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8002dee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002df2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002df4:	4a4a      	ldr	r2, [pc, #296]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002df6:	430b      	orrs	r3, r1
 8002df8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8002dfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e04:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8002e08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e12:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002e16:	460b      	mov	r3, r1
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	d00b      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8002e1c:	4b40      	ldr	r3, [pc, #256]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e1e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002e22:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8002e26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e2c:	4a3c      	ldr	r2, [pc, #240]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e2e:	430b      	orrs	r3, r1
 8002e30:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8002e34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e3c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8002e40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002e44:	2300      	movs	r3, #0
 8002e46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e4a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002e4e:	460b      	mov	r3, r1
 8002e50:	4313      	orrs	r3, r2
 8002e52:	d00c      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8002e54:	4b32      	ldr	r3, [pc, #200]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e56:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002e5a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002e5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e66:	4a2e      	ldr	r2, [pc, #184]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e68:	430b      	orrs	r3, r1
 8002e6a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e76:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8002e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e7e:	2300      	movs	r3, #0
 8002e80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002e84:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	d00c      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8002e8e:	4b24      	ldr	r3, [pc, #144]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e94:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8002e98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ea0:	4a1f      	ldr	r2, [pc, #124]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002ea2:	430b      	orrs	r3, r1
 8002ea4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ea8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb0:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002eb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ebe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	d00c      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8002ec8:	4b15      	ldr	r3, [pc, #84]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ece:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8002ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eda:	4a11      	ldr	r2, [pc, #68]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002edc:	430b      	orrs	r3, r1
 8002ede:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8002ee2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eea:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002eee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002ef8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8002efc:	460b      	mov	r3, r1
 8002efe:	4313      	orrs	r3, r2
 8002f00:	d010      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8002f02:	4b07      	ldr	r3, [pc, #28]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f08:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f14:	4a02      	ldr	r2, [pc, #8]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f16:	430b      	orrs	r3, r1
 8002f18:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f1c:	e002      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8002f1e:	bf00      	nop
 8002f20:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2c:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002f30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f34:	2300      	movs	r3, #0
 8002f36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002f3a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4313      	orrs	r3, r2
 8002f42:	d04c      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8002f44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f4c:	2b80      	cmp	r3, #128	; 0x80
 8002f4e:	d02d      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002f50:	2b80      	cmp	r3, #128	; 0x80
 8002f52:	d827      	bhi.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002f54:	2b60      	cmp	r3, #96	; 0x60
 8002f56:	d02b      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8002f58:	2b60      	cmp	r3, #96	; 0x60
 8002f5a:	d823      	bhi.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002f5c:	2b40      	cmp	r3, #64	; 0x40
 8002f5e:	d006      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8002f60:	2b40      	cmp	r3, #64	; 0x40
 8002f62:	d81f      	bhi.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d009      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002f68:	2b20      	cmp	r3, #32
 8002f6a:	d011      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8002f6c:	e01a      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002f6e:	4bbe      	ldr	r3, [pc, #760]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f72:	4abd      	ldr	r2, [pc, #756]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f78:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002f7a:	e01a      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002f7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f80:	3308      	adds	r3, #8
 8002f82:	4618      	mov	r0, r3
 8002f84:	f002 fc5c 	bl	8005840 <RCCEx_PLL2_Config>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002f8e:	e010      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002f90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f94:	332c      	adds	r3, #44	; 0x2c
 8002f96:	4618      	mov	r0, r3
 8002f98:	f002 fcea 	bl	8005970 <RCCEx_PLL3_Config>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002fa2:	e006      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8002faa:	e002      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8002fac:	bf00      	nop
 8002fae:	e000      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8002fb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fb2:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10d      	bne.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8002fba:	4bab      	ldr	r3, [pc, #684]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fbc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002fc0:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8002fc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fcc:	4aa6      	ldr	r2, [pc, #664]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fce:	430b      	orrs	r3, r1
 8002fd0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002fd4:	e003      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd6:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002fda:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002fde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002fea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002fee:	2300      	movs	r3, #0
 8002ff0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ff4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	d053      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8002ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003002:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800300a:	d033      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800300c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003010:	d82c      	bhi.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003012:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003016:	d02f      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8003018:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800301c:	d826      	bhi.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800301e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003022:	d008      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8003024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003028:	d820      	bhi.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00a      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800302e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003032:	d011      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003034:	e01a      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003036:	4b8c      	ldr	r3, [pc, #560]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303a:	4a8b      	ldr	r2, [pc, #556]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800303c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003040:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003042:	e01a      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003044:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003048:	3308      	adds	r3, #8
 800304a:	4618      	mov	r0, r3
 800304c:	f002 fbf8 	bl	8005840 <RCCEx_PLL2_Config>
 8003050:	4603      	mov	r3, r0
 8003052:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003056:	e010      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800305c:	332c      	adds	r3, #44	; 0x2c
 800305e:	4618      	mov	r0, r3
 8003060:	f002 fc86 	bl	8005970 <RCCEx_PLL3_Config>
 8003064:	4603      	mov	r3, r0
 8003066:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800306a:	e006      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003072:	e002      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8003074:	bf00      	nop
 8003076:	e000      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8003078:	bf00      	nop
    }

    if (ret == HAL_OK)
 800307a:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10d      	bne.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8003082:	4b79      	ldr	r3, [pc, #484]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003084:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003088:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800308c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003090:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003094:	4a74      	ldr	r2, [pc, #464]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003096:	430b      	orrs	r3, r1
 8003098:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800309c:	e003      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800309e:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80030a2:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80030a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ae:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80030b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80030b4:	2300      	movs	r3, #0
 80030b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80030b8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80030bc:	460b      	mov	r3, r1
 80030be:	4313      	orrs	r3, r2
 80030c0:	d046      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80030c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80030ca:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80030ce:	d028      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80030d0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80030d4:	d821      	bhi.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80030d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030da:	d022      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80030dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030e0:	d81b      	bhi.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80030e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80030e6:	d01c      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80030e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80030ec:	d815      	bhi.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80030ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030f2:	d008      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x56a>
 80030f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030f8:	d80f      	bhi.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d011      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80030fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003102:	d00e      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003104:	e009      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x57e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003106:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800310a:	3308      	adds	r3, #8
 800310c:	4618      	mov	r0, r3
 800310e:	f002 fb97 	bl	8005840 <RCCEx_PLL2_Config>
 8003112:	4603      	mov	r3, r0
 8003114:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003118:	e004      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x588>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003120:	e000      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x588>
        break;
 8003122:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003124:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10d      	bne.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800312c:	4b4e      	ldr	r3, [pc, #312]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800312e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003132:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003136:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800313a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800313e:	4a4a      	ldr	r2, [pc, #296]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003140:	430b      	orrs	r3, r1
 8003142:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003146:	e003      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003148:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800314c:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003150:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003158:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800315c:	673b      	str	r3, [r7, #112]	; 0x70
 800315e:	2300      	movs	r3, #0
 8003160:	677b      	str	r3, [r7, #116]	; 0x74
 8003162:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003166:	460b      	mov	r3, r1
 8003168:	4313      	orrs	r3, r2
 800316a:	d03f      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800316c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003170:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003174:	2b04      	cmp	r3, #4
 8003176:	d81e      	bhi.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8003178:	a201      	add	r2, pc, #4	; (adr r2, 8003180 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800317a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317e:	bf00      	nop
 8003180:	080031bf 	.word	0x080031bf
 8003184:	08003195 	.word	0x08003195
 8003188:	080031a3 	.word	0x080031a3
 800318c:	080031bf 	.word	0x080031bf
 8003190:	080031bf 	.word	0x080031bf
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003194:	4b34      	ldr	r3, [pc, #208]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003198:	4a33      	ldr	r2, [pc, #204]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800319a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800319e:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80031a0:	e00e      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80031a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031a6:	332c      	adds	r3, #44	; 0x2c
 80031a8:	4618      	mov	r0, r3
 80031aa:	f002 fbe1 	bl	8005970 <RCCEx_PLL3_Config>
 80031ae:	4603      	mov	r3, r0
 80031b0:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80031b4:	e004      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80031bc:	e000      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x624>
        break;
 80031be:	bf00      	nop
    }
    if (ret == HAL_OK)
 80031c0:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10d      	bne.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80031c8:	4b27      	ldr	r3, [pc, #156]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80031ce:	f023 0107 	bic.w	r1, r3, #7
 80031d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031da:	4a23      	ldr	r2, [pc, #140]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031dc:	430b      	orrs	r3, r1
 80031de:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80031e2:	e003      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x650>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e4:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80031e8:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80031ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f4:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80031f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80031fa:	2300      	movs	r3, #0
 80031fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031fe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003202:	460b      	mov	r3, r1
 8003204:	4313      	orrs	r3, r2
 8003206:	d04c      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x706>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003208:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800320c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003210:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003214:	d02a      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8003216:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800321a:	d821      	bhi.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 800321c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003220:	d026      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 8003222:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003226:	d81b      	bhi.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8003228:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800322c:	d00e      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800322e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003232:	d815      	bhi.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8003234:	2b00      	cmp	r3, #0
 8003236:	d01d      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8003238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800323c:	d110      	bne.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800323e:	4b0a      	ldr	r3, [pc, #40]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003242:	4a09      	ldr	r2, [pc, #36]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003248:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800324a:	e014      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800324c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003250:	332c      	adds	r3, #44	; 0x2c
 8003252:	4618      	mov	r0, r3
 8003254:	f002 fb8c 	bl	8005970 <RCCEx_PLL3_Config>
 8003258:	4603      	mov	r3, r0
 800325a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 800325e:	e00a      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003266:	e006      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8003268:	46020c00 	.word	0x46020c00
        break;
 800326c:	bf00      	nop
 800326e:	e002      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8003270:	bf00      	nop
 8003272:	e000      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8003274:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003276:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10d      	bne.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800327e:	4baf      	ldr	r3, [pc, #700]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003280:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003284:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003288:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800328c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003290:	4aaa      	ldr	r2, [pc, #680]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003292:	430b      	orrs	r3, r1
 8003294:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003298:	e003      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x706>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800329a:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800329e:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032aa:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80032ae:	663b      	str	r3, [r7, #96]	; 0x60
 80032b0:	2300      	movs	r3, #0
 80032b2:	667b      	str	r3, [r7, #100]	; 0x64
 80032b4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80032b8:	460b      	mov	r3, r1
 80032ba:	4313      	orrs	r3, r2
 80032bc:	f000 80b5 	beq.w	800342a <HAL_RCCEx_PeriphCLKConfig+0x88e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032c0:	2300      	movs	r3, #0
 80032c2:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032c6:	4b9d      	ldr	r3, [pc, #628]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80032c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d113      	bne.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x760>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032d4:	4b99      	ldr	r3, [pc, #612]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80032d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032da:	4a98      	ldr	r2, [pc, #608]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80032dc:	f043 0304 	orr.w	r3, r3, #4
 80032e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80032e4:	4b95      	ldr	r3, [pc, #596]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80032e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032ea:	f003 0304 	and.w	r3, r3, #4
 80032ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80032f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
      pwrclkchanged = SET;
 80032f6:	2301      	movs	r3, #1
 80032f8:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80032fc:	4b90      	ldr	r3, [pc, #576]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 80032fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003300:	4a8f      	ldr	r2, [pc, #572]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8003302:	f043 0301 	orr.w	r3, r3, #1
 8003306:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003308:	f7fd fd8a 	bl	8000e20 <HAL_GetTick>
 800330c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003310:	e00b      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x78e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003312:	f7fd fd85 	bl	8000e20 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d903      	bls.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        ret = HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003328:	e005      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x79a>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800332a:	4b85      	ldr	r3, [pc, #532]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 800332c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0ed      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x776>
      }
    }

    if (ret == HAL_OK)
 8003336:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800333a:	2b00      	cmp	r3, #0
 800333c:	d165      	bne.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800333e:	4b7f      	ldr	r3, [pc, #508]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003340:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003344:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003348:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800334c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003350:	2b00      	cmp	r3, #0
 8003352:	d023      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x800>
 8003354:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003358:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800335c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003360:	4293      	cmp	r3, r2
 8003362:	d01b      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x800>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003364:	4b75      	ldr	r3, [pc, #468]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003366:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800336a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800336e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003372:	4b72      	ldr	r3, [pc, #456]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003374:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003378:	4a70      	ldr	r2, [pc, #448]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800337a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800337e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003382:	4b6e      	ldr	r3, [pc, #440]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003384:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003388:	4a6c      	ldr	r2, [pc, #432]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800338a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800338e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003392:	4a6a      	ldr	r2, [pc, #424]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003394:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003398:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800339c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d019      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x840>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a8:	f7fd fd3a 	bl	8000e20 <HAL_GetTick>
 80033ac:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033b0:	e00d      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x832>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b2:	f7fd fd35 	bl	8000e20 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033bc:	1ad2      	subs	r2, r2, r3
 80033be:	f241 3388 	movw	r3, #5000	; 0x1388
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d903      	bls.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x832>
          {
            ret = HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
            break;
 80033cc:	e006      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x840>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033ce:	4b5b      	ldr	r3, [pc, #364]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80033d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0ea      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x816>
          }
        }
      }

      if (ret == HAL_OK)
 80033dc:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10d      	bne.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x864>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80033e4:	4b55      	ldr	r3, [pc, #340]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80033e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80033ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033f2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80033f6:	4a51      	ldr	r2, [pc, #324]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80033f8:	430b      	orrs	r3, r1
 80033fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80033fe:	e008      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003400:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003404:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
 8003408:	e003      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800340a:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800340e:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003412:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 8003416:	2b01      	cmp	r3, #1
 8003418:	d107      	bne.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x88e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800341a:	4b48      	ldr	r3, [pc, #288]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800341c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003420:	4a46      	ldr	r2, [pc, #280]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003422:	f023 0304 	bic.w	r3, r3, #4
 8003426:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800342a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800342e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003432:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003436:	65bb      	str	r3, [r7, #88]	; 0x58
 8003438:	2300      	movs	r3, #0
 800343a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800343c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003440:	460b      	mov	r3, r1
 8003442:	4313      	orrs	r3, r2
 8003444:	d042      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8003446:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800344a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800344e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003452:	d022      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8003454:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003458:	d81b      	bhi.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 800345a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800345e:	d011      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 8003460:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003464:	d815      	bhi.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8003466:	2b00      	cmp	r3, #0
 8003468:	d019      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x902>
 800346a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800346e:	d110      	bne.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003470:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003474:	3308      	adds	r3, #8
 8003476:	4618      	mov	r0, r3
 8003478:	f002 f9e2 	bl	8005840 <RCCEx_PLL2_Config>
 800347c:	4603      	mov	r3, r0
 800347e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003482:	e00d      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003484:	4b2d      	ldr	r3, [pc, #180]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003488:	4a2c      	ldr	r2, [pc, #176]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800348a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800348e:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003490:	e006      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003498:	e002      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 800349a:	bf00      	nop
 800349c:	e000      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 800349e:	bf00      	nop
    }
    if (ret == HAL_OK)
 80034a0:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10d      	bne.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x928>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80034a8:	4b24      	ldr	r3, [pc, #144]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80034aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034ae:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80034b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80034ba:	4a20      	ldr	r2, [pc, #128]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80034bc:	430b      	orrs	r3, r1
 80034be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034c2:	e003      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c4:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80034c8:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80034cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80034d8:	653b      	str	r3, [r7, #80]	; 0x50
 80034da:	2300      	movs	r3, #0
 80034dc:	657b      	str	r3, [r7, #84]	; 0x54
 80034de:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80034e2:	460b      	mov	r3, r1
 80034e4:	4313      	orrs	r3, r2
 80034e6:	d031      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80034e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80034f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034f4:	d00b      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x972>
 80034f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034fa:	d804      	bhi.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d008      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003504:	d007      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x97a>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 800350c:	e004      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 800350e:	bf00      	nop
 8003510:	e002      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8003512:	bf00      	nop
 8003514:	e000      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8003516:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003518:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800351c:	2b00      	cmp	r3, #0
 800351e:	d111      	bne.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003520:	4b06      	ldr	r3, [pc, #24]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003522:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003526:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800352a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800352e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003532:	4a02      	ldr	r2, [pc, #8]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003534:	430b      	orrs	r3, r1
 8003536:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800353a:	e007      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 800353c:	46020c00 	.word	0x46020c00
 8003540:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003544:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003548:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800354c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003554:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003558:	64bb      	str	r3, [r7, #72]	; 0x48
 800355a:	2300      	movs	r3, #0
 800355c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800355e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003562:	460b      	mov	r3, r1
 8003564:	4313      	orrs	r3, r2
 8003566:	d00c      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8003568:	4bb2      	ldr	r3, [pc, #712]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800356a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800356e:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8003572:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003576:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800357a:	4aae      	ldr	r2, [pc, #696]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800357c:	430b      	orrs	r3, r1
 800357e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8003582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800358e:	643b      	str	r3, [r7, #64]	; 0x40
 8003590:	2300      	movs	r3, #0
 8003592:	647b      	str	r3, [r7, #68]	; 0x44
 8003594:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003598:	460b      	mov	r3, r1
 800359a:	4313      	orrs	r3, r2
 800359c:	d019      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800359e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80035a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035aa:	d105      	bne.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80035ac:	4ba1      	ldr	r3, [pc, #644]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80035ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b0:	4aa0      	ldr	r2, [pc, #640]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80035b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b6:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80035b8:	4b9e      	ldr	r3, [pc, #632]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80035ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80035be:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80035c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80035ca:	4a9a      	ldr	r2, [pc, #616]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80035cc:	430b      	orrs	r3, r1
 80035ce:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80035d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035da:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80035de:	63bb      	str	r3, [r7, #56]	; 0x38
 80035e0:	2300      	movs	r3, #0
 80035e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035e4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80035e8:	460b      	mov	r3, r1
 80035ea:	4313      	orrs	r3, r2
 80035ec:	d00c      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80035ee:	4b91      	ldr	r3, [pc, #580]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80035f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035f4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80035f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035fc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003600:	4a8c      	ldr	r2, [pc, #560]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003602:	430b      	orrs	r3, r1
 8003604:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003608:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800360c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003610:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003614:	633b      	str	r3, [r7, #48]	; 0x30
 8003616:	2300      	movs	r3, #0
 8003618:	637b      	str	r3, [r7, #52]	; 0x34
 800361a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800361e:	460b      	mov	r3, r1
 8003620:	4313      	orrs	r3, r2
 8003622:	d00c      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003624:	4b83      	ldr	r3, [pc, #524]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800362a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800362e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003632:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003636:	4a7f      	ldr	r2, [pc, #508]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003638:	430b      	orrs	r3, r1
 800363a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800363e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003646:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800364a:	62bb      	str	r3, [r7, #40]	; 0x28
 800364c:	2300      	movs	r3, #0
 800364e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003650:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003654:	460b      	mov	r3, r1
 8003656:	4313      	orrs	r3, r2
 8003658:	d00c      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xad8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800365a:	4b76      	ldr	r3, [pc, #472]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800365c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003660:	f023 0218 	bic.w	r2, r3, #24
 8003664:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003668:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800366c:	4971      	ldr	r1, [pc, #452]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800366e:	4313      	orrs	r3, r2
 8003670:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003674:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367c:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8003680:	623b      	str	r3, [r7, #32]
 8003682:	2300      	movs	r3, #0
 8003684:	627b      	str	r3, [r7, #36]	; 0x24
 8003686:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800368a:	460b      	mov	r3, r1
 800368c:	4313      	orrs	r3, r2
 800368e:	d032      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8003690:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003694:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003698:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800369c:	d105      	bne.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800369e:	4b65      	ldr	r3, [pc, #404]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80036a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a2:	4a64      	ldr	r2, [pc, #400]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80036a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036a8:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80036aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036ae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80036b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036b6:	d108      	bne.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0xb2e>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036bc:	3308      	adds	r3, #8
 80036be:	4618      	mov	r0, r3
 80036c0:	f002 f8be 	bl	8005840 <RCCEx_PLL2_Config>
 80036c4:	4603      	mov	r3, r0
 80036c6:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    }
    if (ret == HAL_OK)
 80036ca:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10d      	bne.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0xb52>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80036d2:	4b58      	ldr	r3, [pc, #352]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80036d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80036d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036e0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80036e4:	4953      	ldr	r1, [pc, #332]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80036ec:	e003      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ee:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80036f2:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 80036f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fe:	2100      	movs	r1, #0
 8003700:	61b9      	str	r1, [r7, #24]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	61fb      	str	r3, [r7, #28]
 8003708:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800370c:	460b      	mov	r3, r1
 800370e:	4313      	orrs	r3, r2
 8003710:	d04a      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 8003712:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003716:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800371a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800371e:	d01e      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 8003720:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003724:	d825      	bhi.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 8003726:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800372a:	d00e      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800372c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003730:	d81f      	bhi.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 8003732:	2b00      	cmp	r3, #0
 8003734:	d021      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0xbde>
 8003736:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800373a:	d11a      	bne.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800373c:	4b3d      	ldr	r3, [pc, #244]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800373e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003740:	4a3c      	ldr	r2, [pc, #240]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003746:	6293      	str	r3, [r2, #40]	; 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8003748:	e018      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800374a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800374e:	3308      	adds	r3, #8
 8003750:	4618      	mov	r0, r3
 8003752:	f002 f875 	bl	8005840 <RCCEx_PLL2_Config>
 8003756:	4603      	mov	r3, r0
 8003758:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800375c:	e00e      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800375e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003762:	332c      	adds	r3, #44	; 0x2c
 8003764:	4618      	mov	r0, r3
 8003766:	f002 f903 	bl	8005970 <RCCEx_PLL3_Config>
 800376a:	4603      	mov	r3, r0
 800376c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8003770:	e004      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      default:
        ret = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003778:	e000      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        break;
 800377a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800377c:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10d      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xc04>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 8003784:	4b2b      	ldr	r3, [pc, #172]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003786:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800378a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800378e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003792:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003796:	4927      	ldr	r1, [pc, #156]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003798:	4313      	orrs	r3, r2
 800379a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800379e:	e003      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a0:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80037a4:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80037a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b0:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80037b4:	613b      	str	r3, [r7, #16]
 80037b6:	2300      	movs	r3, #0
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80037be:	460b      	mov	r3, r1
 80037c0:	4313      	orrs	r3, r2
 80037c2:	d03d      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0xca4>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80037c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037d0:	d00e      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80037d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037d6:	d815      	bhi.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d017      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80037dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037e0:	d110      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0xc68>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037e2:	4b14      	ldr	r3, [pc, #80]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80037e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e6:	4a13      	ldr	r2, [pc, #76]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80037e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ec:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80037ee:	e00e      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xc72>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80037f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037f4:	3308      	adds	r3, #8
 80037f6:	4618      	mov	r0, r3
 80037f8:	f002 f822 	bl	8005840 <RCCEx_PLL2_Config>
 80037fc:	4603      	mov	r3, r0
 80037fe:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8003802:	e004      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xc72>
      default:
        ret = HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 800380a:	e000      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xc72>
        break;
 800380c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800380e:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003812:	2b00      	cmp	r3, #0
 8003814:	d110      	bne.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8003816:	4b07      	ldr	r3, [pc, #28]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800381c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003820:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003828:	4902      	ldr	r1, [pc, #8]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800382a:	4313      	orrs	r3, r2
 800382c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8003830:	e006      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0xca4>
 8003832:	bf00      	nop
 8003834:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003838:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800383c:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8003840:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003848:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800384c:	60bb      	str	r3, [r7, #8]
 800384e:	2300      	movs	r3, #0
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003856:	460b      	mov	r3, r1
 8003858:	4313      	orrs	r3, r2
 800385a:	d00c      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xcda>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800385c:	4b2c      	ldr	r3, [pc, #176]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 800385e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003862:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800386a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800386e:	4928      	ldr	r1, [pc, #160]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8003870:	4313      	orrs	r3, r2
 8003872:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 8003876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800387a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387e:	2100      	movs	r1, #0
 8003880:	6039      	str	r1, [r7, #0]
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	607b      	str	r3, [r7, #4]
 8003888:	e9d7 1200 	ldrd	r1, r2, [r7]
 800388c:	460b      	mov	r3, r1
 800388e:	4313      	orrs	r3, r2
 8003890:	d036      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 8003892:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003896:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800389a:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800389e:	d00d      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80038a0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80038a4:	d811      	bhi.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 80038a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038aa:	d012      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80038ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038b0:	d80b      	bhi.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00d      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80038b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ba:	d106      	bne.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xd2e>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80038bc:	4b14      	ldr	r3, [pc, #80]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80038be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c0:	4a13      	ldr	r2, [pc, #76]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80038c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c6:	6293      	str	r3, [r2, #40]	; 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 80038c8:	e004      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>

      default:
        ret = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80038d0:	e000      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
        break;
 80038d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038d4:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10d      	bne.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 80038dc:	4b0c      	ldr	r3, [pc, #48]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80038de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80038e2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80038e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80038ee:	4908      	ldr	r1, [pc, #32]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80038f6:	e003      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f8:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80038fc:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8003900:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
}
 8003904:	4618      	mov	r0, r3
 8003906:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800390a:	46bd      	mov	sp, r7
 800390c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003910:	46020c00 	.word	0x46020c00

08003914 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8003914:	b480      	push	{r7}
 8003916:	b089      	sub	sp, #36	; 0x24
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800391c:	4bad      	ldr	r3, [pc, #692]	; (8003bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800391e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003924:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003926:	4bab      	ldr	r3, [pc, #684]	; (8003bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392a:	f003 0303 	and.w	r3, r3, #3
 800392e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003930:	4ba8      	ldr	r3, [pc, #672]	; (8003bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003934:	0a1b      	lsrs	r3, r3, #8
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	3301      	adds	r3, #1
 800393c:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800393e:	4ba5      	ldr	r3, [pc, #660]	; (8003bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003942:	091b      	lsrs	r3, r3, #4
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800394a:	4ba2      	ldr	r3, [pc, #648]	; (8003bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800394c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394e:	08db      	lsrs	r3, r3, #3
 8003950:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	fb02 f303 	mul.w	r3, r2, r3
 800395a:	ee07 3a90 	vmov	s15, r3
 800395e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003962:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 8123 	beq.w	8003bb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	2b03      	cmp	r3, #3
 8003972:	d062      	beq.n	8003a3a <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	2b03      	cmp	r3, #3
 8003978:	f200 8081 	bhi.w	8003a7e <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d024      	beq.n	80039cc <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2b02      	cmp	r3, #2
 8003986:	d17a      	bne.n	8003a7e <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	ee07 3a90 	vmov	s15, r3
 800398e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003992:	eddf 6a91 	vldr	s13, [pc, #580]	; 8003bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8003996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800399a:	4b8e      	ldr	r3, [pc, #568]	; (8003bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800399c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800399e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039a2:	ee07 3a90 	vmov	s15, r3
 80039a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80039aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80039ae:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8003bdc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80039b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80039ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039be:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039ca:	e08f      	b.n	8003aec <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80039cc:	4b81      	ldr	r3, [pc, #516]	; (8003bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d005      	beq.n	80039e4 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 80039d8:	4b7e      	ldr	r3, [pc, #504]	; (8003bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	0f1b      	lsrs	r3, r3, #28
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	e006      	b.n	80039f2 <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 80039e4:	4b7b      	ldr	r3, [pc, #492]	; (8003bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80039e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80039ea:	041b      	lsls	r3, r3, #16
 80039ec:	0f1b      	lsrs	r3, r3, #28
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	4a7b      	ldr	r2, [pc, #492]	; (8003be0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 80039f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f8:	ee07 3a90 	vmov	s15, r3
 80039fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	ee07 3a90 	vmov	s15, r3
 8003a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	ee07 3a90 	vmov	s15, r3
 8003a14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a18:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a1c:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8003bdc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003a20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a34:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a38:	e058      	b.n	8003aec <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	ee07 3a90 	vmov	s15, r3
 8003a40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a44:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8003a48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a4c:	4b61      	ldr	r3, [pc, #388]	; (8003bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a54:	ee07 3a90 	vmov	s15, r3
 8003a58:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a5c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a60:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8003bdc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003a64:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a68:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a70:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a78:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a7c:	e036      	b.n	8003aec <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003a7e:	4b55      	ldr	r3, [pc, #340]	; (8003bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d005      	beq.n	8003a96 <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 8003a8a:	4b52      	ldr	r3, [pc, #328]	; (8003bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	0f1b      	lsrs	r3, r3, #28
 8003a90:	f003 030f 	and.w	r3, r3, #15
 8003a94:	e006      	b.n	8003aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 8003a96:	4b4f      	ldr	r3, [pc, #316]	; (8003bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003a98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a9c:	041b      	lsls	r3, r3, #16
 8003a9e:	0f1b      	lsrs	r3, r3, #28
 8003aa0:	f003 030f 	and.w	r3, r3, #15
 8003aa4:	4a4e      	ldr	r2, [pc, #312]	; (8003be0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8003aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aaa:	ee07 3a90 	vmov	s15, r3
 8003aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	ee07 3a90 	vmov	s15, r3
 8003ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003abc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	ee07 3a90 	vmov	s15, r3
 8003ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aca:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ace:	eddf 5a43 	vldr	s11, [pc, #268]	; 8003bdc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ae6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003aea:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003aec:	4b39      	ldr	r3, [pc, #228]	; (8003bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d017      	beq.n	8003b28 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003af8:	4b36      	ldr	r3, [pc, #216]	; (8003bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003afc:	0a5b      	lsrs	r3, r3, #9
 8003afe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b02:	ee07 3a90 	vmov	s15, r3
 8003b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8003b0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b0e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003b12:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b1e:	ee17 2a90 	vmov	r2, s15
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	e002      	b.n	8003b2e <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8003b2e:	4b29      	ldr	r3, [pc, #164]	; (8003bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d017      	beq.n	8003b6a <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003b3a:	4b26      	ldr	r3, [pc, #152]	; (8003bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b3e:	0c1b      	lsrs	r3, r3, #16
 8003b40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b44:	ee07 3a90 	vmov	s15, r3
 8003b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003b4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b50:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003b54:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b60:	ee17 2a90 	vmov	r2, s15
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	605a      	str	r2, [r3, #4]
 8003b68:	e002      	b.n	8003b70 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8003b70:	4b18      	ldr	r3, [pc, #96]	; (8003bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d017      	beq.n	8003bac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003b7c:	4b15      	ldr	r3, [pc, #84]	; (8003bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b80:	0e1b      	lsrs	r3, r3, #24
 8003b82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b86:	ee07 3a90 	vmov	s15, r3
 8003b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8003b8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b92:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003b96:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ba2:	ee17 2a90 	vmov	r2, s15
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003baa:	e00c      	b.n	8003bc6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	609a      	str	r2, [r3, #8]
}
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	609a      	str	r2, [r3, #8]
}
 8003bc6:	bf00      	nop
 8003bc8:	3724      	adds	r7, #36	; 0x24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	46020c00 	.word	0x46020c00
 8003bd8:	4b742400 	.word	0x4b742400
 8003bdc:	46000000 	.word	0x46000000
 8003be0:	08006e00 	.word	0x08006e00

08003be4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b089      	sub	sp, #36	; 0x24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003bec:	4bad      	ldr	r3, [pc, #692]	; (8003ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bf4:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003bf6:	4bab      	ldr	r3, [pc, #684]	; (8003ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8003c00:	4ba8      	ldr	r3, [pc, #672]	; (8003ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	0a1b      	lsrs	r3, r3, #8
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8003c0e:	4ba5      	ldr	r3, [pc, #660]	; (8003ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c12:	091b      	lsrs	r3, r3, #4
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003c1a:	4ba2      	ldr	r3, [pc, #648]	; (8003ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	08db      	lsrs	r3, r3, #3
 8003c20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	fb02 f303 	mul.w	r3, r2, r3
 8003c2a:	ee07 3a90 	vmov	s15, r3
 8003c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c32:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 8123 	beq.w	8003e84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	2b03      	cmp	r3, #3
 8003c42:	d062      	beq.n	8003d0a <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	2b03      	cmp	r3, #3
 8003c48:	f200 8081 	bhi.w	8003d4e <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d024      	beq.n	8003c9c <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d17a      	bne.n	8003d4e <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	ee07 3a90 	vmov	s15, r3
 8003c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c62:	eddf 6a91 	vldr	s13, [pc, #580]	; 8003ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c6a:	4b8e      	ldr	r3, [pc, #568]	; (8003ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c72:	ee07 3a90 	vmov	s15, r3
 8003c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c7e:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8003eac <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c9a:	e08f      	b.n	8003dbc <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003c9c:	4b81      	ldr	r3, [pc, #516]	; (8003ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d005      	beq.n	8003cb4 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 8003ca8:	4b7e      	ldr	r3, [pc, #504]	; (8003ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	0f1b      	lsrs	r3, r3, #28
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	e006      	b.n	8003cc2 <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 8003cb4:	4b7b      	ldr	r3, [pc, #492]	; (8003ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003cb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003cba:	041b      	lsls	r3, r3, #16
 8003cbc:	0f1b      	lsrs	r3, r3, #28
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	4a7b      	ldr	r2, [pc, #492]	; (8003eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8003cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cc8:	ee07 3a90 	vmov	s15, r3
 8003ccc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	ee07 3a90 	vmov	s15, r3
 8003cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	ee07 3a90 	vmov	s15, r3
 8003ce4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ce8:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cec:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8003eac <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003cf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cf8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d04:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d08:	e058      	b.n	8003dbc <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	ee07 3a90 	vmov	s15, r3
 8003d10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d14:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003d18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d1c:	4b61      	ldr	r3, [pc, #388]	; (8003ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d24:	ee07 3a90 	vmov	s15, r3
 8003d28:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d2c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d30:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8003eac <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003d34:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003d38:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d40:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d48:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d4c:	e036      	b.n	8003dbc <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003d4e:	4b55      	ldr	r3, [pc, #340]	; (8003ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d005      	beq.n	8003d66 <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 8003d5a:	4b52      	ldr	r3, [pc, #328]	; (8003ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	0f1b      	lsrs	r3, r3, #28
 8003d60:	f003 030f 	and.w	r3, r3, #15
 8003d64:	e006      	b.n	8003d74 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 8003d66:	4b4f      	ldr	r3, [pc, #316]	; (8003ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003d68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d6c:	041b      	lsls	r3, r3, #16
 8003d6e:	0f1b      	lsrs	r3, r3, #28
 8003d70:	f003 030f 	and.w	r3, r3, #15
 8003d74:	4a4e      	ldr	r2, [pc, #312]	; (8003eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8003d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d7a:	ee07 3a90 	vmov	s15, r3
 8003d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	ee07 3a90 	vmov	s15, r3
 8003d88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	ee07 3a90 	vmov	s15, r3
 8003d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d9e:	eddf 5a43 	vldr	s11, [pc, #268]	; 8003eac <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003daa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003db6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dba:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8003dbc:	4b39      	ldr	r3, [pc, #228]	; (8003ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d017      	beq.n	8003df8 <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003dc8:	4b36      	ldr	r3, [pc, #216]	; (8003ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dcc:	0a5b      	lsrs	r3, r3, #9
 8003dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dd2:	ee07 3a90 	vmov	s15, r3
 8003dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8003dda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003dde:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003de2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003de6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dee:	ee17 2a90 	vmov	r2, s15
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	e002      	b.n	8003dfe <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8003dfe:	4b29      	ldr	r3, [pc, #164]	; (8003ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d017      	beq.n	8003e3a <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003e0a:	4b26      	ldr	r3, [pc, #152]	; (8003ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0e:	0c1b      	lsrs	r3, r3, #16
 8003e10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e14:	ee07 3a90 	vmov	s15, r3
 8003e18:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8003e1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e20:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003e24:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e30:	ee17 2a90 	vmov	r2, s15
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	605a      	str	r2, [r3, #4]
 8003e38:	e002      	b.n	8003e40 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8003e40:	4b18      	ldr	r3, [pc, #96]	; (8003ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d017      	beq.n	8003e7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003e4c:	4b15      	ldr	r3, [pc, #84]	; (8003ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e50:	0e1b      	lsrs	r3, r3, #24
 8003e52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e56:	ee07 3a90 	vmov	s15, r3
 8003e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8003e5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e62:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003e66:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e72:	ee17 2a90 	vmov	r2, s15
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003e7a:	e00c      	b.n	8003e96 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	609a      	str	r2, [r3, #8]
}
 8003e82:	e008      	b.n	8003e96 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	609a      	str	r2, [r3, #8]
}
 8003e96:	bf00      	nop
 8003e98:	3724      	adds	r7, #36	; 0x24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	46020c00 	.word	0x46020c00
 8003ea8:	4b742400 	.word	0x4b742400
 8003eac:	46000000 	.word	0x46000000
 8003eb0:	08006e00 	.word	0x08006e00

08003eb4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b089      	sub	sp, #36	; 0x24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8003ebc:	4bad      	ldr	r3, [pc, #692]	; (8004174 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ec4:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8003ec6:	4bab      	ldr	r3, [pc, #684]	; (8004174 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8003ed0:	4ba8      	ldr	r3, [pc, #672]	; (8004174 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed4:	0a1b      	lsrs	r3, r3, #8
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	3301      	adds	r3, #1
 8003edc:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8003ede:	4ba5      	ldr	r3, [pc, #660]	; (8004174 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee2:	091b      	lsrs	r3, r3, #4
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8003eea:	4ba2      	ldr	r3, [pc, #648]	; (8004174 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eee:	08db      	lsrs	r3, r3, #3
 8003ef0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	fb02 f303 	mul.w	r3, r2, r3
 8003efa:	ee07 3a90 	vmov	s15, r3
 8003efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f02:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 8123 	beq.w	8004154 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	2b03      	cmp	r3, #3
 8003f12:	d062      	beq.n	8003fda <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	2b03      	cmp	r3, #3
 8003f18:	f200 8081 	bhi.w	800401e <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d024      	beq.n	8003f6c <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d17a      	bne.n	800401e <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	ee07 3a90 	vmov	s15, r3
 8003f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f32:	eddf 6a91 	vldr	s13, [pc, #580]	; 8004178 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8003f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f3a:	4b8e      	ldr	r3, [pc, #568]	; (8004174 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f42:	ee07 3a90 	vmov	s15, r3
 8003f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f4e:	eddf 5a8b 	vldr	s11, [pc, #556]	; 800417c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8003f52:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f66:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8003f6a:	e08f      	b.n	800408c <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003f6c:	4b81      	ldr	r3, [pc, #516]	; (8004174 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d005      	beq.n	8003f84 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 8003f78:	4b7e      	ldr	r3, [pc, #504]	; (8004174 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	0f1b      	lsrs	r3, r3, #28
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	e006      	b.n	8003f92 <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 8003f84:	4b7b      	ldr	r3, [pc, #492]	; (8004174 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003f86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f8a:	041b      	lsls	r3, r3, #16
 8003f8c:	0f1b      	lsrs	r3, r3, #28
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	4a7b      	ldr	r2, [pc, #492]	; (8004180 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8003f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f98:	ee07 3a90 	vmov	s15, r3
 8003f9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	ee07 3a90 	vmov	s15, r3
 8003fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	ee07 3a90 	vmov	s15, r3
 8003fb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fb8:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fbc:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800417c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8003fc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003fd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fd4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fd8:	e058      	b.n	800408c <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	ee07 3a90 	vmov	s15, r3
 8003fe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fe4:	eddf 6a64 	vldr	s13, [pc, #400]	; 8004178 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8003fe8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fec:	4b61      	ldr	r3, [pc, #388]	; (8004174 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ff4:	ee07 3a90 	vmov	s15, r3
 8003ff8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ffc:	ed97 6a02 	vldr	s12, [r7, #8]
 8004000:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800417c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004004:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004008:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800400c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004010:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004014:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004018:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800401c:	e036      	b.n	800408c <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800401e:	4b55      	ldr	r3, [pc, #340]	; (8004174 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d005      	beq.n	8004036 <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 800402a:	4b52      	ldr	r3, [pc, #328]	; (8004174 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	0f1b      	lsrs	r3, r3, #28
 8004030:	f003 030f 	and.w	r3, r3, #15
 8004034:	e006      	b.n	8004044 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 8004036:	4b4f      	ldr	r3, [pc, #316]	; (8004174 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004038:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800403c:	041b      	lsls	r3, r3, #16
 800403e:	0f1b      	lsrs	r3, r3, #28
 8004040:	f003 030f 	and.w	r3, r3, #15
 8004044:	4a4e      	ldr	r2, [pc, #312]	; (8004180 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8004046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800404a:	ee07 3a90 	vmov	s15, r3
 800404e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	ee07 3a90 	vmov	s15, r3
 8004058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800405c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	ee07 3a90 	vmov	s15, r3
 8004066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800406a:	ed97 6a02 	vldr	s12, [r7, #8]
 800406e:	eddf 5a43 	vldr	s11, [pc, #268]	; 800417c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800407a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800407e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004086:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800408a:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800408c:	4b39      	ldr	r3, [pc, #228]	; (8004174 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800408e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d017      	beq.n	80040c8 <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004098:	4b36      	ldr	r3, [pc, #216]	; (8004174 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800409a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409c:	0a5b      	lsrs	r3, r3, #9
 800409e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040a2:	ee07 3a90 	vmov	s15, r3
 80040a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80040aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040ae:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80040b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80040b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040be:	ee17 2a90 	vmov	r2, s15
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	e002      	b.n	80040ce <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80040ce:	4b29      	ldr	r3, [pc, #164]	; (8004174 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80040d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d017      	beq.n	800410a <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80040da:	4b26      	ldr	r3, [pc, #152]	; (8004174 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80040dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040de:	0c1b      	lsrs	r3, r3, #16
 80040e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040e4:	ee07 3a90 	vmov	s15, r3
 80040e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80040ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040f0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80040f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80040f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004100:	ee17 2a90 	vmov	r2, s15
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	605a      	str	r2, [r3, #4]
 8004108:	e002      	b.n	8004110 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8004110:	4b18      	ldr	r3, [pc, #96]	; (8004174 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004114:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d017      	beq.n	800414c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800411c:	4b15      	ldr	r3, [pc, #84]	; (8004174 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800411e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004120:	0e1b      	lsrs	r3, r3, #24
 8004122:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004126:	ee07 3a90 	vmov	s15, r3
 800412a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800412e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004132:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004136:	edd7 6a07 	vldr	s13, [r7, #28]
 800413a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800413e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004142:	ee17 2a90 	vmov	r2, s15
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800414a:	e00c      	b.n	8004166 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	609a      	str	r2, [r3, #8]
}
 8004152:	e008      	b.n	8004166 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	609a      	str	r2, [r3, #8]
}
 8004166:	bf00      	nop
 8004168:	3724      	adds	r7, #36	; 0x24
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	46020c00 	.word	0x46020c00
 8004178:	4b742400 	.word	0x4b742400
 800417c:	46000000 	.word	0x46000000
 8004180:	08006e00 	.word	0x08006e00

08004184 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b08e      	sub	sp, #56	; 0x38
 8004188:	af00      	add	r7, sp, #0
 800418a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800418e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004192:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8004196:	430b      	orrs	r3, r1
 8004198:	d145      	bne.n	8004226 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800419a:	4ba7      	ldr	r3, [pc, #668]	; (8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800419c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80041a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041a4:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80041a6:	4ba4      	ldr	r3, [pc, #656]	; (8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80041a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d108      	bne.n	80041c6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80041b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ba:	d104      	bne.n	80041c6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80041bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041c0:	637b      	str	r3, [r7, #52]	; 0x34
 80041c2:	f001 bb31 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80041c6:	4b9c      	ldr	r3, [pc, #624]	; (8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80041c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80041cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041d4:	d114      	bne.n	8004200 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80041d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041dc:	d110      	bne.n	8004200 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80041de:	4b96      	ldr	r3, [pc, #600]	; (8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80041e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80041e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041ec:	d103      	bne.n	80041f6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80041ee:	23fa      	movs	r3, #250	; 0xfa
 80041f0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80041f2:	f001 bb19 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 80041f6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80041fa:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80041fc:	f001 bb14 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8004200:	4b8d      	ldr	r3, [pc, #564]	; (8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004208:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800420c:	d107      	bne.n	800421e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800420e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004210:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004214:	d103      	bne.n	800421e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8004216:	4b89      	ldr	r3, [pc, #548]	; (800443c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004218:	637b      	str	r3, [r7, #52]	; 0x34
 800421a:	f001 bb05 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800421e:	2300      	movs	r3, #0
 8004220:	637b      	str	r3, [r7, #52]	; 0x34
 8004222:	f001 bb01 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004226:	e9d7 2300 	ldrd	r2, r3, [r7]
 800422a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800422e:	430b      	orrs	r3, r1
 8004230:	d151      	bne.n	80042d6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004232:	4b81      	ldr	r3, [pc, #516]	; (8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004234:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004238:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800423c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800423e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004240:	2b80      	cmp	r3, #128	; 0x80
 8004242:	d035      	beq.n	80042b0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8004244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004246:	2b80      	cmp	r3, #128	; 0x80
 8004248:	d841      	bhi.n	80042ce <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800424a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424c:	2b60      	cmp	r3, #96	; 0x60
 800424e:	d02a      	beq.n	80042a6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8004250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004252:	2b60      	cmp	r3, #96	; 0x60
 8004254:	d83b      	bhi.n	80042ce <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004258:	2b40      	cmp	r3, #64	; 0x40
 800425a:	d009      	beq.n	8004270 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800425c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425e:	2b40      	cmp	r3, #64	; 0x40
 8004260:	d835      	bhi.n	80042ce <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00c      	beq.n	8004282 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8004268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426a:	2b20      	cmp	r3, #32
 800426c:	d012      	beq.n	8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800426e:	e02e      	b.n	80042ce <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004274:	4618      	mov	r0, r3
 8004276:	f7ff fb4d 	bl	8003914 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800427e:	f001 bad3 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004282:	f107 0318 	add.w	r3, r7, #24
 8004286:	4618      	mov	r0, r3
 8004288:	f7ff fcac 	bl	8003be4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004290:	f001 baca 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004294:	f107 030c 	add.w	r3, r7, #12
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff fe0b 	bl	8003eb4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042a2:	f001 bac1 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80042a6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80042aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042ac:	f001 babc 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80042b0:	4b61      	ldr	r3, [pc, #388]	; (8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042bc:	d103      	bne.n	80042c6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80042be:	4b60      	ldr	r3, [pc, #384]	; (8004440 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80042c0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80042c2:	f001 bab1 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80042c6:	2300      	movs	r3, #0
 80042c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042ca:	f001 baad 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :
      {
        frequency = 0U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042d2:	f001 baa9 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80042d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042da:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80042de:	430b      	orrs	r3, r1
 80042e0:	d158      	bne.n	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80042e2:	4b55      	ldr	r3, [pc, #340]	; (8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80042e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80042e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80042ec:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80042ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042f4:	d03b      	beq.n	800436e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80042f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042fc:	d846      	bhi.n	800438c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80042fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004300:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004304:	d02e      	beq.n	8004364 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8004306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004308:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800430c:	d83e      	bhi.n	800438c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800430e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004314:	d00b      	beq.n	800432e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8004316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800431c:	d836      	bhi.n	800438c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800431e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00d      	beq.n	8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8004324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800432a:	d012      	beq.n	8004352 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800432c:	e02e      	b.n	800438c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800432e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff faee 	bl	8003914 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800433c:	f001 ba74 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004340:	f107 0318 	add.w	r3, r7, #24
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff fc4d 	bl	8003be4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800434e:	f001 ba6b 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004352:	f107 030c 	add.w	r3, r7, #12
 8004356:	4618      	mov	r0, r3
 8004358:	f7ff fdac 	bl	8003eb4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004360:	f001 ba62 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004364:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004368:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800436a:	f001 ba5d 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800436e:	4b32      	ldr	r3, [pc, #200]	; (8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800437a:	d103      	bne.n	8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800437c:	4b30      	ldr	r3, [pc, #192]	; (8004440 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800437e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004380:	f001 ba52 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004388:	f001 ba4e 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004390:	f001 ba4a 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8004394:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004398:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800439c:	430b      	orrs	r3, r1
 800439e:	d126      	bne.n	80043ee <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80043a0:	4b25      	ldr	r3, [pc, #148]	; (8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80043a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80043a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043aa:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 80043ac:	4b22      	ldr	r3, [pc, #136]	; (8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043b8:	d106      	bne.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80043ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d103      	bne.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 80043c0:	4b1f      	ldr	r3, [pc, #124]	; (8004440 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80043c2:	637b      	str	r3, [r7, #52]	; 0x34
 80043c4:	f001 ba30 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 80043c8:	4b1b      	ldr	r3, [pc, #108]	; (8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d4:	d107      	bne.n	80043e6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 80043d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043dc:	d103      	bne.n	80043e6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 80043de:	4b19      	ldr	r3, [pc, #100]	; (8004444 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80043e0:	637b      	str	r3, [r7, #52]	; 0x34
 80043e2:	f001 ba21 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 80043e6:	2300      	movs	r3, #0
 80043e8:	637b      	str	r3, [r7, #52]	; 0x34
 80043ea:	f001 ba1d 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80043ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043f2:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 80043f6:	430b      	orrs	r3, r1
 80043f8:	d16e      	bne.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80043fa:	4b0f      	ldr	r3, [pc, #60]	; (8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80043fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004400:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004404:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004408:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800440c:	d03d      	beq.n	800448a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800440e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004410:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004414:	d85c      	bhi.n	80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8004416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004418:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800441c:	d014      	beq.n	8004448 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800441e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004420:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004424:	d854      	bhi.n	80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8004426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004428:	2b00      	cmp	r3, #0
 800442a:	d01f      	beq.n	800446c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800442c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004432:	d012      	beq.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8004434:	e04c      	b.n	80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8004436:	bf00      	nop
 8004438:	46020c00 	.word	0x46020c00
 800443c:	0007a120 	.word	0x0007a120
 8004440:	00f42400 	.word	0x00f42400
 8004444:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800444c:	4618      	mov	r0, r3
 800444e:	f7ff fa61 	bl	8003914 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8004452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004454:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004456:	f001 b9e7 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800445a:	f107 0318 	add.w	r3, r7, #24
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff fbc0 	bl	8003be4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004468:	f001 b9de 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800446c:	4ba7      	ldr	r3, [pc, #668]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004474:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004478:	d103      	bne.n	8004482 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800447a:	4ba5      	ldr	r3, [pc, #660]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800447c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800447e:	f001 b9d3 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004482:	2300      	movs	r3, #0
 8004484:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004486:	f001 b9cf 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800448a:	4ba0      	ldr	r3, [pc, #640]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0320 	and.w	r3, r3, #32
 8004492:	2b20      	cmp	r3, #32
 8004494:	d118      	bne.n	80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004496:	4b9d      	ldr	r3, [pc, #628]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d005      	beq.n	80044ae <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80044a2:	4b9a      	ldr	r3, [pc, #616]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	0e1b      	lsrs	r3, r3, #24
 80044a8:	f003 030f 	and.w	r3, r3, #15
 80044ac:	e006      	b.n	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80044ae:	4b97      	ldr	r3, [pc, #604]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80044b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80044b4:	041b      	lsls	r3, r3, #16
 80044b6:	0e1b      	lsrs	r3, r3, #24
 80044b8:	f003 030f 	and.w	r3, r3, #15
 80044bc:	4a95      	ldr	r2, [pc, #596]	; (8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80044be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044c2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80044c4:	f001 b9b0 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044cc:	f001 b9ac 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044d4:	f001 b9a8 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80044d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044dc:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 80044e0:	430b      	orrs	r3, r1
 80044e2:	d17f      	bne.n	80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80044e4:	4b89      	ldr	r3, [pc, #548]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80044e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80044ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044ee:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80044f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d165      	bne.n	80045c2 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80044f6:	4b85      	ldr	r3, [pc, #532]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80044f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044fc:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004500:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8004502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004504:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004508:	d034      	beq.n	8004574 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800450a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004510:	d853      	bhi.n	80045ba <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8004512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004514:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004518:	d00b      	beq.n	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800451a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004520:	d84b      	bhi.n	80045ba <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8004522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004524:	2b00      	cmp	r3, #0
 8004526:	d016      	beq.n	8004556 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8004528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800452e:	d009      	beq.n	8004544 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8004530:	e043      	b.n	80045ba <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff f9ec 	bl	8003914 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800453c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004540:	f001 b972 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004544:	f107 0318 	add.w	r3, r7, #24
 8004548:	4618      	mov	r0, r3
 800454a:	f7ff fb4b 	bl	8003be4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004552:	f001 b969 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004556:	4b6d      	ldr	r3, [pc, #436]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800455e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004562:	d103      	bne.n	800456c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8004564:	4b6a      	ldr	r3, [pc, #424]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004566:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004568:	f001 b95e 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 800456c:	2300      	movs	r3, #0
 800456e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004570:	f001 b95a 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004574:	4b65      	ldr	r3, [pc, #404]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0320 	and.w	r3, r3, #32
 800457c:	2b20      	cmp	r3, #32
 800457e:	d118      	bne.n	80045b2 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004580:	4b62      	ldr	r3, [pc, #392]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d005      	beq.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800458c:	4b5f      	ldr	r3, [pc, #380]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	0e1b      	lsrs	r3, r3, #24
 8004592:	f003 030f 	and.w	r3, r3, #15
 8004596:	e006      	b.n	80045a6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8004598:	4b5c      	ldr	r3, [pc, #368]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800459a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800459e:	041b      	lsls	r3, r3, #16
 80045a0:	0e1b      	lsrs	r3, r3, #24
 80045a2:	f003 030f 	and.w	r3, r3, #15
 80045a6:	4a5b      	ldr	r2, [pc, #364]	; (8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80045a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045ac:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80045ae:	f001 b93b 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80045b6:	f001 b937 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        default :
        {
          frequency = 0U;
 80045ba:	2300      	movs	r3, #0
 80045bc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80045be:	f001 b933 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80045c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045c8:	d108      	bne.n	80045dc <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80045ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7ff f9a0 	bl	8003914 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	637b      	str	r3, [r7, #52]	; 0x34
 80045d8:	f001 b926 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else
    {
      frequency = 0U;
 80045dc:	2300      	movs	r3, #0
 80045de:	637b      	str	r3, [r7, #52]	; 0x34
 80045e0:	f001 b922 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80045e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045e8:	1e51      	subs	r1, r2, #1
 80045ea:	430b      	orrs	r3, r1
 80045ec:	d136      	bne.n	800465c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80045ee:	4b47      	ldr	r3, [pc, #284]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80045f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045f4:	f003 0303 	and.w	r3, r3, #3
 80045f8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80045fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d104      	bne.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8004600:	f7fe fa1e 	bl	8002a40 <HAL_RCC_GetPCLK2Freq>
 8004604:	6378      	str	r0, [r7, #52]	; 0x34
 8004606:	f001 b90f 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800460a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460c:	2b01      	cmp	r3, #1
 800460e:	d104      	bne.n	800461a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004610:	f7fe f8e0 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 8004614:	6378      	str	r0, [r7, #52]	; 0x34
 8004616:	f001 b907 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800461a:	4b3c      	ldr	r3, [pc, #240]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004626:	d106      	bne.n	8004636 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8004628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462a:	2b02      	cmp	r3, #2
 800462c:	d103      	bne.n	8004636 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800462e:	4b3a      	ldr	r3, [pc, #232]	; (8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004630:	637b      	str	r3, [r7, #52]	; 0x34
 8004632:	f001 b8f9 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004636:	4b35      	ldr	r3, [pc, #212]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004638:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b02      	cmp	r3, #2
 8004642:	d107      	bne.n	8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8004644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004646:	2b03      	cmp	r3, #3
 8004648:	d104      	bne.n	8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800464a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800464e:	637b      	str	r3, [r7, #52]	; 0x34
 8004650:	f001 b8ea 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8004654:	2300      	movs	r3, #0
 8004656:	637b      	str	r3, [r7, #52]	; 0x34
 8004658:	f001 b8e6 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800465c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004660:	1e91      	subs	r1, r2, #2
 8004662:	430b      	orrs	r3, r1
 8004664:	d136      	bne.n	80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004666:	4b29      	ldr	r3, [pc, #164]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800466c:	f003 030c 	and.w	r3, r3, #12
 8004670:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8004672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004674:	2b00      	cmp	r3, #0
 8004676:	d104      	bne.n	8004682 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004678:	f7fe f9ce 	bl	8002a18 <HAL_RCC_GetPCLK1Freq>
 800467c:	6378      	str	r0, [r7, #52]	; 0x34
 800467e:	f001 b8d3 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8004682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004684:	2b04      	cmp	r3, #4
 8004686:	d104      	bne.n	8004692 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004688:	f7fe f8a4 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 800468c:	6378      	str	r0, [r7, #52]	; 0x34
 800468e:	f001 b8cb 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8004692:	4b1e      	ldr	r3, [pc, #120]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800469a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800469e:	d106      	bne.n	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80046a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a2:	2b08      	cmp	r3, #8
 80046a4:	d103      	bne.n	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 80046a6:	4b1c      	ldr	r3, [pc, #112]	; (8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80046a8:	637b      	str	r3, [r7, #52]	; 0x34
 80046aa:	f001 b8bd 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80046ae:	4b17      	ldr	r3, [pc, #92]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80046b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d107      	bne.n	80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80046bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046be:	2b0c      	cmp	r3, #12
 80046c0:	d104      	bne.n	80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 80046c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046c6:	637b      	str	r3, [r7, #52]	; 0x34
 80046c8:	f001 b8ae 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	637b      	str	r3, [r7, #52]	; 0x34
 80046d0:	f001 b8aa 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80046d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046d8:	1f11      	subs	r1, r2, #4
 80046da:	430b      	orrs	r3, r1
 80046dc:	d13f      	bne.n	800475e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80046de:	4b0b      	ldr	r3, [pc, #44]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80046e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80046e8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80046ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d104      	bne.n	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80046f0:	f7fe f992 	bl	8002a18 <HAL_RCC_GetPCLK1Freq>
 80046f4:	6378      	str	r0, [r7, #52]	; 0x34
 80046f6:	f001 b897 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80046fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fc:	2b10      	cmp	r3, #16
 80046fe:	d10d      	bne.n	800471c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004700:	f7fe f868 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 8004704:	6378      	str	r0, [r7, #52]	; 0x34
 8004706:	f001 b88f 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800470a:	bf00      	nop
 800470c:	46020c00 	.word	0x46020c00
 8004710:	02dc6c00 	.word	0x02dc6c00
 8004714:	08006e00 	.word	0x08006e00
 8004718:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800471c:	4ba8      	ldr	r3, [pc, #672]	; (80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004728:	d106      	bne.n	8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800472a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472c:	2b20      	cmp	r3, #32
 800472e:	d103      	bne.n	8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8004730:	4ba4      	ldr	r3, [pc, #656]	; (80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004732:	637b      	str	r3, [r7, #52]	; 0x34
 8004734:	f001 b878 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8004738:	4ba1      	ldr	r3, [pc, #644]	; (80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800473a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b02      	cmp	r3, #2
 8004744:	d107      	bne.n	8004756 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8004746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004748:	2b30      	cmp	r3, #48	; 0x30
 800474a:	d104      	bne.n	8004756 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800474c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004750:	637b      	str	r3, [r7, #52]	; 0x34
 8004752:	f001 b869 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8004756:	2300      	movs	r3, #0
 8004758:	637b      	str	r3, [r7, #52]	; 0x34
 800475a:	f001 b865 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800475e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004762:	f1a2 0108 	sub.w	r1, r2, #8
 8004766:	430b      	orrs	r3, r1
 8004768:	d136      	bne.n	80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800476a:	4b95      	ldr	r3, [pc, #596]	; (80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800476c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004770:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004774:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8004776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004778:	2b00      	cmp	r3, #0
 800477a:	d104      	bne.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800477c:	f7fe f94c 	bl	8002a18 <HAL_RCC_GetPCLK1Freq>
 8004780:	6378      	str	r0, [r7, #52]	; 0x34
 8004782:	f001 b851 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8004786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004788:	2b40      	cmp	r3, #64	; 0x40
 800478a:	d104      	bne.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800478c:	f7fe f822 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 8004790:	6378      	str	r0, [r7, #52]	; 0x34
 8004792:	f001 b849 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8004796:	4b8a      	ldr	r3, [pc, #552]	; (80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800479e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047a2:	d106      	bne.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 80047a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a6:	2b80      	cmp	r3, #128	; 0x80
 80047a8:	d103      	bne.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 80047aa:	4b86      	ldr	r3, [pc, #536]	; (80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80047ac:	637b      	str	r3, [r7, #52]	; 0x34
 80047ae:	f001 b83b 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80047b2:	4b83      	ldr	r3, [pc, #524]	; (80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80047b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d107      	bne.n	80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80047c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c2:	2bc0      	cmp	r3, #192	; 0xc0
 80047c4:	d104      	bne.n	80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 80047c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047ca:	637b      	str	r3, [r7, #52]	; 0x34
 80047cc:	f001 b82c 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80047d0:	2300      	movs	r3, #0
 80047d2:	637b      	str	r3, [r7, #52]	; 0x34
 80047d4:	f001 b828 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80047d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047dc:	f1a2 0110 	sub.w	r1, r2, #16
 80047e0:	430b      	orrs	r3, r1
 80047e2:	d139      	bne.n	8004858 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80047e4:	4b76      	ldr	r3, [pc, #472]	; (80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80047e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ee:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80047f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d104      	bne.n	8004800 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80047f6:	f7fe f90f 	bl	8002a18 <HAL_RCC_GetPCLK1Freq>
 80047fa:	6378      	str	r0, [r7, #52]	; 0x34
 80047fc:	f001 b814 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8004800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004806:	d104      	bne.n	8004812 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004808:	f7fd ffe4 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 800480c:	6378      	str	r0, [r7, #52]	; 0x34
 800480e:	f001 b80b 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8004812:	4b6b      	ldr	r3, [pc, #428]	; (80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800481a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800481e:	d107      	bne.n	8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8004820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004822:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004826:	d103      	bne.n	8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8004828:	4b66      	ldr	r3, [pc, #408]	; (80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800482a:	637b      	str	r3, [r7, #52]	; 0x34
 800482c:	f000 bffc 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8004830:	4b63      	ldr	r3, [pc, #396]	; (80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004832:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b02      	cmp	r3, #2
 800483c:	d108      	bne.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800483e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004840:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004844:	d104      	bne.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8004846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800484a:	637b      	str	r3, [r7, #52]	; 0x34
 800484c:	f000 bfec 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	637b      	str	r3, [r7, #52]	; 0x34
 8004854:	f000 bfe8 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 8004858:	e9d7 2300 	ldrd	r2, r3, [r7]
 800485c:	f102 4160 	add.w	r1, r2, #3758096384	; 0xe0000000
 8004860:	430b      	orrs	r3, r1
 8004862:	d139      	bne.n	80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8004864:	4b56      	ldr	r3, [pc, #344]	; (80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004866:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800486a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800486e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8004870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004872:	2b00      	cmp	r3, #0
 8004874:	d104      	bne.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004876:	f7fe f8cf 	bl	8002a18 <HAL_RCC_GetPCLK1Freq>
 800487a:	6378      	str	r0, [r7, #52]	; 0x34
 800487c:	f000 bfd4 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 8004880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004886:	d104      	bne.n	8004892 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004888:	f7fd ffa4 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 800488c:	6378      	str	r0, [r7, #52]	; 0x34
 800488e:	f000 bfcb 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8004892:	4b4b      	ldr	r3, [pc, #300]	; (80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800489a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800489e:	d107      	bne.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 80048a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048a6:	d103      	bne.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 80048a8:	4b46      	ldr	r3, [pc, #280]	; (80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80048aa:	637b      	str	r3, [r7, #52]	; 0x34
 80048ac:	f000 bfbc 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 80048b0:	4b43      	ldr	r3, [pc, #268]	; (80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80048b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d108      	bne.n	80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 80048be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80048c4:	d104      	bne.n	80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 80048c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ca:	637b      	str	r3, [r7, #52]	; 0x34
 80048cc:	f000 bfac 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	637b      	str	r3, [r7, #52]	; 0x34
 80048d4:	f000 bfa8 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80048d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048dc:	f1a2 0120 	sub.w	r1, r2, #32
 80048e0:	430b      	orrs	r3, r1
 80048e2:	d158      	bne.n	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80048e4:	4b36      	ldr	r3, [pc, #216]	; (80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80048e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80048ea:	f003 0307 	and.w	r3, r3, #7
 80048ee:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80048f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d104      	bne.n	8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80048f6:	f7fe f8b7 	bl	8002a68 <HAL_RCC_GetPCLK3Freq>
 80048fa:	6378      	str	r0, [r7, #52]	; 0x34
 80048fc:	f000 bf94 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8004900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004902:	2b01      	cmp	r3, #1
 8004904:	d104      	bne.n	8004910 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004906:	f7fd ff65 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 800490a:	6378      	str	r0, [r7, #52]	; 0x34
 800490c:	f000 bf8c 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004910:	4b2b      	ldr	r3, [pc, #172]	; (80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800491c:	d106      	bne.n	800492c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800491e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004920:	2b02      	cmp	r3, #2
 8004922:	d103      	bne.n	800492c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 8004924:	4b27      	ldr	r3, [pc, #156]	; (80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004926:	637b      	str	r3, [r7, #52]	; 0x34
 8004928:	f000 bf7e 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800492c:	4b24      	ldr	r3, [pc, #144]	; (80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800492e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b02      	cmp	r3, #2
 8004938:	d107      	bne.n	800494a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800493a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493c:	2b03      	cmp	r3, #3
 800493e:	d104      	bne.n	800494a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 8004940:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004944:	637b      	str	r3, [r7, #52]	; 0x34
 8004946:	f000 bf6f 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800494a:	4b1d      	ldr	r3, [pc, #116]	; (80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0320 	and.w	r3, r3, #32
 8004952:	2b20      	cmp	r3, #32
 8004954:	d11b      	bne.n	800498e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8004956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004958:	2b04      	cmp	r3, #4
 800495a:	d118      	bne.n	800498e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800495c:	4b18      	ldr	r3, [pc, #96]	; (80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d005      	beq.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 8004968:	4b15      	ldr	r3, [pc, #84]	; (80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	0e1b      	lsrs	r3, r3, #24
 800496e:	f003 030f 	and.w	r3, r3, #15
 8004972:	e006      	b.n	8004982 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8004974:	4b12      	ldr	r3, [pc, #72]	; (80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004976:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800497a:	041b      	lsls	r3, r3, #16
 800497c:	0e1b      	lsrs	r3, r3, #24
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	4a11      	ldr	r2, [pc, #68]	; (80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004988:	637b      	str	r3, [r7, #52]	; 0x34
 800498a:	f000 bf4d 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800498e:	2300      	movs	r3, #0
 8004990:	637b      	str	r3, [r7, #52]	; 0x34
 8004992:	f000 bf49 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8004996:	e9d7 2300 	ldrd	r2, r3, [r7]
 800499a:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800499e:	430b      	orrs	r3, r1
 80049a0:	d172      	bne.n	8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80049a2:	4b07      	ldr	r3, [pc, #28]	; (80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80049a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80049a8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80049ac:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80049ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049b4:	d10a      	bne.n	80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80049b6:	f7fd ff0d 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 80049ba:	6378      	str	r0, [r7, #52]	; 0x34
 80049bc:	f000 bf34 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 80049c0:	46020c00 	.word	0x46020c00
 80049c4:	00f42400 	.word	0x00f42400
 80049c8:	08006e00 	.word	0x08006e00
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80049cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049d2:	d108      	bne.n	80049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049d4:	f107 0318 	add.w	r3, r7, #24
 80049d8:	4618      	mov	r0, r3
 80049da:	f7ff f903 	bl	8003be4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	637b      	str	r3, [r7, #52]	; 0x34
 80049e2:	f000 bf21 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80049e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d104      	bne.n	80049f6 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80049ec:	f7fd fffa 	bl	80029e4 <HAL_RCC_GetHCLKFreq>
 80049f0:	6378      	str	r0, [r7, #52]	; 0x34
 80049f2:	f000 bf19 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80049f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80049fc:	d122      	bne.n	8004a44 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80049fe:	4bb0      	ldr	r3, [pc, #704]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0320 	and.w	r3, r3, #32
 8004a06:	2b20      	cmp	r3, #32
 8004a08:	d118      	bne.n	8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004a0a:	4bad      	ldr	r3, [pc, #692]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d005      	beq.n	8004a22 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 8004a16:	4baa      	ldr	r3, [pc, #680]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	0e1b      	lsrs	r3, r3, #24
 8004a1c:	f003 030f 	and.w	r3, r3, #15
 8004a20:	e006      	b.n	8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8004a22:	4ba7      	ldr	r3, [pc, #668]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004a24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a28:	041b      	lsls	r3, r3, #16
 8004a2a:	0e1b      	lsrs	r3, r3, #24
 8004a2c:	f003 030f 	and.w	r3, r3, #15
 8004a30:	4aa4      	ldr	r2, [pc, #656]	; (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8004a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a36:	637b      	str	r3, [r7, #52]	; 0x34
 8004a38:	f000 bef6 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	637b      	str	r3, [r7, #52]	; 0x34
 8004a40:	f000 bef2 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004a44:	4b9e      	ldr	r3, [pc, #632]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a50:	d107      	bne.n	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8004a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a54:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a58:	d103      	bne.n	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 8004a5a:	4b9b      	ldr	r3, [pc, #620]	; (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8004a5c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a5e:	f000 bee3 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004a62:	4b97      	ldr	r3, [pc, #604]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a6e:	d107      	bne.n	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8004a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a76:	d103      	bne.n	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 8004a78:	4b93      	ldr	r3, [pc, #588]	; (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8004a7a:	637b      	str	r3, [r7, #52]	; 0x34
 8004a7c:	f000 bed4 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8004a80:	2300      	movs	r3, #0
 8004a82:	637b      	str	r3, [r7, #52]	; 0x34
 8004a84:	f000 bed0 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8004a88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a8c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8004a90:	430b      	orrs	r3, r1
 8004a92:	d158      	bne.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8004a94:	4b8a      	ldr	r3, [pc, #552]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004a96:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa2:	2b04      	cmp	r3, #4
 8004aa4:	d84b      	bhi.n	8004b3e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 8004aa6:	a201      	add	r2, pc, #4	; (adr r2, 8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 8004aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aac:	08004ae5 	.word	0x08004ae5
 8004ab0:	08004ac1 	.word	0x08004ac1
 8004ab4:	08004ad3 	.word	0x08004ad3
 8004ab8:	08004aef 	.word	0x08004aef
 8004abc:	08004af9 	.word	0x08004af9
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7fe ff25 	bl	8003914 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ace:	f000 beab 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ad2:	f107 030c 	add.w	r3, r7, #12
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7ff f9ec 	bl	8003eb4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ae0:	f000 bea2 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004ae4:	f7fd ff7e 	bl	80029e4 <HAL_RCC_GetHCLKFreq>
 8004ae8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004aea:	f000 be9d 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004aee:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004af2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004af4:	f000 be98 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004af8:	4b71      	ldr	r3, [pc, #452]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0320 	and.w	r3, r3, #32
 8004b00:	2b20      	cmp	r3, #32
 8004b02:	d118      	bne.n	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004b04:	4b6e      	ldr	r3, [pc, #440]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d005      	beq.n	8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8004b10:	4b6b      	ldr	r3, [pc, #428]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	0e1b      	lsrs	r3, r3, #24
 8004b16:	f003 030f 	and.w	r3, r3, #15
 8004b1a:	e006      	b.n	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8004b1c:	4b68      	ldr	r3, [pc, #416]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004b1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b22:	041b      	lsls	r3, r3, #16
 8004b24:	0e1b      	lsrs	r3, r3, #24
 8004b26:	f003 030f 	and.w	r3, r3, #15
 8004b2a:	4a66      	ldr	r2, [pc, #408]	; (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8004b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b30:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004b32:	f000 be79 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004b36:	2300      	movs	r3, #0
 8004b38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b3a:	f000 be75 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b42:	f000 be71 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8004b46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b4a:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8004b4e:	430b      	orrs	r3, r1
 8004b50:	d167      	bne.n	8004c22 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8004b52:	4b5b      	ldr	r3, [pc, #364]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004b54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b58:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8004b5c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b64:	d036      	beq.n	8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8004b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b6c:	d855      	bhi.n	8004c1a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8004b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b74:	d029      	beq.n	8004bca <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8004b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b7c:	d84d      	bhi.n	8004c1a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8004b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b84:	d013      	beq.n	8004bae <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8004b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b8c:	d845      	bhi.n	8004c1a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d015      	beq.n	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 8004b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b9a:	d13e      	bne.n	8004c1a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7fe feb7 	bl	8003914 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004baa:	f000 be3d 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004bae:	f107 030c 	add.w	r3, r7, #12
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7ff f97e 	bl	8003eb4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004bbc:	f000 be34 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004bc0:	f7fd ff10 	bl	80029e4 <HAL_RCC_GetHCLKFreq>
 8004bc4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004bc6:	f000 be2f 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004bca:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004bce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004bd0:	f000 be2a 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004bd4:	4b3a      	ldr	r3, [pc, #232]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0320 	and.w	r3, r3, #32
 8004bdc:	2b20      	cmp	r3, #32
 8004bde:	d118      	bne.n	8004c12 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004be0:	4b37      	ldr	r3, [pc, #220]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d005      	beq.n	8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8004bec:	4b34      	ldr	r3, [pc, #208]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	0e1b      	lsrs	r3, r3, #24
 8004bf2:	f003 030f 	and.w	r3, r3, #15
 8004bf6:	e006      	b.n	8004c06 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8004bf8:	4b31      	ldr	r3, [pc, #196]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004bfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004bfe:	041b      	lsls	r3, r3, #16
 8004c00:	0e1b      	lsrs	r3, r3, #24
 8004c02:	f003 030f 	and.w	r3, r3, #15
 8004c06:	4a2f      	ldr	r2, [pc, #188]	; (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8004c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c0c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004c0e:	f000 be0b 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004c12:	2300      	movs	r3, #0
 8004c14:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c16:	f000 be07 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c1e:	f000 be03 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8004c22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c26:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8004c2a:	430b      	orrs	r3, r1
 8004c2c:	d152      	bne.n	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004c2e:	4b24      	ldr	r3, [pc, #144]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c38:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d104      	bne.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004c40:	f7fd feea 	bl	8002a18 <HAL_RCC_GetPCLK1Freq>
 8004c44:	6378      	str	r0, [r7, #52]	; 0x34
 8004c46:	f000 bdef 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c50:	d104      	bne.n	8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004c52:	f7fd fdbf 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 8004c56:	6378      	str	r0, [r7, #52]	; 0x34
 8004c58:	f000 bde6 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004c5c:	4b18      	ldr	r3, [pc, #96]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c68:	d107      	bne.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 8004c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c70:	d103      	bne.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 8004c72:	4b15      	ldr	r3, [pc, #84]	; (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8004c74:	637b      	str	r3, [r7, #52]	; 0x34
 8004c76:	f000 bdd7 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8004c7a:	4b11      	ldr	r3, [pc, #68]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0320 	and.w	r3, r3, #32
 8004c82:	2b20      	cmp	r3, #32
 8004c84:	d122      	bne.n	8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 8004c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c8c:	d11e      	bne.n	8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004c8e:	4b0c      	ldr	r3, [pc, #48]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d005      	beq.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 8004c9a:	4b09      	ldr	r3, [pc, #36]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	0e1b      	lsrs	r3, r3, #24
 8004ca0:	f003 030f 	and.w	r3, r3, #15
 8004ca4:	e006      	b.n	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 8004ca6:	4b06      	ldr	r3, [pc, #24]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004ca8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004cac:	041b      	lsls	r3, r3, #16
 8004cae:	0e1b      	lsrs	r3, r3, #24
 8004cb0:	f003 030f 	and.w	r3, r3, #15
 8004cb4:	4a03      	ldr	r2, [pc, #12]	; (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8004cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cba:	637b      	str	r3, [r7, #52]	; 0x34
 8004cbc:	f000 bdb4 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8004cc0:	46020c00 	.word	0x46020c00
 8004cc4:	08006e00 	.word	0x08006e00
 8004cc8:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	637b      	str	r3, [r7, #52]	; 0x34
 8004cd0:	f000 bdaa 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8004cd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cd8:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8004cdc:	430b      	orrs	r3, r1
 8004cde:	d14c      	bne.n	8004d7a <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004ce0:	4ba8      	ldr	r3, [pc, #672]	; (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ce6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004cea:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d104      	bne.n	8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004cf2:	f7fd fe91 	bl	8002a18 <HAL_RCC_GetPCLK1Freq>
 8004cf6:	6378      	str	r0, [r7, #52]	; 0x34
 8004cf8:	f000 bd96 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8004cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d02:	d104      	bne.n	8004d0e <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004d04:	f7fd fd66 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 8004d08:	6378      	str	r0, [r7, #52]	; 0x34
 8004d0a:	f000 bd8d 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004d0e:	4b9d      	ldr	r3, [pc, #628]	; (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d1a:	d107      	bne.n	8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8004d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d22:	d103      	bne.n	8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 8004d24:	4b98      	ldr	r3, [pc, #608]	; (8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8004d26:	637b      	str	r3, [r7, #52]	; 0x34
 8004d28:	f000 bd7e 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8004d2c:	4b95      	ldr	r3, [pc, #596]	; (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0320 	and.w	r3, r3, #32
 8004d34:	2b20      	cmp	r3, #32
 8004d36:	d11c      	bne.n	8004d72 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 8004d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d3e:	d118      	bne.n	8004d72 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004d40:	4b90      	ldr	r3, [pc, #576]	; (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d005      	beq.n	8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8004d4c:	4b8d      	ldr	r3, [pc, #564]	; (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	0e1b      	lsrs	r3, r3, #24
 8004d52:	f003 030f 	and.w	r3, r3, #15
 8004d56:	e006      	b.n	8004d66 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 8004d58:	4b8a      	ldr	r3, [pc, #552]	; (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004d5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d5e:	041b      	lsls	r3, r3, #16
 8004d60:	0e1b      	lsrs	r3, r3, #24
 8004d62:	f003 030f 	and.w	r3, r3, #15
 8004d66:	4a89      	ldr	r2, [pc, #548]	; (8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8004d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d6c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d6e:	f000 bd5b 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8004d72:	2300      	movs	r3, #0
 8004d74:	637b      	str	r3, [r7, #52]	; 0x34
 8004d76:	f000 bd57 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8004d7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d7e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8004d82:	430b      	orrs	r3, r1
 8004d84:	d158      	bne.n	8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004d86:	4b7f      	ldr	r3, [pc, #508]	; (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004d88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d8c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d90:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d94:	2bc0      	cmp	r3, #192	; 0xc0
 8004d96:	d028      	beq.n	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 8004d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9a:	2bc0      	cmp	r3, #192	; 0xc0
 8004d9c:	d848      	bhi.n	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8004d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da0:	2b80      	cmp	r3, #128	; 0x80
 8004da2:	d00e      	beq.n	8004dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8004da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da6:	2b80      	cmp	r3, #128	; 0x80
 8004da8:	d842      	bhi.n	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8004daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d003      	beq.n	8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 8004db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db2:	2b40      	cmp	r3, #64	; 0x40
 8004db4:	d014      	beq.n	8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8004db6:	e03b      	b.n	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8004db8:	f7fd fe56 	bl	8002a68 <HAL_RCC_GetPCLK3Freq>
 8004dbc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004dbe:	f000 bd33 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004dc2:	4b70      	ldr	r3, [pc, #448]	; (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dce:	d103      	bne.n	8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 8004dd0:	4b6d      	ldr	r3, [pc, #436]	; (8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8004dd2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004dd4:	f000 bd28 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ddc:	f000 bd24 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8004de0:	f7fd fcf8 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 8004de4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004de6:	f000 bd1f 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004dea:	4b66      	ldr	r3, [pc, #408]	; (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0320 	and.w	r3, r3, #32
 8004df2:	2b20      	cmp	r3, #32
 8004df4:	d118      	bne.n	8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004df6:	4b63      	ldr	r3, [pc, #396]	; (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d005      	beq.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 8004e02:	4b60      	ldr	r3, [pc, #384]	; (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	0e1b      	lsrs	r3, r3, #24
 8004e08:	f003 030f 	and.w	r3, r3, #15
 8004e0c:	e006      	b.n	8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 8004e0e:	4b5d      	ldr	r3, [pc, #372]	; (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004e10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e14:	041b      	lsls	r3, r3, #16
 8004e16:	0e1b      	lsrs	r3, r3, #24
 8004e18:	f003 030f 	and.w	r3, r3, #15
 8004e1c:	4a5b      	ldr	r2, [pc, #364]	; (8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8004e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e22:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004e24:	f000 bd00 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e2c:	f000 bcfc 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      default:
      {
        frequency = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e34:	f000 bcf8 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8004e38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e3c:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8004e40:	430b      	orrs	r3, r1
 8004e42:	d14c      	bne.n	8004ede <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004e44:	4b4f      	ldr	r3, [pc, #316]	; (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e4a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004e4e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8004e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d104      	bne.n	8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004e56:	f7fd fddf 	bl	8002a18 <HAL_RCC_GetPCLK1Freq>
 8004e5a:	6378      	str	r0, [r7, #52]	; 0x34
 8004e5c:	f000 bce4 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8004e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e66:	d104      	bne.n	8004e72 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004e68:	f7fd fcb4 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 8004e6c:	6378      	str	r0, [r7, #52]	; 0x34
 8004e6e:	f000 bcdb 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8004e72:	4b44      	ldr	r3, [pc, #272]	; (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e7e:	d107      	bne.n	8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 8004e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e86:	d103      	bne.n	8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 8004e88:	4b3f      	ldr	r3, [pc, #252]	; (8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8004e8a:	637b      	str	r3, [r7, #52]	; 0x34
 8004e8c:	f000 bccc 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8004e90:	4b3c      	ldr	r3, [pc, #240]	; (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0320 	and.w	r3, r3, #32
 8004e98:	2b20      	cmp	r3, #32
 8004e9a:	d11c      	bne.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8004e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ea2:	d118      	bne.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004ea4:	4b37      	ldr	r3, [pc, #220]	; (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d005      	beq.n	8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8004eb0:	4b34      	ldr	r3, [pc, #208]	; (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	0e1b      	lsrs	r3, r3, #24
 8004eb6:	f003 030f 	and.w	r3, r3, #15
 8004eba:	e006      	b.n	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8004ebc:	4b31      	ldr	r3, [pc, #196]	; (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004ebe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ec2:	041b      	lsls	r3, r3, #16
 8004ec4:	0e1b      	lsrs	r3, r3, #24
 8004ec6:	f003 030f 	and.w	r3, r3, #15
 8004eca:	4a30      	ldr	r2, [pc, #192]	; (8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8004ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ed2:	f000 bca9 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	637b      	str	r3, [r7, #52]	; 0x34
 8004eda:	f000 bca5 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 8004ede:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ee2:	f102 4140 	add.w	r1, r2, #3221225472	; 0xc0000000
 8004ee6:	430b      	orrs	r3, r1
 8004ee8:	d152      	bne.n	8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 8004eea:	4b26      	ldr	r3, [pc, #152]	; (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004eec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004ef0:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8004ef4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 8004ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d104      	bne.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004efc:	f7fd fd8c 	bl	8002a18 <HAL_RCC_GetPCLK1Freq>
 8004f00:	6378      	str	r0, [r7, #52]	; 0x34
 8004f02:	f000 bc91 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 8004f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f0c:	d104      	bne.n	8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004f0e:	f7fd fc61 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 8004f12:	6378      	str	r0, [r7, #52]	; 0x34
 8004f14:	f000 bc88 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 8004f18:	4b1a      	ldr	r3, [pc, #104]	; (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f24:	d107      	bne.n	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 8004f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f2c:	d103      	bne.n	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 8004f2e:	4b16      	ldr	r3, [pc, #88]	; (8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8004f30:	637b      	str	r3, [r7, #52]	; 0x34
 8004f32:	f000 bc79 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 8004f36:	4b13      	ldr	r3, [pc, #76]	; (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0320 	and.w	r3, r3, #32
 8004f3e:	2b20      	cmp	r3, #32
 8004f40:	d11c      	bne.n	8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8004f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f44:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f48:	d118      	bne.n	8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004f4a:	4b0e      	ldr	r3, [pc, #56]	; (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d005      	beq.n	8004f62 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 8004f56:	4b0b      	ldr	r3, [pc, #44]	; (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	0e1b      	lsrs	r3, r3, #24
 8004f5c:	f003 030f 	and.w	r3, r3, #15
 8004f60:	e006      	b.n	8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 8004f62:	4b08      	ldr	r3, [pc, #32]	; (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004f64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f68:	041b      	lsls	r3, r3, #16
 8004f6a:	0e1b      	lsrs	r3, r3, #24
 8004f6c:	f003 030f 	and.w	r3, r3, #15
 8004f70:	4a06      	ldr	r2, [pc, #24]	; (8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8004f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f76:	637b      	str	r3, [r7, #52]	; 0x34
 8004f78:	f000 bc56 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	637b      	str	r3, [r7, #52]	; 0x34
 8004f80:	f000 bc52 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8004f84:	46020c00 	.word	0x46020c00
 8004f88:	00f42400 	.word	0x00f42400
 8004f8c:	08006e00 	.word	0x08006e00
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 8004f90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f94:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 8004f98:	430b      	orrs	r3, r1
 8004f9a:	d14a      	bne.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0xeae>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 8004f9c:	4ba5      	ldr	r3, [pc, #660]	; (8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8004f9e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004fa2:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004fa6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 8004fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d104      	bne.n	8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004fae:	f7fd fd33 	bl	8002a18 <HAL_RCC_GetPCLK1Freq>
 8004fb2:	6378      	str	r0, [r7, #52]	; 0x34
 8004fb4:	f000 bc38 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 8004fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fbe:	d104      	bne.n	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004fc0:	f7fd fc08 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 8004fc4:	6378      	str	r0, [r7, #52]	; 0x34
 8004fc6:	f000 bc2f 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 8004fca:	4b9a      	ldr	r3, [pc, #616]	; (8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fd6:	d107      	bne.n	8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fde:	d103      	bne.n	8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 8004fe0:	4b95      	ldr	r3, [pc, #596]	; (8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8004fe2:	637b      	str	r3, [r7, #52]	; 0x34
 8004fe4:	f000 bc20 	b.w	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 8004fe8:	4b92      	ldr	r3, [pc, #584]	; (8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0320 	and.w	r3, r3, #32
 8004ff0:	2b20      	cmp	r3, #32
 8004ff2:	d11b      	bne.n	800502c <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 8004ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004ffa:	d117      	bne.n	800502c <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004ffc:	4b8d      	ldr	r3, [pc, #564]	; (8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d005      	beq.n	8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 8005008:	4b8a      	ldr	r3, [pc, #552]	; (8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	0e1b      	lsrs	r3, r3, #24
 800500e:	f003 030f 	and.w	r3, r3, #15
 8005012:	e006      	b.n	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 8005014:	4b87      	ldr	r3, [pc, #540]	; (8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005016:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800501a:	041b      	lsls	r3, r3, #16
 800501c:	0e1b      	lsrs	r3, r3, #24
 800501e:	f003 030f 	and.w	r3, r3, #15
 8005022:	4a86      	ldr	r2, [pc, #536]	; (800523c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8005024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005028:	637b      	str	r3, [r7, #52]	; 0x34
 800502a:	e3fd      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800502c:	2300      	movs	r3, #0
 800502e:	637b      	str	r3, [r7, #52]	; 0x34
 8005030:	e3fa      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8005032:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005036:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800503a:	430b      	orrs	r3, r1
 800503c:	d164      	bne.n	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0xf84>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800503e:	4b7d      	ldr	r3, [pc, #500]	; (8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005040:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005044:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005048:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800504a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504c:	2b00      	cmp	r3, #0
 800504e:	d120      	bne.n	8005092 <HAL_RCCEx_GetPeriphCLKFreq+0xf0e>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005050:	4b78      	ldr	r3, [pc, #480]	; (8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0320 	and.w	r3, r3, #32
 8005058:	2b20      	cmp	r3, #32
 800505a:	d117      	bne.n	800508c <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800505c:	4b75      	ldr	r3, [pc, #468]	; (8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d005      	beq.n	8005074 <HAL_RCCEx_GetPeriphCLKFreq+0xef0>
 8005068:	4b72      	ldr	r3, [pc, #456]	; (8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	0e1b      	lsrs	r3, r3, #24
 800506e:	f003 030f 	and.w	r3, r3, #15
 8005072:	e006      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
 8005074:	4b6f      	ldr	r3, [pc, #444]	; (8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005076:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800507a:	041b      	lsls	r3, r3, #16
 800507c:	0e1b      	lsrs	r3, r3, #24
 800507e:	f003 030f 	and.w	r3, r3, #15
 8005082:	4a6e      	ldr	r2, [pc, #440]	; (800523c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8005084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005088:	637b      	str	r3, [r7, #52]	; 0x34
 800508a:	e3cd      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 800508c:	2300      	movs	r3, #0
 800508e:	637b      	str	r3, [r7, #52]	; 0x34
 8005090:	e3ca      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8005092:	4b68      	ldr	r3, [pc, #416]	; (8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005094:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005098:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800509c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050a0:	d112      	bne.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
 80050a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050a8:	d10e      	bne.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80050aa:	4b62      	ldr	r3, [pc, #392]	; (8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80050ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050b8:	d102      	bne.n	80050c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
      {
        frequency = LSI_VALUE / 128U;
 80050ba:	23fa      	movs	r3, #250	; 0xfa
 80050bc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80050be:	e3b3      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 80050c0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80050c4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80050c6:	e3af      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80050c8:	4b5a      	ldr	r3, [pc, #360]	; (8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050d4:	d106      	bne.n	80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 80050d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050dc:	d102      	bne.n	80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
    {
      frequency = HSI_VALUE;
 80050de:	4b56      	ldr	r3, [pc, #344]	; (8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80050e0:	637b      	str	r3, [r7, #52]	; 0x34
 80050e2:	e3a1      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80050e4:	4b53      	ldr	r3, [pc, #332]	; (8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80050e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d107      	bne.n	8005102 <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
 80050f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050f8:	d103      	bne.n	8005102 <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
    {
      frequency = LSE_VALUE;
 80050fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050fe:	637b      	str	r3, [r7, #52]	; 0x34
 8005100:	e392      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8005102:	2300      	movs	r3, #0
 8005104:	637b      	str	r3, [r7, #52]	; 0x34
 8005106:	e38f      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8005108:	e9d7 2300 	ldrd	r2, r3, [r7]
 800510c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8005110:	430b      	orrs	r3, r1
 8005112:	d164      	bne.n	80051de <HAL_RCCEx_GetPeriphCLKFreq+0x105a>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005114:	4b47      	ldr	r3, [pc, #284]	; (8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005116:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800511a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800511e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8005120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005122:	2b00      	cmp	r3, #0
 8005124:	d120      	bne.n	8005168 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005126:	4b43      	ldr	r3, [pc, #268]	; (8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0320 	and.w	r3, r3, #32
 800512e:	2b20      	cmp	r3, #32
 8005130:	d117      	bne.n	8005162 <HAL_RCCEx_GetPeriphCLKFreq+0xfde>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005132:	4b40      	ldr	r3, [pc, #256]	; (8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d005      	beq.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0xfc6>
 800513e:	4b3d      	ldr	r3, [pc, #244]	; (8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	0e1b      	lsrs	r3, r3, #24
 8005144:	f003 030f 	and.w	r3, r3, #15
 8005148:	e006      	b.n	8005158 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 800514a:	4b3a      	ldr	r3, [pc, #232]	; (8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800514c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005150:	041b      	lsls	r3, r3, #16
 8005152:	0e1b      	lsrs	r3, r3, #24
 8005154:	f003 030f 	and.w	r3, r3, #15
 8005158:	4a38      	ldr	r2, [pc, #224]	; (800523c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800515a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800515e:	637b      	str	r3, [r7, #52]	; 0x34
 8005160:	e362      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 8005162:	2300      	movs	r3, #0
 8005164:	637b      	str	r3, [r7, #52]	; 0x34
 8005166:	e35f      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8005168:	4b32      	ldr	r3, [pc, #200]	; (8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800516a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800516e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005172:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005176:	d112      	bne.n	800519e <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
 8005178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800517e:	d10e      	bne.n	800519e <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005180:	4b2c      	ldr	r3, [pc, #176]	; (8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005182:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800518a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800518e:	d102      	bne.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x1012>
      {
        frequency = LSI_VALUE / 128U;
 8005190:	23fa      	movs	r3, #250	; 0xfa
 8005192:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005194:	e348      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 8005196:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800519a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800519c:	e344      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800519e:	4b25      	ldr	r3, [pc, #148]	; (8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051aa:	d106      	bne.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
 80051ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051b2:	d102      	bne.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
    {
      frequency = HSI_VALUE;
 80051b4:	4b20      	ldr	r3, [pc, #128]	; (8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80051b6:	637b      	str	r3, [r7, #52]	; 0x34
 80051b8:	e336      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80051ba:	4b1e      	ldr	r3, [pc, #120]	; (8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80051bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d107      	bne.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
 80051c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051ce:	d103      	bne.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
    {
      frequency = LSE_VALUE;
 80051d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051d4:	637b      	str	r3, [r7, #52]	; 0x34
 80051d6:	e327      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80051d8:	2300      	movs	r3, #0
 80051da:	637b      	str	r3, [r7, #52]	; 0x34
 80051dc:	e324      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80051de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051e2:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80051e6:	430b      	orrs	r3, r1
 80051e8:	d14e      	bne.n	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x1104>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80051ea:	4b12      	ldr	r3, [pc, #72]	; (8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80051ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051f0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80051f4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80051f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d103      	bne.n	8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x1080>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80051fc:	f7fd fc0c 	bl	8002a18 <HAL_RCC_GetPCLK1Freq>
 8005200:	6378      	str	r0, [r7, #52]	; 0x34
 8005202:	e311      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8005204:	4b0b      	ldr	r3, [pc, #44]	; (8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005206:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800520a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800520e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005212:	d119      	bne.n	8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 8005214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005216:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800521a:	d115      	bne.n	8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800521c:	4b05      	ldr	r3, [pc, #20]	; (8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800521e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005226:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800522a:	d109      	bne.n	8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>
      {
        frequency = LSI_VALUE / 128U;
 800522c:	23fa      	movs	r3, #250	; 0xfa
 800522e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005230:	e2fa      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8005232:	bf00      	nop
 8005234:	46020c00 	.word	0x46020c00
 8005238:	00f42400 	.word	0x00f42400
 800523c:	08006e00 	.word	0x08006e00
      }
      else
      {
        frequency = LSI_VALUE;
 8005240:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005244:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005246:	e2ef      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8005248:	4ba8      	ldr	r3, [pc, #672]	; (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005254:	d106      	bne.n	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
 8005256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005258:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800525c:	d102      	bne.n	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
    {
      frequency = HSI_VALUE;
 800525e:	4ba4      	ldr	r3, [pc, #656]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8005260:	637b      	str	r3, [r7, #52]	; 0x34
 8005262:	e2e1      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8005264:	4ba1      	ldr	r3, [pc, #644]	; (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005266:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b02      	cmp	r3, #2
 8005270:	d107      	bne.n	8005282 <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
 8005272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005274:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005278:	d103      	bne.n	8005282 <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
    {
      frequency = LSE_VALUE;
 800527a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800527e:	637b      	str	r3, [r7, #52]	; 0x34
 8005280:	e2d2      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8005282:	2300      	movs	r3, #0
 8005284:	637b      	str	r3, [r7, #52]	; 0x34
 8005286:	e2cf      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8005288:	e9d7 2300 	ldrd	r2, r3, [r7]
 800528c:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8005290:	430b      	orrs	r3, r1
 8005292:	d12d      	bne.n	80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8005294:	4b95      	ldr	r3, [pc, #596]	; (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800529a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800529e:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80052a0:	4b92      	ldr	r3, [pc, #584]	; (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052ac:	d105      	bne.n	80052ba <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
 80052ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d102      	bne.n	80052ba <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
    {
      frequency = HSE_VALUE;
 80052b4:	4b8e      	ldr	r3, [pc, #568]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80052b6:	637b      	str	r3, [r7, #52]	; 0x34
 80052b8:	e2b6      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80052ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052c0:	d107      	bne.n	80052d2 <HAL_RCCEx_GetPeriphCLKFreq+0x114e>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80052c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7fe fb24 	bl	8003914 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80052cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ce:	637b      	str	r3, [r7, #52]	; 0x34
 80052d0:	e2aa      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80052d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052d8:	d107      	bne.n	80052ea <HAL_RCCEx_GetPeriphCLKFreq+0x1166>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052da:	f107 0318 	add.w	r3, r7, #24
 80052de:	4618      	mov	r0, r3
 80052e0:	f7fe fc80 	bl	8003be4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	637b      	str	r3, [r7, #52]	; 0x34
 80052e8:	e29e      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80052ea:	2300      	movs	r3, #0
 80052ec:	637b      	str	r3, [r7, #52]	; 0x34
 80052ee:	e29b      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80052f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052f4:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 80052f8:	430b      	orrs	r3, r1
 80052fa:	d156      	bne.n	80053aa <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80052fc:	4b7b      	ldr	r3, [pc, #492]	; (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80052fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005302:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005306:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800530e:	d028      	beq.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
 8005310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005312:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005316:	d845      	bhi.n	80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 8005318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800531e:	d013      	beq.n	8005348 <HAL_RCCEx_GetPeriphCLKFreq+0x11c4>
 8005320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005322:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005326:	d83d      	bhi.n	80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 8005328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532a:	2b00      	cmp	r3, #0
 800532c:	d004      	beq.n	8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x11b4>
 800532e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005330:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005334:	d004      	beq.n	8005340 <HAL_RCCEx_GetPeriphCLKFreq+0x11bc>
 8005336:	e035      	b.n	80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8005338:	f7fd fb82 	bl	8002a40 <HAL_RCC_GetPCLK2Freq>
 800533c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800533e:	e273      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005340:	f7fd fa48 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 8005344:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005346:	e26f      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005348:	4b68      	ldr	r3, [pc, #416]	; (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005354:	d102      	bne.n	800535c <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        {
          frequency = HSI_VALUE;
 8005356:	4b66      	ldr	r3, [pc, #408]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8005358:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800535a:	e265      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005360:	e262      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005362:	4b62      	ldr	r3, [pc, #392]	; (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0320 	and.w	r3, r3, #32
 800536a:	2b20      	cmp	r3, #32
 800536c:	d117      	bne.n	800539e <HAL_RCCEx_GetPeriphCLKFreq+0x121a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800536e:	4b5f      	ldr	r3, [pc, #380]	; (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d005      	beq.n	8005386 <HAL_RCCEx_GetPeriphCLKFreq+0x1202>
 800537a:	4b5c      	ldr	r3, [pc, #368]	; (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	0e1b      	lsrs	r3, r3, #24
 8005380:	f003 030f 	and.w	r3, r3, #15
 8005384:	e006      	b.n	8005394 <HAL_RCCEx_GetPeriphCLKFreq+0x1210>
 8005386:	4b59      	ldr	r3, [pc, #356]	; (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005388:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800538c:	041b      	lsls	r3, r3, #16
 800538e:	0e1b      	lsrs	r3, r3, #24
 8005390:	f003 030f 	and.w	r3, r3, #15
 8005394:	4a57      	ldr	r2, [pc, #348]	; (80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8005396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800539a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800539c:	e244      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800539e:	2300      	movs	r3, #0
 80053a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053a2:	e241      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80053a4:	2300      	movs	r3, #0
 80053a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053a8:	e23e      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80053aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053ae:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 80053b2:	430b      	orrs	r3, r1
 80053b4:	d156      	bne.n	8005464 <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80053b6:	4b4d      	ldr	r3, [pc, #308]	; (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80053b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053c0:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80053c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80053c8:	d028      	beq.n	800541c <HAL_RCCEx_GetPeriphCLKFreq+0x1298>
 80053ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80053d0:	d845      	bhi.n	800545e <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 80053d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053d8:	d013      	beq.n	8005402 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 80053da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053e0:	d83d      	bhi.n	800545e <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 80053e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d004      	beq.n	80053f2 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 80053e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053ee:	d004      	beq.n	80053fa <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 80053f0:	e035      	b.n	800545e <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80053f2:	f7fd fb11 	bl	8002a18 <HAL_RCC_GetPCLK1Freq>
 80053f6:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80053f8:	e216      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80053fa:	f7fd f9eb 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 80053fe:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005400:	e212      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005402:	4b3a      	ldr	r3, [pc, #232]	; (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800540a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800540e:	d102      	bne.n	8005416 <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
        {
          frequency = HSI_VALUE;
 8005410:	4b37      	ldr	r3, [pc, #220]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8005412:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005414:	e208      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8005416:	2300      	movs	r3, #0
 8005418:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800541a:	e205      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800541c:	4b33      	ldr	r3, [pc, #204]	; (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0320 	and.w	r3, r3, #32
 8005424:	2b20      	cmp	r3, #32
 8005426:	d117      	bne.n	8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x12d4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005428:	4b30      	ldr	r3, [pc, #192]	; (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d005      	beq.n	8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x12bc>
 8005434:	4b2d      	ldr	r3, [pc, #180]	; (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	0e1b      	lsrs	r3, r3, #24
 800543a:	f003 030f 	and.w	r3, r3, #15
 800543e:	e006      	b.n	800544e <HAL_RCCEx_GetPeriphCLKFreq+0x12ca>
 8005440:	4b2a      	ldr	r3, [pc, #168]	; (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005442:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005446:	041b      	lsls	r3, r3, #16
 8005448:	0e1b      	lsrs	r3, r3, #24
 800544a:	f003 030f 	and.w	r3, r3, #15
 800544e:	4a29      	ldr	r2, [pc, #164]	; (80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8005450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005454:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005456:	e1e7      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8005458:	2300      	movs	r3, #0
 800545a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800545c:	e1e4      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 800545e:	2300      	movs	r3, #0
 8005460:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005462:	e1e1      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8005464:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005468:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800546c:	430b      	orrs	r3, r1
 800546e:	d17c      	bne.n	800556a <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8005470:	4b1e      	ldr	r3, [pc, #120]	; (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005472:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005476:	f003 0318 	and.w	r3, r3, #24
 800547a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800547c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547e:	2b18      	cmp	r3, #24
 8005480:	d870      	bhi.n	8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>
 8005482:	a201      	add	r2, pc, #4	; (adr r2, 8005488 <HAL_RCCEx_GetPeriphCLKFreq+0x1304>)
 8005484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005488:	080054f9 	.word	0x080054f9
 800548c:	08005565 	.word	0x08005565
 8005490:	08005565 	.word	0x08005565
 8005494:	08005565 	.word	0x08005565
 8005498:	08005565 	.word	0x08005565
 800549c:	08005565 	.word	0x08005565
 80054a0:	08005565 	.word	0x08005565
 80054a4:	08005565 	.word	0x08005565
 80054a8:	08005501 	.word	0x08005501
 80054ac:	08005565 	.word	0x08005565
 80054b0:	08005565 	.word	0x08005565
 80054b4:	08005565 	.word	0x08005565
 80054b8:	08005565 	.word	0x08005565
 80054bc:	08005565 	.word	0x08005565
 80054c0:	08005565 	.word	0x08005565
 80054c4:	08005565 	.word	0x08005565
 80054c8:	08005509 	.word	0x08005509
 80054cc:	08005565 	.word	0x08005565
 80054d0:	08005565 	.word	0x08005565
 80054d4:	08005565 	.word	0x08005565
 80054d8:	08005565 	.word	0x08005565
 80054dc:	08005565 	.word	0x08005565
 80054e0:	08005565 	.word	0x08005565
 80054e4:	08005565 	.word	0x08005565
 80054e8:	08005523 	.word	0x08005523
 80054ec:	46020c00 	.word	0x46020c00
 80054f0:	00f42400 	.word	0x00f42400
 80054f4:	08006e00 	.word	0x08006e00
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80054f8:	f7fd fab6 	bl	8002a68 <HAL_RCC_GetPCLK3Freq>
 80054fc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80054fe:	e193      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005500:	f7fd f968 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 8005504:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005506:	e18f      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005508:	4b9f      	ldr	r3, [pc, #636]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005510:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005514:	d102      	bne.n	800551c <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
        {
          frequency = HSI_VALUE;
 8005516:	4b9d      	ldr	r3, [pc, #628]	; (800578c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8005518:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800551a:	e185      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800551c:	2300      	movs	r3, #0
 800551e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005520:	e182      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005522:	4b99      	ldr	r3, [pc, #612]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0320 	and.w	r3, r3, #32
 800552a:	2b20      	cmp	r3, #32
 800552c:	d117      	bne.n	800555e <HAL_RCCEx_GetPeriphCLKFreq+0x13da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800552e:	4b96      	ldr	r3, [pc, #600]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d005      	beq.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x13c2>
 800553a:	4b93      	ldr	r3, [pc, #588]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	0e1b      	lsrs	r3, r3, #24
 8005540:	f003 030f 	and.w	r3, r3, #15
 8005544:	e006      	b.n	8005554 <HAL_RCCEx_GetPeriphCLKFreq+0x13d0>
 8005546:	4b90      	ldr	r3, [pc, #576]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005548:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800554c:	041b      	lsls	r3, r3, #16
 800554e:	0e1b      	lsrs	r3, r3, #24
 8005550:	f003 030f 	and.w	r3, r3, #15
 8005554:	4a8e      	ldr	r2, [pc, #568]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8005556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800555a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800555c:	e164      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800555e:	2300      	movs	r3, #0
 8005560:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005562:	e161      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8005564:	2300      	movs	r3, #0
 8005566:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005568:	e15e      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800556a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800556e:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8005572:	430b      	orrs	r3, r1
 8005574:	d155      	bne.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x149e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005576:	4b84      	ldr	r3, [pc, #528]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005578:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800557c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005580:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005584:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005588:	d013      	beq.n	80055b2 <HAL_RCCEx_GetPeriphCLKFreq+0x142e>
 800558a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005590:	d844      	bhi.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 8005592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005594:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005598:	d013      	beq.n	80055c2 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
 800559a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055a0:	d83c      	bhi.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 80055a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d014      	beq.n	80055d2 <HAL_RCCEx_GetPeriphCLKFreq+0x144e>
 80055a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055ae:	d014      	beq.n	80055da <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 80055b0:	e034      	b.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055b2:	f107 0318 	add.w	r3, r7, #24
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7fe fb14 	bl	8003be4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055c0:	e132      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7fe f9a4 	bl	8003914 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80055cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055d0:	e12a      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80055d2:	f7fd f8ff 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 80055d6:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80055d8:	e126      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80055da:	4b6b      	ldr	r3, [pc, #428]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0320 	and.w	r3, r3, #32
 80055e2:	2b20      	cmp	r3, #32
 80055e4:	d117      	bne.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80055e6:	4b68      	ldr	r3, [pc, #416]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d005      	beq.n	80055fe <HAL_RCCEx_GetPeriphCLKFreq+0x147a>
 80055f2:	4b65      	ldr	r3, [pc, #404]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	0e1b      	lsrs	r3, r3, #24
 80055f8:	f003 030f 	and.w	r3, r3, #15
 80055fc:	e006      	b.n	800560c <HAL_RCCEx_GetPeriphCLKFreq+0x1488>
 80055fe:	4b62      	ldr	r3, [pc, #392]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005600:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005604:	041b      	lsls	r3, r3, #16
 8005606:	0e1b      	lsrs	r3, r3, #24
 8005608:	f003 030f 	and.w	r3, r3, #15
 800560c:	4a60      	ldr	r2, [pc, #384]	; (8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800560e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005612:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005614:	e108      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8005616:	2300      	movs	r3, #0
 8005618:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800561a:	e105      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 800561c:	2300      	movs	r3, #0
 800561e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005620:	e102      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 8005622:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005626:	1e59      	subs	r1, r3, #1
 8005628:	ea52 0301 	orrs.w	r3, r2, r1
 800562c:	d13c      	bne.n	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800562e:	4b56      	ldr	r3, [pc, #344]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005630:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005634:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005638:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800563a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005640:	d027      	beq.n	8005692 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 8005642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005644:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005648:	d82b      	bhi.n	80056a2 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 800564a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005650:	d017      	beq.n	8005682 <HAL_RCCEx_GetPeriphCLKFreq+0x14fe>
 8005652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005654:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005658:	d823      	bhi.n	80056a2 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 800565a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565c:	2b00      	cmp	r3, #0
 800565e:	d004      	beq.n	800566a <HAL_RCCEx_GetPeriphCLKFreq+0x14e6>
 8005660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005662:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005666:	d004      	beq.n	8005672 <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 8005668:	e01b      	b.n	80056a2 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800566a:	f7fd f8b3 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 800566e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005670:	e0da      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005672:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005676:	4618      	mov	r0, r3
 8005678:	f7fe f94c 	bl	8003914 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800567c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005680:	e0d2      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005682:	f107 0318 	add.w	r3, r7, #24
 8005686:	4618      	mov	r0, r3
 8005688:	f7fe faac 	bl	8003be4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005690:	e0ca      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005692:	f107 030c 	add.w	r3, r7, #12
 8005696:	4618      	mov	r0, r3
 8005698:	f7fe fc0c 	bl	8003eb4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056a0:	e0c2      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056a6:	e0bf      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80056a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056ac:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 80056b0:	430b      	orrs	r3, r1
 80056b2:	d131      	bne.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x1594>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80056b4:	4b34      	ldr	r3, [pc, #208]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80056b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80056ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056be:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80056c0:	4b31      	ldr	r3, [pc, #196]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80056c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056c6:	f003 0302 	and.w	r3, r3, #2
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d106      	bne.n	80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
 80056ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d103      	bne.n	80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
    {
      frequency = LSE_VALUE;
 80056d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056d8:	637b      	str	r3, [r7, #52]	; 0x34
 80056da:	e0a5      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80056dc:	4b2a      	ldr	r3, [pc, #168]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80056de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056ea:	d112      	bne.n	8005712 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
 80056ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056f2:	d10e      	bne.n	8005712 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80056f4:	4b24      	ldr	r3, [pc, #144]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80056f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005702:	d102      	bne.n	800570a <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
      {
        frequency = LSI_VALUE / 128U;
 8005704:	23fa      	movs	r3, #250	; 0xfa
 8005706:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005708:	e08e      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 800570a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800570e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005710:	e08a      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8005712:	2300      	movs	r3, #0
 8005714:	637b      	str	r3, [r7, #52]	; 0x34
 8005716:	e087      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8005718:	e9d7 2300 	ldrd	r2, r3, [r7]
 800571c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8005720:	430b      	orrs	r3, r1
 8005722:	d13b      	bne.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0x1618>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005724:	4b18      	ldr	r3, [pc, #96]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005726:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800572a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800572e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8005730:	4b15      	ldr	r3, [pc, #84]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005738:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800573c:	d105      	bne.n	800574a <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
 800573e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005740:	2b00      	cmp	r3, #0
 8005742:	d102      	bne.n	800574a <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
    {
      frequency = HSI48_VALUE;
 8005744:	4b13      	ldr	r3, [pc, #76]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 8005746:	637b      	str	r3, [r7, #52]	; 0x34
 8005748:	e06e      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800574a:	4b0f      	ldr	r3, [pc, #60]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005752:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005756:	d106      	bne.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
 8005758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800575e:	d102      	bne.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
    {
      frequency = HSI48_VALUE >> 1U ;
 8005760:	4b0d      	ldr	r3, [pc, #52]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 8005762:	637b      	str	r3, [r7, #52]	; 0x34
 8005764:	e060      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8005766:	4b08      	ldr	r3, [pc, #32]	; (8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800576e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005772:	d106      	bne.n	8005782 <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
 8005774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005776:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800577a:	d102      	bne.n	8005782 <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
    {
      frequency = HSI_VALUE;
 800577c:	4b03      	ldr	r3, [pc, #12]	; (800578c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800577e:	637b      	str	r3, [r7, #52]	; 0x34
 8005780:	e052      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8005782:	2300      	movs	r3, #0
 8005784:	637b      	str	r3, [r7, #52]	; 0x34
 8005786:	e04f      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8005788:	46020c00 	.word	0x46020c00
 800578c:	00f42400 	.word	0x00f42400
 8005790:	08006e00 	.word	0x08006e00
 8005794:	02dc6c00 	.word	0x02dc6c00
 8005798:	016e3600 	.word	0x016e3600
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800579c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057a0:	f1a3 0108 	sub.w	r1, r3, #8
 80057a4:	ea52 0301 	orrs.w	r3, r2, r1
 80057a8:	d13c      	bne.n	8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 80057aa:	4b22      	ldr	r3, [pc, #136]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 80057ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80057b0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80057b4:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 80057b6:	4b1f      	ldr	r3, [pc, #124]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057c2:	d105      	bne.n	80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
 80057c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d102      	bne.n	80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    {
      frequency = HSE_VALUE;
 80057ca:	4b1b      	ldr	r3, [pc, #108]	; (8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x16b4>)
 80057cc:	637b      	str	r3, [r7, #52]	; 0x34
 80057ce:	e02b      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 80057d0:	4b18      	ldr	r3, [pc, #96]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057dc:	d106      	bne.n	80057ec <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
 80057de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057e4:	d102      	bne.n	80057ec <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
    {
      frequency = HSE_VALUE >> 1U ;
 80057e6:	4b15      	ldr	r3, [pc, #84]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 80057e8:	637b      	str	r3, [r7, #52]	; 0x34
 80057ea:	e01d      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 80057ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057f2:	d107      	bne.n	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x1680>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7fe f88b 	bl	8003914 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80057fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005800:	637b      	str	r3, [r7, #52]	; 0x34
 8005802:	e011      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 8005804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005806:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800580a:	d108      	bne.n	800581e <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800580c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005810:	4618      	mov	r0, r3
 8005812:	f7fe f87f 	bl	8003914 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 8005816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005818:	085b      	lsrs	r3, r3, #1
 800581a:	637b      	str	r3, [r7, #52]	; 0x34
 800581c:	e004      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800581e:	2300      	movs	r3, #0
 8005820:	637b      	str	r3, [r7, #52]	; 0x34
 8005822:	e001      	b.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8005824:	2300      	movs	r3, #0
 8005826:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8005828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800582a:	4618      	mov	r0, r3
 800582c:	3738      	adds	r7, #56	; 0x38
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	46020c00 	.word	0x46020c00
 8005838:	00f42400 	.word	0x00f42400
 800583c:	007a1200 	.word	0x007a1200

08005840 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8005848:	4b47      	ldr	r3, [pc, #284]	; (8005968 <RCCEx_PLL2_Config+0x128>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a46      	ldr	r2, [pc, #280]	; (8005968 <RCCEx_PLL2_Config+0x128>)
 800584e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005852:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005854:	f7fb fae4 	bl	8000e20 <HAL_GetTick>
 8005858:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800585a:	e008      	b.n	800586e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800585c:	f7fb fae0 	bl	8000e20 <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	2b02      	cmp	r3, #2
 8005868:	d901      	bls.n	800586e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e077      	b.n	800595e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800586e:	4b3e      	ldr	r3, [pc, #248]	; (8005968 <RCCEx_PLL2_Config+0x128>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1f0      	bne.n	800585c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800587a:	4b3b      	ldr	r3, [pc, #236]	; (8005968 <RCCEx_PLL2_Config+0x128>)
 800587c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005882:	f023 0303 	bic.w	r3, r3, #3
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	6811      	ldr	r1, [r2, #0]
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	6852      	ldr	r2, [r2, #4]
 800588e:	3a01      	subs	r2, #1
 8005890:	0212      	lsls	r2, r2, #8
 8005892:	430a      	orrs	r2, r1
 8005894:	4934      	ldr	r1, [pc, #208]	; (8005968 <RCCEx_PLL2_Config+0x128>)
 8005896:	4313      	orrs	r3, r2
 8005898:	62cb      	str	r3, [r1, #44]	; 0x2c
 800589a:	4b33      	ldr	r3, [pc, #204]	; (8005968 <RCCEx_PLL2_Config+0x128>)
 800589c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800589e:	4b33      	ldr	r3, [pc, #204]	; (800596c <RCCEx_PLL2_Config+0x12c>)
 80058a0:	4013      	ands	r3, r2
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	6892      	ldr	r2, [r2, #8]
 80058a6:	3a01      	subs	r2, #1
 80058a8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	68d2      	ldr	r2, [r2, #12]
 80058b0:	3a01      	subs	r2, #1
 80058b2:	0252      	lsls	r2, r2, #9
 80058b4:	b292      	uxth	r2, r2
 80058b6:	4311      	orrs	r1, r2
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	6912      	ldr	r2, [r2, #16]
 80058bc:	3a01      	subs	r2, #1
 80058be:	0412      	lsls	r2, r2, #16
 80058c0:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80058c4:	4311      	orrs	r1, r2
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	6952      	ldr	r2, [r2, #20]
 80058ca:	3a01      	subs	r2, #1
 80058cc:	0612      	lsls	r2, r2, #24
 80058ce:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80058d2:	430a      	orrs	r2, r1
 80058d4:	4924      	ldr	r1, [pc, #144]	; (8005968 <RCCEx_PLL2_Config+0x128>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80058da:	4b23      	ldr	r3, [pc, #140]	; (8005968 <RCCEx_PLL2_Config+0x128>)
 80058dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058de:	f023 020c 	bic.w	r2, r3, #12
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	4920      	ldr	r1, [pc, #128]	; (8005968 <RCCEx_PLL2_Config+0x128>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80058ec:	4b1e      	ldr	r3, [pc, #120]	; (8005968 <RCCEx_PLL2_Config+0x128>)
 80058ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	491c      	ldr	r1, [pc, #112]	; (8005968 <RCCEx_PLL2_Config+0x128>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80058fa:	4b1b      	ldr	r3, [pc, #108]	; (8005968 <RCCEx_PLL2_Config+0x128>)
 80058fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fe:	4a1a      	ldr	r2, [pc, #104]	; (8005968 <RCCEx_PLL2_Config+0x128>)
 8005900:	f023 0310 	bic.w	r3, r3, #16
 8005904:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005906:	4b18      	ldr	r3, [pc, #96]	; (8005968 <RCCEx_PLL2_Config+0x128>)
 8005908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800590e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	69d2      	ldr	r2, [r2, #28]
 8005916:	00d2      	lsls	r2, r2, #3
 8005918:	4913      	ldr	r1, [pc, #76]	; (8005968 <RCCEx_PLL2_Config+0x128>)
 800591a:	4313      	orrs	r3, r2
 800591c:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800591e:	4b12      	ldr	r3, [pc, #72]	; (8005968 <RCCEx_PLL2_Config+0x128>)
 8005920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005922:	4a11      	ldr	r2, [pc, #68]	; (8005968 <RCCEx_PLL2_Config+0x128>)
 8005924:	f043 0310 	orr.w	r3, r3, #16
 8005928:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800592a:	4b0f      	ldr	r3, [pc, #60]	; (8005968 <RCCEx_PLL2_Config+0x128>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a0e      	ldr	r2, [pc, #56]	; (8005968 <RCCEx_PLL2_Config+0x128>)
 8005930:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005934:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005936:	f7fb fa73 	bl	8000e20 <HAL_GetTick>
 800593a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800593c:	e008      	b.n	8005950 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800593e:	f7fb fa6f 	bl	8000e20 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	2b02      	cmp	r3, #2
 800594a:	d901      	bls.n	8005950 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e006      	b.n	800595e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005950:	4b05      	ldr	r3, [pc, #20]	; (8005968 <RCCEx_PLL2_Config+0x128>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d0f0      	beq.n	800593e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800595c:	2300      	movs	r3, #0

}
 800595e:	4618      	mov	r0, r3
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	46020c00 	.word	0x46020c00
 800596c:	80800000 	.word	0x80800000

08005970 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8005978:	4b47      	ldr	r3, [pc, #284]	; (8005a98 <RCCEx_PLL3_Config+0x128>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a46      	ldr	r2, [pc, #280]	; (8005a98 <RCCEx_PLL3_Config+0x128>)
 800597e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005982:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005984:	f7fb fa4c 	bl	8000e20 <HAL_GetTick>
 8005988:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800598a:	e008      	b.n	800599e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800598c:	f7fb fa48 	bl	8000e20 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b02      	cmp	r3, #2
 8005998:	d901      	bls.n	800599e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e077      	b.n	8005a8e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800599e:	4b3e      	ldr	r3, [pc, #248]	; (8005a98 <RCCEx_PLL3_Config+0x128>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1f0      	bne.n	800598c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80059aa:	4b3b      	ldr	r3, [pc, #236]	; (8005a98 <RCCEx_PLL3_Config+0x128>)
 80059ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80059b2:	f023 0303 	bic.w	r3, r3, #3
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	6811      	ldr	r1, [r2, #0]
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	6852      	ldr	r2, [r2, #4]
 80059be:	3a01      	subs	r2, #1
 80059c0:	0212      	lsls	r2, r2, #8
 80059c2:	430a      	orrs	r2, r1
 80059c4:	4934      	ldr	r1, [pc, #208]	; (8005a98 <RCCEx_PLL3_Config+0x128>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	630b      	str	r3, [r1, #48]	; 0x30
 80059ca:	4b33      	ldr	r3, [pc, #204]	; (8005a98 <RCCEx_PLL3_Config+0x128>)
 80059cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059ce:	4b33      	ldr	r3, [pc, #204]	; (8005a9c <RCCEx_PLL3_Config+0x12c>)
 80059d0:	4013      	ands	r3, r2
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	6892      	ldr	r2, [r2, #8]
 80059d6:	3a01      	subs	r2, #1
 80059d8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	68d2      	ldr	r2, [r2, #12]
 80059e0:	3a01      	subs	r2, #1
 80059e2:	0252      	lsls	r2, r2, #9
 80059e4:	b292      	uxth	r2, r2
 80059e6:	4311      	orrs	r1, r2
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	6912      	ldr	r2, [r2, #16]
 80059ec:	3a01      	subs	r2, #1
 80059ee:	0412      	lsls	r2, r2, #16
 80059f0:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80059f4:	4311      	orrs	r1, r2
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	6952      	ldr	r2, [r2, #20]
 80059fa:	3a01      	subs	r2, #1
 80059fc:	0612      	lsls	r2, r2, #24
 80059fe:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005a02:	430a      	orrs	r2, r1
 8005a04:	4924      	ldr	r1, [pc, #144]	; (8005a98 <RCCEx_PLL3_Config+0x128>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8005a0a:	4b23      	ldr	r3, [pc, #140]	; (8005a98 <RCCEx_PLL3_Config+0x128>)
 8005a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0e:	f023 020c 	bic.w	r2, r3, #12
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	4920      	ldr	r1, [pc, #128]	; (8005a98 <RCCEx_PLL3_Config+0x128>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005a1c:	4b1e      	ldr	r3, [pc, #120]	; (8005a98 <RCCEx_PLL3_Config+0x128>)
 8005a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a1b      	ldr	r3, [r3, #32]
 8005a24:	491c      	ldr	r1, [pc, #112]	; (8005a98 <RCCEx_PLL3_Config+0x128>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8005a2a:	4b1b      	ldr	r3, [pc, #108]	; (8005a98 <RCCEx_PLL3_Config+0x128>)
 8005a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2e:	4a1a      	ldr	r2, [pc, #104]	; (8005a98 <RCCEx_PLL3_Config+0x128>)
 8005a30:	f023 0310 	bic.w	r3, r3, #16
 8005a34:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005a36:	4b18      	ldr	r3, [pc, #96]	; (8005a98 <RCCEx_PLL3_Config+0x128>)
 8005a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a3e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	69d2      	ldr	r2, [r2, #28]
 8005a46:	00d2      	lsls	r2, r2, #3
 8005a48:	4913      	ldr	r1, [pc, #76]	; (8005a98 <RCCEx_PLL3_Config+0x128>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8005a4e:	4b12      	ldr	r3, [pc, #72]	; (8005a98 <RCCEx_PLL3_Config+0x128>)
 8005a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a52:	4a11      	ldr	r2, [pc, #68]	; (8005a98 <RCCEx_PLL3_Config+0x128>)
 8005a54:	f043 0310 	orr.w	r3, r3, #16
 8005a58:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8005a5a:	4b0f      	ldr	r3, [pc, #60]	; (8005a98 <RCCEx_PLL3_Config+0x128>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a0e      	ldr	r2, [pc, #56]	; (8005a98 <RCCEx_PLL3_Config+0x128>)
 8005a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a64:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005a66:	f7fb f9db 	bl	8000e20 <HAL_GetTick>
 8005a6a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005a6c:	e008      	b.n	8005a80 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005a6e:	f7fb f9d7 	bl	8000e20 <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d901      	bls.n	8005a80 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e006      	b.n	8005a8e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005a80:	4b05      	ldr	r3, [pc, #20]	; (8005a98 <RCCEx_PLL3_Config+0x128>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d0f0      	beq.n	8005a6e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	46020c00 	.word	0x46020c00
 8005a9c:	80800000 	.word	0x80800000

08005aa0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e0fb      	b.n	8005caa <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a7f      	ldr	r2, [pc, #508]	; (8005cb4 <HAL_SPI_Init+0x214>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d004      	beq.n	8005ac6 <HAL_SPI_Init+0x26>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a7d      	ldr	r2, [pc, #500]	; (8005cb8 <HAL_SPI_Init+0x218>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	e000      	b.n	8005ac8 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8005ac6:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a78      	ldr	r2, [pc, #480]	; (8005cb4 <HAL_SPI_Init+0x214>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d004      	beq.n	8005ae2 <HAL_SPI_Init+0x42>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a76      	ldr	r2, [pc, #472]	; (8005cb8 <HAL_SPI_Init+0x218>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d105      	bne.n	8005aee <HAL_SPI_Init+0x4e>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	2b0f      	cmp	r3, #15
 8005ae8:	d901      	bls.n	8005aee <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e0dd      	b.n	8005caa <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fb3c 	bl	800616c <SPI_GetPacketSize>
 8005af4:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a6e      	ldr	r2, [pc, #440]	; (8005cb4 <HAL_SPI_Init+0x214>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d004      	beq.n	8005b0a <HAL_SPI_Init+0x6a>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a6c      	ldr	r2, [pc, #432]	; (8005cb8 <HAL_SPI_Init+0x218>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d102      	bne.n	8005b10 <HAL_SPI_Init+0x70>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2b08      	cmp	r3, #8
 8005b0e:	d816      	bhi.n	8005b3e <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005b14:	4a69      	ldr	r2, [pc, #420]	; (8005cbc <HAL_SPI_Init+0x21c>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d00e      	beq.n	8005b38 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a68      	ldr	r2, [pc, #416]	; (8005cc0 <HAL_SPI_Init+0x220>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d009      	beq.n	8005b38 <HAL_SPI_Init+0x98>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a66      	ldr	r2, [pc, #408]	; (8005cc4 <HAL_SPI_Init+0x224>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d004      	beq.n	8005b38 <HAL_SPI_Init+0x98>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a65      	ldr	r2, [pc, #404]	; (8005cc8 <HAL_SPI_Init+0x228>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d104      	bne.n	8005b42 <HAL_SPI_Init+0xa2>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2b10      	cmp	r3, #16
 8005b3c:	d901      	bls.n	8005b42 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e0b3      	b.n	8005caa <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d106      	bne.n	8005b5c <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7fa ff24 	bl	80009a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f022 0201 	bic.w	r2, r2, #1
 8005b72:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8005b7e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b88:	d119      	bne.n	8005bbe <HAL_SPI_Init+0x11e>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b92:	d103      	bne.n	8005b9c <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d008      	beq.n	8005bae <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d10c      	bne.n	8005bbe <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005ba8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bac:	d107      	bne.n	8005bbe <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005bbc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00f      	beq.n	8005bea <HAL_SPI_Init+0x14a>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	2b06      	cmp	r3, #6
 8005bd0:	d90b      	bls.n	8005bea <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	601a      	str	r2, [r3, #0]
 8005be8:	e007      	b.n	8005bfa <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bf8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	69da      	ldr	r2, [r3, #28]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c02:	431a      	orrs	r2, r3
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	431a      	orrs	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c0c:	ea42 0103 	orr.w	r1, r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	68da      	ldr	r2, [r3, #12]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c24:	431a      	orrs	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2a:	431a      	orrs	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	431a      	orrs	r2, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	431a      	orrs	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	695b      	ldr	r3, [r3, #20]
 8005c3c:	431a      	orrs	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	431a      	orrs	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	431a      	orrs	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c4e:	431a      	orrs	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	431a      	orrs	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c5a:	431a      	orrs	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c60:	431a      	orrs	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c66:	ea42 0103 	orr.w	r1, r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	430a      	orrs	r2, r1
 8005c74:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00a      	beq.n	8005c98 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	430a      	orrs	r2, r1
 8005c96:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3710      	adds	r7, #16
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	46002000 	.word	0x46002000
 8005cb8:	56002000 	.word	0x56002000
 8005cbc:	40013000 	.word	0x40013000
 8005cc0:	50013000 	.word	0x50013000
 8005cc4:	40003800 	.word	0x40003800
 8005cc8:	50003800 	.word	0x50003800

08005ccc <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b088      	sub	sp, #32
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	603b      	str	r3, [r7, #0]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	3330      	adds	r3, #48	; 0x30
 8005ce6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d101      	bne.n	8005cf6 <HAL_SPI_Receive+0x2a>
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	e18e      	b.n	8006014 <HAL_SPI_Receive+0x348>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cfe:	f7fb f88f 	bl	8000e20 <HAL_GetTick>
 8005d02:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d007      	beq.n	8005d20 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 8005d10:	2302      	movs	r3, #2
 8005d12:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8005d1c:	7ffb      	ldrb	r3, [r7, #31]
 8005d1e:	e179      	b.n	8006014 <HAL_SPI_Receive+0x348>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d002      	beq.n	8005d2c <HAL_SPI_Receive+0x60>
 8005d26:	88fb      	ldrh	r3, [r7, #6]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d107      	bne.n	8005d3c <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8005d38:	7ffb      	ldrb	r3, [r7, #31]
 8005d3a:	e16b      	b.n	8006014 <HAL_SPI_Receive+0x348>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2204      	movs	r2, #4
 8005d40:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = Size;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	88fa      	ldrh	r2, [r7, #6]
 8005d56:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = Size;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	88fa      	ldrh	r2, [r7, #6]
 8005d5e:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxISR       = NULL;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005d8c:	d108      	bne.n	8005da0 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d9c:	601a      	str	r2, [r3, #0]
 8005d9e:	e009      	b.n	8005db4 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005db2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	0c1b      	lsrs	r3, r3, #16
 8005dbc:	041b      	lsls	r3, r3, #16
 8005dbe:	88f9      	ldrh	r1, [r7, #6]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	6812      	ldr	r2, [r2, #0]
 8005dc4:	430b      	orrs	r3, r1
 8005dc6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f042 0201 	orr.w	r2, r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10c      	bne.n	8005e00 <HAL_SPI_Receive+0x134>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dee:	d107      	bne.n	8005e00 <HAL_SPI_Receive+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dfe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	2b0f      	cmp	r3, #15
 8005e06:	d95c      	bls.n	8005ec2 <HAL_SPI_Receive+0x1f6>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a83      	ldr	r2, [pc, #524]	; (800601c <HAL_SPI_Receive+0x350>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d050      	beq.n	8005eb4 <HAL_SPI_Receive+0x1e8>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a82      	ldr	r2, [pc, #520]	; (8006020 <HAL_SPI_Receive+0x354>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d04b      	beq.n	8005eb4 <HAL_SPI_Receive+0x1e8>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a80      	ldr	r2, [pc, #512]	; (8006024 <HAL_SPI_Receive+0x358>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d046      	beq.n	8005eb4 <HAL_SPI_Receive+0x1e8>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a7f      	ldr	r2, [pc, #508]	; (8006028 <HAL_SPI_Receive+0x35c>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d148      	bne.n	8005ec2 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005e30:	e040      	b.n	8005eb4 <HAL_SPI_Receive+0x1e8>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	695a      	ldr	r2, [r3, #20]
 8005e38:	f248 0308 	movw	r3, #32776	; 0x8008
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d014      	beq.n	8005e6c <HAL_SPI_Receive+0x1a0>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e4a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005e4c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e52:	1d1a      	adds	r2, r3, #4
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	3b01      	subs	r3, #1
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8005e6a:	e023      	b.n	8005eb4 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e6c:	f7fa ffd8 	bl	8000e20 <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	683a      	ldr	r2, [r7, #0]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d803      	bhi.n	8005e84 <HAL_SPI_Receive+0x1b8>
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e82:	d102      	bne.n	8005e8a <HAL_SPI_Receive+0x1be>
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d114      	bne.n	8005eb4 <HAL_SPI_Receive+0x1e8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f000 f8ce 	bl	800602c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e0af      	b.n	8006014 <HAL_SPI_Receive+0x348>
    while (hspi->RxXferCount > 0UL)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1b8      	bne.n	8005e32 <HAL_SPI_Receive+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8005ec0:	e095      	b.n	8005fee <HAL_SPI_Receive+0x322>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	2b07      	cmp	r3, #7
 8005ec8:	f240 808b 	bls.w	8005fe2 <HAL_SPI_Receive+0x316>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005ecc:	e03f      	b.n	8005f4e <HAL_SPI_Receive+0x282>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	f003 0301 	and.w	r3, r3, #1
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d114      	bne.n	8005f06 <HAL_SPI_Receive+0x23a>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ee0:	69ba      	ldr	r2, [r7, #24]
 8005ee2:	8812      	ldrh	r2, [r2, #0]
 8005ee4:	b292      	uxth	r2, r2
 8005ee6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eec:	1c9a      	adds	r2, r3, #2
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	3b01      	subs	r3, #1
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8005f04:	e023      	b.n	8005f4e <HAL_SPI_Receive+0x282>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f06:	f7fa ff8b 	bl	8000e20 <HAL_GetTick>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	683a      	ldr	r2, [r7, #0]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d803      	bhi.n	8005f1e <HAL_SPI_Receive+0x252>
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f1c:	d102      	bne.n	8005f24 <HAL_SPI_Receive+0x258>
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d114      	bne.n	8005f4e <HAL_SPI_Receive+0x282>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f000 f881 	bl	800602c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e062      	b.n	8006014 <HAL_SPI_Receive+0x348>
    while (hspi->RxXferCount > 0UL)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1b9      	bne.n	8005ece <HAL_SPI_Receive+0x202>
 8005f5a:	e048      	b.n	8005fee <HAL_SPI_Receive+0x322>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d117      	bne.n	8005f9a <HAL_SPI_Receive+0x2ce>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f76:	7812      	ldrb	r2, [r2, #0]
 8005f78:	b2d2      	uxtb	r2, r2
 8005f7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f80:	1c5a      	adds	r2, r3, #1
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8005f98:	e023      	b.n	8005fe2 <HAL_SPI_Receive+0x316>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f9a:	f7fa ff41 	bl	8000e20 <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	683a      	ldr	r2, [r7, #0]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d803      	bhi.n	8005fb2 <HAL_SPI_Receive+0x2e6>
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb0:	d102      	bne.n	8005fb8 <HAL_SPI_Receive+0x2ec>
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d114      	bne.n	8005fe2 <HAL_SPI_Receive+0x316>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f000 f837 	bl	800602c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fcc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e018      	b.n	8006014 <HAL_SPI_Receive+0x348>
    while (hspi->RxXferCount > 0UL)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1b6      	bne.n	8005f5c <HAL_SPI_Receive+0x290>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f000 f81c 	bl	800602c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <HAL_SPI_Receive+0x346>
  {
    return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e000      	b.n	8006014 <HAL_SPI_Receive+0x348>
  }
  return errorcode;
 8006012:	7ffb      	ldrb	r3, [r7, #31]
}
 8006014:	4618      	mov	r0, r3
 8006016:	3720      	adds	r7, #32
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	40013000 	.word	0x40013000
 8006020:	50013000 	.word	0x50013000
 8006024:	40003800 	.word	0x40003800
 8006028:	50003800 	.word	0x50003800

0800602c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	699a      	ldr	r2, [r3, #24]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f042 0208 	orr.w	r2, r2, #8
 800604a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	699a      	ldr	r2, [r3, #24]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f042 0210 	orr.w	r2, r2, #16
 800605a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 0201 	bic.w	r2, r2, #1
 800606a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	6812      	ldr	r2, [r2, #0]
 8006076:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 800607a:	f023 0303 	bic.w	r3, r3, #3
 800607e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689a      	ldr	r2, [r3, #8]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800608e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b04      	cmp	r3, #4
 800609a:	d014      	beq.n	80060c6 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f003 0320 	and.w	r3, r3, #32
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00f      	beq.n	80060c6 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	699a      	ldr	r2, [r3, #24]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f042 0220 	orr.w	r2, r2, #32
 80060c4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b03      	cmp	r3, #3
 80060d0:	d014      	beq.n	80060fc <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00f      	beq.n	80060fc <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060e2:	f043 0204 	orr.w	r2, r3, #4
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	699a      	ldr	r2, [r3, #24]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060fa:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00f      	beq.n	8006126 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800610c:	f043 0201 	orr.w	r2, r3, #1
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	699a      	ldr	r2, [r3, #24]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006124:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00f      	beq.n	8006150 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006136:	f043 0208 	orr.w	r2, r3, #8
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	699a      	ldr	r2, [r3, #24]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800614e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 8006160:	bf00      	nop
 8006162:	3714      	adds	r7, #20
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800616c:	b480      	push	{r7}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006178:	095b      	lsrs	r3, r3, #5
 800617a:	3301      	adds	r3, #1
 800617c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	3301      	adds	r3, #1
 8006184:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	3307      	adds	r3, #7
 800618a:	08db      	lsrs	r3, r3, #3
 800618c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	fb02 f303 	mul.w	r3, r2, r3
}
 8006196:	4618      	mov	r0, r3
 8006198:	3714      	adds	r7, #20
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b083      	sub	sp, #12
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
 80061aa:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d12e      	bne.n	8006216 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d101      	bne.n	80061c6 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 80061c2:	2302      	movs	r3, #2
 80061c4:	e028      	b.n	8006218 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2202      	movs	r2, #2
 80061d2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f022 0201 	bic.w	r2, r2, #1
 80061e4:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80061f2:	ea42 0103 	orr.w	r1, r2, r3
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	689a      	ldr	r2, [r3, #8]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	430a      	orrs	r2, r1
 8006200:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006212:	2300      	movs	r3, #0
 8006214:	e000      	b.n	8006218 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
  }
}
 8006218:	4618      	mov	r0, r3
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d101      	bne.n	8006236 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e042      	b.n	80062bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800623c:	2b00      	cmp	r3, #0
 800623e:	d106      	bne.n	800624e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f7fa fcdd 	bl	8000c08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2224      	movs	r2, #36	; 0x24
 8006252:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f022 0201 	bic.w	r2, r2, #1
 8006264:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f8ba 	bl	80063e0 <UART_SetConfig>
 800626c:	4603      	mov	r3, r0
 800626e:	2b01      	cmp	r3, #1
 8006270:	d101      	bne.n	8006276 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e022      	b.n	80062bc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800627a:	2b00      	cmp	r3, #0
 800627c:	d002      	beq.n	8006284 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 fa5c 	bl	800673c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	685a      	ldr	r2, [r3, #4]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006292:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689a      	ldr	r2, [r3, #8]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f042 0201 	orr.w	r2, r2, #1
 80062b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 fae3 	bl	8006880 <UART_CheckIdleState>
 80062ba:	4603      	mov	r3, r0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3708      	adds	r7, #8
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b08a      	sub	sp, #40	; 0x28
 80062c8:	af02      	add	r7, sp, #8
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	603b      	str	r3, [r7, #0]
 80062d0:	4613      	mov	r3, r2
 80062d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062da:	2b20      	cmp	r3, #32
 80062dc:	d17b      	bne.n	80063d6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d002      	beq.n	80062ea <HAL_UART_Transmit+0x26>
 80062e4:	88fb      	ldrh	r3, [r7, #6]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e074      	b.n	80063d8 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2221      	movs	r2, #33	; 0x21
 80062fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062fe:	f7fa fd8f 	bl	8000e20 <HAL_GetTick>
 8006302:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	88fa      	ldrh	r2, [r7, #6]
 8006308:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	88fa      	ldrh	r2, [r7, #6]
 8006310:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800631c:	d108      	bne.n	8006330 <HAL_UART_Transmit+0x6c>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d104      	bne.n	8006330 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006326:	2300      	movs	r3, #0
 8006328:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	61bb      	str	r3, [r7, #24]
 800632e:	e003      	b.n	8006338 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006334:	2300      	movs	r3, #0
 8006336:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006338:	e030      	b.n	800639c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	2200      	movs	r2, #0
 8006342:	2180      	movs	r1, #128	; 0x80
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f000 fb45 	bl	80069d4 <UART_WaitOnFlagUntilTimeout>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d005      	beq.n	800635c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2220      	movs	r2, #32
 8006354:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	e03d      	b.n	80063d8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10b      	bne.n	800637a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	881b      	ldrh	r3, [r3, #0]
 8006366:	461a      	mov	r2, r3
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006370:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	3302      	adds	r3, #2
 8006376:	61bb      	str	r3, [r7, #24]
 8006378:	e007      	b.n	800638a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	781a      	ldrb	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	3301      	adds	r3, #1
 8006388:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006390:	b29b      	uxth	r3, r3
 8006392:	3b01      	subs	r3, #1
 8006394:	b29a      	uxth	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1c8      	bne.n	800633a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	9300      	str	r3, [sp, #0]
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	2200      	movs	r2, #0
 80063b0:	2140      	movs	r1, #64	; 0x40
 80063b2:	68f8      	ldr	r0, [r7, #12]
 80063b4:	f000 fb0e 	bl	80069d4 <UART_WaitOnFlagUntilTimeout>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d005      	beq.n	80063ca <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2220      	movs	r2, #32
 80063c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e006      	b.n	80063d8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2220      	movs	r2, #32
 80063ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80063d2:	2300      	movs	r3, #0
 80063d4:	e000      	b.n	80063d8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80063d6:	2302      	movs	r3, #2
  }
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3720      	adds	r7, #32
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063e4:	b094      	sub	sp, #80	; 0x50
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063ea:	2300      	movs	r3, #0
 80063ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80063f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	4b83      	ldr	r3, [pc, #524]	; (8006604 <UART_SetConfig+0x224>)
 80063f6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fa:	689a      	ldr	r2, [r3, #8]
 80063fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	431a      	orrs	r2, r3
 8006402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	431a      	orrs	r2, r3
 8006408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640a:	69db      	ldr	r3, [r3, #28]
 800640c:	4313      	orrs	r3, r2
 800640e:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	497c      	ldr	r1, [pc, #496]	; (8006608 <UART_SetConfig+0x228>)
 8006418:	4019      	ands	r1, r3
 800641a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006420:	430b      	orrs	r3, r1
 8006422:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800642e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006430:	68d9      	ldr	r1, [r3, #12]
 8006432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	ea40 0301 	orr.w	r3, r0, r1
 800643a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800643c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	4b6f      	ldr	r3, [pc, #444]	; (8006604 <UART_SetConfig+0x224>)
 8006448:	429a      	cmp	r2, r3
 800644a:	d009      	beq.n	8006460 <UART_SetConfig+0x80>
 800644c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	4b6e      	ldr	r3, [pc, #440]	; (800660c <UART_SetConfig+0x22c>)
 8006452:	429a      	cmp	r2, r3
 8006454:	d004      	beq.n	8006460 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006458:	6a1a      	ldr	r2, [r3, #32]
 800645a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800645c:	4313      	orrs	r3, r2
 800645e:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800646a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800646e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006474:	430b      	orrs	r3, r1
 8006476:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647e:	f023 000f 	bic.w	r0, r3, #15
 8006482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006484:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	ea40 0301 	orr.w	r3, r0, r1
 800648e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	4b5e      	ldr	r3, [pc, #376]	; (8006610 <UART_SetConfig+0x230>)
 8006496:	429a      	cmp	r2, r3
 8006498:	d102      	bne.n	80064a0 <UART_SetConfig+0xc0>
 800649a:	2301      	movs	r3, #1
 800649c:	64bb      	str	r3, [r7, #72]	; 0x48
 800649e:	e032      	b.n	8006506 <UART_SetConfig+0x126>
 80064a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	4b5b      	ldr	r3, [pc, #364]	; (8006614 <UART_SetConfig+0x234>)
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d102      	bne.n	80064b0 <UART_SetConfig+0xd0>
 80064aa:	2302      	movs	r3, #2
 80064ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80064ae:	e02a      	b.n	8006506 <UART_SetConfig+0x126>
 80064b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	4b58      	ldr	r3, [pc, #352]	; (8006618 <UART_SetConfig+0x238>)
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d102      	bne.n	80064c0 <UART_SetConfig+0xe0>
 80064ba:	2304      	movs	r3, #4
 80064bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80064be:	e022      	b.n	8006506 <UART_SetConfig+0x126>
 80064c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	4b55      	ldr	r3, [pc, #340]	; (800661c <UART_SetConfig+0x23c>)
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d102      	bne.n	80064d0 <UART_SetConfig+0xf0>
 80064ca:	2308      	movs	r3, #8
 80064cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80064ce:	e01a      	b.n	8006506 <UART_SetConfig+0x126>
 80064d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	4b52      	ldr	r3, [pc, #328]	; (8006620 <UART_SetConfig+0x240>)
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d102      	bne.n	80064e0 <UART_SetConfig+0x100>
 80064da:	2310      	movs	r3, #16
 80064dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80064de:	e012      	b.n	8006506 <UART_SetConfig+0x126>
 80064e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	4b4f      	ldr	r3, [pc, #316]	; (8006624 <UART_SetConfig+0x244>)
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d103      	bne.n	80064f2 <UART_SetConfig+0x112>
 80064ea:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80064ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80064f0:	e009      	b.n	8006506 <UART_SetConfig+0x126>
 80064f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	4b43      	ldr	r3, [pc, #268]	; (8006604 <UART_SetConfig+0x224>)
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d102      	bne.n	8006502 <UART_SetConfig+0x122>
 80064fc:	2320      	movs	r3, #32
 80064fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8006500:	e001      	b.n	8006506 <UART_SetConfig+0x126>
 8006502:	2300      	movs	r3, #0
 8006504:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	4b3e      	ldr	r3, [pc, #248]	; (8006604 <UART_SetConfig+0x224>)
 800650c:	429a      	cmp	r2, r3
 800650e:	d005      	beq.n	800651c <UART_SetConfig+0x13c>
 8006510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	4b3d      	ldr	r3, [pc, #244]	; (800660c <UART_SetConfig+0x22c>)
 8006516:	429a      	cmp	r2, r3
 8006518:	f040 8088 	bne.w	800662c <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800651c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800651e:	2200      	movs	r2, #0
 8006520:	623b      	str	r3, [r7, #32]
 8006522:	627a      	str	r2, [r7, #36]	; 0x24
 8006524:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006528:	f7fd fe2c 	bl	8004184 <HAL_RCCEx_GetPeriphCLKFreq>
 800652c:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800652e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006530:	2b00      	cmp	r3, #0
 8006532:	f000 80eb 	beq.w	800670c <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653a:	4a3b      	ldr	r2, [pc, #236]	; (8006628 <UART_SetConfig+0x248>)
 800653c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006540:	461a      	mov	r2, r3
 8006542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006544:	fbb3 f3f2 	udiv	r3, r3, r2
 8006548:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800654a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800654c:	685a      	ldr	r2, [r3, #4]
 800654e:	4613      	mov	r3, r2
 8006550:	005b      	lsls	r3, r3, #1
 8006552:	4413      	add	r3, r2
 8006554:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006556:	429a      	cmp	r2, r3
 8006558:	d305      	bcc.n	8006566 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800655a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006560:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006562:	429a      	cmp	r2, r3
 8006564:	d903      	bls.n	800656e <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800656c:	e048      	b.n	8006600 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800656e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006570:	2200      	movs	r2, #0
 8006572:	61bb      	str	r3, [r7, #24]
 8006574:	61fa      	str	r2, [r7, #28]
 8006576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657a:	4a2b      	ldr	r2, [pc, #172]	; (8006628 <UART_SetConfig+0x248>)
 800657c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006580:	b29b      	uxth	r3, r3
 8006582:	2200      	movs	r2, #0
 8006584:	613b      	str	r3, [r7, #16]
 8006586:	617a      	str	r2, [r7, #20]
 8006588:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800658c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006590:	f7f9 fe7e 	bl	8000290 <__aeabi_uldivmod>
 8006594:	4602      	mov	r2, r0
 8006596:	460b      	mov	r3, r1
 8006598:	4610      	mov	r0, r2
 800659a:	4619      	mov	r1, r3
 800659c:	f04f 0200 	mov.w	r2, #0
 80065a0:	f04f 0300 	mov.w	r3, #0
 80065a4:	020b      	lsls	r3, r1, #8
 80065a6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80065aa:	0202      	lsls	r2, r0, #8
 80065ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065ae:	6849      	ldr	r1, [r1, #4]
 80065b0:	0849      	lsrs	r1, r1, #1
 80065b2:	2000      	movs	r0, #0
 80065b4:	460c      	mov	r4, r1
 80065b6:	4605      	mov	r5, r0
 80065b8:	eb12 0804 	adds.w	r8, r2, r4
 80065bc:	eb43 0905 	adc.w	r9, r3, r5
 80065c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	60bb      	str	r3, [r7, #8]
 80065c8:	60fa      	str	r2, [r7, #12]
 80065ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065ce:	4640      	mov	r0, r8
 80065d0:	4649      	mov	r1, r9
 80065d2:	f7f9 fe5d 	bl	8000290 <__aeabi_uldivmod>
 80065d6:	4602      	mov	r2, r0
 80065d8:	460b      	mov	r3, r1
 80065da:	4613      	mov	r3, r2
 80065dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80065de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065e4:	d308      	bcc.n	80065f8 <UART_SetConfig+0x218>
 80065e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065ec:	d204      	bcs.n	80065f8 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 80065ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065f4:	60da      	str	r2, [r3, #12]
 80065f6:	e003      	b.n	8006600 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 80065fe:	e085      	b.n	800670c <UART_SetConfig+0x32c>
 8006600:	e084      	b.n	800670c <UART_SetConfig+0x32c>
 8006602:	bf00      	nop
 8006604:	46002400 	.word	0x46002400
 8006608:	cfff69f3 	.word	0xcfff69f3
 800660c:	56002400 	.word	0x56002400
 8006610:	40013800 	.word	0x40013800
 8006614:	40004400 	.word	0x40004400
 8006618:	40004800 	.word	0x40004800
 800661c:	40004c00 	.word	0x40004c00
 8006620:	40005000 	.word	0x40005000
 8006624:	40006400 	.word	0x40006400
 8006628:	08006ec0 	.word	0x08006ec0
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800662c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662e:	69db      	ldr	r3, [r3, #28]
 8006630:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006634:	d13c      	bne.n	80066b0 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006638:	2200      	movs	r2, #0
 800663a:	603b      	str	r3, [r7, #0]
 800663c:	607a      	str	r2, [r7, #4]
 800663e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006642:	f7fd fd9f 	bl	8004184 <HAL_RCCEx_GetPeriphCLKFreq>
 8006646:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800664a:	2b00      	cmp	r3, #0
 800664c:	d05e      	beq.n	800670c <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800664e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006652:	4a39      	ldr	r2, [pc, #228]	; (8006738 <UART_SetConfig+0x358>)
 8006654:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006658:	461a      	mov	r2, r3
 800665a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800665c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006660:	005a      	lsls	r2, r3, #1
 8006662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	085b      	lsrs	r3, r3, #1
 8006668:	441a      	add	r2, r3
 800666a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006672:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006676:	2b0f      	cmp	r3, #15
 8006678:	d916      	bls.n	80066a8 <UART_SetConfig+0x2c8>
 800667a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800667c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006680:	d212      	bcs.n	80066a8 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006684:	b29b      	uxth	r3, r3
 8006686:	f023 030f 	bic.w	r3, r3, #15
 800668a:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800668c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800668e:	085b      	lsrs	r3, r3, #1
 8006690:	b29b      	uxth	r3, r3
 8006692:	f003 0307 	and.w	r3, r3, #7
 8006696:	b29a      	uxth	r2, r3
 8006698:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800669a:	4313      	orrs	r3, r2
 800669c:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800669e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80066a4:	60da      	str	r2, [r3, #12]
 80066a6:	e031      	b.n	800670c <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80066ae:	e02d      	b.n	800670c <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80066b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066b2:	2200      	movs	r2, #0
 80066b4:	469a      	mov	sl, r3
 80066b6:	4693      	mov	fp, r2
 80066b8:	4650      	mov	r0, sl
 80066ba:	4659      	mov	r1, fp
 80066bc:	f7fd fd62 	bl	8004184 <HAL_RCCEx_GetPeriphCLKFreq>
 80066c0:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 80066c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d021      	beq.n	800670c <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066cc:	4a1a      	ldr	r2, [pc, #104]	; (8006738 <UART_SetConfig+0x358>)
 80066ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066d2:	461a      	mov	r2, r3
 80066d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80066da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	085b      	lsrs	r3, r3, #1
 80066e0:	441a      	add	r2, r3
 80066e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ee:	2b0f      	cmp	r3, #15
 80066f0:	d909      	bls.n	8006706 <UART_SetConfig+0x326>
 80066f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066f8:	d205      	bcs.n	8006706 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	60da      	str	r2, [r3, #12]
 8006704:	e002      	b.n	800670c <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800670c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670e:	2201      	movs	r2, #1
 8006710:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006716:	2201      	movs	r2, #1
 8006718:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800671c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671e:	2200      	movs	r2, #0
 8006720:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006724:	2200      	movs	r2, #0
 8006726:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006728:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800672c:	4618      	mov	r0, r3
 800672e:	3750      	adds	r7, #80	; 0x50
 8006730:	46bd      	mov	sp, r7
 8006732:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006736:	bf00      	nop
 8006738:	08006ec0 	.word	0x08006ec0

0800673c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006748:	f003 0301 	and.w	r3, r3, #1
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00a      	beq.n	8006766 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	430a      	orrs	r2, r1
 8006764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676a:	f003 0302 	and.w	r3, r3, #2
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00a      	beq.n	8006788 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	430a      	orrs	r2, r1
 8006786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678c:	f003 0304 	and.w	r3, r3, #4
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00a      	beq.n	80067aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	430a      	orrs	r2, r1
 80067a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ae:	f003 0308 	and.w	r3, r3, #8
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00a      	beq.n	80067cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	430a      	orrs	r2, r1
 80067ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d0:	f003 0310 	and.w	r3, r3, #16
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00a      	beq.n	80067ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	430a      	orrs	r2, r1
 80067ec:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f2:	f003 0320 	and.w	r3, r3, #32
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00a      	beq.n	8006810 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	430a      	orrs	r2, r1
 800680e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006818:	2b00      	cmp	r3, #0
 800681a:	d01a      	beq.n	8006852 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	430a      	orrs	r2, r1
 8006830:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800683a:	d10a      	bne.n	8006852 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	430a      	orrs	r2, r1
 8006850:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00a      	beq.n	8006874 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	430a      	orrs	r2, r1
 8006872:	605a      	str	r2, [r3, #4]
  }
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b098      	sub	sp, #96	; 0x60
 8006884:	af02      	add	r7, sp, #8
 8006886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006890:	f7fa fac6 	bl	8000e20 <HAL_GetTick>
 8006894:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0308 	and.w	r3, r3, #8
 80068a0:	2b08      	cmp	r3, #8
 80068a2:	d12f      	bne.n	8006904 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068ac:	2200      	movs	r2, #0
 80068ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 f88e 	bl	80069d4 <UART_WaitOnFlagUntilTimeout>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d022      	beq.n	8006904 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c6:	e853 3f00 	ldrex	r3, [r3]
 80068ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068d2:	653b      	str	r3, [r7, #80]	; 0x50
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	461a      	mov	r2, r3
 80068da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068dc:	647b      	str	r3, [r7, #68]	; 0x44
 80068de:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068e4:	e841 2300 	strex	r3, r2, [r1]
 80068e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1e6      	bne.n	80068be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2220      	movs	r2, #32
 80068f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	e063      	b.n	80069cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0304 	and.w	r3, r3, #4
 800690e:	2b04      	cmp	r3, #4
 8006910:	d149      	bne.n	80069a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006912:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006916:	9300      	str	r3, [sp, #0]
 8006918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800691a:	2200      	movs	r2, #0
 800691c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 f857 	bl	80069d4 <UART_WaitOnFlagUntilTimeout>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d03c      	beq.n	80069a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006934:	e853 3f00 	ldrex	r3, [r3]
 8006938:	623b      	str	r3, [r7, #32]
   return(result);
 800693a:	6a3b      	ldr	r3, [r7, #32]
 800693c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006940:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	461a      	mov	r2, r3
 8006948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800694a:	633b      	str	r3, [r7, #48]	; 0x30
 800694c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006952:	e841 2300 	strex	r3, r2, [r1]
 8006956:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1e6      	bne.n	800692c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	3308      	adds	r3, #8
 8006964:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	e853 3f00 	ldrex	r3, [r3]
 800696c:	60fb      	str	r3, [r7, #12]
   return(result);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f023 0301 	bic.w	r3, r3, #1
 8006974:	64bb      	str	r3, [r7, #72]	; 0x48
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	3308      	adds	r3, #8
 800697c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800697e:	61fa      	str	r2, [r7, #28]
 8006980:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006982:	69b9      	ldr	r1, [r7, #24]
 8006984:	69fa      	ldr	r2, [r7, #28]
 8006986:	e841 2300 	strex	r3, r2, [r1]
 800698a:	617b      	str	r3, [r7, #20]
   return(result);
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1e5      	bne.n	800695e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2220      	movs	r2, #32
 8006996:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e012      	b.n	80069cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2220      	movs	r2, #32
 80069aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2220      	movs	r2, #32
 80069b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3758      	adds	r7, #88	; 0x58
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	603b      	str	r3, [r7, #0]
 80069e0:	4613      	mov	r3, r2
 80069e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069e4:	e049      	b.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ec:	d045      	beq.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069ee:	f7fa fa17 	bl	8000e20 <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	69ba      	ldr	r2, [r7, #24]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d302      	bcc.n	8006a04 <UART_WaitOnFlagUntilTimeout+0x30>
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d101      	bne.n	8006a08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a04:	2303      	movs	r3, #3
 8006a06:	e048      	b.n	8006a9a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0304 	and.w	r3, r3, #4
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d031      	beq.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	69db      	ldr	r3, [r3, #28]
 8006a1c:	f003 0308 	and.w	r3, r3, #8
 8006a20:	2b08      	cmp	r3, #8
 8006a22:	d110      	bne.n	8006a46 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2208      	movs	r2, #8
 8006a2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f000 f838 	bl	8006aa2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2208      	movs	r2, #8
 8006a36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e029      	b.n	8006a9a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	69db      	ldr	r3, [r3, #28]
 8006a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a54:	d111      	bne.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f000 f81e 	bl	8006aa2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2220      	movs	r2, #32
 8006a6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e00f      	b.n	8006a9a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	69da      	ldr	r2, [r3, #28]
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	4013      	ands	r3, r2
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	bf0c      	ite	eq
 8006a8a:	2301      	moveq	r3, #1
 8006a8c:	2300      	movne	r3, #0
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	461a      	mov	r2, r3
 8006a92:	79fb      	ldrb	r3, [r7, #7]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d0a6      	beq.n	80069e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006aa2:	b480      	push	{r7}
 8006aa4:	b095      	sub	sp, #84	; 0x54
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab2:	e853 3f00 	ldrex	r3, [r3]
 8006ab6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ac8:	643b      	str	r3, [r7, #64]	; 0x40
 8006aca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006acc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ace:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ad0:	e841 2300 	strex	r3, r2, [r1]
 8006ad4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1e6      	bne.n	8006aaa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	3308      	adds	r3, #8
 8006ae2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae4:	6a3b      	ldr	r3, [r7, #32]
 8006ae6:	e853 3f00 	ldrex	r3, [r3]
 8006aea:	61fb      	str	r3, [r7, #28]
   return(result);
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006af2:	f023 0301 	bic.w	r3, r3, #1
 8006af6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	3308      	adds	r3, #8
 8006afe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b08:	e841 2300 	strex	r3, r2, [r1]
 8006b0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1e3      	bne.n	8006adc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d118      	bne.n	8006b4e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	e853 3f00 	ldrex	r3, [r3]
 8006b28:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	f023 0310 	bic.w	r3, r3, #16
 8006b30:	647b      	str	r3, [r7, #68]	; 0x44
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	461a      	mov	r2, r3
 8006b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b3a:	61bb      	str	r3, [r7, #24]
 8006b3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3e:	6979      	ldr	r1, [r7, #20]
 8006b40:	69ba      	ldr	r2, [r7, #24]
 8006b42:	e841 2300 	strex	r3, r2, [r1]
 8006b46:	613b      	str	r3, [r7, #16]
   return(result);
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1e6      	bne.n	8006b1c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2220      	movs	r2, #32
 8006b52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006b62:	bf00      	nop
 8006b64:	3754      	adds	r7, #84	; 0x54
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b085      	sub	sp, #20
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d101      	bne.n	8006b84 <HAL_UARTEx_DisableFifoMode+0x16>
 8006b80:	2302      	movs	r3, #2
 8006b82:	e027      	b.n	8006bd4 <HAL_UARTEx_DisableFifoMode+0x66>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2224      	movs	r2, #36	; 0x24
 8006b90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f022 0201 	bic.w	r2, r2, #1
 8006baa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006bb2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2220      	movs	r2, #32
 8006bc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3714      	adds	r7, #20
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d101      	bne.n	8006bf8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	e02d      	b.n	8006c54 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2224      	movs	r2, #36	; 0x24
 8006c04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f022 0201 	bic.w	r2, r2, #1
 8006c1e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	683a      	ldr	r2, [r7, #0]
 8006c30:	430a      	orrs	r2, r1
 8006c32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 f84f 	bl	8006cd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2220      	movs	r2, #32
 8006c46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3710      	adds	r7, #16
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d101      	bne.n	8006c74 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006c70:	2302      	movs	r3, #2
 8006c72:	e02d      	b.n	8006cd0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2224      	movs	r2, #36	; 0x24
 8006c80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f022 0201 	bic.w	r2, r2, #1
 8006c9a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	683a      	ldr	r2, [r7, #0]
 8006cac:	430a      	orrs	r2, r1
 8006cae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 f811 	bl	8006cd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2220      	movs	r2, #32
 8006cc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3710      	adds	r7, #16
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d108      	bne.n	8006cfa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006cf8:	e031      	b.n	8006d5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006cfa:	2308      	movs	r3, #8
 8006cfc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006cfe:	2308      	movs	r3, #8
 8006d00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	0e5b      	lsrs	r3, r3, #25
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	f003 0307 	and.w	r3, r3, #7
 8006d10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	0f5b      	lsrs	r3, r3, #29
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	f003 0307 	and.w	r3, r3, #7
 8006d20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d22:	7bbb      	ldrb	r3, [r7, #14]
 8006d24:	7b3a      	ldrb	r2, [r7, #12]
 8006d26:	4911      	ldr	r1, [pc, #68]	; (8006d6c <UARTEx_SetNbDataToProcess+0x94>)
 8006d28:	5c8a      	ldrb	r2, [r1, r2]
 8006d2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006d2e:	7b3a      	ldrb	r2, [r7, #12]
 8006d30:	490f      	ldr	r1, [pc, #60]	; (8006d70 <UARTEx_SetNbDataToProcess+0x98>)
 8006d32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d34:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d38:	b29a      	uxth	r2, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d40:	7bfb      	ldrb	r3, [r7, #15]
 8006d42:	7b7a      	ldrb	r2, [r7, #13]
 8006d44:	4909      	ldr	r1, [pc, #36]	; (8006d6c <UARTEx_SetNbDataToProcess+0x94>)
 8006d46:	5c8a      	ldrb	r2, [r1, r2]
 8006d48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006d4c:	7b7a      	ldrb	r2, [r7, #13]
 8006d4e:	4908      	ldr	r1, [pc, #32]	; (8006d70 <UARTEx_SetNbDataToProcess+0x98>)
 8006d50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d52:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006d5e:	bf00      	nop
 8006d60:	3714      	adds	r7, #20
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	08006ed8 	.word	0x08006ed8
 8006d70:	08006ee0 	.word	0x08006ee0

08006d74 <memset>:
 8006d74:	4402      	add	r2, r0
 8006d76:	4603      	mov	r3, r0
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d100      	bne.n	8006d7e <memset+0xa>
 8006d7c:	4770      	bx	lr
 8006d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8006d82:	e7f9      	b.n	8006d78 <memset+0x4>

08006d84 <__libc_init_array>:
 8006d84:	b570      	push	{r4, r5, r6, lr}
 8006d86:	4d0d      	ldr	r5, [pc, #52]	; (8006dbc <__libc_init_array+0x38>)
 8006d88:	2600      	movs	r6, #0
 8006d8a:	4c0d      	ldr	r4, [pc, #52]	; (8006dc0 <__libc_init_array+0x3c>)
 8006d8c:	1b64      	subs	r4, r4, r5
 8006d8e:	10a4      	asrs	r4, r4, #2
 8006d90:	42a6      	cmp	r6, r4
 8006d92:	d109      	bne.n	8006da8 <__libc_init_array+0x24>
 8006d94:	4d0b      	ldr	r5, [pc, #44]	; (8006dc4 <__libc_init_array+0x40>)
 8006d96:	2600      	movs	r6, #0
 8006d98:	4c0b      	ldr	r4, [pc, #44]	; (8006dc8 <__libc_init_array+0x44>)
 8006d9a:	f000 f817 	bl	8006dcc <_init>
 8006d9e:	1b64      	subs	r4, r4, r5
 8006da0:	10a4      	asrs	r4, r4, #2
 8006da2:	42a6      	cmp	r6, r4
 8006da4:	d105      	bne.n	8006db2 <__libc_init_array+0x2e>
 8006da6:	bd70      	pop	{r4, r5, r6, pc}
 8006da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dac:	3601      	adds	r6, #1
 8006dae:	4798      	blx	r3
 8006db0:	e7ee      	b.n	8006d90 <__libc_init_array+0xc>
 8006db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006db6:	3601      	adds	r6, #1
 8006db8:	4798      	blx	r3
 8006dba:	e7f2      	b.n	8006da2 <__libc_init_array+0x1e>
 8006dbc:	08006ef0 	.word	0x08006ef0
 8006dc0:	08006ef0 	.word	0x08006ef0
 8006dc4:	08006ef0 	.word	0x08006ef0
 8006dc8:	08006ef4 	.word	0x08006ef4

08006dcc <_init>:
 8006dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dce:	bf00      	nop
 8006dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dd2:	bc08      	pop	{r3}
 8006dd4:	469e      	mov	lr, r3
 8006dd6:	4770      	bx	lr

08006dd8 <_fini>:
 8006dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dda:	bf00      	nop
 8006ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dde:	bc08      	pop	{r3}
 8006de0:	469e      	mov	lr, r3
 8006de2:	4770      	bx	lr
