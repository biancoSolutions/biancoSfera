
STM32_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007144  08000250  08000250  00001250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08007394  08007394  00008394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007498  08007498  00008498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080074a0  080074a0  000084a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080074a4  080074a4  000084a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000009  20000000  080074a8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000144  2000000c  080074b1  0000900c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000150  080074b1  00009150  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00009009  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001316b  00000000  00000000  0000903f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000028d7  00000000  00000000  0001c1aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ee0  00000000  00000000  0001ea88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b56  00000000  00000000  0001f968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000373fc  00000000  00000000  000204be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00014af9  00000000  00000000  000578ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00151d4f  00000000  00000000  0006c3b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001be102  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003c5c  00000000  00000000  001be148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006a  00000000  00000000  001c1da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	2000000c 	.word	0x2000000c
 800026c:	00000000 	.word	0x00000000
 8000270:	0800737c 	.word	0x0800737c

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000010 	.word	0x20000010
 800028c:	0800737c 	.word	0x0800737c

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b97e 	b.w	80005a4 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14d      	bne.n	8000368 <__udivmoddi4+0xa8>
 80002cc:	428a      	cmp	r2, r1
 80002ce:	460f      	mov	r7, r1
 80002d0:	4684      	mov	ip, r0
 80002d2:	4696      	mov	lr, r2
 80002d4:	fab2 f382 	clz	r3, r2
 80002d8:	d960      	bls.n	800039c <__udivmoddi4+0xdc>
 80002da:	b14b      	cbz	r3, 80002f0 <__udivmoddi4+0x30>
 80002dc:	fa02 fe03 	lsl.w	lr, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80002ea:	fa20 f202 	lsr.w	r2, r0, r2
 80002ee:	4317      	orrs	r7, r2
 80002f0:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002f4:	fa1f f48e 	uxth.w	r4, lr
 80002f8:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002fc:	fbb7 f1f6 	udiv	r1, r7, r6
 8000300:	fb06 7711 	mls	r7, r6, r1, r7
 8000304:	fb01 f004 	mul.w	r0, r1, r4
 8000308:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800030c:	4290      	cmp	r0, r2
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0x62>
 8000310:	eb1e 0202 	adds.w	r2, lr, r2
 8000314:	f101 37ff 	add.w	r7, r1, #4294967295	@ 0xffffffff
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x60>
 800031a:	4290      	cmp	r0, r2
 800031c:	f200 812d 	bhi.w	800057a <__udivmoddi4+0x2ba>
 8000320:	4639      	mov	r1, r7
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	fa1f fc8c 	uxth.w	ip, ip
 8000328:	fbb2 f0f6 	udiv	r0, r2, r6
 800032c:	fb06 2210 	mls	r2, r6, r0, r2
 8000330:	fb00 f404 	mul.w	r4, r0, r4
 8000334:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000338:	4564      	cmp	r4, ip
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x8e>
 800033c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x8c>
 8000346:	4564      	cmp	r4, ip
 8000348:	f200 811a 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 800034c:	4610      	mov	r0, r2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	ebac 0c04 	sub.w	ip, ip, r4
 8000356:	2100      	movs	r1, #0
 8000358:	b125      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035a:	fa2c f303 	lsr.w	r3, ip, r3
 800035e:	2200      	movs	r2, #0
 8000360:	e9c5 3200 	strd	r3, r2, [r5]
 8000364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000368:	428b      	cmp	r3, r1
 800036a:	d905      	bls.n	8000378 <__udivmoddi4+0xb8>
 800036c:	b10d      	cbz	r5, 8000372 <__udivmoddi4+0xb2>
 800036e:	e9c5 0100 	strd	r0, r1, [r5]
 8000372:	2100      	movs	r1, #0
 8000374:	4608      	mov	r0, r1
 8000376:	e7f5      	b.n	8000364 <__udivmoddi4+0xa4>
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	d14d      	bne.n	800041c <__udivmoddi4+0x15c>
 8000380:	42a3      	cmp	r3, r4
 8000382:	f0c0 80f2 	bcc.w	800056a <__udivmoddi4+0x2aa>
 8000386:	4290      	cmp	r0, r2
 8000388:	f080 80ef 	bcs.w	800056a <__udivmoddi4+0x2aa>
 800038c:	4606      	mov	r6, r0
 800038e:	4623      	mov	r3, r4
 8000390:	4608      	mov	r0, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e6      	beq.n	8000364 <__udivmoddi4+0xa4>
 8000396:	e9c5 6300 	strd	r6, r3, [r5]
 800039a:	e7e3      	b.n	8000364 <__udivmoddi4+0xa4>
 800039c:	2b00      	cmp	r3, #0
 800039e:	f040 80a2 	bne.w	80004e6 <__udivmoddi4+0x226>
 80003a2:	1a8a      	subs	r2, r1, r2
 80003a4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a8:	fa1f f68e 	uxth.w	r6, lr
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb2 f4f7 	udiv	r4, r2, r7
 80003b2:	fb07 2014 	mls	r0, r7, r4, r2
 80003b6:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003ba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003be:	fb06 f004 	mul.w	r0, r6, r4
 80003c2:	4290      	cmp	r0, r2
 80003c4:	d90f      	bls.n	80003e6 <__udivmoddi4+0x126>
 80003c6:	eb1e 0202 	adds.w	r2, lr, r2
 80003ca:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 80003ce:	bf2c      	ite	cs
 80003d0:	f04f 0901 	movcs.w	r9, #1
 80003d4:	f04f 0900 	movcc.w	r9, #0
 80003d8:	4290      	cmp	r0, r2
 80003da:	d903      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003dc:	f1b9 0f00 	cmp.w	r9, #0
 80003e0:	f000 80c8 	beq.w	8000574 <__udivmoddi4+0x2b4>
 80003e4:	4644      	mov	r4, r8
 80003e6:	1a12      	subs	r2, r2, r0
 80003e8:	fa1f fc8c 	uxth.w	ip, ip
 80003ec:	fbb2 f0f7 	udiv	r0, r2, r7
 80003f0:	fb07 2210 	mls	r2, r7, r0, r2
 80003f4:	fb00 f606 	mul.w	r6, r0, r6
 80003f8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003fc:	4566      	cmp	r6, ip
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x152>
 8000400:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000404:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000408:	d202      	bcs.n	8000410 <__udivmoddi4+0x150>
 800040a:	4566      	cmp	r6, ip
 800040c:	f200 80bb 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000410:	4610      	mov	r0, r2
 8000412:	ebac 0c06 	sub.w	ip, ip, r6
 8000416:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800041a:	e79d      	b.n	8000358 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa04 fe01 	lsl.w	lr, r4, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	fa20 fc06 	lsr.w	ip, r0, r6
 800042e:	40f4      	lsrs	r4, r6
 8000430:	408a      	lsls	r2, r1
 8000432:	431f      	orrs	r7, r3
 8000434:	ea4e 030c 	orr.w	r3, lr, ip
 8000438:	fa00 fe01 	lsl.w	lr, r0, r1
 800043c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	fbb4 f0f8 	udiv	r0, r4, r8
 800044c:	fb08 4410 	mls	r4, r8, r0, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb00 f90c 	mul.w	r9, r0, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	d90e      	bls.n	800047a <__udivmoddi4+0x1ba>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000462:	bf2c      	ite	cs
 8000464:	f04f 0b01 	movcs.w	fp, #1
 8000468:	f04f 0b00 	movcc.w	fp, #0
 800046c:	45a1      	cmp	r9, r4
 800046e:	d903      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000470:	f1bb 0f00 	cmp.w	fp, #0
 8000474:	f000 8093 	beq.w	800059e <__udivmoddi4+0x2de>
 8000478:	4650      	mov	r0, sl
 800047a:	eba4 0409 	sub.w	r4, r4, r9
 800047e:	fa1f f983 	uxth.w	r9, r3
 8000482:	fbb4 f3f8 	udiv	r3, r4, r8
 8000486:	fb08 4413 	mls	r4, r8, r3, r4
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000492:	45a4      	cmp	ip, r4
 8000494:	d906      	bls.n	80004a4 <__udivmoddi4+0x1e4>
 8000496:	193c      	adds	r4, r7, r4
 8000498:	f103 38ff 	add.w	r8, r3, #4294967295	@ 0xffffffff
 800049c:	d201      	bcs.n	80004a2 <__udivmoddi4+0x1e2>
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d87a      	bhi.n	8000598 <__udivmoddi4+0x2d8>
 80004a2:	4643      	mov	r3, r8
 80004a4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a8:	eba4 040c 	sub.w	r4, r4, ip
 80004ac:	fba0 9802 	umull	r9, r8, r0, r2
 80004b0:	4544      	cmp	r4, r8
 80004b2:	46cc      	mov	ip, r9
 80004b4:	4643      	mov	r3, r8
 80004b6:	d302      	bcc.n	80004be <__udivmoddi4+0x1fe>
 80004b8:	d106      	bne.n	80004c8 <__udivmoddi4+0x208>
 80004ba:	45ce      	cmp	lr, r9
 80004bc:	d204      	bcs.n	80004c8 <__udivmoddi4+0x208>
 80004be:	3801      	subs	r0, #1
 80004c0:	ebb9 0c02 	subs.w	ip, r9, r2
 80004c4:	eb68 0307 	sbc.w	r3, r8, r7
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x222>
 80004ca:	ebbe 020c 	subs.w	r2, lr, ip
 80004ce:	eb64 0403 	sbc.w	r4, r4, r3
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	fa22 f301 	lsr.w	r3, r2, r1
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	431e      	orrs	r6, r3
 80004de:	e9c5 6400 	strd	r6, r4, [r5]
 80004e2:	2100      	movs	r1, #0
 80004e4:	e73e      	b.n	8000364 <__udivmoddi4+0xa4>
 80004e6:	fa02 fe03 	lsl.w	lr, r2, r3
 80004ea:	f1c3 0120 	rsb	r1, r3, #32
 80004ee:	fa04 f203 	lsl.w	r2, r4, r3
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	40cc      	lsrs	r4, r1
 80004f8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004fc:	fa20 f101 	lsr.w	r1, r0, r1
 8000500:	fa1f f68e 	uxth.w	r6, lr
 8000504:	fbb4 f0f7 	udiv	r0, r4, r7
 8000508:	430a      	orrs	r2, r1
 800050a:	fb07 4410 	mls	r4, r7, r0, r4
 800050e:	0c11      	lsrs	r1, r2, #16
 8000510:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000514:	fb00 f406 	mul.w	r4, r0, r6
 8000518:	428c      	cmp	r4, r1
 800051a:	d90e      	bls.n	800053a <__udivmoddi4+0x27a>
 800051c:	eb1e 0101 	adds.w	r1, lr, r1
 8000520:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8000524:	bf2c      	ite	cs
 8000526:	f04f 0901 	movcs.w	r9, #1
 800052a:	f04f 0900 	movcc.w	r9, #0
 800052e:	428c      	cmp	r4, r1
 8000530:	d902      	bls.n	8000538 <__udivmoddi4+0x278>
 8000532:	f1b9 0f00 	cmp.w	r9, #0
 8000536:	d02c      	beq.n	8000592 <__udivmoddi4+0x2d2>
 8000538:	4640      	mov	r0, r8
 800053a:	1b09      	subs	r1, r1, r4
 800053c:	b292      	uxth	r2, r2
 800053e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000542:	fb07 1114 	mls	r1, r7, r4, r1
 8000546:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054a:	fb04 f106 	mul.w	r1, r4, r6
 800054e:	4291      	cmp	r1, r2
 8000550:	d907      	bls.n	8000562 <__udivmoddi4+0x2a2>
 8000552:	eb1e 0202 	adds.w	r2, lr, r2
 8000556:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 800055a:	d201      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 800055c:	4291      	cmp	r1, r2
 800055e:	d815      	bhi.n	800058c <__udivmoddi4+0x2cc>
 8000560:	4644      	mov	r4, r8
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000568:	e721      	b.n	80003ae <__udivmoddi4+0xee>
 800056a:	1a86      	subs	r6, r0, r2
 800056c:	eb64 0303 	sbc.w	r3, r4, r3
 8000570:	2001      	movs	r0, #1
 8000572:	e70e      	b.n	8000392 <__udivmoddi4+0xd2>
 8000574:	3c02      	subs	r4, #2
 8000576:	4472      	add	r2, lr
 8000578:	e735      	b.n	80003e6 <__udivmoddi4+0x126>
 800057a:	3902      	subs	r1, #2
 800057c:	4472      	add	r2, lr
 800057e:	e6d0      	b.n	8000322 <__udivmoddi4+0x62>
 8000580:	44f4      	add	ip, lr
 8000582:	3802      	subs	r0, #2
 8000584:	e6e3      	b.n	800034e <__udivmoddi4+0x8e>
 8000586:	44f4      	add	ip, lr
 8000588:	3802      	subs	r0, #2
 800058a:	e742      	b.n	8000412 <__udivmoddi4+0x152>
 800058c:	3c02      	subs	r4, #2
 800058e:	4472      	add	r2, lr
 8000590:	e7e7      	b.n	8000562 <__udivmoddi4+0x2a2>
 8000592:	3802      	subs	r0, #2
 8000594:	4471      	add	r1, lr
 8000596:	e7d0      	b.n	800053a <__udivmoddi4+0x27a>
 8000598:	3b02      	subs	r3, #2
 800059a:	443c      	add	r4, r7
 800059c:	e782      	b.n	80004a4 <__udivmoddi4+0x1e4>
 800059e:	3802      	subs	r0, #2
 80005a0:	443c      	add	r4, r7
 80005a2:	e76a      	b.n	800047a <__udivmoddi4+0x1ba>

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08c      	sub	sp, #48	@ 0x30
 80005ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ae:	f107 031c 	add.w	r3, r7, #28
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	60da      	str	r2, [r3, #12]
 80005bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005be:	4b60      	ldr	r3, [pc, #384]	@ (8000740 <MX_GPIO_Init+0x198>)
 80005c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005c4:	4a5e      	ldr	r2, [pc, #376]	@ (8000740 <MX_GPIO_Init+0x198>)
 80005c6:	f043 0301 	orr.w	r3, r3, #1
 80005ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80005ce:	4b5c      	ldr	r3, [pc, #368]	@ (8000740 <MX_GPIO_Init+0x198>)
 80005d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005d4:	f003 0301 	and.w	r3, r3, #1
 80005d8:	61bb      	str	r3, [r7, #24]
 80005da:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005dc:	4b58      	ldr	r3, [pc, #352]	@ (8000740 <MX_GPIO_Init+0x198>)
 80005de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005e2:	4a57      	ldr	r2, [pc, #348]	@ (8000740 <MX_GPIO_Init+0x198>)
 80005e4:	f043 0320 	orr.w	r3, r3, #32
 80005e8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80005ec:	4b54      	ldr	r3, [pc, #336]	@ (8000740 <MX_GPIO_Init+0x198>)
 80005ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005f2:	f003 0320 	and.w	r3, r3, #32
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005fa:	4b51      	ldr	r3, [pc, #324]	@ (8000740 <MX_GPIO_Init+0x198>)
 80005fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000600:	4a4f      	ldr	r2, [pc, #316]	@ (8000740 <MX_GPIO_Init+0x198>)
 8000602:	f043 0308 	orr.w	r3, r3, #8
 8000606:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800060a:	4b4d      	ldr	r3, [pc, #308]	@ (8000740 <MX_GPIO_Init+0x198>)
 800060c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000610:	f003 0308 	and.w	r3, r3, #8
 8000614:	613b      	str	r3, [r7, #16]
 8000616:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000618:	4b49      	ldr	r3, [pc, #292]	@ (8000740 <MX_GPIO_Init+0x198>)
 800061a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800061e:	4a48      	ldr	r2, [pc, #288]	@ (8000740 <MX_GPIO_Init+0x198>)
 8000620:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000624:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000628:	4b45      	ldr	r3, [pc, #276]	@ (8000740 <MX_GPIO_Init+0x198>)
 800062a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800062e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000636:	4b42      	ldr	r3, [pc, #264]	@ (8000740 <MX_GPIO_Init+0x198>)
 8000638:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800063c:	4a40      	ldr	r2, [pc, #256]	@ (8000740 <MX_GPIO_Init+0x198>)
 800063e:	f043 0304 	orr.w	r3, r3, #4
 8000642:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000646:	4b3e      	ldr	r3, [pc, #248]	@ (8000740 <MX_GPIO_Init+0x198>)
 8000648:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800064c:	f003 0304 	and.w	r3, r3, #4
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000654:	4b3a      	ldr	r3, [pc, #232]	@ (8000740 <MX_GPIO_Init+0x198>)
 8000656:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800065a:	4a39      	ldr	r2, [pc, #228]	@ (8000740 <MX_GPIO_Init+0x198>)
 800065c:	f043 0302 	orr.w	r3, r3, #2
 8000660:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000664:	4b36      	ldr	r3, [pc, #216]	@ (8000740 <MX_GPIO_Init+0x198>)
 8000666:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800066a:	f003 0302 	and.w	r3, r3, #2
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000678:	4832      	ldr	r0, [pc, #200]	@ (8000744 <MX_GPIO_Init+0x19c>)
 800067a:	f000 ffb3 	bl	80015e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000684:	4830      	ldr	r0, [pc, #192]	@ (8000748 <MX_GPIO_Init+0x1a0>)
 8000686:	f000 ffad 	bl	80015e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2104      	movs	r1, #4
 800068e:	482f      	ldr	r0, [pc, #188]	@ (800074c <MX_GPIO_Init+0x1a4>)
 8000690:	f000 ffa8 	bl	80015e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	2180      	movs	r1, #128	@ 0x80
 8000698:	482d      	ldr	r0, [pc, #180]	@ (8000750 <MX_GPIO_Init+0x1a8>)
 800069a:	f000 ffa3 	bl	80015e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	2180      	movs	r1, #128	@ 0x80
 80006a2:	482c      	ldr	r0, [pc, #176]	@ (8000754 <MX_GPIO_Init+0x1ac>)
 80006a4:	f000 ff9e 	bl	80015e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 80006a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ae:	2301      	movs	r3, #1
 80006b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b6:	2300      	movs	r3, #0
 80006b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	4619      	mov	r1, r3
 80006c0:	4820      	ldr	r0, [pc, #128]	@ (8000744 <MX_GPIO_Init+0x19c>)
 80006c2:	f000 fdb7 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 80006c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	2300      	movs	r3, #0
 80006d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	4619      	mov	r1, r3
 80006de:	481a      	ldr	r0, [pc, #104]	@ (8000748 <MX_GPIO_Init+0x1a0>)
 80006e0:	f000 fda8 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80006e4:	2304      	movs	r3, #4
 80006e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e8:	2301      	movs	r3, #1
 80006ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	2300      	movs	r3, #0
 80006f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80006f4:	f107 031c 	add.w	r3, r7, #28
 80006f8:	4619      	mov	r1, r3
 80006fa:	4814      	ldr	r0, [pc, #80]	@ (800074c <MX_GPIO_Init+0x1a4>)
 80006fc:	f000 fd9a 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000700:	2380      	movs	r3, #128	@ 0x80
 8000702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000704:	2301      	movs	r3, #1
 8000706:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070c:	2300      	movs	r3, #0
 800070e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000710:	f107 031c 	add.w	r3, r7, #28
 8000714:	4619      	mov	r1, r3
 8000716:	480e      	ldr	r0, [pc, #56]	@ (8000750 <MX_GPIO_Init+0x1a8>)
 8000718:	f000 fd8c 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 800071c:	2380      	movs	r3, #128	@ 0x80
 800071e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000720:	2301      	movs	r3, #1
 8000722:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000728:	2300      	movs	r3, #0
 800072a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4619      	mov	r1, r3
 8000732:	4808      	ldr	r0, [pc, #32]	@ (8000754 <MX_GPIO_Init+0x1ac>)
 8000734:	f000 fd7e 	bl	8001234 <HAL_GPIO_Init>

}
 8000738:	bf00      	nop
 800073a:	3730      	adds	r7, #48	@ 0x30
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	46020c00 	.word	0x46020c00
 8000744:	42021400 	.word	0x42021400
 8000748:	42020c00 	.word	0x42020c00
 800074c:	42021800 	.word	0x42021800
 8000750:	42020800 	.word	0x42020800
 8000754:	42020400 	.word	0x42020400

08000758 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800075c:	2000      	movs	r0, #0
 800075e:	f000 ff59 	bl	8001614 <HAL_ICACHE_ConfigAssociativityMode>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000768:	f000 f89b 	bl	80008a2 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800076c:	f000 ff72 	bl	8001654 <HAL_ICACHE_Enable>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000776:	f000 f894 	bl	80008a2 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  uint8_t RX_Data[5] = {0};
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	2300      	movs	r3, #0
 800078c:	733b      	strb	r3, [r7, #12]
  uint8_t RX_Data_BREAK[] = "\r\n";
 800078e:	4a16      	ldr	r2, [pc, #88]	@ (80007e8 <main+0x68>)
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	6812      	ldr	r2, [r2, #0]
 8000794:	4611      	mov	r1, r2
 8000796:	8019      	strh	r1, [r3, #0]
 8000798:	3302      	adds	r3, #2
 800079a:	0c12      	lsrs	r2, r2, #16
 800079c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800079e:	f000 fbbd 	bl	8000f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a2:	f000 f825 	bl	80007f0 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80007a6:	f000 f86c 	bl	8000882 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007aa:	f7ff fefd 	bl	80005a8 <MX_GPIO_Init>
  MX_ICACHE_Init();
 80007ae:	f7ff ffd3 	bl	8000758 <MX_ICACHE_Init>
  MX_SPI1_Init();
 80007b2:	f000 f979 	bl	8000aa8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80007b6:	f000 fad1 	bl	8000d5c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //LCD_Init(&hspi1);
  RFM69_Init(0xAA, 0xAA);
 80007ba:	21aa      	movs	r1, #170	@ 0xaa
 80007bc:	20aa      	movs	r0, #170	@ 0xaa
 80007be:	f000 f877 	bl	80008b0 <RFM69_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 80007c2:	2201      	movs	r2, #1
 80007c4:	2180      	movs	r1, #128	@ 0x80
 80007c6:	4809      	ldr	r0, [pc, #36]	@ (80007ec <main+0x6c>)
 80007c8:	f000 ff0c 	bl	80015e4 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 80007cc:	20c8      	movs	r0, #200	@ 0xc8
 80007ce:	f000 fc29 	bl	8001024 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2180      	movs	r1, #128	@ 0x80
 80007d6:	4805      	ldr	r0, [pc, #20]	@ (80007ec <main+0x6c>)
 80007d8:	f000 ff04 	bl	80015e4 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 80007dc:	20c8      	movs	r0, #200	@ 0xc8
 80007de:	f000 fc21 	bl	8001024 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 80007e2:	bf00      	nop
 80007e4:	e7ed      	b.n	80007c2 <main+0x42>
 80007e6:	bf00      	nop
 80007e8:	08007394 	.word	0x08007394
 80007ec:	42020400 	.word	0x42020400

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b09e      	sub	sp, #120	@ 0x78
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 0318 	add.w	r3, r7, #24
 80007fa:	2260      	movs	r2, #96	@ 0x60
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f006 fd90 	bl	8007324 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	463b      	mov	r3, r7
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]
 8000812:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE3) != HAL_OK)
 8000814:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8000818:	f000 ff2c 	bl	8001674 <HAL_PWREx_ControlVoltageScaling>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000822:	f000 f83e 	bl	80008a2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000826:	2310      	movs	r3, #16
 8000828:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800082a:	2301      	movs	r3, #1
 800082c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800082e:	2310      	movs	r3, #16
 8000830:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8000832:	2300      	movs	r3, #0
 8000834:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000836:	2300      	movs	r3, #0
 8000838:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083a:	f107 0318 	add.w	r3, r7, #24
 800083e:	4618      	mov	r0, r3
 8000840:	f001 f814 	bl	800186c <HAL_RCC_OscConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800084a:	f000 f82a 	bl	80008a2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084e:	231f      	movs	r3, #31
 8000850:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 800085e:	2360      	movs	r3, #96	@ 0x60
 8000860:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000866:	463b      	mov	r3, r7
 8000868:	2101      	movs	r1, #1
 800086a:	4618      	mov	r0, r3
 800086c:	f001 feda 	bl	8002624 <HAL_RCC_ClockConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000876:	f000 f814 	bl	80008a2 <Error_Handler>
  }
}
 800087a:	bf00      	nop
 800087c:	3778      	adds	r7, #120	@ 0x78
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000886:	f000 ffd1 	bl	800182c <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 800088a:	f000 ffdf 	bl	800184c <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800088e:	2002      	movs	r0, #2
 8000890:	f000 ff7c 	bl	800178c <HAL_PWREx_ConfigSupply>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemPower_Config+0x1c>
  {
    Error_Handler();
 800089a:	f000 f802 	bl	80008a2 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a6:	b672      	cpsid	i
}
 80008a8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008aa:	bf00      	nop
 80008ac:	e7fd      	b.n	80008aa <Error_Handler+0x8>
	...

080008b0 <RFM69_Init>:
 *  nodeID: Sets the nodeID
 *
 *  networkID: Sets the networkID
 *
 */
void RFM69_Init(uint8_t nodeID, uint8_t networkID){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b090      	sub	sp, #64	@ 0x40
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	460a      	mov	r2, r1
 80008ba:	71fb      	strb	r3, [r7, #7]
 80008bc:	4613      	mov	r3, r2
 80008be:	71bb      	strb	r3, [r7, #6]
	HAL_Delay(100);
 80008c0:	2064      	movs	r0, #100	@ 0x64
 80008c2:	f000 fbaf 	bl	8001024 <HAL_Delay>
	int test = chipPresent(&hspi1);
 80008c6:	4826      	ldr	r0, [pc, #152]	@ (8000960 <RFM69_Init+0xb0>)
 80008c8:	f000 f84c 	bl	8000964 <chipPresent>
 80008cc:	4603      	mov	r3, r0
 80008ce:	63fb      	str	r3, [r7, #60]	@ 0x3c

	const uint8_t CONFIG[][2] = {
 80008d0:	f240 4301 	movw	r3, #1025	@ 0x401
 80008d4:	81bb      	strh	r3, [r7, #12]
 80008d6:	2302      	movs	r3, #2
 80008d8:	81fb      	strh	r3, [r7, #14]
 80008da:	f641 2303 	movw	r3, #6659	@ 0x1a03
 80008de:	823b      	strh	r3, [r7, #16]
 80008e0:	f640 3304 	movw	r3, #2820	@ 0xb04
 80008e4:	827b      	strh	r3, [r7, #18]
 80008e6:	f240 3305 	movw	r3, #773	@ 0x305
 80008ea:	82bb      	strh	r3, [r7, #20]
 80008ec:	f243 3306 	movw	r3, #13062	@ 0x3306
 80008f0:	82fb      	strh	r3, [r7, #22]
 80008f2:	f64d 1307 	movw	r3, #55559	@ 0xd907
 80008f6:	833b      	strh	r3, [r7, #24]
 80008f8:	2308      	movs	r3, #8
 80008fa:	837b      	strh	r3, [r7, #26]
 80008fc:	2309      	movs	r3, #9
 80008fe:	83bb      	strh	r3, [r7, #28]
 8000900:	f641 2313 	movw	r3, #6675	@ 0x1a13
 8000904:	83fb      	strh	r3, [r7, #30]
 8000906:	f245 5319 	movw	r3, #21785	@ 0x5519
 800090a:	843b      	strh	r3, [r7, #32]
 800090c:	f244 0325 	movw	r3, #16421	@ 0x4025
 8000910:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000912:	f240 7326 	movw	r3, #1830	@ 0x726
 8000916:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000918:	f241 0328 	movw	r3, #4136	@ 0x1028
 800091c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800091e:	f24e 4329 	movw	r3, #58409	@ 0xe429
 8000922:	853b      	strh	r3, [r7, #40]	@ 0x28
 8000924:	f648 032e 	movw	r3, #34862	@ 0x882e
 8000928:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800092a:	f642 532f 	movw	r3, #11567	@ 0x2d2f
 800092e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8000930:	2330      	movs	r3, #48	@ 0x30
 8000932:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000936:	79bb      	ldrb	r3, [r7, #6]
 8000938:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800093c:	f248 0337 	movw	r3, #32823	@ 0x8037
 8000940:	863b      	strh	r3, [r7, #48]	@ 0x30
 8000942:	f245 5338 	movw	r3, #21816	@ 0x5538
 8000946:	867b      	strh	r3, [r7, #50]	@ 0x32
 8000948:	f648 733c 	movw	r3, #36668	@ 0x8f3c
 800094c:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800094e:	f241 033d 	movw	r3, #4157	@ 0x103d
 8000952:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8000954:	23ff      	movs	r3, #255	@ 0xff
 8000956:	873b      	strh	r3, [r7, #56]	@ 0x38
			/* 0x3C */ { REG_FIFOTHRESH, RF_FIFOTHRESH_TXSTART_FIFONOTEMPTY | RF_FIFOTHRESH_VALUE },
			// Defines the delay between FIFO empty and start of new RSSI | No RX restart. -> RestartRX can be used | AES encryption turned off
			/* 0x3D */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_OFF | RF_PACKET2_AES_OFF },
			{255, 0}
	};
}
 8000958:	bf00      	nop
 800095a:	3740      	adds	r7, #64	@ 0x40
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000028 	.word	0x20000028

08000964 <chipPresent>:
 *  spi_handler: Pointer to the chosen SPI Interface
 *
 *  returns: 	1 if no Chip is found
 *  			0 if a RFM69 Chip is found
 */
uint8_t chipPresent(SPI_HandleTypeDef * spi_handler){
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	uint8_t return_status = 1;
 800096c:	2301      	movs	r3, #1
 800096e:	73fb      	strb	r3, [r7, #15]

	writeREG(spi_handler, REG_SYNCVALUE1, 0xAA);
 8000970:	22aa      	movs	r2, #170	@ 0xaa
 8000972:	212f      	movs	r1, #47	@ 0x2f
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f000 f837 	bl	80009e8 <writeREG>
	HAL_Delay(100);
 800097a:	2064      	movs	r0, #100	@ 0x64
 800097c:	f000 fb52 	bl	8001024 <HAL_Delay>

	if (readREG(spi_handler, REG_SYNCVALUE1) == 0xAA){
 8000980:	212f      	movs	r1, #47	@ 0x2f
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f000 f860 	bl	8000a48 <readREG>
 8000988:	4603      	mov	r3, r0
 800098a:	2baa      	cmp	r3, #170	@ 0xaa
 800098c:	d11e      	bne.n	80009cc <chipPresent+0x68>
		writeREG(spi_handler, REG_SYNCVALUE1, 0x55);
 800098e:	2255      	movs	r2, #85	@ 0x55
 8000990:	212f      	movs	r1, #47	@ 0x2f
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f000 f828 	bl	80009e8 <writeREG>
		HAL_Delay(100);
 8000998:	2064      	movs	r0, #100	@ 0x64
 800099a:	f000 fb43 	bl	8001024 <HAL_Delay>

		if (readREG(spi_handler, REG_SYNCVALUE1) == 0x55){
 800099e:	212f      	movs	r1, #47	@ 0x2f
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f000 f851 	bl	8000a48 <readREG>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b55      	cmp	r3, #85	@ 0x55
 80009aa:	d108      	bne.n	80009be <chipPresent+0x5a>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80009ac:	2201      	movs	r2, #1
 80009ae:	2180      	movs	r1, #128	@ 0x80
 80009b0:	480b      	ldr	r0, [pc, #44]	@ (80009e0 <chipPresent+0x7c>)
 80009b2:	f000 fe17 	bl	80015e4 <HAL_GPIO_WritePin>
			return_status = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	73fb      	strb	r3, [r7, #15]

			return return_status;
 80009ba:	7bfb      	ldrb	r3, [r7, #15]
 80009bc:	e00c      	b.n	80009d8 <chipPresent+0x74>
		}
		else{
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80009be:	2201      	movs	r2, #1
 80009c0:	2104      	movs	r1, #4
 80009c2:	4808      	ldr	r0, [pc, #32]	@ (80009e4 <chipPresent+0x80>)
 80009c4:	f000 fe0e 	bl	80015e4 <HAL_GPIO_WritePin>

			return return_status;
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
 80009ca:	e005      	b.n	80009d8 <chipPresent+0x74>
		}
	}
	else{
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	2104      	movs	r1, #4
 80009d0:	4804      	ldr	r0, [pc, #16]	@ (80009e4 <chipPresent+0x80>)
 80009d2:	f000 fe07 	bl	80015e4 <HAL_GPIO_WritePin>

		return return_status;
 80009d6:	7bfb      	ldrb	r3, [r7, #15]
	}
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3710      	adds	r7, #16
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	42020800 	.word	0x42020800
 80009e4:	42021800 	.word	0x42021800

080009e8 <writeREG>:
 *
 *  addr: [HEX] The Address to write to (See RFM69registers.h for predefined values)
 *
 *  value: [HEX] The Value
 */
void writeREG(SPI_HandleTypeDef * spi_handler, uint8_t addr, uint8_t value){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	460b      	mov	r3, r1
 80009f2:	70fb      	strb	r3, [r7, #3]
 80009f4:	4613      	mov	r3, r2
 80009f6:	70bb      	strb	r3, [r7, #2]
	uint8_t write_addr = addr | 0x80;
 80009f8:	78fb      	ldrb	r3, [r7, #3]
 80009fa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	73fb      	strb	r3, [r7, #15]

	HAL_Delay(100);
 8000a02:	2064      	movs	r0, #100	@ 0x64
 8000a04:	f000 fb0e 	bl	8001024 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOF, LCD_CS_Pin, GPIO_PIN_RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a0e:	480d      	ldr	r0, [pc, #52]	@ (8000a44 <writeREG+0x5c>)
 8000a10:	f000 fde8 	bl	80015e4 <HAL_GPIO_WritePin>

	// & 0x80 to set the 7th Bit to 1 (write)
	HAL_SPI_Transmit(spi_handler, &write_addr, 1, 100);
 8000a14:	f107 010f 	add.w	r1, r7, #15
 8000a18:	2364      	movs	r3, #100	@ 0x64
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f005 fa6f 	bl	8005f00 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(spi_handler, &value, 1, 100);
 8000a22:	1cb9      	adds	r1, r7, #2
 8000a24:	2364      	movs	r3, #100	@ 0x64
 8000a26:	2201      	movs	r2, #1
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f005 fa69 	bl	8005f00 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOF, LCD_CS_Pin, GPIO_PIN_SET);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a34:	4803      	ldr	r0, [pc, #12]	@ (8000a44 <writeREG+0x5c>)
 8000a36:	f000 fdd5 	bl	80015e4 <HAL_GPIO_WritePin>
}
 8000a3a:	bf00      	nop
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	42021400 	.word	0x42021400

08000a48 <readREG>:
 *
 *  addr: [HEX] The Address to write to (See RFM69registers.h for predefined values)
 *
 *  returns: The value of the register addr.
 */
uint8_t readREG(SPI_HandleTypeDef * spi_handler, uint8_t addr){
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	460b      	mov	r3, r1
 8000a52:	70fb      	strb	r3, [r7, #3]
	uint8_t read_addr = addr & 0x7F;
 8000a54:	78fb      	ldrb	r3, [r7, #3]
 8000a56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	73fb      	strb	r3, [r7, #15]
	uint8_t value;

	HAL_Delay(100);
 8000a5e:	2064      	movs	r0, #100	@ 0x64
 8000a60:	f000 fae0 	bl	8001024 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOF, LCD_CS_Pin, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a6a:	480e      	ldr	r0, [pc, #56]	@ (8000aa4 <readREG+0x5c>)
 8000a6c:	f000 fdba 	bl	80015e4 <HAL_GPIO_WritePin>

	// & 0x7F to set the 7th Bit to 0 (read)
	HAL_SPI_Transmit(spi_handler, &read_addr, 1, 100);
 8000a70:	f107 010f 	add.w	r1, r7, #15
 8000a74:	2364      	movs	r3, #100	@ 0x64
 8000a76:	2201      	movs	r2, #1
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f005 fa41 	bl	8005f00 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi_handler, &value, 1, 100);
 8000a7e:	f107 010e 	add.w	r1, r7, #14
 8000a82:	2364      	movs	r3, #100	@ 0x64
 8000a84:	2201      	movs	r2, #1
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f005 fc58 	bl	800633c <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOF, LCD_CS_Pin, GPIO_PIN_SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a92:	4804      	ldr	r0, [pc, #16]	@ (8000aa4 <readREG+0x5c>)
 8000a94:	f000 fda6 	bl	80015e4 <HAL_GPIO_WritePin>

	return value;
 8000a98:	7bbb      	ldrb	r3, [r7, #14]
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	42021400 	.word	0x42021400

08000aa8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ab8:	4b30      	ldr	r3, [pc, #192]	@ (8000b7c <MX_SPI1_Init+0xd4>)
 8000aba:	4a31      	ldr	r2, [pc, #196]	@ (8000b80 <MX_SPI1_Init+0xd8>)
 8000abc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000abe:	4b2f      	ldr	r3, [pc, #188]	@ (8000b7c <MX_SPI1_Init+0xd4>)
 8000ac0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ac4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ac6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b7c <MX_SPI1_Init+0xd4>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000acc:	4b2b      	ldr	r3, [pc, #172]	@ (8000b7c <MX_SPI1_Init+0xd4>)
 8000ace:	2207      	movs	r2, #7
 8000ad0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ad2:	4b2a      	ldr	r3, [pc, #168]	@ (8000b7c <MX_SPI1_Init+0xd4>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ad8:	4b28      	ldr	r3, [pc, #160]	@ (8000b7c <MX_SPI1_Init+0xd4>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ade:	4b27      	ldr	r3, [pc, #156]	@ (8000b7c <MX_SPI1_Init+0xd4>)
 8000ae0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000ae4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ae6:	4b25      	ldr	r3, [pc, #148]	@ (8000b7c <MX_SPI1_Init+0xd4>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aec:	4b23      	ldr	r3, [pc, #140]	@ (8000b7c <MX_SPI1_Init+0xd4>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000af2:	4b22      	ldr	r3, [pc, #136]	@ (8000b7c <MX_SPI1_Init+0xd4>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000af8:	4b20      	ldr	r3, [pc, #128]	@ (8000b7c <MX_SPI1_Init+0xd4>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000afe:	4b1f      	ldr	r3, [pc, #124]	@ (8000b7c <MX_SPI1_Init+0xd4>)
 8000b00:	2207      	movs	r2, #7
 8000b02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b04:	4b1d      	ldr	r3, [pc, #116]	@ (8000b7c <MX_SPI1_Init+0xd4>)
 8000b06:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b0a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b7c <MX_SPI1_Init+0xd4>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b12:	4b1a      	ldr	r3, [pc, #104]	@ (8000b7c <MX_SPI1_Init+0xd4>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b18:	4b18      	ldr	r3, [pc, #96]	@ (8000b7c <MX_SPI1_Init+0xd4>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b1e:	4b17      	ldr	r3, [pc, #92]	@ (8000b7c <MX_SPI1_Init+0xd4>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b24:	4b15      	ldr	r3, [pc, #84]	@ (8000b7c <MX_SPI1_Init+0xd4>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b2a:	4b14      	ldr	r3, [pc, #80]	@ (8000b7c <MX_SPI1_Init+0xd4>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b30:	4b12      	ldr	r3, [pc, #72]	@ (8000b7c <MX_SPI1_Init+0xd4>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000b36:	4b11      	ldr	r3, [pc, #68]	@ (8000b7c <MX_SPI1_Init+0xd4>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b7c <MX_SPI1_Init+0xd4>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b42:	480e      	ldr	r0, [pc, #56]	@ (8000b7c <MX_SPI1_Init+0xd4>)
 8000b44:	f005 f8c6 	bl	8005cd4 <HAL_SPI_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 8000b4e:	f7ff fea8 	bl	80008a2 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000b52:	2300      	movs	r3, #0
 8000b54:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000b56:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000b5a:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	4619      	mov	r1, r3
 8000b64:	4805      	ldr	r0, [pc, #20]	@ (8000b7c <MX_SPI1_Init+0xd4>)
 8000b66:	f005 fe82 	bl	800686e <HAL_SPIEx_SetConfigAutonomousMode>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 8000b70:	f7ff fe97 	bl	80008a2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b74:	bf00      	nop
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000028 	.word	0x20000028
 8000b80:	40013000 	.word	0x40013000

08000b84 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b0c0      	sub	sp, #256	@ 0x100
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b9c:	f107 0310 	add.w	r3, r7, #16
 8000ba0:	22d8      	movs	r2, #216	@ 0xd8
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f006 fbbd 	bl	8007324 <memset>
  if(spiHandle->Instance==SPI1)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a27      	ldr	r2, [pc, #156]	@ (8000c4c <HAL_SPI_MspInit+0xc8>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d145      	bne.n	8000c40 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000bb4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000bb8:	f04f 0300 	mov.w	r3, #0
 8000bbc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PCLK2;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bc6:	f107 0310 	add.w	r3, r7, #16
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f002 f900 	bl	8002dd0 <HAL_RCCEx_PeriphCLKConfig>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8000bd6:	f7ff fe64 	bl	80008a2 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bda:	4b1d      	ldr	r3, [pc, #116]	@ (8000c50 <HAL_SPI_MspInit+0xcc>)
 8000bdc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000be0:	4a1b      	ldr	r2, [pc, #108]	@ (8000c50 <HAL_SPI_MspInit+0xcc>)
 8000be2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000be6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000bea:	4b19      	ldr	r3, [pc, #100]	@ (8000c50 <HAL_SPI_MspInit+0xcc>)
 8000bec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000bf0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf8:	4b15      	ldr	r3, [pc, #84]	@ (8000c50 <HAL_SPI_MspInit+0xcc>)
 8000bfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bfe:	4a14      	ldr	r2, [pc, #80]	@ (8000c50 <HAL_SPI_MspInit+0xcc>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c08:	4b11      	ldr	r3, [pc, #68]	@ (8000c50 <HAL_SPI_MspInit+0xcc>)
 8000c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c16:	23e0      	movs	r3, #224	@ 0xe0
 8000c18:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c2e:	2305      	movs	r3, #5
 8000c30:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c34:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4806      	ldr	r0, [pc, #24]	@ (8000c54 <HAL_SPI_MspInit+0xd0>)
 8000c3c:	f000 fafa 	bl	8001234 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000c40:	bf00      	nop
 8000c42:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40013000 	.word	0x40013000
 8000c50:	46020c00 	.word	0x46020c00
 8000c54:	42020000 	.word	0x42020000

08000c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c88 <HAL_MspInit+0x30>)
 8000c60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000c64:	4a08      	ldr	r2, [pc, #32]	@ (8000c88 <HAL_MspInit+0x30>)
 8000c66:	f043 0304 	orr.w	r3, r3, #4
 8000c6a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000c6e:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <HAL_MspInit+0x30>)
 8000c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000c74:	f003 0304 	and.w	r3, r3, #4
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	46020c00 	.word	0x46020c00

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <NMI_Handler+0x4>

08000c94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <HardFault_Handler+0x4>

08000c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <MemManage_Handler+0x4>

08000ca4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca8:	bf00      	nop
 8000caa:	e7fd      	b.n	8000ca8 <BusFault_Handler+0x4>

08000cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb0:	bf00      	nop
 8000cb2:	e7fd      	b.n	8000cb0 <UsageFault_Handler+0x4>

08000cb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce2:	f000 f97f 	bl	8000fe4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cf0:	4b18      	ldr	r3, [pc, #96]	@ (8000d54 <SystemInit+0x68>)
 8000cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cf6:	4a17      	ldr	r2, [pc, #92]	@ (8000d54 <SystemInit+0x68>)
 8000cf8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000d00:	4b15      	ldr	r3, [pc, #84]	@ (8000d58 <SystemInit+0x6c>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000d06:	4b14      	ldr	r3, [pc, #80]	@ (8000d58 <SystemInit+0x6c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000d0c:	4b12      	ldr	r3, [pc, #72]	@ (8000d58 <SystemInit+0x6c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000d12:	4b11      	ldr	r3, [pc, #68]	@ (8000d58 <SystemInit+0x6c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000d18:	4b0f      	ldr	r3, [pc, #60]	@ (8000d58 <SystemInit+0x6c>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0e      	ldr	r2, [pc, #56]	@ (8000d58 <SystemInit+0x6c>)
 8000d1e:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000d22:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000d26:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000d28:	4b0b      	ldr	r3, [pc, #44]	@ (8000d58 <SystemInit+0x6c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d58 <SystemInit+0x6c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a09      	ldr	r2, [pc, #36]	@ (8000d58 <SystemInit+0x6c>)
 8000d34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d38:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000d3a:	4b07      	ldr	r3, [pc, #28]	@ (8000d58 <SystemInit+0x6c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d40:	4b04      	ldr	r3, [pc, #16]	@ (8000d54 <SystemInit+0x68>)
 8000d42:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d46:	609a      	str	r2, [r3, #8]
  #endif
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000ed00 	.word	0xe000ed00
 8000d58:	46020c00 	.word	0x46020c00

08000d5c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d60:	4b22      	ldr	r3, [pc, #136]	@ (8000dec <MX_USART1_UART_Init+0x90>)
 8000d62:	4a23      	ldr	r2, [pc, #140]	@ (8000df0 <MX_USART1_UART_Init+0x94>)
 8000d64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d66:	4b21      	ldr	r3, [pc, #132]	@ (8000dec <MX_USART1_UART_Init+0x90>)
 8000d68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000dec <MX_USART1_UART_Init+0x90>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d74:	4b1d      	ldr	r3, [pc, #116]	@ (8000dec <MX_USART1_UART_Init+0x90>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dec <MX_USART1_UART_Init+0x90>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d80:	4b1a      	ldr	r3, [pc, #104]	@ (8000dec <MX_USART1_UART_Init+0x90>)
 8000d82:	220c      	movs	r2, #12
 8000d84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d86:	4b19      	ldr	r3, [pc, #100]	@ (8000dec <MX_USART1_UART_Init+0x90>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d8c:	4b17      	ldr	r3, [pc, #92]	@ (8000dec <MX_USART1_UART_Init+0x90>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d92:	4b16      	ldr	r3, [pc, #88]	@ (8000dec <MX_USART1_UART_Init+0x90>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d98:	4b14      	ldr	r3, [pc, #80]	@ (8000dec <MX_USART1_UART_Init+0x90>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d9e:	4b13      	ldr	r3, [pc, #76]	@ (8000dec <MX_USART1_UART_Init+0x90>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000da4:	4811      	ldr	r0, [pc, #68]	@ (8000dec <MX_USART1_UART_Init+0x90>)
 8000da6:	f005 fda3 	bl	80068f0 <HAL_UART_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000db0:	f7ff fd77 	bl	80008a2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000db4:	2100      	movs	r1, #0
 8000db6:	480d      	ldr	r0, [pc, #52]	@ (8000dec <MX_USART1_UART_Init+0x90>)
 8000db8:	f006 f9ea 	bl	8007190 <HAL_UARTEx_SetTxFifoThreshold>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000dc2:	f7ff fd6e 	bl	80008a2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4808      	ldr	r0, [pc, #32]	@ (8000dec <MX_USART1_UART_Init+0x90>)
 8000dca:	f006 fa1f 	bl	800720c <HAL_UARTEx_SetRxFifoThreshold>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000dd4:	f7ff fd65 	bl	80008a2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000dd8:	4804      	ldr	r0, [pc, #16]	@ (8000dec <MX_USART1_UART_Init+0x90>)
 8000dda:	f006 f9a0 	bl	800711e <HAL_UARTEx_DisableFifoMode>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000de4:	f7ff fd5d 	bl	80008a2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	200000b8 	.word	0x200000b8
 8000df0:	40013800 	.word	0x40013800

08000df4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b0c0      	sub	sp, #256	@ 0x100
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	22d8      	movs	r2, #216	@ 0xd8
 8000e12:	2100      	movs	r1, #0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f006 fa85 	bl	8007324 <memset>
  if(uartHandle->Instance==USART1)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a27      	ldr	r2, [pc, #156]	@ (8000ebc <HAL_UART_MspInit+0xc8>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d145      	bne.n	8000eb0 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e24:	f04f 0201 	mov.w	r2, #1
 8000e28:	f04f 0300 	mov.w	r3, #0
 8000e2c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e30:	2300      	movs	r3, #0
 8000e32:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e34:	f107 0310 	add.w	r3, r7, #16
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f001 ffc9 	bl	8002dd0 <HAL_RCCEx_PeriphCLKConfig>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000e44:	f7ff fd2d 	bl	80008a2 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e48:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec0 <HAL_UART_MspInit+0xcc>)
 8000e4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000e4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ec0 <HAL_UART_MspInit+0xcc>)
 8000e50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e54:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000e58:	4b19      	ldr	r3, [pc, #100]	@ (8000ec0 <HAL_UART_MspInit+0xcc>)
 8000e5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000e5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	4b16      	ldr	r3, [pc, #88]	@ (8000ec0 <HAL_UART_MspInit+0xcc>)
 8000e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e6c:	4a14      	ldr	r2, [pc, #80]	@ (8000ec0 <HAL_UART_MspInit+0xcc>)
 8000e6e:	f043 0301 	orr.w	r3, r3, #1
 8000e72:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e76:	4b12      	ldr	r3, [pc, #72]	@ (8000ec0 <HAL_UART_MspInit+0xcc>)
 8000e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e84:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e88:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e9e:	2307      	movs	r3, #7
 8000ea0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4806      	ldr	r0, [pc, #24]	@ (8000ec4 <HAL_UART_MspInit+0xd0>)
 8000eac:	f000 f9c2 	bl	8001234 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000eb0:	bf00      	nop
 8000eb2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40013800 	.word	0x40013800
 8000ec0:	46020c00 	.word	0x46020c00
 8000ec4:	42020000 	.word	0x42020000

08000ec8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000ec8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f00 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ecc:	f7ff ff0e 	bl	8000cec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ed0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ed2:	e003      	b.n	8000edc <LoopCopyDataInit>

08000ed4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f04 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000ed6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ed8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000eda:	3104      	adds	r1, #4

08000edc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000edc:	480a      	ldr	r0, [pc, #40]	@ (8000f08 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ede:	4b0b      	ldr	r3, [pc, #44]	@ (8000f0c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ee0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ee2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ee4:	d3f6      	bcc.n	8000ed4 <CopyDataInit>
	ldr	r2, =_sbss
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f10 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ee8:	e002      	b.n	8000ef0 <LoopFillZerobss>

08000eea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000eea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000eec:	f842 3b04 	str.w	r3, [r2], #4

08000ef0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ef0:	4b08      	ldr	r3, [pc, #32]	@ (8000f14 <LoopForever+0x16>)
	cmp	r2, r3
 8000ef2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ef4:	d3f9      	bcc.n	8000eea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ef6:	f006 fa1d 	bl	8007334 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000efa:	f7ff fc41 	bl	8000780 <main>

08000efe <LoopForever>:

LoopForever:
    b LoopForever
 8000efe:	e7fe      	b.n	8000efe <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000f00:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8000f04:	080074a8 	.word	0x080074a8
	ldr	r0, =_sdata
 8000f08:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f0c:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8000f10:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000f14:	20000150 	.word	0x20000150

08000f18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f18:	e7fe      	b.n	8000f18 <ADC1_2_IRQHandler>
	...

08000f1c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f20:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <HAL_Init+0x4c>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a10      	ldr	r2, [pc, #64]	@ (8000f68 <HAL_Init+0x4c>)
 8000f26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f2c:	2003      	movs	r0, #3
 8000f2e:	f000 f94f 	bl	80011d0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000f32:	f001 fd69 	bl	8002a08 <HAL_RCC_GetSysClockFreq>
 8000f36:	4602      	mov	r2, r0
 8000f38:	4b0c      	ldr	r3, [pc, #48]	@ (8000f6c <HAL_Init+0x50>)
 8000f3a:	6a1b      	ldr	r3, [r3, #32]
 8000f3c:	f003 030f 	and.w	r3, r3, #15
 8000f40:	490b      	ldr	r1, [pc, #44]	@ (8000f70 <HAL_Init+0x54>)
 8000f42:	5ccb      	ldrb	r3, [r1, r3]
 8000f44:	fa22 f303 	lsr.w	r3, r2, r3
 8000f48:	4a0a      	ldr	r2, [pc, #40]	@ (8000f74 <HAL_Init+0x58>)
 8000f4a:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f4c:	200f      	movs	r0, #15
 8000f4e:	f000 f813 	bl	8000f78 <HAL_InitTick>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e002      	b.n	8000f62 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f5c:	f7ff fe7c 	bl	8000c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40022000 	.word	0x40022000
 8000f6c:	46020c00 	.word	0x46020c00
 8000f70:	08007398 	.word	0x08007398
 8000f74:	20000000 	.word	0x20000000

08000f78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000f80:	4b15      	ldr	r3, [pc, #84]	@ (8000fd8 <HAL_InitTick+0x60>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d101      	bne.n	8000f8c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e021      	b.n	8000fd0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f8c:	4b13      	ldr	r3, [pc, #76]	@ (8000fdc <HAL_InitTick+0x64>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4b11      	ldr	r3, [pc, #68]	@ (8000fd8 <HAL_InitTick+0x60>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4619      	mov	r1, r3
 8000f96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 f939 	bl	800121a <HAL_SYSTICK_Config>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e00e      	b.n	8000fd0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b0f      	cmp	r3, #15
 8000fb6:	d80a      	bhi.n	8000fce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fc0:	f000 f911 	bl	80011e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc4:	4a06      	ldr	r2, [pc, #24]	@ (8000fe0 <HAL_InitTick+0x68>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	e000      	b.n	8000fd0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000008 	.word	0x20000008
 8000fdc:	20000000 	.word	0x20000000
 8000fe0:	20000004 	.word	0x20000004

08000fe4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <HAL_IncTick+0x20>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	461a      	mov	r2, r3
 8000fee:	4b06      	ldr	r3, [pc, #24]	@ (8001008 <HAL_IncTick+0x24>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	4a04      	ldr	r2, [pc, #16]	@ (8001008 <HAL_IncTick+0x24>)
 8000ff6:	6013      	str	r3, [r2, #0]
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	20000008 	.word	0x20000008
 8001008:	2000014c 	.word	0x2000014c

0800100c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return uwTick;
 8001010:	4b03      	ldr	r3, [pc, #12]	@ (8001020 <HAL_GetTick+0x14>)
 8001012:	681b      	ldr	r3, [r3, #0]
}
 8001014:	4618      	mov	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	2000014c 	.word	0x2000014c

08001024 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800102c:	f7ff ffee 	bl	800100c <HAL_GetTick>
 8001030:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800103c:	d005      	beq.n	800104a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800103e:	4b0a      	ldr	r3, [pc, #40]	@ (8001068 <HAL_Delay+0x44>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	461a      	mov	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4413      	add	r3, r2
 8001048:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800104a:	bf00      	nop
 800104c:	f7ff ffde 	bl	800100c <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	429a      	cmp	r2, r3
 800105a:	d8f7      	bhi.n	800104c <HAL_Delay+0x28>
  {
  }
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000008 	.word	0x20000008

0800106c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800107c:	4b0c      	ldr	r3, [pc, #48]	@ (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001088:	4013      	ands	r3, r2
 800108a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001094:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001098:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800109c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109e:	4a04      	ldr	r2, [pc, #16]	@ (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	60d3      	str	r3, [r2, #12]
}
 80010a4:	bf00      	nop
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b8:	4b04      	ldr	r3, [pc, #16]	@ (80010cc <__NVIC_GetPriorityGrouping+0x18>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	0a1b      	lsrs	r3, r3, #8
 80010be:	f003 0307 	and.w	r3, r3, #7
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	6039      	str	r1, [r7, #0]
 80010da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	db0a      	blt.n	80010fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	490c      	ldr	r1, [pc, #48]	@ (800111c <__NVIC_SetPriority+0x4c>)
 80010ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ee:	0112      	lsls	r2, r2, #4
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	440b      	add	r3, r1
 80010f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f8:	e00a      	b.n	8001110 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4908      	ldr	r1, [pc, #32]	@ (8001120 <__NVIC_SetPriority+0x50>)
 8001100:	88fb      	ldrh	r3, [r7, #6]
 8001102:	f003 030f 	and.w	r3, r3, #15
 8001106:	3b04      	subs	r3, #4
 8001108:	0112      	lsls	r2, r2, #4
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	440b      	add	r3, r1
 800110e:	761a      	strb	r2, [r3, #24]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000e100 	.word	0xe000e100
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	@ 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f1c3 0307 	rsb	r3, r3, #7
 800113e:	2b04      	cmp	r3, #4
 8001140:	bf28      	it	cs
 8001142:	2304      	movcs	r3, #4
 8001144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3304      	adds	r3, #4
 800114a:	2b06      	cmp	r3, #6
 800114c:	d902      	bls.n	8001154 <NVIC_EncodePriority+0x30>
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3b03      	subs	r3, #3
 8001152:	e000      	b.n	8001156 <NVIC_EncodePriority+0x32>
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43da      	mvns	r2, r3
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	401a      	ands	r2, r3
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800116c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fa01 f303 	lsl.w	r3, r1, r3
 8001176:	43d9      	mvns	r1, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	4313      	orrs	r3, r2
         );
}
 800117e:	4618      	mov	r0, r3
 8001180:	3724      	adds	r7, #36	@ 0x24
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3b01      	subs	r3, #1
 8001198:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800119c:	d301      	bcc.n	80011a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119e:	2301      	movs	r3, #1
 80011a0:	e00f      	b.n	80011c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011a2:	4a0a      	ldr	r2, [pc, #40]	@ (80011cc <SysTick_Config+0x40>)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011aa:	210f      	movs	r1, #15
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011b0:	f7ff ff8e 	bl	80010d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b4:	4b05      	ldr	r3, [pc, #20]	@ (80011cc <SysTick_Config+0x40>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ba:	4b04      	ldr	r3, [pc, #16]	@ (80011cc <SysTick_Config+0x40>)
 80011bc:	2207      	movs	r2, #7
 80011be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	e000e010 	.word	0xe000e010

080011d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ff47 	bl	800106c <__NVIC_SetPriorityGrouping>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b086      	sub	sp, #24
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	4603      	mov	r3, r0
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	607a      	str	r2, [r7, #4]
 80011f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011f4:	f7ff ff5e 	bl	80010b4 <__NVIC_GetPriorityGrouping>
 80011f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	68b9      	ldr	r1, [r7, #8]
 80011fe:	6978      	ldr	r0, [r7, #20]
 8001200:	f7ff ff90 	bl	8001124 <NVIC_EncodePriority>
 8001204:	4602      	mov	r2, r0
 8001206:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff5f 	bl	80010d0 <__NVIC_SetPriority>
}
 8001212:	bf00      	nop
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ffb2 	bl	800118c <SysTick_Config>
 8001228:	4603      	mov	r3, r0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001234:	b480      	push	{r7}
 8001236:	b089      	sub	sp, #36	@ 0x24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001246:	e1ba      	b.n	80015be <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	2101      	movs	r1, #1
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	fa01 f303 	lsl.w	r3, r1, r3
 8001254:	4013      	ands	r3, r2
 8001256:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 81aa 	beq.w	80015b8 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a55      	ldr	r2, [pc, #340]	@ (80013bc <HAL_GPIO_Init+0x188>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d15d      	bne.n	8001328 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001272:	2201      	movs	r2, #1
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	69fa      	ldr	r2, [r7, #28]
 800127e:	4013      	ands	r3, r2
 8001280:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f003 0201 	and.w	r2, r3, #1
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	69fa      	ldr	r2, [r7, #28]
 8001292:	4313      	orrs	r3, r2
 8001294:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69fa      	ldr	r2, [r7, #28]
 800129a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800129c:	4a48      	ldr	r2, [pc, #288]	@ (80013c0 <HAL_GPIO_Init+0x18c>)
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80012a4:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80012a6:	4a46      	ldr	r2, [pc, #280]	@ (80013c0 <HAL_GPIO_Init+0x18c>)
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	4413      	add	r3, r2
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	08da      	lsrs	r2, r3, #3
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	3208      	adds	r2, #8
 80012ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012be:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	220f      	movs	r2, #15
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69fa      	ldr	r2, [r7, #28]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	f003 0307 	and.w	r3, r3, #7
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	220b      	movs	r2, #11
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	69fa      	ldr	r2, [r7, #28]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	08da      	lsrs	r2, r3, #3
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	3208      	adds	r2, #8
 80012f2:	69f9      	ldr	r1, [r7, #28]
 80012f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	2203      	movs	r2, #3
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	69fa      	ldr	r2, [r7, #28]
 800130c:	4013      	ands	r3, r2
 800130e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	2202      	movs	r2, #2
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	69fa      	ldr	r2, [r7, #28]
 800131c:	4313      	orrs	r3, r2
 800131e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	69fa      	ldr	r2, [r7, #28]
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	e067      	b.n	80013f8 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	2b02      	cmp	r3, #2
 800132e:	d003      	beq.n	8001338 <HAL_GPIO_Init+0x104>
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	2b12      	cmp	r3, #18
 8001336:	d145      	bne.n	80013c4 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	08da      	lsrs	r2, r3, #3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3208      	adds	r2, #8
 8001340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001344:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	f003 0307 	and.w	r3, r3, #7
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	220f      	movs	r2, #15
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	69fa      	ldr	r2, [r7, #28]
 8001358:	4013      	ands	r3, r2
 800135a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	f003 020f 	and.w	r2, r3, #15
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	69fa      	ldr	r2, [r7, #28]
 8001372:	4313      	orrs	r3, r2
 8001374:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	08da      	lsrs	r2, r3, #3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3208      	adds	r2, #8
 800137e:	69f9      	ldr	r1, [r7, #28]
 8001380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	2203      	movs	r2, #3
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	69fa      	ldr	r2, [r7, #28]
 8001398:	4013      	ands	r3, r2
 800139a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0203 	and.w	r2, r3, #3
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	69fa      	ldr	r2, [r7, #28]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	69fa      	ldr	r2, [r7, #28]
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	e01e      	b.n	80013f8 <HAL_GPIO_Init+0x1c4>
 80013ba:	bf00      	nop
 80013bc:	46020000 	.word	0x46020000
 80013c0:	080073f0 	.word	0x080073f0
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	2203      	movs	r2, #3
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69fa      	ldr	r2, [r7, #28]
 80013d8:	4013      	ands	r3, r2
 80013da:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 0203 	and.w	r2, r3, #3
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	69fa      	ldr	r2, [r7, #28]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	69fa      	ldr	r2, [r7, #28]
 80013f6:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d00b      	beq.n	8001418 <HAL_GPIO_Init+0x1e4>
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b02      	cmp	r3, #2
 8001406:	d007      	beq.n	8001418 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800140c:	2b11      	cmp	r3, #17
 800140e:	d003      	beq.n	8001418 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2b12      	cmp	r3, #18
 8001416:	d130      	bne.n	800147a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	2203      	movs	r2, #3
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	69fa      	ldr	r2, [r7, #28]
 800142c:	4013      	ands	r3, r2
 800142e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	68da      	ldr	r2, [r3, #12]
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	69fa      	ldr	r2, [r7, #28]
 800143e:	4313      	orrs	r3, r2
 8001440:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	69fa      	ldr	r2, [r7, #28]
 8001446:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800144e:	2201      	movs	r2, #1
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	69fa      	ldr	r2, [r7, #28]
 800145a:	4013      	ands	r3, r2
 800145c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	091b      	lsrs	r3, r3, #4
 8001464:	f003 0201 	and.w	r2, r3, #1
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	69fa      	ldr	r2, [r7, #28]
 8001470:	4313      	orrs	r3, r2
 8001472:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	69fa      	ldr	r2, [r7, #28]
 8001478:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b03      	cmp	r3, #3
 8001480:	d017      	beq.n	80014b2 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	2203      	movs	r2, #3
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	69fa      	ldr	r2, [r7, #28]
 8001496:	4013      	ands	r3, r2
 8001498:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	689a      	ldr	r2, [r3, #8]
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	69fa      	ldr	r2, [r7, #28]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	69fa      	ldr	r2, [r7, #28]
 80014b0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d07c      	beq.n	80015b8 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80014be:	4a47      	ldr	r2, [pc, #284]	@ (80015dc <HAL_GPIO_Init+0x3a8>)
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	089b      	lsrs	r3, r3, #2
 80014c4:	3318      	adds	r3, #24
 80014c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ca:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	f003 0303 	and.w	r3, r3, #3
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	220f      	movs	r2, #15
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43db      	mvns	r3, r3
 80014dc:	69fa      	ldr	r2, [r7, #28]
 80014de:	4013      	ands	r3, r2
 80014e0:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	0a9a      	lsrs	r2, r3, #10
 80014e6:	4b3e      	ldr	r3, [pc, #248]	@ (80015e0 <HAL_GPIO_Init+0x3ac>)
 80014e8:	4013      	ands	r3, r2
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	f002 0203 	and.w	r2, r2, #3
 80014f0:	00d2      	lsls	r2, r2, #3
 80014f2:	4093      	lsls	r3, r2
 80014f4:	69fa      	ldr	r2, [r7, #28]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80014fa:	4938      	ldr	r1, [pc, #224]	@ (80015dc <HAL_GPIO_Init+0x3a8>)
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	089b      	lsrs	r3, r3, #2
 8001500:	3318      	adds	r3, #24
 8001502:	69fa      	ldr	r2, [r7, #28]
 8001504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001508:	4b34      	ldr	r3, [pc, #208]	@ (80015dc <HAL_GPIO_Init+0x3a8>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	43db      	mvns	r3, r3
 8001512:	69fa      	ldr	r2, [r7, #28]
 8001514:	4013      	ands	r3, r2
 8001516:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d003      	beq.n	800152c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8001524:	69fa      	ldr	r2, [r7, #28]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	4313      	orrs	r3, r2
 800152a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800152c:	4a2b      	ldr	r2, [pc, #172]	@ (80015dc <HAL_GPIO_Init+0x3a8>)
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001532:	4b2a      	ldr	r3, [pc, #168]	@ (80015dc <HAL_GPIO_Init+0x3a8>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	43db      	mvns	r3, r3
 800153c:	69fa      	ldr	r2, [r7, #28]
 800153e:	4013      	ands	r3, r2
 8001540:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800154e:	69fa      	ldr	r2, [r7, #28]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4313      	orrs	r3, r2
 8001554:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8001556:	4a21      	ldr	r2, [pc, #132]	@ (80015dc <HAL_GPIO_Init+0x3a8>)
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800155c:	4b1f      	ldr	r3, [pc, #124]	@ (80015dc <HAL_GPIO_Init+0x3a8>)
 800155e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001562:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	43db      	mvns	r3, r3
 8001568:	69fa      	ldr	r2, [r7, #28]
 800156a:	4013      	ands	r3, r2
 800156c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800157a:	69fa      	ldr	r2, [r7, #28]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4313      	orrs	r3, r2
 8001580:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8001582:	4a16      	ldr	r2, [pc, #88]	@ (80015dc <HAL_GPIO_Init+0x3a8>)
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800158a:	4b14      	ldr	r3, [pc, #80]	@ (80015dc <HAL_GPIO_Init+0x3a8>)
 800158c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001590:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	43db      	mvns	r3, r3
 8001596:	69fa      	ldr	r2, [r7, #28]
 8001598:	4013      	ands	r3, r2
 800159a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d003      	beq.n	80015b0 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80015a8:	69fa      	ldr	r2, [r7, #28]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80015b0:	4a0a      	ldr	r2, [pc, #40]	@ (80015dc <HAL_GPIO_Init+0x3a8>)
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	3301      	adds	r3, #1
 80015bc:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	fa22 f303 	lsr.w	r3, r2, r3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f47f ae3d 	bne.w	8001248 <HAL_GPIO_Init+0x14>
  }
}
 80015ce:	bf00      	nop
 80015d0:	bf00      	nop
 80015d2:	3724      	adds	r7, #36	@ 0x24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	46022000 	.word	0x46022000
 80015e0:	002f7f7f 	.word	0x002f7f7f

080015e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	807b      	strh	r3, [r7, #2]
 80015f0:	4613      	mov	r3, r2
 80015f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015f4:	787b      	ldrb	r3, [r7, #1]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015fa:	887a      	ldrh	r2, [r7, #2]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8001600:	e002      	b.n	8001608 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8001602:	887a      	ldrh	r2, [r7, #2]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800161c:	2300      	movs	r3, #0
 800161e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001620:	4b0b      	ldr	r3, [pc, #44]	@ (8001650 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	2b00      	cmp	r3, #0
 800162a:	d002      	beq.n	8001632 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	73fb      	strb	r3, [r7, #15]
 8001630:	e007      	b.n	8001642 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8001632:	4b07      	ldr	r3, [pc, #28]	@ (8001650 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f023 0204 	bic.w	r2, r3, #4
 800163a:	4905      	ldr	r1, [pc, #20]	@ (8001650 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4313      	orrs	r3, r2
 8001640:	600b      	str	r3, [r1, #0]
  }

  return status;
 8001642:	7bfb      	ldrb	r3, [r7, #15]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	40030400 	.word	0x40030400

08001654 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001658:	4b05      	ldr	r3, [pc, #20]	@ (8001670 <HAL_ICACHE_Enable+0x1c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a04      	ldr	r2, [pc, #16]	@ (8001670 <HAL_ICACHE_Enable+0x1c>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	40030400 	.word	0x40030400

08001674 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800167c:	4b39      	ldr	r3, [pc, #228]	@ (8001764 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800167e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001680:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001684:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	429a      	cmp	r2, r3
 800168c:	d10b      	bne.n	80016a6 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001694:	d905      	bls.n	80016a2 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001696:	4b33      	ldr	r3, [pc, #204]	@ (8001764 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	4a32      	ldr	r2, [pc, #200]	@ (8001764 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800169c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016a0:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80016a2:	2300      	movs	r3, #0
 80016a4:	e057      	b.n	8001756 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016ac:	d90a      	bls.n	80016c4 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80016ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001764 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	4a2a      	ldr	r2, [pc, #168]	@ (8001764 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80016bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016c0:	60d3      	str	r3, [r2, #12]
 80016c2:	e007      	b.n	80016d4 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80016c4:	4b27      	ldr	r3, [pc, #156]	@ (8001764 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80016cc:	4925      	ldr	r1, [pc, #148]	@ (8001764 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80016d4:	4b24      	ldr	r3, [pc, #144]	@ (8001768 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a24      	ldr	r2, [pc, #144]	@ (800176c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80016da:	fba2 2303 	umull	r2, r3, r2, r3
 80016de:	099b      	lsrs	r3, r3, #6
 80016e0:	2232      	movs	r2, #50	@ 0x32
 80016e2:	fb02 f303 	mul.w	r3, r2, r3
 80016e6:	4a21      	ldr	r2, [pc, #132]	@ (800176c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80016e8:	fba2 2303 	umull	r2, r3, r2, r3
 80016ec:	099b      	lsrs	r3, r3, #6
 80016ee:	3301      	adds	r3, #1
 80016f0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80016f2:	e002      	b.n	80016fa <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80016fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001764 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d102      	bne.n	800170c <HAL_PWREx_ControlVoltageScaling+0x98>
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1f3      	bne.n	80016f4 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d01b      	beq.n	800174a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001712:	4b15      	ldr	r3, [pc, #84]	@ (8001768 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a15      	ldr	r2, [pc, #84]	@ (800176c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001718:	fba2 2303 	umull	r2, r3, r2, r3
 800171c:	099b      	lsrs	r3, r3, #6
 800171e:	2232      	movs	r2, #50	@ 0x32
 8001720:	fb02 f303 	mul.w	r3, r2, r3
 8001724:	4a11      	ldr	r2, [pc, #68]	@ (800176c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001726:	fba2 2303 	umull	r2, r3, r2, r3
 800172a:	099b      	lsrs	r3, r3, #6
 800172c:	3301      	adds	r3, #1
 800172e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001730:	e002      	b.n	8001738 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	3b01      	subs	r3, #1
 8001736:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001738:	4b0a      	ldr	r3, [pc, #40]	@ (8001764 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800173a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800173c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d102      	bne.n	800174a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f3      	bne.n	8001732 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e000      	b.n	8001756 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	46020800 	.word	0x46020800
 8001768:	20000000 	.word	0x20000000
 800176c:	10624dd3 	.word	0x10624dd3

08001770 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8001774:	4b04      	ldr	r3, [pc, #16]	@ (8001788 <HAL_PWREx_GetVoltageRange+0x18>)
 8001776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001778:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	46020800 	.word	0x46020800

0800178c <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001794:	4b22      	ldr	r3, [pc, #136]	@ (8001820 <HAL_PWREx_ConfigSupply+0x94>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a22      	ldr	r2, [pc, #136]	@ (8001824 <HAL_PWREx_ConfigSupply+0x98>)
 800179a:	fba2 2303 	umull	r2, r3, r2, r3
 800179e:	099b      	lsrs	r3, r3, #6
 80017a0:	2232      	movs	r2, #50	@ 0x32
 80017a2:	fb02 f303 	mul.w	r3, r2, r3
 80017a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001824 <HAL_PWREx_ConfigSupply+0x98>)
 80017a8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ac:	099b      	lsrs	r3, r3, #6
 80017ae:	3301      	adds	r3, #1
 80017b0:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d113      	bne.n	80017e0 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80017b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001828 <HAL_PWREx_ConfigSupply+0x9c>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	4a1a      	ldr	r2, [pc, #104]	@ (8001828 <HAL_PWREx_ConfigSupply+0x9c>)
 80017be:	f023 0302 	bic.w	r3, r3, #2
 80017c2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80017c4:	e002      	b.n	80017cc <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	3b01      	subs	r3, #1
 80017ca:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80017cc:	4b16      	ldr	r3, [pc, #88]	@ (8001828 <HAL_PWREx_ConfigSupply+0x9c>)
 80017ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d116      	bne.n	8001806 <HAL_PWREx_ConfigSupply+0x7a>
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f3      	bne.n	80017c6 <HAL_PWREx_ConfigSupply+0x3a>
 80017de:	e012      	b.n	8001806 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80017e0:	4b11      	ldr	r3, [pc, #68]	@ (8001828 <HAL_PWREx_ConfigSupply+0x9c>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	4a10      	ldr	r2, [pc, #64]	@ (8001828 <HAL_PWREx_ConfigSupply+0x9c>)
 80017e6:	f043 0302 	orr.w	r3, r3, #2
 80017ea:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80017ec:	e002      	b.n	80017f4 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	3b01      	subs	r3, #1
 80017f2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80017f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001828 <HAL_PWREx_ConfigSupply+0x9c>)
 80017f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d102      	bne.n	8001806 <HAL_PWREx_ConfigSupply+0x7a>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f3      	bne.n	80017ee <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d101      	bne.n	8001810 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e000      	b.n	8001812 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	20000000 	.word	0x20000000
 8001824:	10624dd3 	.word	0x10624dd3
 8001828:	46020800 	.word	0x46020800

0800182c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8001830:	4b05      	ldr	r3, [pc, #20]	@ (8001848 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	4a04      	ldr	r2, [pc, #16]	@ (8001848 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001836:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800183a:	6113      	str	r3, [r2, #16]
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	46020800 	.word	0x46020800

0800184c <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8001850:	4b05      	ldr	r3, [pc, #20]	@ (8001868 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001854:	4a04      	ldr	r2, [pc, #16]	@ (8001868 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	46020800 	.word	0x46020800

0800186c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08e      	sub	sp, #56	@ 0x38
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8001874:	2300      	movs	r3, #0
 8001876:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d102      	bne.n	8001886 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	f000 bec8 	b.w	8002616 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001886:	4b99      	ldr	r3, [pc, #612]	@ (8001aec <HAL_RCC_OscConfig+0x280>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	f003 030c 	and.w	r3, r3, #12
 800188e:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001890:	4b96      	ldr	r3, [pc, #600]	@ (8001aec <HAL_RCC_OscConfig+0x280>)
 8001892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001894:	f003 0303 	and.w	r3, r3, #3
 8001898:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0310 	and.w	r3, r3, #16
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f000 816c 	beq.w	8001b80 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80018a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d007      	beq.n	80018be <HAL_RCC_OscConfig+0x52>
 80018ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018b0:	2b0c      	cmp	r3, #12
 80018b2:	f040 80de 	bne.w	8001a72 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	f040 80da 	bne.w	8001a72 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d102      	bne.n	80018cc <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	f000 bea5 	b.w	8002616 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018d0:	4b86      	ldr	r3, [pc, #536]	@ (8001aec <HAL_RCC_OscConfig+0x280>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d004      	beq.n	80018e6 <HAL_RCC_OscConfig+0x7a>
 80018dc:	4b83      	ldr	r3, [pc, #524]	@ (8001aec <HAL_RCC_OscConfig+0x280>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80018e4:	e005      	b.n	80018f2 <HAL_RCC_OscConfig+0x86>
 80018e6:	4b81      	ldr	r3, [pc, #516]	@ (8001aec <HAL_RCC_OscConfig+0x280>)
 80018e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018ec:	041b      	lsls	r3, r3, #16
 80018ee:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d255      	bcs.n	80019a2 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80018f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d10a      	bne.n	8001912 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001900:	4618      	mov	r0, r3
 8001902:	f001 f9df 	bl	8002cc4 <RCC_SetFlashLatencyFromMSIRange>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d002      	beq.n	8001912 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	f000 be82 	b.w	8002616 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001912:	4b76      	ldr	r3, [pc, #472]	@ (8001aec <HAL_RCC_OscConfig+0x280>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	4a75      	ldr	r2, [pc, #468]	@ (8001aec <HAL_RCC_OscConfig+0x280>)
 8001918:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800191c:	6093      	str	r3, [r2, #8]
 800191e:	4b73      	ldr	r3, [pc, #460]	@ (8001aec <HAL_RCC_OscConfig+0x280>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800192a:	4970      	ldr	r1, [pc, #448]	@ (8001aec <HAL_RCC_OscConfig+0x280>)
 800192c:	4313      	orrs	r3, r2
 800192e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001934:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001938:	d309      	bcc.n	800194e <HAL_RCC_OscConfig+0xe2>
 800193a:	4b6c      	ldr	r3, [pc, #432]	@ (8001aec <HAL_RCC_OscConfig+0x280>)
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	f023 021f 	bic.w	r2, r3, #31
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a1b      	ldr	r3, [r3, #32]
 8001946:	4969      	ldr	r1, [pc, #420]	@ (8001aec <HAL_RCC_OscConfig+0x280>)
 8001948:	4313      	orrs	r3, r2
 800194a:	60cb      	str	r3, [r1, #12]
 800194c:	e07e      	b.n	8001a4c <HAL_RCC_OscConfig+0x1e0>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001952:	2b00      	cmp	r3, #0
 8001954:	da0a      	bge.n	800196c <HAL_RCC_OscConfig+0x100>
 8001956:	4b65      	ldr	r3, [pc, #404]	@ (8001aec <HAL_RCC_OscConfig+0x280>)
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a1b      	ldr	r3, [r3, #32]
 8001962:	015b      	lsls	r3, r3, #5
 8001964:	4961      	ldr	r1, [pc, #388]	@ (8001aec <HAL_RCC_OscConfig+0x280>)
 8001966:	4313      	orrs	r3, r2
 8001968:	60cb      	str	r3, [r1, #12]
 800196a:	e06f      	b.n	8001a4c <HAL_RCC_OscConfig+0x1e0>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001970:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001974:	d30a      	bcc.n	800198c <HAL_RCC_OscConfig+0x120>
 8001976:	4b5d      	ldr	r3, [pc, #372]	@ (8001aec <HAL_RCC_OscConfig+0x280>)
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a1b      	ldr	r3, [r3, #32]
 8001982:	029b      	lsls	r3, r3, #10
 8001984:	4959      	ldr	r1, [pc, #356]	@ (8001aec <HAL_RCC_OscConfig+0x280>)
 8001986:	4313      	orrs	r3, r2
 8001988:	60cb      	str	r3, [r1, #12]
 800198a:	e05f      	b.n	8001a4c <HAL_RCC_OscConfig+0x1e0>
 800198c:	4b57      	ldr	r3, [pc, #348]	@ (8001aec <HAL_RCC_OscConfig+0x280>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	03db      	lsls	r3, r3, #15
 800199a:	4954      	ldr	r1, [pc, #336]	@ (8001aec <HAL_RCC_OscConfig+0x280>)
 800199c:	4313      	orrs	r3, r2
 800199e:	60cb      	str	r3, [r1, #12]
 80019a0:	e054      	b.n	8001a4c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80019a2:	4b52      	ldr	r3, [pc, #328]	@ (8001aec <HAL_RCC_OscConfig+0x280>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	4a51      	ldr	r2, [pc, #324]	@ (8001aec <HAL_RCC_OscConfig+0x280>)
 80019a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80019ac:	6093      	str	r3, [r2, #8]
 80019ae:	4b4f      	ldr	r3, [pc, #316]	@ (8001aec <HAL_RCC_OscConfig+0x280>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ba:	494c      	ldr	r1, [pc, #304]	@ (8001aec <HAL_RCC_OscConfig+0x280>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80019c8:	d309      	bcc.n	80019de <HAL_RCC_OscConfig+0x172>
 80019ca:	4b48      	ldr	r3, [pc, #288]	@ (8001aec <HAL_RCC_OscConfig+0x280>)
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	f023 021f 	bic.w	r2, r3, #31
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	4945      	ldr	r1, [pc, #276]	@ (8001aec <HAL_RCC_OscConfig+0x280>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	60cb      	str	r3, [r1, #12]
 80019dc:	e028      	b.n	8001a30 <HAL_RCC_OscConfig+0x1c4>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	da0a      	bge.n	80019fc <HAL_RCC_OscConfig+0x190>
 80019e6:	4b41      	ldr	r3, [pc, #260]	@ (8001aec <HAL_RCC_OscConfig+0x280>)
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	015b      	lsls	r3, r3, #5
 80019f4:	493d      	ldr	r1, [pc, #244]	@ (8001aec <HAL_RCC_OscConfig+0x280>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	60cb      	str	r3, [r1, #12]
 80019fa:	e019      	b.n	8001a30 <HAL_RCC_OscConfig+0x1c4>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a04:	d30a      	bcc.n	8001a1c <HAL_RCC_OscConfig+0x1b0>
 8001a06:	4b39      	ldr	r3, [pc, #228]	@ (8001aec <HAL_RCC_OscConfig+0x280>)
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	029b      	lsls	r3, r3, #10
 8001a14:	4935      	ldr	r1, [pc, #212]	@ (8001aec <HAL_RCC_OscConfig+0x280>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	60cb      	str	r3, [r1, #12]
 8001a1a:	e009      	b.n	8001a30 <HAL_RCC_OscConfig+0x1c4>
 8001a1c:	4b33      	ldr	r3, [pc, #204]	@ (8001aec <HAL_RCC_OscConfig+0x280>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	03db      	lsls	r3, r3, #15
 8001a2a:	4930      	ldr	r1, [pc, #192]	@ (8001aec <HAL_RCC_OscConfig+0x280>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10a      	bne.n	8001a4c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f001 f942 	bl	8002cc4 <RCC_SetFlashLatencyFromMSIRange>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d002      	beq.n	8001a4c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	f000 bde5 	b.w	8002616 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8001a4c:	f001 f8e4 	bl	8002c18 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a50:	4b27      	ldr	r3, [pc, #156]	@ (8001af0 <HAL_RCC_OscConfig+0x284>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff fa8f 	bl	8000f78 <HAL_InitTick>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8001a60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 808a 	beq.w	8001b7e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8001a6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001a6e:	f000 bdd2 	b.w	8002616 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d066      	beq.n	8001b48 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8001a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001aec <HAL_RCC_OscConfig+0x280>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a1b      	ldr	r2, [pc, #108]	@ (8001aec <HAL_RCC_OscConfig+0x280>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001a86:	f7ff fac1 	bl	800100c <HAL_GetTick>
 8001a8a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001a8c:	e009      	b.n	8001aa2 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a8e:	f7ff fabd 	bl	800100c <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d902      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	f000 bdba 	b.w	8002616 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001aa2:	4b12      	ldr	r3, [pc, #72]	@ (8001aec <HAL_RCC_OscConfig+0x280>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0304 	and.w	r3, r3, #4
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0ef      	beq.n	8001a8e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001aae:	4b0f      	ldr	r3, [pc, #60]	@ (8001aec <HAL_RCC_OscConfig+0x280>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	4a0e      	ldr	r2, [pc, #56]	@ (8001aec <HAL_RCC_OscConfig+0x280>)
 8001ab4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ab8:	6093      	str	r3, [r2, #8]
 8001aba:	4b0c      	ldr	r3, [pc, #48]	@ (8001aec <HAL_RCC_OscConfig+0x280>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac6:	4909      	ldr	r1, [pc, #36]	@ (8001aec <HAL_RCC_OscConfig+0x280>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001ad4:	d30e      	bcc.n	8001af4 <HAL_RCC_OscConfig+0x288>
 8001ad6:	4b05      	ldr	r3, [pc, #20]	@ (8001aec <HAL_RCC_OscConfig+0x280>)
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	f023 021f 	bic.w	r2, r3, #31
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	4902      	ldr	r1, [pc, #8]	@ (8001aec <HAL_RCC_OscConfig+0x280>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	60cb      	str	r3, [r1, #12]
 8001ae8:	e04a      	b.n	8001b80 <HAL_RCC_OscConfig+0x314>
 8001aea:	bf00      	nop
 8001aec:	46020c00 	.word	0x46020c00
 8001af0:	20000004 	.word	0x20000004
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	da0a      	bge.n	8001b12 <HAL_RCC_OscConfig+0x2a6>
 8001afc:	4b98      	ldr	r3, [pc, #608]	@ (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	015b      	lsls	r3, r3, #5
 8001b0a:	4995      	ldr	r1, [pc, #596]	@ (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	60cb      	str	r3, [r1, #12]
 8001b10:	e036      	b.n	8001b80 <HAL_RCC_OscConfig+0x314>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b1a:	d30a      	bcc.n	8001b32 <HAL_RCC_OscConfig+0x2c6>
 8001b1c:	4b90      	ldr	r3, [pc, #576]	@ (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	029b      	lsls	r3, r3, #10
 8001b2a:	498d      	ldr	r1, [pc, #564]	@ (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	60cb      	str	r3, [r1, #12]
 8001b30:	e026      	b.n	8001b80 <HAL_RCC_OscConfig+0x314>
 8001b32:	4b8b      	ldr	r3, [pc, #556]	@ (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
 8001b3e:	03db      	lsls	r3, r3, #15
 8001b40:	4987      	ldr	r1, [pc, #540]	@ (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	60cb      	str	r3, [r1, #12]
 8001b46:	e01b      	b.n	8001b80 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8001b48:	4b85      	ldr	r3, [pc, #532]	@ (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a84      	ldr	r2, [pc, #528]	@ (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001b4e:	f023 0301 	bic.w	r3, r3, #1
 8001b52:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001b54:	f7ff fa5a 	bl	800100c <HAL_GetTick>
 8001b58:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001b5a:	e009      	b.n	8001b70 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b5c:	f7ff fa56 	bl	800100c <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d902      	bls.n	8001b70 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	f000 bd53 	b.w	8002616 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001b70:	4b7b      	ldr	r3, [pc, #492]	@ (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1ef      	bne.n	8001b5c <HAL_RCC_OscConfig+0x2f0>
 8001b7c:	e000      	b.n	8001b80 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001b7e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 808b 	beq.w	8001ca4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d005      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x334>
 8001b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b96:	2b0c      	cmp	r3, #12
 8001b98:	d109      	bne.n	8001bae <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b9c:	2b03      	cmp	r3, #3
 8001b9e:	d106      	bne.n	8001bae <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d17d      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	f000 bd34 	b.w	8002616 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bb6:	d106      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x35a>
 8001bb8:	4b69      	ldr	r3, [pc, #420]	@ (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a68      	ldr	r2, [pc, #416]	@ (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001bbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bc2:	6013      	str	r3, [r2, #0]
 8001bc4:	e041      	b.n	8001c4a <HAL_RCC_OscConfig+0x3de>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bce:	d112      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x38a>
 8001bd0:	4b63      	ldr	r3, [pc, #396]	@ (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a62      	ldr	r2, [pc, #392]	@ (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001bd6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bda:	6013      	str	r3, [r2, #0]
 8001bdc:	4b60      	ldr	r3, [pc, #384]	@ (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a5f      	ldr	r2, [pc, #380]	@ (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001be2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001be6:	6013      	str	r3, [r2, #0]
 8001be8:	4b5d      	ldr	r3, [pc, #372]	@ (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a5c      	ldr	r2, [pc, #368]	@ (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001bee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	e029      	b.n	8001c4a <HAL_RCC_OscConfig+0x3de>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001bfe:	d112      	bne.n	8001c26 <HAL_RCC_OscConfig+0x3ba>
 8001c00:	4b57      	ldr	r3, [pc, #348]	@ (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a56      	ldr	r2, [pc, #344]	@ (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001c06:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c0a:	6013      	str	r3, [r2, #0]
 8001c0c:	4b54      	ldr	r3, [pc, #336]	@ (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a53      	ldr	r2, [pc, #332]	@ (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001c12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	4b51      	ldr	r3, [pc, #324]	@ (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a50      	ldr	r2, [pc, #320]	@ (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001c1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	e011      	b.n	8001c4a <HAL_RCC_OscConfig+0x3de>
 8001c26:	4b4e      	ldr	r3, [pc, #312]	@ (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a4d      	ldr	r2, [pc, #308]	@ (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001c2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	4b4b      	ldr	r3, [pc, #300]	@ (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a4a      	ldr	r2, [pc, #296]	@ (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001c38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	4b48      	ldr	r3, [pc, #288]	@ (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a47      	ldr	r2, [pc, #284]	@ (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001c44:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001c48:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d014      	beq.n	8001c7c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8001c52:	f7ff f9db 	bl	800100c <HAL_GetTick>
 8001c56:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c58:	e009      	b.n	8001c6e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c5a:	f7ff f9d7 	bl	800100c <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b64      	cmp	r3, #100	@ 0x64
 8001c66:	d902      	bls.n	8001c6e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	f000 bcd4 	b.w	8002616 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c6e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0ef      	beq.n	8001c5a <HAL_RCC_OscConfig+0x3ee>
 8001c7a:	e013      	b.n	8001ca4 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8001c7c:	f7ff f9c6 	bl	800100c <HAL_GetTick>
 8001c80:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c82:	e009      	b.n	8001c98 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c84:	f7ff f9c2 	bl	800100c <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b64      	cmp	r3, #100	@ 0x64
 8001c90:	d902      	bls.n	8001c98 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	f000 bcbf 	b.w	8002616 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c98:	4b31      	ldr	r3, [pc, #196]	@ (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1ef      	bne.n	8001c84 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d05f      	beq.n	8001d70 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d005      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x456>
 8001cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cb8:	2b0c      	cmp	r3, #12
 8001cba:	d114      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d111      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d102      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	f000 bca3 	b.w	8002616 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001cd0:	4b23      	ldr	r3, [pc, #140]	@ (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	041b      	lsls	r3, r3, #16
 8001cde:	4920      	ldr	r1, [pc, #128]	@ (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001ce4:	e044      	b.n	8001d70 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d024      	beq.n	8001d38 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8001cee:	4b1c      	ldr	r3, [pc, #112]	@ (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a1b      	ldr	r2, [pc, #108]	@ (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001cf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cf8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001cfa:	f7ff f987 	bl	800100c <HAL_GetTick>
 8001cfe:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d00:	e009      	b.n	8001d16 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d02:	f7ff f983 	bl	800100c <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d902      	bls.n	8001d16 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	f000 bc80 	b.w	8002616 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d16:	4b12      	ldr	r3, [pc, #72]	@ (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0ef      	beq.n	8001d02 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001d22:	4b0f      	ldr	r3, [pc, #60]	@ (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	041b      	lsls	r3, r3, #16
 8001d30:	490b      	ldr	r1, [pc, #44]	@ (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	610b      	str	r3, [r1, #16]
 8001d36:	e01b      	b.n	8001d70 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8001d38:	4b09      	ldr	r3, [pc, #36]	@ (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a08      	ldr	r2, [pc, #32]	@ (8001d60 <HAL_RCC_OscConfig+0x4f4>)
 8001d3e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d42:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001d44:	f7ff f962 	bl	800100c <HAL_GetTick>
 8001d48:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d4a:	e00b      	b.n	8001d64 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d4c:	f7ff f95e 	bl	800100c <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d904      	bls.n	8001d64 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	f000 bc5b 	b.w	8002616 <HAL_RCC_OscConfig+0xdaa>
 8001d60:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d64:	4baf      	ldr	r3, [pc, #700]	@ (8002024 <HAL_RCC_OscConfig+0x7b8>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1ed      	bne.n	8001d4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0308 	and.w	r3, r3, #8
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f000 80c8 	beq.w	8001f0e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d84:	4ba7      	ldr	r3, [pc, #668]	@ (8002024 <HAL_RCC_OscConfig+0x7b8>)
 8001d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d8a:	f003 0304 	and.w	r3, r3, #4
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d111      	bne.n	8001db6 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d92:	4ba4      	ldr	r3, [pc, #656]	@ (8002024 <HAL_RCC_OscConfig+0x7b8>)
 8001d94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d98:	4aa2      	ldr	r2, [pc, #648]	@ (8002024 <HAL_RCC_OscConfig+0x7b8>)
 8001d9a:	f043 0304 	orr.w	r3, r3, #4
 8001d9e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001da2:	4ba0      	ldr	r3, [pc, #640]	@ (8002024 <HAL_RCC_OscConfig+0x7b8>)
 8001da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8001db0:	2301      	movs	r3, #1
 8001db2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001db6:	4b9c      	ldr	r3, [pc, #624]	@ (8002028 <HAL_RCC_OscConfig+0x7bc>)
 8001db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d119      	bne.n	8001df6 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001dc2:	4b99      	ldr	r3, [pc, #612]	@ (8002028 <HAL_RCC_OscConfig+0x7bc>)
 8001dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc6:	4a98      	ldr	r2, [pc, #608]	@ (8002028 <HAL_RCC_OscConfig+0x7bc>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dce:	f7ff f91d 	bl	800100c <HAL_GetTick>
 8001dd2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001dd4:	e009      	b.n	8001dea <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd6:	f7ff f919 	bl	800100c <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d902      	bls.n	8001dea <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	f000 bc16 	b.w	8002616 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001dea:	4b8f      	ldr	r3, [pc, #572]	@ (8002028 <HAL_RCC_OscConfig+0x7bc>)
 8001dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0ef      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d05f      	beq.n	8001ebe <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8001dfe:	4b89      	ldr	r3, [pc, #548]	@ (8002024 <HAL_RCC_OscConfig+0x7b8>)
 8001e00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e04:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	699a      	ldr	r2, [r3, #24]
 8001e0a:	6a3b      	ldr	r3, [r7, #32]
 8001e0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d037      	beq.n	8001e84 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001e14:	6a3b      	ldr	r3, [r7, #32]
 8001e16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d006      	beq.n	8001e2c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e3f4      	b.n	8002616 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d01b      	beq.n	8001e6e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8001e36:	4b7b      	ldr	r3, [pc, #492]	@ (8002024 <HAL_RCC_OscConfig+0x7b8>)
 8001e38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e3c:	4a79      	ldr	r2, [pc, #484]	@ (8002024 <HAL_RCC_OscConfig+0x7b8>)
 8001e3e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8001e42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8001e46:	f7ff f8e1 	bl	800100c <HAL_GetTick>
 8001e4a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e4e:	f7ff f8dd 	bl	800100c <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b05      	cmp	r3, #5
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e3da      	b.n	8002616 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001e60:	4b70      	ldr	r3, [pc, #448]	@ (8002024 <HAL_RCC_OscConfig+0x7b8>)
 8001e62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1ef      	bne.n	8001e4e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8001e6e:	4b6d      	ldr	r3, [pc, #436]	@ (8002024 <HAL_RCC_OscConfig+0x7b8>)
 8001e70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e74:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	4969      	ldr	r1, [pc, #420]	@ (8002024 <HAL_RCC_OscConfig+0x7b8>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8001e84:	4b67      	ldr	r3, [pc, #412]	@ (8002024 <HAL_RCC_OscConfig+0x7b8>)
 8001e86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e8a:	4a66      	ldr	r2, [pc, #408]	@ (8002024 <HAL_RCC_OscConfig+0x7b8>)
 8001e8c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001e90:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8001e94:	f7ff f8ba 	bl	800100c <HAL_GetTick>
 8001e98:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e9c:	f7ff f8b6 	bl	800100c <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b05      	cmp	r3, #5
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e3b3      	b.n	8002616 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001eae:	4b5d      	ldr	r3, [pc, #372]	@ (8002024 <HAL_RCC_OscConfig+0x7b8>)
 8001eb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001eb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0ef      	beq.n	8001e9c <HAL_RCC_OscConfig+0x630>
 8001ebc:	e01b      	b.n	8001ef6 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8001ebe:	4b59      	ldr	r3, [pc, #356]	@ (8002024 <HAL_RCC_OscConfig+0x7b8>)
 8001ec0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ec4:	4a57      	ldr	r2, [pc, #348]	@ (8002024 <HAL_RCC_OscConfig+0x7b8>)
 8001ec6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8001eca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8001ece:	f7ff f89d 	bl	800100c <HAL_GetTick>
 8001ed2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed6:	f7ff f899 	bl	800100c <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b05      	cmp	r3, #5
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e396      	b.n	8002616 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001ee8:	4b4e      	ldr	r3, [pc, #312]	@ (8002024 <HAL_RCC_OscConfig+0x7b8>)
 8001eea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001eee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1ef      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ef6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d107      	bne.n	8001f0e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001efe:	4b49      	ldr	r3, [pc, #292]	@ (8002024 <HAL_RCC_OscConfig+0x7b8>)
 8001f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f04:	4a47      	ldr	r2, [pc, #284]	@ (8002024 <HAL_RCC_OscConfig+0x7b8>)
 8001f06:	f023 0304 	bic.w	r3, r3, #4
 8001f0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0304 	and.w	r3, r3, #4
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 8111 	beq.w	800213e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f22:	4b40      	ldr	r3, [pc, #256]	@ (8002024 <HAL_RCC_OscConfig+0x7b8>)
 8001f24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d111      	bne.n	8001f54 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f30:	4b3c      	ldr	r3, [pc, #240]	@ (8002024 <HAL_RCC_OscConfig+0x7b8>)
 8001f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f36:	4a3b      	ldr	r2, [pc, #236]	@ (8002024 <HAL_RCC_OscConfig+0x7b8>)
 8001f38:	f043 0304 	orr.w	r3, r3, #4
 8001f3c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001f40:	4b38      	ldr	r3, [pc, #224]	@ (8002024 <HAL_RCC_OscConfig+0x7b8>)
 8001f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f46:	f003 0304 	and.w	r3, r3, #4
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001f54:	4b34      	ldr	r3, [pc, #208]	@ (8002028 <HAL_RCC_OscConfig+0x7bc>)
 8001f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d118      	bne.n	8001f92 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001f60:	4b31      	ldr	r3, [pc, #196]	@ (8002028 <HAL_RCC_OscConfig+0x7bc>)
 8001f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f64:	4a30      	ldr	r2, [pc, #192]	@ (8002028 <HAL_RCC_OscConfig+0x7bc>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f6c:	f7ff f84e 	bl	800100c <HAL_GetTick>
 8001f70:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f74:	f7ff f84a 	bl	800100c <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e347      	b.n	8002616 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001f86:	4b28      	ldr	r3, [pc, #160]	@ (8002028 <HAL_RCC_OscConfig+0x7bc>)
 8001f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0f0      	beq.n	8001f74 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d01f      	beq.n	8001fde <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d010      	beq.n	8001fcc <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001faa:	4b1e      	ldr	r3, [pc, #120]	@ (8002024 <HAL_RCC_OscConfig+0x7b8>)
 8001fac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fb0:	4a1c      	ldr	r2, [pc, #112]	@ (8002024 <HAL_RCC_OscConfig+0x7b8>)
 8001fb2:	f043 0304 	orr.w	r3, r3, #4
 8001fb6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001fba:	4b1a      	ldr	r3, [pc, #104]	@ (8002024 <HAL_RCC_OscConfig+0x7b8>)
 8001fbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fc0:	4a18      	ldr	r2, [pc, #96]	@ (8002024 <HAL_RCC_OscConfig+0x7b8>)
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001fca:	e018      	b.n	8001ffe <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001fcc:	4b15      	ldr	r3, [pc, #84]	@ (8002024 <HAL_RCC_OscConfig+0x7b8>)
 8001fce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fd2:	4a14      	ldr	r2, [pc, #80]	@ (8002024 <HAL_RCC_OscConfig+0x7b8>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001fdc:	e00f      	b.n	8001ffe <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001fde:	4b11      	ldr	r3, [pc, #68]	@ (8002024 <HAL_RCC_OscConfig+0x7b8>)
 8001fe0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fe4:	4a0f      	ldr	r2, [pc, #60]	@ (8002024 <HAL_RCC_OscConfig+0x7b8>)
 8001fe6:	f023 0301 	bic.w	r3, r3, #1
 8001fea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001fee:	4b0d      	ldr	r3, [pc, #52]	@ (8002024 <HAL_RCC_OscConfig+0x7b8>)
 8001ff0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ff4:	4a0b      	ldr	r2, [pc, #44]	@ (8002024 <HAL_RCC_OscConfig+0x7b8>)
 8001ff6:	f023 0304 	bic.w	r3, r3, #4
 8001ffa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d057      	beq.n	80020b6 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8002006:	f7ff f801 	bl	800100c <HAL_GetTick>
 800200a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800200c:	e00e      	b.n	800202c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800200e:	f7fe fffd 	bl	800100c <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	f241 3288 	movw	r2, #5000	@ 0x1388
 800201c:	4293      	cmp	r3, r2
 800201e:	d905      	bls.n	800202c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e2f8      	b.n	8002616 <HAL_RCC_OscConfig+0xdaa>
 8002024:	46020c00 	.word	0x46020c00
 8002028:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800202c:	4b9c      	ldr	r3, [pc, #624]	@ (80022a0 <HAL_RCC_OscConfig+0xa34>)
 800202e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0e9      	beq.n	800200e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002042:	2b00      	cmp	r3, #0
 8002044:	d01b      	beq.n	800207e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002046:	4b96      	ldr	r3, [pc, #600]	@ (80022a0 <HAL_RCC_OscConfig+0xa34>)
 8002048:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800204c:	4a94      	ldr	r2, [pc, #592]	@ (80022a0 <HAL_RCC_OscConfig+0xa34>)
 800204e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002052:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002056:	e00a      	b.n	800206e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002058:	f7fe ffd8 	bl	800100c <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002066:	4293      	cmp	r3, r2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e2d3      	b.n	8002616 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800206e:	4b8c      	ldr	r3, [pc, #560]	@ (80022a0 <HAL_RCC_OscConfig+0xa34>)
 8002070:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002074:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0ed      	beq.n	8002058 <HAL_RCC_OscConfig+0x7ec>
 800207c:	e053      	b.n	8002126 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800207e:	4b88      	ldr	r3, [pc, #544]	@ (80022a0 <HAL_RCC_OscConfig+0xa34>)
 8002080:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002084:	4a86      	ldr	r2, [pc, #536]	@ (80022a0 <HAL_RCC_OscConfig+0xa34>)
 8002086:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800208a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800208e:	e00a      	b.n	80020a6 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002090:	f7fe ffbc 	bl	800100c <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800209e:	4293      	cmp	r3, r2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e2b7      	b.n	8002616 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80020a6:	4b7e      	ldr	r3, [pc, #504]	@ (80022a0 <HAL_RCC_OscConfig+0xa34>)
 80020a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1ed      	bne.n	8002090 <HAL_RCC_OscConfig+0x824>
 80020b4:	e037      	b.n	8002126 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80020b6:	f7fe ffa9 	bl	800100c <HAL_GetTick>
 80020ba:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020bc:	e00a      	b.n	80020d4 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020be:	f7fe ffa5 	bl	800100c <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e2a0      	b.n	8002616 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020d4:	4b72      	ldr	r3, [pc, #456]	@ (80022a0 <HAL_RCC_OscConfig+0xa34>)
 80020d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1ed      	bne.n	80020be <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80020e2:	4b6f      	ldr	r3, [pc, #444]	@ (80022a0 <HAL_RCC_OscConfig+0xa34>)
 80020e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d01a      	beq.n	8002126 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80020f0:	4b6b      	ldr	r3, [pc, #428]	@ (80022a0 <HAL_RCC_OscConfig+0xa34>)
 80020f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020f6:	4a6a      	ldr	r2, [pc, #424]	@ (80022a0 <HAL_RCC_OscConfig+0xa34>)
 80020f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80020fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002100:	e00a      	b.n	8002118 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002102:	f7fe ff83 	bl	800100c <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002110:	4293      	cmp	r3, r2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e27e      	b.n	8002616 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002118:	4b61      	ldr	r3, [pc, #388]	@ (80022a0 <HAL_RCC_OscConfig+0xa34>)
 800211a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800211e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1ed      	bne.n	8002102 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002126:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800212a:	2b01      	cmp	r3, #1
 800212c:	d107      	bne.n	800213e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800212e:	4b5c      	ldr	r3, [pc, #368]	@ (80022a0 <HAL_RCC_OscConfig+0xa34>)
 8002130:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002134:	4a5a      	ldr	r2, [pc, #360]	@ (80022a0 <HAL_RCC_OscConfig+0xa34>)
 8002136:	f023 0304 	bic.w	r3, r3, #4
 800213a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0320 	and.w	r3, r3, #32
 8002146:	2b00      	cmp	r3, #0
 8002148:	d036      	beq.n	80021b8 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800214e:	2b00      	cmp	r3, #0
 8002150:	d019      	beq.n	8002186 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8002152:	4b53      	ldr	r3, [pc, #332]	@ (80022a0 <HAL_RCC_OscConfig+0xa34>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a52      	ldr	r2, [pc, #328]	@ (80022a0 <HAL_RCC_OscConfig+0xa34>)
 8002158:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800215c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800215e:	f7fe ff55 	bl	800100c <HAL_GetTick>
 8002162:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002166:	f7fe ff51 	bl	800100c <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e24e      	b.n	8002616 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002178:	4b49      	ldr	r3, [pc, #292]	@ (80022a0 <HAL_RCC_OscConfig+0xa34>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0f0      	beq.n	8002166 <HAL_RCC_OscConfig+0x8fa>
 8002184:	e018      	b.n	80021b8 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8002186:	4b46      	ldr	r3, [pc, #280]	@ (80022a0 <HAL_RCC_OscConfig+0xa34>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a45      	ldr	r2, [pc, #276]	@ (80022a0 <HAL_RCC_OscConfig+0xa34>)
 800218c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002190:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002192:	f7fe ff3b 	bl	800100c <HAL_GetTick>
 8002196:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800219a:	f7fe ff37 	bl	800100c <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e234      	b.n	8002616 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80021ac:	4b3c      	ldr	r3, [pc, #240]	@ (80022a0 <HAL_RCC_OscConfig+0xa34>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1f0      	bne.n	800219a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d036      	beq.n	8002232 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d019      	beq.n	8002200 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80021cc:	4b34      	ldr	r3, [pc, #208]	@ (80022a0 <HAL_RCC_OscConfig+0xa34>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a33      	ldr	r2, [pc, #204]	@ (80022a0 <HAL_RCC_OscConfig+0xa34>)
 80021d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021d6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80021d8:	f7fe ff18 	bl	800100c <HAL_GetTick>
 80021dc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80021e0:	f7fe ff14 	bl	800100c <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e211      	b.n	8002616 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80021f2:	4b2b      	ldr	r3, [pc, #172]	@ (80022a0 <HAL_RCC_OscConfig+0xa34>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0f0      	beq.n	80021e0 <HAL_RCC_OscConfig+0x974>
 80021fe:	e018      	b.n	8002232 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8002200:	4b27      	ldr	r3, [pc, #156]	@ (80022a0 <HAL_RCC_OscConfig+0xa34>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a26      	ldr	r2, [pc, #152]	@ (80022a0 <HAL_RCC_OscConfig+0xa34>)
 8002206:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800220a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800220c:	f7fe fefe 	bl	800100c <HAL_GetTick>
 8002210:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002214:	f7fe fefa 	bl	800100c <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e1f7      	b.n	8002616 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002226:	4b1e      	ldr	r3, [pc, #120]	@ (80022a0 <HAL_RCC_OscConfig+0xa34>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f0      	bne.n	8002214 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800223a:	2b00      	cmp	r3, #0
 800223c:	d07f      	beq.n	800233e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002242:	2b00      	cmp	r3, #0
 8002244:	d062      	beq.n	800230c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002246:	4b16      	ldr	r3, [pc, #88]	@ (80022a0 <HAL_RCC_OscConfig+0xa34>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	4a15      	ldr	r2, [pc, #84]	@ (80022a0 <HAL_RCC_OscConfig+0xa34>)
 800224c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002250:	6093      	str	r3, [r2, #8]
 8002252:	4b13      	ldr	r3, [pc, #76]	@ (80022a0 <HAL_RCC_OscConfig+0xa34>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800225e:	4910      	ldr	r1, [pc, #64]	@ (80022a0 <HAL_RCC_OscConfig+0xa34>)
 8002260:	4313      	orrs	r3, r2
 8002262:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002268:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800226c:	d309      	bcc.n	8002282 <HAL_RCC_OscConfig+0xa16>
 800226e:	4b0c      	ldr	r3, [pc, #48]	@ (80022a0 <HAL_RCC_OscConfig+0xa34>)
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	f023 021f 	bic.w	r2, r3, #31
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	4909      	ldr	r1, [pc, #36]	@ (80022a0 <HAL_RCC_OscConfig+0xa34>)
 800227c:	4313      	orrs	r3, r2
 800227e:	60cb      	str	r3, [r1, #12]
 8002280:	e02a      	b.n	80022d8 <HAL_RCC_OscConfig+0xa6c>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002286:	2b00      	cmp	r3, #0
 8002288:	da0c      	bge.n	80022a4 <HAL_RCC_OscConfig+0xa38>
 800228a:	4b05      	ldr	r3, [pc, #20]	@ (80022a0 <HAL_RCC_OscConfig+0xa34>)
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	015b      	lsls	r3, r3, #5
 8002298:	4901      	ldr	r1, [pc, #4]	@ (80022a0 <HAL_RCC_OscConfig+0xa34>)
 800229a:	4313      	orrs	r3, r2
 800229c:	60cb      	str	r3, [r1, #12]
 800229e:	e01b      	b.n	80022d8 <HAL_RCC_OscConfig+0xa6c>
 80022a0:	46020c00 	.word	0x46020c00
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022ac:	d30a      	bcc.n	80022c4 <HAL_RCC_OscConfig+0xa58>
 80022ae:	4ba1      	ldr	r3, [pc, #644]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	029b      	lsls	r3, r3, #10
 80022bc:	499d      	ldr	r1, [pc, #628]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	60cb      	str	r3, [r1, #12]
 80022c2:	e009      	b.n	80022d8 <HAL_RCC_OscConfig+0xa6c>
 80022c4:	4b9b      	ldr	r3, [pc, #620]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	03db      	lsls	r3, r3, #15
 80022d2:	4998      	ldr	r1, [pc, #608]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80022d8:	4b96      	ldr	r3, [pc, #600]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a95      	ldr	r2, [pc, #596]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 80022de:	f043 0310 	orr.w	r3, r3, #16
 80022e2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80022e4:	f7fe fe92 	bl	800100c <HAL_GetTick>
 80022e8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80022ec:	f7fe fe8e 	bl	800100c <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e18b      	b.n	8002616 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80022fe:	4b8d      	ldr	r3, [pc, #564]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0320 	and.w	r3, r3, #32
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0f0      	beq.n	80022ec <HAL_RCC_OscConfig+0xa80>
 800230a:	e018      	b.n	800233e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800230c:	4b89      	ldr	r3, [pc, #548]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a88      	ldr	r2, [pc, #544]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 8002312:	f023 0310 	bic.w	r3, r3, #16
 8002316:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002318:	f7fe fe78 	bl	800100c <HAL_GetTick>
 800231c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002320:	f7fe fe74 	bl	800100c <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e171      	b.n	8002616 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002332:	4b80      	ldr	r3, [pc, #512]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0320 	and.w	r3, r3, #32
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f0      	bne.n	8002320 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 8166 	beq.w	8002614 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002348:	2300      	movs	r3, #0
 800234a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800234e:	4b79      	ldr	r3, [pc, #484]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f003 030c 	and.w	r3, r3, #12
 8002356:	2b0c      	cmp	r3, #12
 8002358:	f000 80f2 	beq.w	8002540 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002360:	2b02      	cmp	r3, #2
 8002362:	f040 80c5 	bne.w	80024f0 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002366:	4b73      	ldr	r3, [pc, #460]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a72      	ldr	r2, [pc, #456]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 800236c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002370:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002372:	f7fe fe4b 	bl	800100c <HAL_GetTick>
 8002376:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800237a:	f7fe fe47 	bl	800100c <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e144      	b.n	8002616 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800238c:	4b69      	ldr	r3, [pc, #420]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1f0      	bne.n	800237a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002398:	4b66      	ldr	r3, [pc, #408]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 800239a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800239e:	f003 0304 	and.w	r3, r3, #4
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d111      	bne.n	80023ca <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80023a6:	4b63      	ldr	r3, [pc, #396]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 80023a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023ac:	4a61      	ldr	r2, [pc, #388]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 80023ae:	f043 0304 	orr.w	r3, r3, #4
 80023b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80023b6:	4b5f      	ldr	r3, [pc, #380]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 80023b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80023c4:	2301      	movs	r3, #1
 80023c6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80023ca:	4b5b      	ldr	r3, [pc, #364]	@ (8002538 <HAL_RCC_OscConfig+0xccc>)
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80023d6:	d102      	bne.n	80023de <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80023d8:	2301      	movs	r3, #1
 80023da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80023de:	4b56      	ldr	r3, [pc, #344]	@ (8002538 <HAL_RCC_OscConfig+0xccc>)
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	4a55      	ldr	r2, [pc, #340]	@ (8002538 <HAL_RCC_OscConfig+0xccc>)
 80023e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023e8:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80023ea:	4b52      	ldr	r3, [pc, #328]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 80023ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80023f2:	f023 0303 	bic.w	r3, r3, #3
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80023fe:	3a01      	subs	r2, #1
 8002400:	0212      	lsls	r2, r2, #8
 8002402:	4311      	orrs	r1, r2
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002408:	430a      	orrs	r2, r1
 800240a:	494a      	ldr	r1, [pc, #296]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 800240c:	4313      	orrs	r3, r2
 800240e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002410:	4b48      	ldr	r3, [pc, #288]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 8002412:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002414:	4b49      	ldr	r3, [pc, #292]	@ (800253c <HAL_RCC_OscConfig+0xcd0>)
 8002416:	4013      	ands	r3, r2
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800241c:	3a01      	subs	r2, #1
 800241e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002426:	3a01      	subs	r2, #1
 8002428:	0252      	lsls	r2, r2, #9
 800242a:	b292      	uxth	r2, r2
 800242c:	4311      	orrs	r1, r2
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002432:	3a01      	subs	r2, #1
 8002434:	0412      	lsls	r2, r2, #16
 8002436:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800243a:	4311      	orrs	r1, r2
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002440:	3a01      	subs	r2, #1
 8002442:	0612      	lsls	r2, r2, #24
 8002444:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8002448:	430a      	orrs	r2, r1
 800244a:	493a      	ldr	r1, [pc, #232]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 800244c:	4313      	orrs	r3, r2
 800244e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002450:	4b38      	ldr	r3, [pc, #224]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 8002452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002454:	4a37      	ldr	r2, [pc, #220]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 8002456:	f023 0310 	bic.w	r3, r3, #16
 800245a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002460:	4a34      	ldr	r2, [pc, #208]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002466:	4b33      	ldr	r3, [pc, #204]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 8002468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246a:	4a32      	ldr	r2, [pc, #200]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 800246c:	f043 0310 	orr.w	r3, r3, #16
 8002470:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8002472:	4b30      	ldr	r3, [pc, #192]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 8002474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002476:	f023 020c 	bic.w	r2, r3, #12
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800247e:	492d      	ldr	r1, [pc, #180]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 8002480:	4313      	orrs	r3, r2
 8002482:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8002484:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002488:	2b01      	cmp	r3, #1
 800248a:	d105      	bne.n	8002498 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800248c:	4b2a      	ldr	r3, [pc, #168]	@ (8002538 <HAL_RCC_OscConfig+0xccc>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	4a29      	ldr	r2, [pc, #164]	@ (8002538 <HAL_RCC_OscConfig+0xccc>)
 8002492:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002496:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8002498:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800249c:	2b01      	cmp	r3, #1
 800249e:	d107      	bne.n	80024b0 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80024a0:	4b24      	ldr	r3, [pc, #144]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 80024a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024a6:	4a23      	ldr	r2, [pc, #140]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 80024a8:	f023 0304 	bic.w	r3, r3, #4
 80024ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80024b0:	4b20      	ldr	r3, [pc, #128]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 80024b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b4:	4a1f      	ldr	r2, [pc, #124]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 80024b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024ba:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80024bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a1c      	ldr	r2, [pc, #112]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 80024c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024c6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80024c8:	f7fe fda0 	bl	800100c <HAL_GetTick>
 80024cc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d0:	f7fe fd9c 	bl	800100c <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e099      	b.n	8002616 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80024e2:	4b14      	ldr	r3, [pc, #80]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCC_OscConfig+0xc64>
 80024ee:	e091      	b.n	8002614 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80024f0:	4b10      	ldr	r3, [pc, #64]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a0f      	ldr	r2, [pc, #60]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 80024f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024fa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80024fc:	f7fe fd86 	bl	800100c <HAL_GetTick>
 8002500:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002504:	f7fe fd82 	bl	800100c <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e07f      	b.n	8002616 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002516:	4b07      	ldr	r3, [pc, #28]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f0      	bne.n	8002504 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002522:	4b04      	ldr	r3, [pc, #16]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 8002524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002526:	4a03      	ldr	r2, [pc, #12]	@ (8002534 <HAL_RCC_OscConfig+0xcc8>)
 8002528:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800252c:	f023 0303 	bic.w	r3, r3, #3
 8002530:	6293      	str	r3, [r2, #40]	@ 0x28
 8002532:	e06f      	b.n	8002614 <HAL_RCC_OscConfig+0xda8>
 8002534:	46020c00 	.word	0x46020c00
 8002538:	46020800 	.word	0x46020800
 800253c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002540:	4b37      	ldr	r3, [pc, #220]	@ (8002620 <HAL_RCC_OscConfig+0xdb4>)
 8002542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002544:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002546:	4b36      	ldr	r3, [pc, #216]	@ (8002620 <HAL_RCC_OscConfig+0xdb4>)
 8002548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800254a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002550:	2b01      	cmp	r3, #1
 8002552:	d039      	beq.n	80025c8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f003 0203 	and.w	r2, r3, #3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800255e:	429a      	cmp	r2, r3
 8002560:	d132      	bne.n	80025c8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	0a1b      	lsrs	r3, r3, #8
 8002566:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002570:	429a      	cmp	r2, r3
 8002572:	d129      	bne.n	80025c8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800257e:	429a      	cmp	r2, r3
 8002580:	d122      	bne.n	80025c8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800258c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800258e:	429a      	cmp	r2, r3
 8002590:	d11a      	bne.n	80025c8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	0a5b      	lsrs	r3, r3, #9
 8002596:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800259e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d111      	bne.n	80025c8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	0c1b      	lsrs	r3, r3, #16
 80025a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025b0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d108      	bne.n	80025c8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	0e1b      	lsrs	r3, r3, #24
 80025ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025c2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d001      	beq.n	80025cc <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e024      	b.n	8002616 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80025cc:	4b14      	ldr	r3, [pc, #80]	@ (8002620 <HAL_RCC_OscConfig+0xdb4>)
 80025ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d0:	08db      	lsrs	r3, r3, #3
 80025d2:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80025da:	429a      	cmp	r2, r3
 80025dc:	d01a      	beq.n	8002614 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80025de:	4b10      	ldr	r3, [pc, #64]	@ (8002620 <HAL_RCC_OscConfig+0xdb4>)
 80025e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e2:	4a0f      	ldr	r2, [pc, #60]	@ (8002620 <HAL_RCC_OscConfig+0xdb4>)
 80025e4:	f023 0310 	bic.w	r3, r3, #16
 80025e8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ea:	f7fe fd0f 	bl	800100c <HAL_GetTick>
 80025ee:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80025f0:	bf00      	nop
 80025f2:	f7fe fd0b 	bl	800100c <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d0f9      	beq.n	80025f2 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002602:	4a07      	ldr	r2, [pc, #28]	@ (8002620 <HAL_RCC_OscConfig+0xdb4>)
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002608:	4b05      	ldr	r3, [pc, #20]	@ (8002620 <HAL_RCC_OscConfig+0xdb4>)
 800260a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800260c:	4a04      	ldr	r2, [pc, #16]	@ (8002620 <HAL_RCC_OscConfig+0xdb4>)
 800260e:	f043 0310 	orr.w	r3, r3, #16
 8002612:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3738      	adds	r7, #56	@ 0x38
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	46020c00 	.word	0x46020c00

08002624 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e1d9      	b.n	80029ec <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002638:	4b9b      	ldr	r3, [pc, #620]	@ (80028a8 <HAL_RCC_ClockConfig+0x284>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 030f 	and.w	r3, r3, #15
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	429a      	cmp	r2, r3
 8002644:	d910      	bls.n	8002668 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002646:	4b98      	ldr	r3, [pc, #608]	@ (80028a8 <HAL_RCC_ClockConfig+0x284>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f023 020f 	bic.w	r2, r3, #15
 800264e:	4996      	ldr	r1, [pc, #600]	@ (80028a8 <HAL_RCC_ClockConfig+0x284>)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	4313      	orrs	r3, r2
 8002654:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002656:	4b94      	ldr	r3, [pc, #592]	@ (80028a8 <HAL_RCC_ClockConfig+0x284>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	429a      	cmp	r2, r3
 8002662:	d001      	beq.n	8002668 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e1c1      	b.n	80029ec <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0310 	and.w	r3, r3, #16
 8002670:	2b00      	cmp	r3, #0
 8002672:	d010      	beq.n	8002696 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	695a      	ldr	r2, [r3, #20]
 8002678:	4b8c      	ldr	r3, [pc, #560]	@ (80028ac <HAL_RCC_ClockConfig+0x288>)
 800267a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002680:	429a      	cmp	r2, r3
 8002682:	d908      	bls.n	8002696 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8002684:	4b89      	ldr	r3, [pc, #548]	@ (80028ac <HAL_RCC_ClockConfig+0x288>)
 8002686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002688:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	4986      	ldr	r1, [pc, #536]	@ (80028ac <HAL_RCC_ClockConfig+0x288>)
 8002692:	4313      	orrs	r3, r2
 8002694:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d012      	beq.n	80026c8 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	691a      	ldr	r2, [r3, #16]
 80026a6:	4b81      	ldr	r3, [pc, #516]	@ (80028ac <HAL_RCC_ClockConfig+0x288>)
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	091b      	lsrs	r3, r3, #4
 80026ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d909      	bls.n	80026c8 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80026b4:	4b7d      	ldr	r3, [pc, #500]	@ (80028ac <HAL_RCC_ClockConfig+0x288>)
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	497a      	ldr	r1, [pc, #488]	@ (80028ac <HAL_RCC_ClockConfig+0x288>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d010      	beq.n	80026f6 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68da      	ldr	r2, [r3, #12]
 80026d8:	4b74      	ldr	r3, [pc, #464]	@ (80028ac <HAL_RCC_ClockConfig+0x288>)
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d908      	bls.n	80026f6 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80026e4:	4b71      	ldr	r3, [pc, #452]	@ (80028ac <HAL_RCC_ClockConfig+0x288>)
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	496e      	ldr	r1, [pc, #440]	@ (80028ac <HAL_RCC_ClockConfig+0x288>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d010      	beq.n	8002724 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689a      	ldr	r2, [r3, #8]
 8002706:	4b69      	ldr	r3, [pc, #420]	@ (80028ac <HAL_RCC_ClockConfig+0x288>)
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	429a      	cmp	r2, r3
 8002710:	d908      	bls.n	8002724 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002712:	4b66      	ldr	r3, [pc, #408]	@ (80028ac <HAL_RCC_ClockConfig+0x288>)
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	f023 020f 	bic.w	r2, r3, #15
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	4963      	ldr	r1, [pc, #396]	@ (80028ac <HAL_RCC_ClockConfig+0x288>)
 8002720:	4313      	orrs	r3, r2
 8002722:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 80d2 	beq.w	80028d6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8002732:	2300      	movs	r3, #0
 8002734:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b03      	cmp	r3, #3
 800273c:	d143      	bne.n	80027c6 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800273e:	4b5b      	ldr	r3, [pc, #364]	@ (80028ac <HAL_RCC_ClockConfig+0x288>)
 8002740:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	d110      	bne.n	800276e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800274c:	4b57      	ldr	r3, [pc, #348]	@ (80028ac <HAL_RCC_ClockConfig+0x288>)
 800274e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002752:	4a56      	ldr	r2, [pc, #344]	@ (80028ac <HAL_RCC_ClockConfig+0x288>)
 8002754:	f043 0304 	orr.w	r3, r3, #4
 8002758:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800275c:	4b53      	ldr	r3, [pc, #332]	@ (80028ac <HAL_RCC_ClockConfig+0x288>)
 800275e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002762:	f003 0304 	and.w	r3, r3, #4
 8002766:	60bb      	str	r3, [r7, #8]
 8002768:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800276a:	2301      	movs	r3, #1
 800276c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800276e:	f7fe fc4d 	bl	800100c <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002774:	4b4e      	ldr	r3, [pc, #312]	@ (80028b0 <HAL_RCC_ClockConfig+0x28c>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00f      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002780:	e008      	b.n	8002794 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8002782:	f7fe fc43 	bl	800100c <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e12b      	b.n	80029ec <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002794:	4b46      	ldr	r3, [pc, #280]	@ (80028b0 <HAL_RCC_ClockConfig+0x28c>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0f0      	beq.n	8002782 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80027a0:	7dfb      	ldrb	r3, [r7, #23]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d107      	bne.n	80027b6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80027a6:	4b41      	ldr	r3, [pc, #260]	@ (80028ac <HAL_RCC_ClockConfig+0x288>)
 80027a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027ac:	4a3f      	ldr	r2, [pc, #252]	@ (80028ac <HAL_RCC_ClockConfig+0x288>)
 80027ae:	f023 0304 	bic.w	r3, r3, #4
 80027b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80027b6:	4b3d      	ldr	r3, [pc, #244]	@ (80028ac <HAL_RCC_ClockConfig+0x288>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d121      	bne.n	8002806 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e112      	b.n	80029ec <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d107      	bne.n	80027de <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ce:	4b37      	ldr	r3, [pc, #220]	@ (80028ac <HAL_RCC_ClockConfig+0x288>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d115      	bne.n	8002806 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e106      	b.n	80029ec <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d107      	bne.n	80027f6 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80027e6:	4b31      	ldr	r3, [pc, #196]	@ (80028ac <HAL_RCC_ClockConfig+0x288>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0304 	and.w	r3, r3, #4
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d109      	bne.n	8002806 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e0fa      	b.n	80029ec <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027f6:	4b2d      	ldr	r3, [pc, #180]	@ (80028ac <HAL_RCC_ClockConfig+0x288>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e0f2      	b.n	80029ec <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8002806:	4b29      	ldr	r3, [pc, #164]	@ (80028ac <HAL_RCC_ClockConfig+0x288>)
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	f023 0203 	bic.w	r2, r3, #3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	4926      	ldr	r1, [pc, #152]	@ (80028ac <HAL_RCC_ClockConfig+0x288>)
 8002814:	4313      	orrs	r3, r2
 8002816:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8002818:	f7fe fbf8 	bl	800100c <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b03      	cmp	r3, #3
 8002824:	d112      	bne.n	800284c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002826:	e00a      	b.n	800283e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002828:	f7fe fbf0 	bl	800100c <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002836:	4293      	cmp	r3, r2
 8002838:	d901      	bls.n	800283e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e0d6      	b.n	80029ec <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800283e:	4b1b      	ldr	r3, [pc, #108]	@ (80028ac <HAL_RCC_ClockConfig+0x288>)
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	f003 030c 	and.w	r3, r3, #12
 8002846:	2b0c      	cmp	r3, #12
 8002848:	d1ee      	bne.n	8002828 <HAL_RCC_ClockConfig+0x204>
 800284a:	e044      	b.n	80028d6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2b02      	cmp	r3, #2
 8002852:	d112      	bne.n	800287a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002854:	e00a      	b.n	800286c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002856:	f7fe fbd9 	bl	800100c <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002864:	4293      	cmp	r3, r2
 8002866:	d901      	bls.n	800286c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e0bf      	b.n	80029ec <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800286c:	4b0f      	ldr	r3, [pc, #60]	@ (80028ac <HAL_RCC_ClockConfig+0x288>)
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	f003 030c 	and.w	r3, r3, #12
 8002874:	2b08      	cmp	r3, #8
 8002876:	d1ee      	bne.n	8002856 <HAL_RCC_ClockConfig+0x232>
 8002878:	e02d      	b.n	80028d6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d123      	bne.n	80028ca <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002882:	e00a      	b.n	800289a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002884:	f7fe fbc2 	bl	800100c <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002892:	4293      	cmp	r3, r2
 8002894:	d901      	bls.n	800289a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e0a8      	b.n	80029ec <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800289a:	4b04      	ldr	r3, [pc, #16]	@ (80028ac <HAL_RCC_ClockConfig+0x288>)
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	f003 030c 	and.w	r3, r3, #12
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1ee      	bne.n	8002884 <HAL_RCC_ClockConfig+0x260>
 80028a6:	e016      	b.n	80028d6 <HAL_RCC_ClockConfig+0x2b2>
 80028a8:	40022000 	.word	0x40022000
 80028ac:	46020c00 	.word	0x46020c00
 80028b0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b4:	f7fe fbaa 	bl	800100c <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e090      	b.n	80029ec <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80028ca:	4b4a      	ldr	r3, [pc, #296]	@ (80029f4 <HAL_RCC_ClockConfig+0x3d0>)
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	f003 030c 	and.w	r3, r3, #12
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d1ee      	bne.n	80028b4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d010      	beq.n	8002904 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	4b43      	ldr	r3, [pc, #268]	@ (80029f4 <HAL_RCC_ClockConfig+0x3d0>)
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d208      	bcs.n	8002904 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80028f2:	4b40      	ldr	r3, [pc, #256]	@ (80029f4 <HAL_RCC_ClockConfig+0x3d0>)
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	f023 020f 	bic.w	r2, r3, #15
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	493d      	ldr	r1, [pc, #244]	@ (80029f4 <HAL_RCC_ClockConfig+0x3d0>)
 8002900:	4313      	orrs	r3, r2
 8002902:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002904:	4b3c      	ldr	r3, [pc, #240]	@ (80029f8 <HAL_RCC_ClockConfig+0x3d4>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 030f 	and.w	r3, r3, #15
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	429a      	cmp	r2, r3
 8002910:	d210      	bcs.n	8002934 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002912:	4b39      	ldr	r3, [pc, #228]	@ (80029f8 <HAL_RCC_ClockConfig+0x3d4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f023 020f 	bic.w	r2, r3, #15
 800291a:	4937      	ldr	r1, [pc, #220]	@ (80029f8 <HAL_RCC_ClockConfig+0x3d4>)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	4313      	orrs	r3, r2
 8002920:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002922:	4b35      	ldr	r3, [pc, #212]	@ (80029f8 <HAL_RCC_ClockConfig+0x3d4>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d001      	beq.n	8002934 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e05b      	b.n	80029ec <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	d010      	beq.n	8002962 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68da      	ldr	r2, [r3, #12]
 8002944:	4b2b      	ldr	r3, [pc, #172]	@ (80029f4 <HAL_RCC_ClockConfig+0x3d0>)
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800294c:	429a      	cmp	r2, r3
 800294e:	d208      	bcs.n	8002962 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002950:	4b28      	ldr	r3, [pc, #160]	@ (80029f4 <HAL_RCC_ClockConfig+0x3d0>)
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	4925      	ldr	r1, [pc, #148]	@ (80029f4 <HAL_RCC_ClockConfig+0x3d0>)
 800295e:	4313      	orrs	r3, r2
 8002960:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0308 	and.w	r3, r3, #8
 800296a:	2b00      	cmp	r3, #0
 800296c:	d012      	beq.n	8002994 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	691a      	ldr	r2, [r3, #16]
 8002972:	4b20      	ldr	r3, [pc, #128]	@ (80029f4 <HAL_RCC_ClockConfig+0x3d0>)
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	091b      	lsrs	r3, r3, #4
 8002978:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800297c:	429a      	cmp	r2, r3
 800297e:	d209      	bcs.n	8002994 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002980:	4b1c      	ldr	r3, [pc, #112]	@ (80029f4 <HAL_RCC_ClockConfig+0x3d0>)
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	011b      	lsls	r3, r3, #4
 800298e:	4919      	ldr	r1, [pc, #100]	@ (80029f4 <HAL_RCC_ClockConfig+0x3d0>)
 8002990:	4313      	orrs	r3, r2
 8002992:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0310 	and.w	r3, r3, #16
 800299c:	2b00      	cmp	r3, #0
 800299e:	d010      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	695a      	ldr	r2, [r3, #20]
 80029a4:	4b13      	ldr	r3, [pc, #76]	@ (80029f4 <HAL_RCC_ClockConfig+0x3d0>)
 80029a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d208      	bcs.n	80029c2 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80029b0:	4b10      	ldr	r3, [pc, #64]	@ (80029f4 <HAL_RCC_ClockConfig+0x3d0>)
 80029b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	490d      	ldr	r1, [pc, #52]	@ (80029f4 <HAL_RCC_ClockConfig+0x3d0>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80029c2:	f000 f821 	bl	8002a08 <HAL_RCC_GetSysClockFreq>
 80029c6:	4602      	mov	r2, r0
 80029c8:	4b0a      	ldr	r3, [pc, #40]	@ (80029f4 <HAL_RCC_ClockConfig+0x3d0>)
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	f003 030f 	and.w	r3, r3, #15
 80029d0:	490a      	ldr	r1, [pc, #40]	@ (80029fc <HAL_RCC_ClockConfig+0x3d8>)
 80029d2:	5ccb      	ldrb	r3, [r1, r3]
 80029d4:	fa22 f303 	lsr.w	r3, r2, r3
 80029d8:	4a09      	ldr	r2, [pc, #36]	@ (8002a00 <HAL_RCC_ClockConfig+0x3dc>)
 80029da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80029dc:	4b09      	ldr	r3, [pc, #36]	@ (8002a04 <HAL_RCC_ClockConfig+0x3e0>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7fe fac9 	bl	8000f78 <HAL_InitTick>
 80029e6:	4603      	mov	r3, r0
 80029e8:	73fb      	strb	r3, [r7, #15]

  return status;
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	46020c00 	.word	0x46020c00
 80029f8:	40022000 	.word	0x40022000
 80029fc:	08007398 	.word	0x08007398
 8002a00:	20000000 	.word	0x20000000
 8002a04:	20000004 	.word	0x20000004

08002a08 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b08b      	sub	sp, #44	@ 0x2c
 8002a0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a16:	4b7b      	ldr	r3, [pc, #492]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	f003 030c 	and.w	r3, r3, #12
 8002a1e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a20:	4b78      	ldr	r3, [pc, #480]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a24:	f003 0303 	and.w	r3, r3, #3
 8002a28:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <HAL_RCC_GetSysClockFreq+0x34>
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	2b0c      	cmp	r3, #12
 8002a34:	d121      	bne.n	8002a7a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d11e      	bne.n	8002a7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8002a3c:	4b71      	ldr	r3, [pc, #452]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d107      	bne.n	8002a58 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002a48:	4b6e      	ldr	r3, [pc, #440]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002a4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002a4e:	0b1b      	lsrs	r3, r3, #12
 8002a50:	f003 030f 	and.w	r3, r3, #15
 8002a54:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a56:	e005      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002a58:	4b6a      	ldr	r3, [pc, #424]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	0f1b      	lsrs	r3, r3, #28
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a64:	4a68      	ldr	r2, [pc, #416]	@ (8002c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a6c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d110      	bne.n	8002a96 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a76:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a78:	e00d      	b.n	8002a96 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a7a:	4b62      	ldr	r3, [pc, #392]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	f003 030c 	and.w	r3, r3, #12
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	d102      	bne.n	8002a8c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a86:	4b61      	ldr	r3, [pc, #388]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x204>)
 8002a88:	623b      	str	r3, [r7, #32]
 8002a8a:	e004      	b.n	8002a96 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	d101      	bne.n	8002a96 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a92:	4b5e      	ldr	r3, [pc, #376]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x204>)
 8002a94:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	2b0c      	cmp	r3, #12
 8002a9a:	f040 80ac 	bne.w	8002bf6 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002a9e:	4b59      	ldr	r3, [pc, #356]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa2:	f003 0303 	and.w	r3, r3, #3
 8002aa6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002aa8:	4b56      	ldr	r3, [pc, #344]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aac:	0a1b      	lsrs	r3, r3, #8
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002ab6:	4b53      	ldr	r3, [pc, #332]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aba:	091b      	lsrs	r3, r3, #4
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002ac2:	4b50      	ldr	r3, [pc, #320]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac6:	08db      	lsrs	r3, r3, #3
 8002ac8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	fb02 f303 	mul.w	r3, r2, r3
 8002ad2:	ee07 3a90 	vmov	s15, r3
 8002ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ada:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 8086 	beq.w	8002bf2 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d003      	beq.n	8002af4 <HAL_RCC_GetSysClockFreq+0xec>
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	2b03      	cmp	r3, #3
 8002af0:	d022      	beq.n	8002b38 <HAL_RCC_GetSysClockFreq+0x130>
 8002af2:	e043      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	ee07 3a90 	vmov	s15, r3
 8002afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002afe:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8002c10 <HAL_RCC_GetSysClockFreq+0x208>
 8002b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b06:	4b3f      	ldr	r3, [pc, #252]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b0e:	ee07 3a90 	vmov	s15, r3
 8002b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002b16:	ed97 6a01 	vldr	s12, [r7, #4]
 8002b1a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8002c14 <HAL_RCC_GetSysClockFreq+0x20c>
 8002b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002b26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b32:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002b36:	e046      	b.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	ee07 3a90 	vmov	s15, r3
 8002b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b42:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8002c10 <HAL_RCC_GetSysClockFreq+0x208>
 8002b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b4a:	4b2e      	ldr	r3, [pc, #184]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b52:	ee07 3a90 	vmov	s15, r3
 8002b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002b5a:	ed97 6a01 	vldr	s12, [r7, #4]
 8002b5e:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8002c14 <HAL_RCC_GetSysClockFreq+0x20c>
 8002b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002b6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b76:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002b7a:	e024      	b.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7e:	ee07 3a90 	vmov	s15, r3
 8002b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	ee07 3a90 	vmov	s15, r3
 8002b8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b94:	4b1b      	ldr	r3, [pc, #108]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b9c:	ee07 3a90 	vmov	s15, r3
 8002ba0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002ba4:	ed97 6a01 	vldr	s12, [r7, #4]
 8002ba8:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8002c14 <HAL_RCC_GetSysClockFreq+0x20c>
 8002bac:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002bb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002bb4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bc0:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002bc4:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bca:	0e1b      	lsrs	r3, r3, #24
 8002bcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	ee07 3a90 	vmov	s15, r3
 8002bda:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bde:	edd7 6a07 	vldr	s13, [r7, #28]
 8002be2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002be6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bea:	ee17 3a90 	vmov	r3, s15
 8002bee:	623b      	str	r3, [r7, #32]
 8002bf0:	e001      	b.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8002bf6:	6a3b      	ldr	r3, [r7, #32]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	372c      	adds	r7, #44	@ 0x2c
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	46020c00 	.word	0x46020c00
 8002c08:	080073b0 	.word	0x080073b0
 8002c0c:	00f42400 	.word	0x00f42400
 8002c10:	4b742400 	.word	0x4b742400
 8002c14:	46000000 	.word	0x46000000

08002c18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002c1c:	f7ff fef4 	bl	8002a08 <HAL_RCC_GetSysClockFreq>
 8002c20:	4602      	mov	r2, r0
 8002c22:	4b07      	ldr	r3, [pc, #28]	@ (8002c40 <HAL_RCC_GetHCLKFreq+0x28>)
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	f003 030f 	and.w	r3, r3, #15
 8002c2a:	4906      	ldr	r1, [pc, #24]	@ (8002c44 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002c2c:	5ccb      	ldrb	r3, [r1, r3]
 8002c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c32:	4a05      	ldr	r2, [pc, #20]	@ (8002c48 <HAL_RCC_GetHCLKFreq+0x30>)
 8002c34:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8002c36:	4b04      	ldr	r3, [pc, #16]	@ (8002c48 <HAL_RCC_GetHCLKFreq+0x30>)
 8002c38:	681b      	ldr	r3, [r3, #0]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	46020c00 	.word	0x46020c00
 8002c44:	08007398 	.word	0x08007398
 8002c48:	20000000 	.word	0x20000000

08002c4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8002c50:	f7ff ffe2 	bl	8002c18 <HAL_RCC_GetHCLKFreq>
 8002c54:	4602      	mov	r2, r0
 8002c56:	4b05      	ldr	r3, [pc, #20]	@ (8002c6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	091b      	lsrs	r3, r3, #4
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	4903      	ldr	r1, [pc, #12]	@ (8002c70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c62:	5ccb      	ldrb	r3, [r1, r3]
 8002c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	46020c00 	.word	0x46020c00
 8002c70:	080073a8 	.word	0x080073a8

08002c74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8002c78:	f7ff ffce 	bl	8002c18 <HAL_RCC_GetHCLKFreq>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	4b05      	ldr	r3, [pc, #20]	@ (8002c94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	0a1b      	lsrs	r3, r3, #8
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	4903      	ldr	r1, [pc, #12]	@ (8002c98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c8a:	5ccb      	ldrb	r3, [r1, r3]
 8002c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	46020c00 	.word	0x46020c00
 8002c98:	080073a8 	.word	0x080073a8

08002c9c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8002ca0:	f7ff ffba 	bl	8002c18 <HAL_RCC_GetHCLKFreq>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	4b05      	ldr	r3, [pc, #20]	@ (8002cbc <HAL_RCC_GetPCLK3Freq+0x20>)
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002caa:	091b      	lsrs	r3, r3, #4
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	4903      	ldr	r1, [pc, #12]	@ (8002cc0 <HAL_RCC_GetPCLK3Freq+0x24>)
 8002cb2:	5ccb      	ldrb	r3, [r1, r3]
 8002cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	46020c00 	.word	0x46020c00
 8002cc0:	080073a8 	.word	0x080073a8

08002cc4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ccc:	4b3e      	ldr	r3, [pc, #248]	@ (8002dc8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002cda:	f7fe fd49 	bl	8001770 <HAL_PWREx_GetVoltageRange>
 8002cde:	6178      	str	r0, [r7, #20]
 8002ce0:	e019      	b.n	8002d16 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ce2:	4b39      	ldr	r3, [pc, #228]	@ (8002dc8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ce8:	4a37      	ldr	r2, [pc, #220]	@ (8002dc8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002cea:	f043 0304 	orr.w	r3, r3, #4
 8002cee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002cf2:	4b35      	ldr	r3, [pc, #212]	@ (8002dc8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d00:	f7fe fd36 	bl	8001770 <HAL_PWREx_GetVoltageRange>
 8002d04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d06:	4b30      	ldr	r3, [pc, #192]	@ (8002dc8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002d08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d0c:	4a2e      	ldr	r2, [pc, #184]	@ (8002dc8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002d0e:	f023 0304 	bic.w	r3, r3, #4
 8002d12:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002d1c:	d003      	beq.n	8002d26 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d24:	d109      	bne.n	8002d3a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d2c:	d202      	bcs.n	8002d34 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8002d2e:	2301      	movs	r3, #1
 8002d30:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002d32:	e033      	b.n	8002d9c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8002d34:	2300      	movs	r3, #0
 8002d36:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002d38:	e030      	b.n	8002d9c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d40:	d208      	bcs.n	8002d54 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d48:	d102      	bne.n	8002d50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	613b      	str	r3, [r7, #16]
 8002d4e:	e025      	b.n	8002d9c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e035      	b.n	8002dc0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d5a:	d90f      	bls.n	8002d7c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d109      	bne.n	8002d76 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002d68:	d902      	bls.n	8002d70 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	e015      	b.n	8002d9c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8002d70:	2301      	movs	r3, #1
 8002d72:	613b      	str	r3, [r7, #16]
 8002d74:	e012      	b.n	8002d9c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8002d76:	2300      	movs	r3, #0
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	e00f      	b.n	8002d9c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d82:	d109      	bne.n	8002d98 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d8a:	d102      	bne.n	8002d92 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	613b      	str	r3, [r7, #16]
 8002d90:	e004      	b.n	8002d9c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8002d92:	2302      	movs	r3, #2
 8002d94:	613b      	str	r3, [r7, #16]
 8002d96:	e001      	b.n	8002d9c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8002d98:	2301      	movs	r3, #1
 8002d9a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002dcc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f023 020f 	bic.w	r2, r3, #15
 8002da4:	4909      	ldr	r1, [pc, #36]	@ (8002dcc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002dac:	4b07      	ldr	r3, [pc, #28]	@ (8002dcc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 030f 	and.w	r3, r3, #15
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d001      	beq.n	8002dbe <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	46020c00 	.word	0x46020c00
 8002dcc:	40022000 	.word	0x40022000

08002dd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dd4:	b0c4      	sub	sp, #272	@ 0x110
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ddc:	2300      	movs	r3, #0
 8002dde:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002de2:	2300      	movs	r3, #0
 8002de4:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002de8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df0:	f002 0401 	and.w	r4, r2, #1
 8002df4:	2500      	movs	r5, #0
 8002df6:	ea54 0305 	orrs.w	r3, r4, r5
 8002dfa:	d00b      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002dfc:	4bd5      	ldr	r3, [pc, #852]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e02:	f023 0103 	bic.w	r1, r3, #3
 8002e06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e0c:	4ad1      	ldr	r2, [pc, #836]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e0e:	430b      	orrs	r3, r1
 8002e10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1c:	f002 0802 	and.w	r8, r2, #2
 8002e20:	f04f 0900 	mov.w	r9, #0
 8002e24:	ea58 0309 	orrs.w	r3, r8, r9
 8002e28:	d00b      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002e2a:	4bca      	ldr	r3, [pc, #808]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e30:	f023 010c 	bic.w	r1, r3, #12
 8002e34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e3a:	4ac6      	ldr	r2, [pc, #792]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e3c:	430b      	orrs	r3, r1
 8002e3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4a:	f002 0a04 	and.w	sl, r2, #4
 8002e4e:	f04f 0b00 	mov.w	fp, #0
 8002e52:	ea5a 030b 	orrs.w	r3, sl, fp
 8002e56:	d00b      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002e58:	4bbe      	ldr	r3, [pc, #760]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e5e:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002e62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e68:	4aba      	ldr	r2, [pc, #744]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e6a:	430b      	orrs	r3, r1
 8002e6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e78:	f002 0308 	and.w	r3, r2, #8
 8002e7c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002e80:	2300      	movs	r3, #0
 8002e82:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002e86:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	d00b      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002e90:	4bb0      	ldr	r3, [pc, #704]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e96:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea0:	4aac      	ldr	r2, [pc, #688]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002ea2:	430b      	orrs	r3, r1
 8002ea4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ea8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb0:	f002 0310 	and.w	r3, r2, #16
 8002eb4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002ebe:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	d00b      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002ec8:	4ba2      	ldr	r3, [pc, #648]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ece:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ed6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ed8:	4a9e      	ldr	r2, [pc, #632]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002eda:	430b      	orrs	r3, r1
 8002edc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002ee0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8002eec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002ef6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4313      	orrs	r3, r2
 8002efe:	d00b      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8002f00:	4b94      	ldr	r3, [pc, #592]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002f06:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002f0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f10:	4a90      	ldr	r2, [pc, #576]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f12:	430b      	orrs	r3, r1
 8002f14:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f20:	f002 0320 	and.w	r3, r2, #32
 8002f24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f28:	2300      	movs	r3, #0
 8002f2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002f2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002f32:	460b      	mov	r3, r1
 8002f34:	4313      	orrs	r3, r2
 8002f36:	d00b      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002f38:	4b86      	ldr	r3, [pc, #536]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f3e:	f023 0107 	bic.w	r1, r3, #7
 8002f42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f48:	4a82      	ldr	r2, [pc, #520]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f4a:	430b      	orrs	r3, r1
 8002f4c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f58:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8002f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f60:	2300      	movs	r3, #0
 8002f62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002f66:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	d00b      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002f70:	4b78      	ldr	r3, [pc, #480]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f76:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8002f7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f80:	4a74      	ldr	r2, [pc, #464]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f82:	430b      	orrs	r3, r1
 8002f84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f90:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8002f94:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002f9e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	d00b      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002fa8:	4b6a      	ldr	r3, [pc, #424]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb8:	4a66      	ldr	r2, [pc, #408]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002fba:	430b      	orrs	r3, r1
 8002fbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc8:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8002fcc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002fd6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	d00b      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8002fe0:	4b5c      	ldr	r3, [pc, #368]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002fe2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002fe6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002fea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ff0:	4a58      	ldr	r2, [pc, #352]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002ff2:	430b      	orrs	r3, r1
 8002ff4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ff8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003000:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003004:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003008:	2300      	movs	r3, #0
 800300a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800300e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003012:	460b      	mov	r3, r1
 8003014:	4313      	orrs	r3, r2
 8003016:	d00b      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003018:	4b4e      	ldr	r3, [pc, #312]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800301a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800301e:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8003022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003026:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003028:	4a4a      	ldr	r2, [pc, #296]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800302a:	430b      	orrs	r3, r1
 800302c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8003030:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003038:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800303c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003040:	2300      	movs	r3, #0
 8003042:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003046:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800304a:	460b      	mov	r3, r1
 800304c:	4313      	orrs	r3, r2
 800304e:	d00b      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8003050:	4b40      	ldr	r3, [pc, #256]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003052:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003056:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800305a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800305e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003060:	4a3c      	ldr	r2, [pc, #240]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003062:	430b      	orrs	r3, r1
 8003064:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8003068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800306c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003070:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003074:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003078:	2300      	movs	r3, #0
 800307a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800307e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003082:	460b      	mov	r3, r1
 8003084:	4313      	orrs	r3, r2
 8003086:	d00c      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8003088:	4b32      	ldr	r3, [pc, #200]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800308a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800308e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003096:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800309a:	4a2e      	ldr	r2, [pc, #184]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800309c:	430b      	orrs	r3, r1
 800309e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030aa:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80030ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80030b2:	2300      	movs	r3, #0
 80030b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80030b8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80030bc:	460b      	mov	r3, r1
 80030be:	4313      	orrs	r3, r2
 80030c0:	d00c      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80030c2:	4b24      	ldr	r3, [pc, #144]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80030c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80030c8:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80030cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030d4:	4a1f      	ldr	r2, [pc, #124]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80030d6:	430b      	orrs	r3, r1
 80030d8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e4:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80030e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80030ec:	2300      	movs	r3, #0
 80030ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80030f2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80030f6:	460b      	mov	r3, r1
 80030f8:	4313      	orrs	r3, r2
 80030fa:	d00c      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80030fc:	4b15      	ldr	r3, [pc, #84]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80030fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003102:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003106:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800310a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800310e:	4a11      	ldr	r2, [pc, #68]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003110:	430b      	orrs	r3, r1
 8003112:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8003116:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800311a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003122:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003126:	2300      	movs	r3, #0
 8003128:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800312c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003130:	460b      	mov	r3, r1
 8003132:	4313      	orrs	r3, r2
 8003134:	d010      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8003136:	4b07      	ldr	r3, [pc, #28]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003138:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800313c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003140:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003144:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003148:	4a02      	ldr	r2, [pc, #8]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800314a:	430b      	orrs	r3, r1
 800314c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003150:	e002      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8003152:	bf00      	nop
 8003154:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003158:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800315c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003160:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003164:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003168:	2300      	movs	r3, #0
 800316a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800316e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003172:	460b      	mov	r3, r1
 8003174:	4313      	orrs	r3, r2
 8003176:	d04c      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003178:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800317c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003180:	2b80      	cmp	r3, #128	@ 0x80
 8003182:	d02d      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003184:	2b80      	cmp	r3, #128	@ 0x80
 8003186:	d827      	bhi.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003188:	2b60      	cmp	r3, #96	@ 0x60
 800318a:	d02b      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800318c:	2b60      	cmp	r3, #96	@ 0x60
 800318e:	d823      	bhi.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003190:	2b40      	cmp	r3, #64	@ 0x40
 8003192:	d006      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8003194:	2b40      	cmp	r3, #64	@ 0x40
 8003196:	d81f      	bhi.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003198:	2b00      	cmp	r3, #0
 800319a:	d009      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800319c:	2b20      	cmp	r3, #32
 800319e:	d011      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80031a0:	e01a      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80031a2:	4bbe      	ldr	r3, [pc, #760]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a6:	4abd      	ldr	r2, [pc, #756]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031ac:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80031ae:	e01a      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80031b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031b4:	3308      	adds	r3, #8
 80031b6:	4618      	mov	r0, r3
 80031b8:	f002 fc5c 	bl	8005a74 <RCCEx_PLL2_Config>
 80031bc:	4603      	mov	r3, r0
 80031be:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80031c2:	e010      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80031c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031c8:	332c      	adds	r3, #44	@ 0x2c
 80031ca:	4618      	mov	r0, r3
 80031cc:	f002 fcea 	bl	8005ba4 <RCCEx_PLL3_Config>
 80031d0:	4603      	mov	r3, r0
 80031d2:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80031d6:	e006      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80031de:	e002      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80031e0:	bf00      	nop
 80031e2:	e000      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80031e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031e6:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10d      	bne.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80031ee:	4bab      	ldr	r3, [pc, #684]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80031f4:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80031f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003200:	4aa6      	ldr	r2, [pc, #664]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003202:	430b      	orrs	r3, r1
 8003204:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003208:	e003      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800320a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800320e:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003212:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800321e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003222:	2300      	movs	r3, #0
 8003224:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003228:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800322c:	460b      	mov	r3, r1
 800322e:	4313      	orrs	r3, r2
 8003230:	d053      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8003232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003236:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800323a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800323e:	d033      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8003240:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003244:	d82c      	bhi.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003246:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800324a:	d02f      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800324c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003250:	d826      	bhi.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003252:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003256:	d008      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8003258:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800325c:	d820      	bhi.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00a      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003262:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003266:	d011      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003268:	e01a      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800326a:	4b8c      	ldr	r3, [pc, #560]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800326c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800326e:	4a8b      	ldr	r2, [pc, #556]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003274:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003276:	e01a      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003278:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800327c:	3308      	adds	r3, #8
 800327e:	4618      	mov	r0, r3
 8003280:	f002 fbf8 	bl	8005a74 <RCCEx_PLL2_Config>
 8003284:	4603      	mov	r3, r0
 8003286:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800328a:	e010      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800328c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003290:	332c      	adds	r3, #44	@ 0x2c
 8003292:	4618      	mov	r0, r3
 8003294:	f002 fc86 	bl	8005ba4 <RCCEx_PLL3_Config>
 8003298:	4603      	mov	r3, r0
 800329a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800329e:	e006      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80032a6:	e002      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 80032a8:	bf00      	nop
 80032aa:	e000      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 80032ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ae:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10d      	bne.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80032b6:	4b79      	ldr	r3, [pc, #484]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80032bc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80032c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80032c8:	4a74      	ldr	r2, [pc, #464]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ca:	430b      	orrs	r3, r1
 80032cc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80032d0:	e003      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d2:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80032d6:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80032da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e2:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80032e6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80032e8:	2300      	movs	r3, #0
 80032ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80032ec:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80032f0:	460b      	mov	r3, r1
 80032f2:	4313      	orrs	r3, r2
 80032f4:	d046      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80032f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80032fe:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003302:	d028      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003304:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003308:	d821      	bhi.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x57e>
 800330a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800330e:	d022      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003310:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003314:	d81b      	bhi.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8003316:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800331a:	d01c      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800331c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003320:	d815      	bhi.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8003322:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003326:	d008      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8003328:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800332c:	d80f      	bhi.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x57e>
 800332e:	2b00      	cmp	r3, #0
 8003330:	d011      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003332:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003336:	d00e      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003338:	e009      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x57e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800333a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800333e:	3308      	adds	r3, #8
 8003340:	4618      	mov	r0, r3
 8003342:	f002 fb97 	bl	8005a74 <RCCEx_PLL2_Config>
 8003346:	4603      	mov	r3, r0
 8003348:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800334c:	e004      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x588>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8003354:	e000      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x588>
        break;
 8003356:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003358:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10d      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003360:	4b4e      	ldr	r3, [pc, #312]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003362:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003366:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800336a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800336e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003372:	4a4a      	ldr	r2, [pc, #296]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003374:	430b      	orrs	r3, r1
 8003376:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800337a:	e003      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800337c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003380:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003384:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003390:	673b      	str	r3, [r7, #112]	@ 0x70
 8003392:	2300      	movs	r3, #0
 8003394:	677b      	str	r3, [r7, #116]	@ 0x74
 8003396:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800339a:	460b      	mov	r3, r1
 800339c:	4313      	orrs	r3, r2
 800339e:	d03f      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80033a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033a8:	2b04      	cmp	r3, #4
 80033aa:	d81e      	bhi.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x61a>
 80033ac:	a201      	add	r2, pc, #4	@ (adr r2, 80033b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80033ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b2:	bf00      	nop
 80033b4:	080033f3 	.word	0x080033f3
 80033b8:	080033c9 	.word	0x080033c9
 80033bc:	080033d7 	.word	0x080033d7
 80033c0:	080033f3 	.word	0x080033f3
 80033c4:	080033f3 	.word	0x080033f3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80033c8:	4b34      	ldr	r3, [pc, #208]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033cc:	4a33      	ldr	r2, [pc, #204]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033d2:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80033d4:	e00e      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80033d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033da:	332c      	adds	r3, #44	@ 0x2c
 80033dc:	4618      	mov	r0, r3
 80033de:	f002 fbe1 	bl	8005ba4 <RCCEx_PLL3_Config>
 80033e2:	4603      	mov	r3, r0
 80033e4:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80033e8:	e004      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80033f0:	e000      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x624>
        break;
 80033f2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80033f4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10d      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80033fc:	4b27      	ldr	r3, [pc, #156]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003402:	f023 0107 	bic.w	r1, r3, #7
 8003406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800340a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800340e:	4a23      	ldr	r2, [pc, #140]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003410:	430b      	orrs	r3, r1
 8003412:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003416:	e003      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x650>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003418:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800341c:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003420:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003428:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800342c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800342e:	2300      	movs	r3, #0
 8003430:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003432:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003436:	460b      	mov	r3, r1
 8003438:	4313      	orrs	r3, r2
 800343a:	d04c      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x706>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800343c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003440:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003444:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003448:	d02a      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 800344a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800344e:	d821      	bhi.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8003450:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003454:	d026      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 8003456:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800345a:	d81b      	bhi.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 800345c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003460:	d00e      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8003462:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003466:	d815      	bhi.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8003468:	2b00      	cmp	r3, #0
 800346a:	d01d      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800346c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003470:	d110      	bne.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003472:	4b0a      	ldr	r3, [pc, #40]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003476:	4a09      	ldr	r2, [pc, #36]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003478:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800347c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800347e:	e014      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003480:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003484:	332c      	adds	r3, #44	@ 0x2c
 8003486:	4618      	mov	r0, r3
 8003488:	f002 fb8c 	bl	8005ba4 <RCCEx_PLL3_Config>
 800348c:	4603      	mov	r3, r0
 800348e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8003492:	e00a      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800349a:	e006      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x6da>
 800349c:	46020c00 	.word	0x46020c00
        break;
 80034a0:	bf00      	nop
 80034a2:	e002      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 80034a4:	bf00      	nop
 80034a6:	e000      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 80034a8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80034aa:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10d      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80034b2:	4baf      	ldr	r3, [pc, #700]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80034b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80034b8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80034bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034c4:	4aaa      	ldr	r2, [pc, #680]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80034c6:	430b      	orrs	r3, r1
 80034c8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80034cc:	e003      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x706>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ce:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80034d2:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034de:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80034e2:	663b      	str	r3, [r7, #96]	@ 0x60
 80034e4:	2300      	movs	r3, #0
 80034e6:	667b      	str	r3, [r7, #100]	@ 0x64
 80034e8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80034ec:	460b      	mov	r3, r1
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f000 80b5 	beq.w	800365e <HAL_RCCEx_PeriphCLKConfig+0x88e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034f4:	2300      	movs	r3, #0
 80034f6:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034fa:	4b9d      	ldr	r3, [pc, #628]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80034fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b00      	cmp	r3, #0
 8003506:	d113      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x760>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003508:	4b99      	ldr	r3, [pc, #612]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800350a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800350e:	4a98      	ldr	r2, [pc, #608]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003510:	f043 0304 	orr.w	r3, r3, #4
 8003514:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003518:	4b95      	ldr	r3, [pc, #596]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800351a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800351e:	f003 0304 	and.w	r3, r3, #4
 8003522:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003526:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
      pwrclkchanged = SET;
 800352a:	2301      	movs	r3, #1
 800352c:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003530:	4b90      	ldr	r3, [pc, #576]	@ (8003774 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8003532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003534:	4a8f      	ldr	r2, [pc, #572]	@ (8003774 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8003536:	f043 0301 	orr.w	r3, r3, #1
 800353a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800353c:	f7fd fd66 	bl	800100c <HAL_GetTick>
 8003540:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003544:	e00b      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x78e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003546:	f7fd fd61 	bl	800100c <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d903      	bls.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        ret = HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800355c:	e005      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x79a>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800355e:	4b85      	ldr	r3, [pc, #532]	@ (8003774 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8003560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0ed      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x776>
      }
    }

    if (ret == HAL_OK)
 800356a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800356e:	2b00      	cmp	r3, #0
 8003570:	d165      	bne.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003572:	4b7f      	ldr	r3, [pc, #508]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003574:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003578:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800357c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003580:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003584:	2b00      	cmp	r3, #0
 8003586:	d023      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x800>
 8003588:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800358c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8003590:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003594:	4293      	cmp	r3, r2
 8003596:	d01b      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x800>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003598:	4b75      	ldr	r3, [pc, #468]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800359a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800359e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035a2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035a6:	4b72      	ldr	r3, [pc, #456]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80035a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80035ac:	4a70      	ldr	r2, [pc, #448]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80035ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035b6:	4b6e      	ldr	r3, [pc, #440]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80035b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80035bc:	4a6c      	ldr	r2, [pc, #432]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80035be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035c6:	4a6a      	ldr	r2, [pc, #424]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80035c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035cc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d019      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x840>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035dc:	f7fd fd16 	bl	800100c <HAL_GetTick>
 80035e0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035e4:	e00d      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x832>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035e6:	f7fd fd11 	bl	800100c <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035f0:	1ad2      	subs	r2, r2, r3
 80035f2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d903      	bls.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x832>
          {
            ret = HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
            break;
 8003600:	e006      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x840>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003602:	4b5b      	ldr	r3, [pc, #364]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003604:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0ea      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x816>
          }
        }
      }

      if (ret == HAL_OK)
 8003610:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10d      	bne.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x864>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003618:	4b55      	ldr	r3, [pc, #340]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800361a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800361e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003626:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800362a:	4a51      	ldr	r2, [pc, #324]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800362c:	430b      	orrs	r3, r1
 800362e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003632:	e008      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003634:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003638:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
 800363c:	e003      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800363e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003642:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003646:	f897 3109 	ldrb.w	r3, [r7, #265]	@ 0x109
 800364a:	2b01      	cmp	r3, #1
 800364c:	d107      	bne.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x88e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800364e:	4b48      	ldr	r3, [pc, #288]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003650:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003654:	4a46      	ldr	r2, [pc, #280]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003656:	f023 0304 	bic.w	r3, r3, #4
 800365a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800365e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003666:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800366a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800366c:	2300      	movs	r3, #0
 800366e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003670:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003674:	460b      	mov	r3, r1
 8003676:	4313      	orrs	r3, r2
 8003678:	d042      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800367a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800367e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003682:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003686:	d022      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8003688:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800368c:	d81b      	bhi.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 800368e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003692:	d011      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 8003694:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003698:	d815      	bhi.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 800369a:	2b00      	cmp	r3, #0
 800369c:	d019      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x902>
 800369e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036a2:	d110      	bne.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036a8:	3308      	adds	r3, #8
 80036aa:	4618      	mov	r0, r3
 80036ac:	f002 f9e2 	bl	8005a74 <RCCEx_PLL2_Config>
 80036b0:	4603      	mov	r3, r0
 80036b2:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80036b6:	e00d      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036b8:	4b2d      	ldr	r3, [pc, #180]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80036ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036bc:	4a2c      	ldr	r2, [pc, #176]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80036be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036c2:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80036c4:	e006      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80036cc:	e002      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 80036ce:	bf00      	nop
 80036d0:	e000      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 80036d2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80036d4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d10d      	bne.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x928>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80036dc:	4b24      	ldr	r3, [pc, #144]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80036de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036e2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80036e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80036ee:	4a20      	ldr	r2, [pc, #128]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80036f0:	430b      	orrs	r3, r1
 80036f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80036f6:	e003      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80036fc:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003700:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003708:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800370c:	653b      	str	r3, [r7, #80]	@ 0x50
 800370e:	2300      	movs	r3, #0
 8003710:	657b      	str	r3, [r7, #84]	@ 0x54
 8003712:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003716:	460b      	mov	r3, r1
 8003718:	4313      	orrs	r3, r2
 800371a:	d031      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800371c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003720:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003724:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003728:	d00b      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800372a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800372e:	d804      	bhi.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003730:	2b00      	cmp	r3, #0
 8003732:	d008      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003734:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003738:	d007      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x97a>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8003740:	e004      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8003742:	bf00      	nop
 8003744:	e002      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8003746:	bf00      	nop
 8003748:	e000      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 800374a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800374c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003750:	2b00      	cmp	r3, #0
 8003752:	d111      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003754:	4b06      	ldr	r3, [pc, #24]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003756:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800375a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800375e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003762:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003766:	4a02      	ldr	r2, [pc, #8]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003768:	430b      	orrs	r3, r1
 800376a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800376e:	e007      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 8003770:	46020c00 	.word	0x46020c00
 8003774:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003778:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800377c:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8003780:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003788:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800378c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800378e:	2300      	movs	r3, #0
 8003790:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003792:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003796:	460b      	mov	r3, r1
 8003798:	4313      	orrs	r3, r2
 800379a:	d00c      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800379c:	4bb2      	ldr	r3, [pc, #712]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800379e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80037a2:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 80037a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80037ae:	4aae      	ldr	r2, [pc, #696]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80037b0:	430b      	orrs	r3, r1
 80037b2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80037b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037be:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80037c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80037c4:	2300      	movs	r3, #0
 80037c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80037c8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80037cc:	460b      	mov	r3, r1
 80037ce:	4313      	orrs	r3, r2
 80037d0:	d019      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80037d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80037da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037de:	d105      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80037e0:	4ba1      	ldr	r3, [pc, #644]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80037e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e4:	4aa0      	ldr	r2, [pc, #640]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80037e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037ea:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80037ec:	4b9e      	ldr	r3, [pc, #632]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80037ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80037f2:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80037f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80037fe:	4a9a      	ldr	r2, [pc, #616]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003800:	430b      	orrs	r3, r1
 8003802:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003806:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800380a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003812:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003814:	2300      	movs	r3, #0
 8003816:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003818:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800381c:	460b      	mov	r3, r1
 800381e:	4313      	orrs	r3, r2
 8003820:	d00c      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003822:	4b91      	ldr	r3, [pc, #580]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003828:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800382c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003830:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003834:	4a8c      	ldr	r2, [pc, #560]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003836:	430b      	orrs	r3, r1
 8003838:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800383c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003844:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003848:	633b      	str	r3, [r7, #48]	@ 0x30
 800384a:	2300      	movs	r3, #0
 800384c:	637b      	str	r3, [r7, #52]	@ 0x34
 800384e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003852:	460b      	mov	r3, r1
 8003854:	4313      	orrs	r3, r2
 8003856:	d00c      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003858:	4b83      	ldr	r3, [pc, #524]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800385a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800385e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003862:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003866:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800386a:	4a7f      	ldr	r2, [pc, #508]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800386c:	430b      	orrs	r3, r1
 800386e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003872:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800387e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003880:	2300      	movs	r3, #0
 8003882:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003884:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003888:	460b      	mov	r3, r1
 800388a:	4313      	orrs	r3, r2
 800388c:	d00c      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800388e:	4b76      	ldr	r3, [pc, #472]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003890:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003894:	f023 0218 	bic.w	r2, r3, #24
 8003898:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800389c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80038a0:	4971      	ldr	r1, [pc, #452]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80038a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b0:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80038b4:	623b      	str	r3, [r7, #32]
 80038b6:	2300      	movs	r3, #0
 80038b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80038ba:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80038be:	460b      	mov	r3, r1
 80038c0:	4313      	orrs	r3, r2
 80038c2:	d032      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80038c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038c8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80038cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80038d0:	d105      	bne.n	80038de <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038d2:	4b65      	ldr	r3, [pc, #404]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80038d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d6:	4a64      	ldr	r2, [pc, #400]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80038d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038dc:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80038de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80038e6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80038ea:	d108      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0xb2e>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80038ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038f0:	3308      	adds	r3, #8
 80038f2:	4618      	mov	r0, r3
 80038f4:	f002 f8be 	bl	8005a74 <RCCEx_PLL2_Config>
 80038f8:	4603      	mov	r3, r0
 80038fa:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
    }
    if (ret == HAL_OK)
 80038fe:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10d      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xb52>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8003906:	4b58      	ldr	r3, [pc, #352]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003908:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800390c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003910:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003914:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003918:	4953      	ldr	r1, [pc, #332]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800391a:	4313      	orrs	r3, r2
 800391c:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003920:	e003      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003922:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003926:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800392a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800392e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003932:	2100      	movs	r1, #0
 8003934:	61b9      	str	r1, [r7, #24]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	61fb      	str	r3, [r7, #28]
 800393c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003940:	460b      	mov	r3, r1
 8003942:	4313      	orrs	r3, r2
 8003944:	d04a      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 8003946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800394a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800394e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003952:	d01e      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 8003954:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003958:	d825      	bhi.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 800395a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800395e:	d00e      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8003960:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003964:	d81f      	bhi.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 8003966:	2b00      	cmp	r3, #0
 8003968:	d021      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800396a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800396e:	d11a      	bne.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003970:	4b3d      	ldr	r3, [pc, #244]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003974:	4a3c      	ldr	r2, [pc, #240]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003976:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800397a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800397c:	e018      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800397e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003982:	3308      	adds	r3, #8
 8003984:	4618      	mov	r0, r3
 8003986:	f002 f875 	bl	8005a74 <RCCEx_PLL2_Config>
 800398a:	4603      	mov	r3, r0
 800398c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8003990:	e00e      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003996:	332c      	adds	r3, #44	@ 0x2c
 8003998:	4618      	mov	r0, r3
 800399a:	f002 f903 	bl	8005ba4 <RCCEx_PLL3_Config>
 800399e:	4603      	mov	r3, r0
 80039a0:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80039a4:	e004      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      default:
        ret = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80039ac:	e000      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        break;
 80039ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039b0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10d      	bne.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xc04>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 80039b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80039ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80039be:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80039c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039c6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80039ca:	4927      	ldr	r1, [pc, #156]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80039d2:	e003      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80039d8:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80039dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e4:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80039e8:	613b      	str	r3, [r7, #16]
 80039ea:	2300      	movs	r3, #0
 80039ec:	617b      	str	r3, [r7, #20]
 80039ee:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80039f2:	460b      	mov	r3, r1
 80039f4:	4313      	orrs	r3, r2
 80039f6:	d03d      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xca4>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80039f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a04:	d00e      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8003a06:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a0a:	d815      	bhi.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d017      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003a10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a14:	d110      	bne.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0xc68>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a16:	4b14      	ldr	r3, [pc, #80]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a1a:	4a13      	ldr	r2, [pc, #76]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003a1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a20:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8003a22:	e00e      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a28:	3308      	adds	r3, #8
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f002 f822 	bl	8005a74 <RCCEx_PLL2_Config>
 8003a30:	4603      	mov	r3, r0
 8003a32:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8003a36:	e004      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      default:
        ret = HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8003a3e:	e000      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0xc72>
        break;
 8003a40:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003a42:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d110      	bne.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8003a4a:	4b07      	ldr	r3, [pc, #28]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a50:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003a54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a5c:	4902      	ldr	r1, [pc, #8]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003a64:	e006      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xca4>
 8003a66:	bf00      	nop
 8003a68:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a6c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003a70:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8003a74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003a80:	60bb      	str	r3, [r7, #8]
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	d00c      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0xcda>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8003a90:	4b2c      	ldr	r3, [pc, #176]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8003a92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003a96:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003a9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a9e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003aa2:	4928      	ldr	r1, [pc, #160]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 8003aaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	6039      	str	r1, [r7, #0]
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	607b      	str	r3, [r7, #4]
 8003abc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	d036      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 8003ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003aca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003ace:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003ad2:	d00d      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003ad4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003ad8:	d811      	bhi.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8003ada:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ade:	d012      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003ae0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ae4:	d80b      	bhi.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00d      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003aea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aee:	d106      	bne.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xd2e>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003af0:	4b14      	ldr	r3, [pc, #80]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8003af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af4:	4a13      	ldr	r2, [pc, #76]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8003af6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003afa:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8003afc:	e004      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xd38>

      default:
        ret = HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8003b04:	e000      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xd38>
        break;
 8003b06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b08:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10d      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xd5c>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8003b10:	4b0c      	ldr	r3, [pc, #48]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8003b12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003b16:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003b1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b1e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003b22:	4908      	ldr	r1, [pc, #32]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003b2a:	e003      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b2c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003b30:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8003b34:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b44:	46020c00 	.word	0x46020c00

08003b48 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b089      	sub	sp, #36	@ 0x24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003b50:	4bad      	ldr	r3, [pc, #692]	@ (8003e08 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003b52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b58:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003b5a:	4bab      	ldr	r3, [pc, #684]	@ (8003e08 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003b64:	4ba8      	ldr	r3, [pc, #672]	@ (8003e08 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b68:	0a1b      	lsrs	r3, r3, #8
 8003b6a:	f003 030f 	and.w	r3, r3, #15
 8003b6e:	3301      	adds	r3, #1
 8003b70:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003b72:	4ba5      	ldr	r3, [pc, #660]	@ (8003e08 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b76:	091b      	lsrs	r3, r3, #4
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003b7e:	4ba2      	ldr	r3, [pc, #648]	@ (8003e08 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b82:	08db      	lsrs	r3, r3, #3
 8003b84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	fb02 f303 	mul.w	r3, r2, r3
 8003b8e:	ee07 3a90 	vmov	s15, r3
 8003b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b96:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 8123 	beq.w	8003de8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	2b03      	cmp	r3, #3
 8003ba6:	d062      	beq.n	8003c6e <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	2b03      	cmp	r3, #3
 8003bac:	f200 8081 	bhi.w	8003cb2 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d024      	beq.n	8003c00 <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d17a      	bne.n	8003cb2 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	ee07 3a90 	vmov	s15, r3
 8003bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bc6:	eddf 6a91 	vldr	s13, [pc, #580]	@ 8003e0c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8003bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bce:	4b8e      	ldr	r3, [pc, #568]	@ (8003e08 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003bd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bd6:	ee07 3a90 	vmov	s15, r3
 8003bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003bde:	ed97 6a02 	vldr	s12, [r7, #8]
 8003be2:	eddf 5a8b 	vldr	s11, [pc, #556]	@ 8003e10 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003bee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bfe:	e08f      	b.n	8003d20 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003c00:	4b81      	ldr	r3, [pc, #516]	@ (8003e08 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d005      	beq.n	8003c18 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 8003c0c:	4b7e      	ldr	r3, [pc, #504]	@ (8003e08 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	0f1b      	lsrs	r3, r3, #28
 8003c12:	f003 030f 	and.w	r3, r3, #15
 8003c16:	e006      	b.n	8003c26 <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 8003c18:	4b7b      	ldr	r3, [pc, #492]	@ (8003e08 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003c1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003c1e:	041b      	lsls	r3, r3, #16
 8003c20:	0f1b      	lsrs	r3, r3, #28
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	4a7b      	ldr	r2, [pc, #492]	@ (8003e14 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8003c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c2c:	ee07 3a90 	vmov	s15, r3
 8003c30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	ee07 3a90 	vmov	s15, r3
 8003c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	ee07 3a90 	vmov	s15, r3
 8003c48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c4c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c50:	eddf 5a6f 	vldr	s11, [pc, #444]	@ 8003e10 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003c54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c60:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c6c:	e058      	b.n	8003d20 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	ee07 3a90 	vmov	s15, r3
 8003c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c78:	eddf 6a64 	vldr	s13, [pc, #400]	@ 8003e0c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8003c7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c80:	4b61      	ldr	r3, [pc, #388]	@ (8003e08 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003c82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c88:	ee07 3a90 	vmov	s15, r3
 8003c8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c90:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c94:	eddf 5a5e 	vldr	s11, [pc, #376]	@ 8003e10 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003c98:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ca0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ca4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cb0:	e036      	b.n	8003d20 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003cb2:	4b55      	ldr	r3, [pc, #340]	@ (8003e08 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d005      	beq.n	8003cca <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 8003cbe:	4b52      	ldr	r3, [pc, #328]	@ (8003e08 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	0f1b      	lsrs	r3, r3, #28
 8003cc4:	f003 030f 	and.w	r3, r3, #15
 8003cc8:	e006      	b.n	8003cd8 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 8003cca:	4b4f      	ldr	r3, [pc, #316]	@ (8003e08 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003ccc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003cd0:	041b      	lsls	r3, r3, #16
 8003cd2:	0f1b      	lsrs	r3, r3, #28
 8003cd4:	f003 030f 	and.w	r3, r3, #15
 8003cd8:	4a4e      	ldr	r2, [pc, #312]	@ (8003e14 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8003cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cde:	ee07 3a90 	vmov	s15, r3
 8003ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	ee07 3a90 	vmov	s15, r3
 8003cec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	ee07 3a90 	vmov	s15, r3
 8003cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d02:	eddf 5a43 	vldr	s11, [pc, #268]	@ 8003e10 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d1e:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003d20:	4b39      	ldr	r3, [pc, #228]	@ (8003e08 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d017      	beq.n	8003d5c <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003d2c:	4b36      	ldr	r3, [pc, #216]	@ (8003e08 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003d2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d30:	0a5b      	lsrs	r3, r3, #9
 8003d32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d36:	ee07 3a90 	vmov	s15, r3
 8003d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8003d3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d42:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003d46:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d52:	ee17 2a90 	vmov	r2, s15
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	e002      	b.n	8003d62 <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8003d62:	4b29      	ldr	r3, [pc, #164]	@ (8003e08 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d017      	beq.n	8003d9e <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003d6e:	4b26      	ldr	r3, [pc, #152]	@ (8003e08 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003d70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d72:	0c1b      	lsrs	r3, r3, #16
 8003d74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d78:	ee07 3a90 	vmov	s15, r3
 8003d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003d80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d84:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003d88:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d94:	ee17 2a90 	vmov	r2, s15
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	605a      	str	r2, [r3, #4]
 8003d9c:	e002      	b.n	8003da4 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8003da4:	4b18      	ldr	r3, [pc, #96]	@ (8003e08 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d017      	beq.n	8003de0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003db0:	4b15      	ldr	r3, [pc, #84]	@ (8003e08 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003db2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003db4:	0e1b      	lsrs	r3, r3, #24
 8003db6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dba:	ee07 3a90 	vmov	s15, r3
 8003dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8003dc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003dc6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003dca:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dd6:	ee17 2a90 	vmov	r2, s15
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003dde:	e00c      	b.n	8003dfa <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	609a      	str	r2, [r3, #8]
}
 8003de6:	e008      	b.n	8003dfa <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	609a      	str	r2, [r3, #8]
}
 8003dfa:	bf00      	nop
 8003dfc:	3724      	adds	r7, #36	@ 0x24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	46020c00 	.word	0x46020c00
 8003e0c:	4b742400 	.word	0x4b742400
 8003e10:	46000000 	.word	0x46000000
 8003e14:	080073b0 	.word	0x080073b0

08003e18 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b089      	sub	sp, #36	@ 0x24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003e20:	4bad      	ldr	r3, [pc, #692]	@ (80040d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e28:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003e2a:	4bab      	ldr	r3, [pc, #684]	@ (80040d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e2e:	f003 0303 	and.w	r3, r3, #3
 8003e32:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8003e34:	4ba8      	ldr	r3, [pc, #672]	@ (80040d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e38:	0a1b      	lsrs	r3, r3, #8
 8003e3a:	f003 030f 	and.w	r3, r3, #15
 8003e3e:	3301      	adds	r3, #1
 8003e40:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8003e42:	4ba5      	ldr	r3, [pc, #660]	@ (80040d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e46:	091b      	lsrs	r3, r3, #4
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003e4e:	4ba2      	ldr	r3, [pc, #648]	@ (80040d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e52:	08db      	lsrs	r3, r3, #3
 8003e54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	fb02 f303 	mul.w	r3, r2, r3
 8003e5e:	ee07 3a90 	vmov	s15, r3
 8003e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e66:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 8123 	beq.w	80040b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	2b03      	cmp	r3, #3
 8003e76:	d062      	beq.n	8003f3e <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	2b03      	cmp	r3, #3
 8003e7c:	f200 8081 	bhi.w	8003f82 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d024      	beq.n	8003ed0 <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d17a      	bne.n	8003f82 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	ee07 3a90 	vmov	s15, r3
 8003e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e96:	eddf 6a91 	vldr	s13, [pc, #580]	@ 80040dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e9e:	4b8e      	ldr	r3, [pc, #568]	@ (80040d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ea6:	ee07 3a90 	vmov	s15, r3
 8003eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003eae:	ed97 6a02 	vldr	s12, [r7, #8]
 8003eb2:	eddf 5a8b 	vldr	s11, [pc, #556]	@ 80040e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ebe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ece:	e08f      	b.n	8003ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003ed0:	4b81      	ldr	r3, [pc, #516]	@ (80040d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d005      	beq.n	8003ee8 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 8003edc:	4b7e      	ldr	r3, [pc, #504]	@ (80040d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	0f1b      	lsrs	r3, r3, #28
 8003ee2:	f003 030f 	and.w	r3, r3, #15
 8003ee6:	e006      	b.n	8003ef6 <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 8003ee8:	4b7b      	ldr	r3, [pc, #492]	@ (80040d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003eea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003eee:	041b      	lsls	r3, r3, #16
 8003ef0:	0f1b      	lsrs	r3, r3, #28
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	4a7b      	ldr	r2, [pc, #492]	@ (80040e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8003ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003efc:	ee07 3a90 	vmov	s15, r3
 8003f00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	ee07 3a90 	vmov	s15, r3
 8003f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	ee07 3a90 	vmov	s15, r3
 8003f18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f1c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f20:	eddf 5a6f 	vldr	s11, [pc, #444]	@ 80040e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003f24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f30:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003f34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f38:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f3c:	e058      	b.n	8003ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	ee07 3a90 	vmov	s15, r3
 8003f44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f48:	eddf 6a64 	vldr	s13, [pc, #400]	@ 80040dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003f4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f50:	4b61      	ldr	r3, [pc, #388]	@ (80040d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f58:	ee07 3a90 	vmov	s15, r3
 8003f5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003f60:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f64:	eddf 5a5e 	vldr	s11, [pc, #376]	@ 80040e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003f68:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003f6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003f70:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f74:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003f78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f7c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f80:	e036      	b.n	8003ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003f82:	4b55      	ldr	r3, [pc, #340]	@ (80040d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d005      	beq.n	8003f9a <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 8003f8e:	4b52      	ldr	r3, [pc, #328]	@ (80040d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	0f1b      	lsrs	r3, r3, #28
 8003f94:	f003 030f 	and.w	r3, r3, #15
 8003f98:	e006      	b.n	8003fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 8003f9a:	4b4f      	ldr	r3, [pc, #316]	@ (80040d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003f9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003fa0:	041b      	lsls	r3, r3, #16
 8003fa2:	0f1b      	lsrs	r3, r3, #28
 8003fa4:	f003 030f 	and.w	r3, r3, #15
 8003fa8:	4a4e      	ldr	r2, [pc, #312]	@ (80040e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8003faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fae:	ee07 3a90 	vmov	s15, r3
 8003fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	ee07 3a90 	vmov	s15, r3
 8003fbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	ee07 3a90 	vmov	s15, r3
 8003fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fce:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fd2:	eddf 5a43 	vldr	s11, [pc, #268]	@ 80040e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fee:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8003ff0:	4b39      	ldr	r3, [pc, #228]	@ (80040d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d017      	beq.n	800402c <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003ffc:	4b36      	ldr	r3, [pc, #216]	@ (80040d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004000:	0a5b      	lsrs	r3, r3, #9
 8004002:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004006:	ee07 3a90 	vmov	s15, r3
 800400a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800400e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004012:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004016:	edd7 6a07 	vldr	s13, [r7, #28]
 800401a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800401e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004022:	ee17 2a90 	vmov	r2, s15
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	e002      	b.n	8004032 <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004032:	4b29      	ldr	r3, [pc, #164]	@ (80040d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d017      	beq.n	800406e <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800403e:	4b26      	ldr	r3, [pc, #152]	@ (80040d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004042:	0c1b      	lsrs	r3, r3, #16
 8004044:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004048:	ee07 3a90 	vmov	s15, r3
 800404c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004050:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004054:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004058:	edd7 6a07 	vldr	s13, [r7, #28]
 800405c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004060:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004064:	ee17 2a90 	vmov	r2, s15
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	605a      	str	r2, [r3, #4]
 800406c:	e002      	b.n	8004074 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004074:	4b18      	ldr	r3, [pc, #96]	@ (80040d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004078:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d017      	beq.n	80040b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004080:	4b15      	ldr	r3, [pc, #84]	@ (80040d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004084:	0e1b      	lsrs	r3, r3, #24
 8004086:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800408a:	ee07 3a90 	vmov	s15, r3
 800408e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8004092:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004096:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800409a:	edd7 6a07 	vldr	s13, [r7, #28]
 800409e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040a6:	ee17 2a90 	vmov	r2, s15
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80040ae:	e00c      	b.n	80040ca <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	609a      	str	r2, [r3, #8]
}
 80040b6:	e008      	b.n	80040ca <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	609a      	str	r2, [r3, #8]
}
 80040ca:	bf00      	nop
 80040cc:	3724      	adds	r7, #36	@ 0x24
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	46020c00 	.word	0x46020c00
 80040dc:	4b742400 	.word	0x4b742400
 80040e0:	46000000 	.word	0x46000000
 80040e4:	080073b0 	.word	0x080073b0

080040e8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b089      	sub	sp, #36	@ 0x24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80040f0:	4bad      	ldr	r3, [pc, #692]	@ (80043a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80040f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040f8:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80040fa:	4bab      	ldr	r3, [pc, #684]	@ (80043a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80040fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040fe:	f003 0303 	and.w	r3, r3, #3
 8004102:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8004104:	4ba8      	ldr	r3, [pc, #672]	@ (80043a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004108:	0a1b      	lsrs	r3, r3, #8
 800410a:	f003 030f 	and.w	r3, r3, #15
 800410e:	3301      	adds	r3, #1
 8004110:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8004112:	4ba5      	ldr	r3, [pc, #660]	@ (80043a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004116:	091b      	lsrs	r3, r3, #4
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800411e:	4ba2      	ldr	r3, [pc, #648]	@ (80043a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004120:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004122:	08db      	lsrs	r3, r3, #3
 8004124:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	fb02 f303 	mul.w	r3, r2, r3
 800412e:	ee07 3a90 	vmov	s15, r3
 8004132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004136:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 8123 	beq.w	8004388 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	2b03      	cmp	r3, #3
 8004146:	d062      	beq.n	800420e <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	2b03      	cmp	r3, #3
 800414c:	f200 8081 	bhi.w	8004252 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d024      	beq.n	80041a0 <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	2b02      	cmp	r3, #2
 800415a:	d17a      	bne.n	8004252 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	ee07 3a90 	vmov	s15, r3
 8004162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004166:	eddf 6a91 	vldr	s13, [pc, #580]	@ 80043ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800416a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800416e:	4b8e      	ldr	r3, [pc, #568]	@ (80043a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004176:	ee07 3a90 	vmov	s15, r3
 800417a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800417e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004182:	eddf 5a8b 	vldr	s11, [pc, #556]	@ 80043b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004186:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800418a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800418e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004192:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800419a:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 800419e:	e08f      	b.n	80042c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80041a0:	4b81      	ldr	r3, [pc, #516]	@ (80043a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d005      	beq.n	80041b8 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 80041ac:	4b7e      	ldr	r3, [pc, #504]	@ (80043a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	0f1b      	lsrs	r3, r3, #28
 80041b2:	f003 030f 	and.w	r3, r3, #15
 80041b6:	e006      	b.n	80041c6 <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 80041b8:	4b7b      	ldr	r3, [pc, #492]	@ (80043a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80041ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80041be:	041b      	lsls	r3, r3, #16
 80041c0:	0f1b      	lsrs	r3, r3, #28
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	4a7b      	ldr	r2, [pc, #492]	@ (80043b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 80041c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041cc:	ee07 3a90 	vmov	s15, r3
 80041d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	ee07 3a90 	vmov	s15, r3
 80041da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	ee07 3a90 	vmov	s15, r3
 80041e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80041f0:	eddf 5a6f 	vldr	s11, [pc, #444]	@ 80043b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80041f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004200:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004208:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800420c:	e058      	b.n	80042c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	ee07 3a90 	vmov	s15, r3
 8004214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004218:	eddf 6a64 	vldr	s13, [pc, #400]	@ 80043ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800421c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004220:	4b61      	ldr	r3, [pc, #388]	@ (80043a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004222:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004228:	ee07 3a90 	vmov	s15, r3
 800422c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004230:	ed97 6a02 	vldr	s12, [r7, #8]
 8004234:	eddf 5a5e 	vldr	s11, [pc, #376]	@ 80043b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004238:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800423c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004240:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004244:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800424c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004250:	e036      	b.n	80042c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004252:	4b55      	ldr	r3, [pc, #340]	@ (80043a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d005      	beq.n	800426a <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 800425e:	4b52      	ldr	r3, [pc, #328]	@ (80043a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	0f1b      	lsrs	r3, r3, #28
 8004264:	f003 030f 	and.w	r3, r3, #15
 8004268:	e006      	b.n	8004278 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 800426a:	4b4f      	ldr	r3, [pc, #316]	@ (80043a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800426c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004270:	041b      	lsls	r3, r3, #16
 8004272:	0f1b      	lsrs	r3, r3, #28
 8004274:	f003 030f 	and.w	r3, r3, #15
 8004278:	4a4e      	ldr	r2, [pc, #312]	@ (80043b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 800427a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800427e:	ee07 3a90 	vmov	s15, r3
 8004282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	ee07 3a90 	vmov	s15, r3
 800428c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004290:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	ee07 3a90 	vmov	s15, r3
 800429a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800429e:	ed97 6a02 	vldr	s12, [r7, #8]
 80042a2:	eddf 5a43 	vldr	s11, [pc, #268]	@ 80043b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80042a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80042b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042be:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80042c0:	4b39      	ldr	r3, [pc, #228]	@ (80043a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80042c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d017      	beq.n	80042fc <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80042cc:	4b36      	ldr	r3, [pc, #216]	@ (80043a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80042ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d0:	0a5b      	lsrs	r3, r3, #9
 80042d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042d6:	ee07 3a90 	vmov	s15, r3
 80042da:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80042de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80042e2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80042e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80042ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042f2:	ee17 2a90 	vmov	r2, s15
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	e002      	b.n	8004302 <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8004302:	4b29      	ldr	r3, [pc, #164]	@ (80043a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d017      	beq.n	800433e <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800430e:	4b26      	ldr	r3, [pc, #152]	@ (80043a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004312:	0c1b      	lsrs	r3, r3, #16
 8004314:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004318:	ee07 3a90 	vmov	s15, r3
 800431c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8004320:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004324:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004328:	edd7 6a07 	vldr	s13, [r7, #28]
 800432c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004330:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004334:	ee17 2a90 	vmov	r2, s15
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	605a      	str	r2, [r3, #4]
 800433c:	e002      	b.n	8004344 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8004344:	4b18      	ldr	r3, [pc, #96]	@ (80043a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004348:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d017      	beq.n	8004380 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004350:	4b15      	ldr	r3, [pc, #84]	@ (80043a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004354:	0e1b      	lsrs	r3, r3, #24
 8004356:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800435a:	ee07 3a90 	vmov	s15, r3
 800435e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8004362:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004366:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800436a:	edd7 6a07 	vldr	s13, [r7, #28]
 800436e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004372:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004376:	ee17 2a90 	vmov	r2, s15
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800437e:	e00c      	b.n	800439a <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	609a      	str	r2, [r3, #8]
}
 8004386:	e008      	b.n	800439a <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	609a      	str	r2, [r3, #8]
}
 800439a:	bf00      	nop
 800439c:	3724      	adds	r7, #36	@ 0x24
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	46020c00 	.word	0x46020c00
 80043ac:	4b742400 	.word	0x4b742400
 80043b0:	46000000 	.word	0x46000000
 80043b4:	080073b0 	.word	0x080073b0

080043b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b08e      	sub	sp, #56	@ 0x38
 80043bc:	af00      	add	r7, sp, #0
 80043be:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80043c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043c6:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80043ca:	430b      	orrs	r3, r1
 80043cc:	d145      	bne.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80043ce:	4ba7      	ldr	r3, [pc, #668]	@ (800466c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80043d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043d8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80043da:	4ba4      	ldr	r3, [pc, #656]	@ (800466c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80043dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d108      	bne.n	80043fa <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80043e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043ee:	d104      	bne.n	80043fa <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80043f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80043f6:	f001 bb31 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80043fa:	4b9c      	ldr	r3, [pc, #624]	@ (800466c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80043fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004400:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004404:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004408:	d114      	bne.n	8004434 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800440a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800440c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004410:	d110      	bne.n	8004434 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004412:	4b96      	ldr	r3, [pc, #600]	@ (800466c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004414:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004418:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800441c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004420:	d103      	bne.n	800442a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8004422:	23fa      	movs	r3, #250	@ 0xfa
 8004424:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004426:	f001 bb19 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 800442a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800442e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004430:	f001 bb14 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8004434:	4b8d      	ldr	r3, [pc, #564]	@ (800466c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800443c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004440:	d107      	bne.n	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8004442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004444:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004448:	d103      	bne.n	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800444a:	4b89      	ldr	r3, [pc, #548]	@ (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800444c:	637b      	str	r3, [r7, #52]	@ 0x34
 800444e:	f001 bb05 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004452:	2300      	movs	r3, #0
 8004454:	637b      	str	r3, [r7, #52]	@ 0x34
 8004456:	f001 bb01 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800445a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800445e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8004462:	430b      	orrs	r3, r1
 8004464:	d151      	bne.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004466:	4b81      	ldr	r3, [pc, #516]	@ (800466c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004468:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800446c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8004470:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004474:	2b80      	cmp	r3, #128	@ 0x80
 8004476:	d035      	beq.n	80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8004478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800447a:	2b80      	cmp	r3, #128	@ 0x80
 800447c:	d841      	bhi.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800447e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004480:	2b60      	cmp	r3, #96	@ 0x60
 8004482:	d02a      	beq.n	80044da <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8004484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004486:	2b60      	cmp	r3, #96	@ 0x60
 8004488:	d83b      	bhi.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800448a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800448c:	2b40      	cmp	r3, #64	@ 0x40
 800448e:	d009      	beq.n	80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004492:	2b40      	cmp	r3, #64	@ 0x40
 8004494:	d835      	bhi.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00c      	beq.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800449c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800449e:	2b20      	cmp	r3, #32
 80044a0:	d012      	beq.n	80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80044a2:	e02e      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80044a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7ff fb4d 	bl	8003b48 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80044ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80044b2:	f001 bad3 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80044b6:	f107 0318 	add.w	r3, r7, #24
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7ff fcac 	bl	8003e18 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80044c4:	f001 baca 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80044c8:	f107 030c 	add.w	r3, r7, #12
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7ff fe0b 	bl	80040e8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80044d6:	f001 bac1 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80044da:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80044de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80044e0:	f001 babc 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80044e4:	4b61      	ldr	r3, [pc, #388]	@ (800466c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044f0:	d103      	bne.n	80044fa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80044f2:	4b60      	ldr	r3, [pc, #384]	@ (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80044f4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80044f6:	f001 bab1 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80044fa:	2300      	movs	r3, #0
 80044fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80044fe:	f001 baad 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :
      {
        frequency = 0U;
 8004502:	2300      	movs	r3, #0
 8004504:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004506:	f001 baa9 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800450a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800450e:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8004512:	430b      	orrs	r3, r1
 8004514:	d158      	bne.n	80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004516:	4b55      	ldr	r3, [pc, #340]	@ (800466c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004518:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800451c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004520:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004524:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004528:	d03b      	beq.n	80045a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800452a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004530:	d846      	bhi.n	80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004534:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004538:	d02e      	beq.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800453a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800453c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004540:	d83e      	bhi.n	80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004544:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004548:	d00b      	beq.n	8004562 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800454a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800454c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004550:	d836      	bhi.n	80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00d      	beq.n	8004574 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8004558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800455a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800455e:	d012      	beq.n	8004586 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8004560:	e02e      	b.n	80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004562:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004566:	4618      	mov	r0, r3
 8004568:	f7ff faee 	bl	8003b48 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800456c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004570:	f001 ba74 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004574:	f107 0318 	add.w	r3, r7, #24
 8004578:	4618      	mov	r0, r3
 800457a:	f7ff fc4d 	bl	8003e18 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004582:	f001 ba6b 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004586:	f107 030c 	add.w	r3, r7, #12
 800458a:	4618      	mov	r0, r3
 800458c:	f7ff fdac 	bl	80040e8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004594:	f001 ba62 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004598:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800459c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800459e:	f001 ba5d 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80045a2:	4b32      	ldr	r3, [pc, #200]	@ (800466c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045ae:	d103      	bne.n	80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80045b0:	4b30      	ldr	r3, [pc, #192]	@ (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80045b2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80045b4:	f001 ba52 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80045bc:	f001 ba4e 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80045c4:	f001 ba4a 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 80045c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045cc:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80045d0:	430b      	orrs	r3, r1
 80045d2:	d126      	bne.n	8004622 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80045d4:	4b25      	ldr	r3, [pc, #148]	@ (800466c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80045d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80045da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045de:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 80045e0:	4b22      	ldr	r3, [pc, #136]	@ (800466c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045ec:	d106      	bne.n	80045fc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80045ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d103      	bne.n	80045fc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 80045f4:	4b1f      	ldr	r3, [pc, #124]	@ (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80045f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80045f8:	f001 ba30 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 80045fc:	4b1b      	ldr	r3, [pc, #108]	@ (800466c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004604:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004608:	d107      	bne.n	800461a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800460a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800460c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004610:	d103      	bne.n	800461a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8004612:	4b19      	ldr	r3, [pc, #100]	@ (8004678 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004614:	637b      	str	r3, [r7, #52]	@ 0x34
 8004616:	f001 ba21 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	637b      	str	r3, [r7, #52]	@ 0x34
 800461e:	f001 ba1d 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8004622:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004626:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800462a:	430b      	orrs	r3, r1
 800462c:	d16e      	bne.n	800470c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800462e:	4b0f      	ldr	r3, [pc, #60]	@ (800466c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004634:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004638:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800463a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800463c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004640:	d03d      	beq.n	80046be <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8004642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004644:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004648:	d85c      	bhi.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800464a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800464c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004650:	d014      	beq.n	800467c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8004652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004654:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004658:	d854      	bhi.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800465a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800465c:	2b00      	cmp	r3, #0
 800465e:	d01f      	beq.n	80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8004660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004662:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004666:	d012      	beq.n	800468e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8004668:	e04c      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800466a:	bf00      	nop
 800466c:	46020c00 	.word	0x46020c00
 8004670:	0007a120 	.word	0x0007a120
 8004674:	00f42400 	.word	0x00f42400
 8004678:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800467c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff fa61 	bl	8003b48 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8004686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004688:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800468a:	f001 b9e7 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800468e:	f107 0318 	add.w	r3, r7, #24
 8004692:	4618      	mov	r0, r3
 8004694:	f7ff fbc0 	bl	8003e18 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800469c:	f001 b9de 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80046a0:	4ba7      	ldr	r3, [pc, #668]	@ (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046ac:	d103      	bne.n	80046b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 80046ae:	4ba5      	ldr	r3, [pc, #660]	@ (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80046b0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80046b2:	f001 b9d3 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80046ba:	f001 b9cf 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80046be:	4ba0      	ldr	r3, [pc, #640]	@ (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0320 	and.w	r3, r3, #32
 80046c6:	2b20      	cmp	r3, #32
 80046c8:	d118      	bne.n	80046fc <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80046ca:	4b9d      	ldr	r3, [pc, #628]	@ (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d005      	beq.n	80046e2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80046d6:	4b9a      	ldr	r3, [pc, #616]	@ (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	0e1b      	lsrs	r3, r3, #24
 80046dc:	f003 030f 	and.w	r3, r3, #15
 80046e0:	e006      	b.n	80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80046e2:	4b97      	ldr	r3, [pc, #604]	@ (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80046e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80046e8:	041b      	lsls	r3, r3, #16
 80046ea:	0e1b      	lsrs	r3, r3, #24
 80046ec:	f003 030f 	and.w	r3, r3, #15
 80046f0:	4a95      	ldr	r2, [pc, #596]	@ (8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80046f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046f6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80046f8:	f001 b9b0 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80046fc:	2300      	movs	r3, #0
 80046fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004700:	f001 b9ac 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 8004704:	2300      	movs	r3, #0
 8004706:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004708:	f001 b9a8 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800470c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004710:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8004714:	430b      	orrs	r3, r1
 8004716:	d17f      	bne.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004718:	4b89      	ldr	r3, [pc, #548]	@ (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800471a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800471e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004722:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8004724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004726:	2b00      	cmp	r3, #0
 8004728:	d165      	bne.n	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800472a:	4b85      	ldr	r3, [pc, #532]	@ (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800472c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004730:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004734:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8004736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004738:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800473c:	d034      	beq.n	80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800473e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004740:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004744:	d853      	bhi.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8004746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004748:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800474c:	d00b      	beq.n	8004766 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800474e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004750:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004754:	d84b      	bhi.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8004756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004758:	2b00      	cmp	r3, #0
 800475a:	d016      	beq.n	800478a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800475c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800475e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004762:	d009      	beq.n	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8004764:	e043      	b.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004766:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800476a:	4618      	mov	r0, r3
 800476c:	f7ff f9ec 	bl	8003b48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004772:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004774:	f001 b972 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004778:	f107 0318 	add.w	r3, r7, #24
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff fb4b 	bl	8003e18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004786:	f001 b969 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800478a:	4b6d      	ldr	r3, [pc, #436]	@ (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004792:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004796:	d103      	bne.n	80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8004798:	4b6a      	ldr	r3, [pc, #424]	@ (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800479a:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800479c:	f001 b95e 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80047a4:	f001 b95a 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80047a8:	4b65      	ldr	r3, [pc, #404]	@ (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0320 	and.w	r3, r3, #32
 80047b0:	2b20      	cmp	r3, #32
 80047b2:	d118      	bne.n	80047e6 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80047b4:	4b62      	ldr	r3, [pc, #392]	@ (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d005      	beq.n	80047cc <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 80047c0:	4b5f      	ldr	r3, [pc, #380]	@ (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	0e1b      	lsrs	r3, r3, #24
 80047c6:	f003 030f 	and.w	r3, r3, #15
 80047ca:	e006      	b.n	80047da <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80047cc:	4b5c      	ldr	r3, [pc, #368]	@ (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80047ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80047d2:	041b      	lsls	r3, r3, #16
 80047d4:	0e1b      	lsrs	r3, r3, #24
 80047d6:	f003 030f 	and.w	r3, r3, #15
 80047da:	4a5b      	ldr	r2, [pc, #364]	@ (8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80047dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047e0:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80047e2:	f001 b93b 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 80047e6:	2300      	movs	r3, #0
 80047e8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80047ea:	f001 b937 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        default :
        {
          frequency = 0U;
 80047ee:	2300      	movs	r3, #0
 80047f0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80047f2:	f001 b933 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80047f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047fc:	d108      	bne.n	8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80047fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004802:	4618      	mov	r0, r3
 8004804:	f7ff f9a0 	bl	8003b48 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8004808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480a:	637b      	str	r3, [r7, #52]	@ 0x34
 800480c:	f001 b926 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else
    {
      frequency = 0U;
 8004810:	2300      	movs	r3, #0
 8004812:	637b      	str	r3, [r7, #52]	@ 0x34
 8004814:	f001 b922 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8004818:	e9d7 2300 	ldrd	r2, r3, [r7]
 800481c:	1e51      	subs	r1, r2, #1
 800481e:	430b      	orrs	r3, r1
 8004820:	d136      	bne.n	8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004822:	4b47      	ldr	r3, [pc, #284]	@ (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004828:	f003 0303 	and.w	r3, r3, #3
 800482c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800482e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004830:	2b00      	cmp	r3, #0
 8004832:	d104      	bne.n	800483e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8004834:	f7fe fa1e 	bl	8002c74 <HAL_RCC_GetPCLK2Freq>
 8004838:	6378      	str	r0, [r7, #52]	@ 0x34
 800483a:	f001 b90f 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800483e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004840:	2b01      	cmp	r3, #1
 8004842:	d104      	bne.n	800484e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004844:	f7fe f8e0 	bl	8002a08 <HAL_RCC_GetSysClockFreq>
 8004848:	6378      	str	r0, [r7, #52]	@ 0x34
 800484a:	f001 b907 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800484e:	4b3c      	ldr	r3, [pc, #240]	@ (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004856:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800485a:	d106      	bne.n	800486a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800485c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485e:	2b02      	cmp	r3, #2
 8004860:	d103      	bne.n	800486a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8004862:	4b3a      	ldr	r3, [pc, #232]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004864:	637b      	str	r3, [r7, #52]	@ 0x34
 8004866:	f001 b8f9 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800486a:	4b35      	ldr	r3, [pc, #212]	@ (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800486c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b02      	cmp	r3, #2
 8004876:	d107      	bne.n	8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8004878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800487a:	2b03      	cmp	r3, #3
 800487c:	d104      	bne.n	8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800487e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004882:	637b      	str	r3, [r7, #52]	@ 0x34
 8004884:	f001 b8ea 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8004888:	2300      	movs	r3, #0
 800488a:	637b      	str	r3, [r7, #52]	@ 0x34
 800488c:	f001 b8e6 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8004890:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004894:	1e91      	subs	r1, r2, #2
 8004896:	430b      	orrs	r3, r1
 8004898:	d136      	bne.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800489a:	4b29      	ldr	r3, [pc, #164]	@ (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800489c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048a0:	f003 030c 	and.w	r3, r3, #12
 80048a4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80048a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d104      	bne.n	80048b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80048ac:	f7fe f9ce 	bl	8002c4c <HAL_RCC_GetPCLK1Freq>
 80048b0:	6378      	str	r0, [r7, #52]	@ 0x34
 80048b2:	f001 b8d3 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80048b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b8:	2b04      	cmp	r3, #4
 80048ba:	d104      	bne.n	80048c6 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80048bc:	f7fe f8a4 	bl	8002a08 <HAL_RCC_GetSysClockFreq>
 80048c0:	6378      	str	r0, [r7, #52]	@ 0x34
 80048c2:	f001 b8cb 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80048c6:	4b1e      	ldr	r3, [pc, #120]	@ (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048d2:	d106      	bne.n	80048e2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80048d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d6:	2b08      	cmp	r3, #8
 80048d8:	d103      	bne.n	80048e2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 80048da:	4b1c      	ldr	r3, [pc, #112]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80048dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80048de:	f001 b8bd 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80048e2:	4b17      	ldr	r3, [pc, #92]	@ (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80048e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d107      	bne.n	8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80048f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f2:	2b0c      	cmp	r3, #12
 80048f4:	d104      	bne.n	8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 80048f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80048fc:	f001 b8ae 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	637b      	str	r3, [r7, #52]	@ 0x34
 8004904:	f001 b8aa 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8004908:	e9d7 2300 	ldrd	r2, r3, [r7]
 800490c:	1f11      	subs	r1, r2, #4
 800490e:	430b      	orrs	r3, r1
 8004910:	d13f      	bne.n	8004992 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004912:	4b0b      	ldr	r3, [pc, #44]	@ (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004918:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800491c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800491e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004920:	2b00      	cmp	r3, #0
 8004922:	d104      	bne.n	800492e <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004924:	f7fe f992 	bl	8002c4c <HAL_RCC_GetPCLK1Freq>
 8004928:	6378      	str	r0, [r7, #52]	@ 0x34
 800492a:	f001 b897 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800492e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004930:	2b10      	cmp	r3, #16
 8004932:	d10d      	bne.n	8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004934:	f7fe f868 	bl	8002a08 <HAL_RCC_GetSysClockFreq>
 8004938:	6378      	str	r0, [r7, #52]	@ 0x34
 800493a:	f001 b88f 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800493e:	bf00      	nop
 8004940:	46020c00 	.word	0x46020c00
 8004944:	02dc6c00 	.word	0x02dc6c00
 8004948:	080073b0 	.word	0x080073b0
 800494c:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8004950:	4ba8      	ldr	r3, [pc, #672]	@ (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004958:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800495c:	d106      	bne.n	800496c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800495e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004960:	2b20      	cmp	r3, #32
 8004962:	d103      	bne.n	800496c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8004964:	4ba4      	ldr	r3, [pc, #656]	@ (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004966:	637b      	str	r3, [r7, #52]	@ 0x34
 8004968:	f001 b878 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800496c:	4ba1      	ldr	r3, [pc, #644]	@ (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800496e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b02      	cmp	r3, #2
 8004978:	d107      	bne.n	800498a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800497a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800497c:	2b30      	cmp	r3, #48	@ 0x30
 800497e:	d104      	bne.n	800498a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8004980:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004984:	637b      	str	r3, [r7, #52]	@ 0x34
 8004986:	f001 b869 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800498a:	2300      	movs	r3, #0
 800498c:	637b      	str	r3, [r7, #52]	@ 0x34
 800498e:	f001 b865 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8004992:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004996:	f1a2 0108 	sub.w	r1, r2, #8
 800499a:	430b      	orrs	r3, r1
 800499c:	d136      	bne.n	8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800499e:	4b95      	ldr	r3, [pc, #596]	@ (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80049a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049a4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80049a8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80049aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d104      	bne.n	80049ba <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80049b0:	f7fe f94c 	bl	8002c4c <HAL_RCC_GetPCLK1Freq>
 80049b4:	6378      	str	r0, [r7, #52]	@ 0x34
 80049b6:	f001 b851 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80049ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049bc:	2b40      	cmp	r3, #64	@ 0x40
 80049be:	d104      	bne.n	80049ca <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80049c0:	f7fe f822 	bl	8002a08 <HAL_RCC_GetSysClockFreq>
 80049c4:	6378      	str	r0, [r7, #52]	@ 0x34
 80049c6:	f001 b849 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80049ca:	4b8a      	ldr	r3, [pc, #552]	@ (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049d6:	d106      	bne.n	80049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 80049d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049da:	2b80      	cmp	r3, #128	@ 0x80
 80049dc:	d103      	bne.n	80049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 80049de:	4b86      	ldr	r3, [pc, #536]	@ (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80049e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80049e2:	f001 b83b 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80049e6:	4b83      	ldr	r3, [pc, #524]	@ (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80049e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049ec:	f003 0302 	and.w	r3, r3, #2
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d107      	bne.n	8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80049f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80049f8:	d104      	bne.n	8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 80049fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a00:	f001 b82c 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8004a04:	2300      	movs	r3, #0
 8004a06:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a08:	f001 b828 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8004a0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a10:	f1a2 0110 	sub.w	r1, r2, #16
 8004a14:	430b      	orrs	r3, r1
 8004a16:	d139      	bne.n	8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004a18:	4b76      	ldr	r3, [pc, #472]	@ (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a22:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8004a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d104      	bne.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004a2a:	f7fe f90f 	bl	8002c4c <HAL_RCC_GetPCLK1Freq>
 8004a2e:	6378      	str	r0, [r7, #52]	@ 0x34
 8004a30:	f001 b814 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8004a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a3a:	d104      	bne.n	8004a46 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004a3c:	f7fd ffe4 	bl	8002a08 <HAL_RCC_GetSysClockFreq>
 8004a40:	6378      	str	r0, [r7, #52]	@ 0x34
 8004a42:	f001 b80b 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8004a46:	4b6b      	ldr	r3, [pc, #428]	@ (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a52:	d107      	bne.n	8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8004a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a5a:	d103      	bne.n	8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8004a5c:	4b66      	ldr	r3, [pc, #408]	@ (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004a5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a60:	f000 bffc 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8004a64:	4b63      	ldr	r3, [pc, #396]	@ (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d108      	bne.n	8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8004a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a78:	d104      	bne.n	8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8004a7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a80:	f000 bfec 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a88:	f000 bfe8 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 8004a8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a90:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8004a94:	430b      	orrs	r3, r1
 8004a96:	d139      	bne.n	8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8004a98:	4b56      	ldr	r3, [pc, #344]	@ (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a9a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a9e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004aa2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8004aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d104      	bne.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004aaa:	f7fe f8cf 	bl	8002c4c <HAL_RCC_GetPCLK1Freq>
 8004aae:	6378      	str	r0, [r7, #52]	@ 0x34
 8004ab0:	f000 bfd4 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 8004ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aba:	d104      	bne.n	8004ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004abc:	f7fd ffa4 	bl	8002a08 <HAL_RCC_GetSysClockFreq>
 8004ac0:	6378      	str	r0, [r7, #52]	@ 0x34
 8004ac2:	f000 bfcb 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8004ac6:	4b4b      	ldr	r3, [pc, #300]	@ (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ace:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ad2:	d107      	bne.n	8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ada:	d103      	bne.n	8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 8004adc:	4b46      	ldr	r3, [pc, #280]	@ (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004ade:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ae0:	f000 bfbc 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8004ae4:	4b43      	ldr	r3, [pc, #268]	@ (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004ae6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d108      	bne.n	8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 8004af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004af8:	d104      	bne.n	8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 8004afa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004afe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b00:	f000 bfac 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8004b04:	2300      	movs	r3, #0
 8004b06:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b08:	f000 bfa8 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8004b0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b10:	f1a2 0120 	sub.w	r1, r2, #32
 8004b14:	430b      	orrs	r3, r1
 8004b16:	d158      	bne.n	8004bca <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004b18:	4b36      	ldr	r3, [pc, #216]	@ (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b1e:	f003 0307 	and.w	r3, r3, #7
 8004b22:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d104      	bne.n	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8004b2a:	f7fe f8b7 	bl	8002c9c <HAL_RCC_GetPCLK3Freq>
 8004b2e:	6378      	str	r0, [r7, #52]	@ 0x34
 8004b30:	f000 bf94 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8004b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d104      	bne.n	8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004b3a:	f7fd ff65 	bl	8002a08 <HAL_RCC_GetSysClockFreq>
 8004b3e:	6378      	str	r0, [r7, #52]	@ 0x34
 8004b40:	f000 bf8c 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004b44:	4b2b      	ldr	r3, [pc, #172]	@ (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b50:	d106      	bne.n	8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8004b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d103      	bne.n	8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 8004b58:	4b27      	ldr	r3, [pc, #156]	@ (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004b5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b5c:	f000 bf7e 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004b60:	4b24      	ldr	r3, [pc, #144]	@ (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d107      	bne.n	8004b7e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8004b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b70:	2b03      	cmp	r3, #3
 8004b72:	d104      	bne.n	8004b7e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 8004b74:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b78:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b7a:	f000 bf6f 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8004b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0320 	and.w	r3, r3, #32
 8004b86:	2b20      	cmp	r3, #32
 8004b88:	d11b      	bne.n	8004bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8004b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b8c:	2b04      	cmp	r3, #4
 8004b8e:	d118      	bne.n	8004bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004b90:	4b18      	ldr	r3, [pc, #96]	@ (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d005      	beq.n	8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 8004b9c:	4b15      	ldr	r3, [pc, #84]	@ (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	0e1b      	lsrs	r3, r3, #24
 8004ba2:	f003 030f 	and.w	r3, r3, #15
 8004ba6:	e006      	b.n	8004bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8004ba8:	4b12      	ldr	r3, [pc, #72]	@ (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004baa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004bae:	041b      	lsls	r3, r3, #16
 8004bb0:	0e1b      	lsrs	r3, r3, #24
 8004bb2:	f003 030f 	and.w	r3, r3, #15
 8004bb6:	4a11      	ldr	r2, [pc, #68]	@ (8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bbe:	f000 bf4d 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bc6:	f000 bf49 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8004bca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bce:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8004bd2:	430b      	orrs	r3, r1
 8004bd4:	d172      	bne.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004bd6:	4b07      	ldr	r3, [pc, #28]	@ (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004bd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004bdc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004be0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004be8:	d10a      	bne.n	8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004bea:	f7fd ff0d 	bl	8002a08 <HAL_RCC_GetSysClockFreq>
 8004bee:	6378      	str	r0, [r7, #52]	@ 0x34
 8004bf0:	f000 bf34 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8004bf4:	46020c00 	.word	0x46020c00
 8004bf8:	00f42400 	.word	0x00f42400
 8004bfc:	080073b0 	.word	0x080073b0
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8004c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c06:	d108      	bne.n	8004c1a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c08:	f107 0318 	add.w	r3, r7, #24
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7ff f903 	bl	8003e18 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8004c12:	6a3b      	ldr	r3, [r7, #32]
 8004c14:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c16:	f000 bf21 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d104      	bne.n	8004c2a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8004c20:	f7fd fffa 	bl	8002c18 <HAL_RCC_GetHCLKFreq>
 8004c24:	6378      	str	r0, [r7, #52]	@ 0x34
 8004c26:	f000 bf19 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004c30:	d122      	bne.n	8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004c32:	4bb0      	ldr	r3, [pc, #704]	@ (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0320 	and.w	r3, r3, #32
 8004c3a:	2b20      	cmp	r3, #32
 8004c3c:	d118      	bne.n	8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004c3e:	4bad      	ldr	r3, [pc, #692]	@ (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d005      	beq.n	8004c56 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 8004c4a:	4baa      	ldr	r3, [pc, #680]	@ (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	0e1b      	lsrs	r3, r3, #24
 8004c50:	f003 030f 	and.w	r3, r3, #15
 8004c54:	e006      	b.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8004c56:	4ba7      	ldr	r3, [pc, #668]	@ (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004c58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004c5c:	041b      	lsls	r3, r3, #16
 8004c5e:	0e1b      	lsrs	r3, r3, #24
 8004c60:	f003 030f 	and.w	r3, r3, #15
 8004c64:	4aa4      	ldr	r2, [pc, #656]	@ (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8004c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c6c:	f000 bef6 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 8004c70:	2300      	movs	r3, #0
 8004c72:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c74:	f000 bef2 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004c78:	4b9e      	ldr	r3, [pc, #632]	@ (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c84:	d107      	bne.n	8004c96 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8004c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c88:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c8c:	d103      	bne.n	8004c96 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 8004c8e:	4b9b      	ldr	r3, [pc, #620]	@ (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8004c90:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c92:	f000 bee3 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004c96:	4b97      	ldr	r3, [pc, #604]	@ (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ca2:	d107      	bne.n	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8004ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004caa:	d103      	bne.n	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 8004cac:	4b93      	ldr	r3, [pc, #588]	@ (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8004cae:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cb0:	f000 bed4 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cb8:	f000 bed0 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8004cbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cc0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8004cc4:	430b      	orrs	r3, r1
 8004cc6:	d158      	bne.n	8004d7a <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8004cc8:	4b8a      	ldr	r3, [pc, #552]	@ (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004cca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	d84b      	bhi.n	8004d72 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 8004cda:	a201      	add	r2, pc, #4	@ (adr r2, 8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 8004cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce0:	08004d19 	.word	0x08004d19
 8004ce4:	08004cf5 	.word	0x08004cf5
 8004ce8:	08004d07 	.word	0x08004d07
 8004cec:	08004d23 	.word	0x08004d23
 8004cf0:	08004d2d 	.word	0x08004d2d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004cf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7fe ff25 	bl	8003b48 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d00:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d02:	f000 beab 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d06:	f107 030c 	add.w	r3, r7, #12
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7ff f9ec 	bl	80040e8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d14:	f000 bea2 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004d18:	f7fd ff7e 	bl	8002c18 <HAL_RCC_GetHCLKFreq>
 8004d1c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004d1e:	f000 be9d 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004d22:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004d26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d28:	f000 be98 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004d2c:	4b71      	ldr	r3, [pc, #452]	@ (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0320 	and.w	r3, r3, #32
 8004d34:	2b20      	cmp	r3, #32
 8004d36:	d118      	bne.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004d38:	4b6e      	ldr	r3, [pc, #440]	@ (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d005      	beq.n	8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8004d44:	4b6b      	ldr	r3, [pc, #428]	@ (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	0e1b      	lsrs	r3, r3, #24
 8004d4a:	f003 030f 	and.w	r3, r3, #15
 8004d4e:	e006      	b.n	8004d5e <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8004d50:	4b68      	ldr	r3, [pc, #416]	@ (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004d52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004d56:	041b      	lsls	r3, r3, #16
 8004d58:	0e1b      	lsrs	r3, r3, #24
 8004d5a:	f003 030f 	and.w	r3, r3, #15
 8004d5e:	4a66      	ldr	r2, [pc, #408]	@ (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8004d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d64:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004d66:	f000 be79 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d6e:	f000 be75 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8004d72:	2300      	movs	r3, #0
 8004d74:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d76:	f000 be71 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8004d7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d7e:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8004d82:	430b      	orrs	r3, r1
 8004d84:	d167      	bne.n	8004e56 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8004d86:	4b5b      	ldr	r3, [pc, #364]	@ (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004d88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d8c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8004d90:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d94:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d98:	d036      	beq.n	8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8004d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d9c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004da0:	d855      	bhi.n	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8004da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004da8:	d029      	beq.n	8004dfe <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8004daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004db0:	d84d      	bhi.n	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8004db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004db8:	d013      	beq.n	8004de2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8004dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dc0:	d845      	bhi.n	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8004dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d015      	beq.n	8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 8004dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dce:	d13e      	bne.n	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004dd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7fe feb7 	bl	8003b48 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ddc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004dde:	f000 be3d 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004de2:	f107 030c 	add.w	r3, r7, #12
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7ff f97e 	bl	80040e8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004df0:	f000 be34 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004df4:	f7fd ff10 	bl	8002c18 <HAL_RCC_GetHCLKFreq>
 8004df8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004dfa:	f000 be2f 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004dfe:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004e02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e04:	f000 be2a 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004e08:	4b3a      	ldr	r3, [pc, #232]	@ (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0320 	and.w	r3, r3, #32
 8004e10:	2b20      	cmp	r3, #32
 8004e12:	d118      	bne.n	8004e46 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004e14:	4b37      	ldr	r3, [pc, #220]	@ (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d005      	beq.n	8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8004e20:	4b34      	ldr	r3, [pc, #208]	@ (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	0e1b      	lsrs	r3, r3, #24
 8004e26:	f003 030f 	and.w	r3, r3, #15
 8004e2a:	e006      	b.n	8004e3a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8004e2c:	4b31      	ldr	r3, [pc, #196]	@ (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004e2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004e32:	041b      	lsls	r3, r3, #16
 8004e34:	0e1b      	lsrs	r3, r3, #24
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	4a2f      	ldr	r2, [pc, #188]	@ (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8004e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e40:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004e42:	f000 be0b 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004e46:	2300      	movs	r3, #0
 8004e48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e4a:	f000 be07 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e52:	f000 be03 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8004e56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e5a:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8004e5e:	430b      	orrs	r3, r1
 8004e60:	d152      	bne.n	8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004e62:	4b24      	ldr	r3, [pc, #144]	@ (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e68:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004e6c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d104      	bne.n	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004e74:	f7fd feea 	bl	8002c4c <HAL_RCC_GetPCLK1Freq>
 8004e78:	6378      	str	r0, [r7, #52]	@ 0x34
 8004e7a:	f000 bdef 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8004e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e84:	d104      	bne.n	8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004e86:	f7fd fdbf 	bl	8002a08 <HAL_RCC_GetSysClockFreq>
 8004e8a:	6378      	str	r0, [r7, #52]	@ 0x34
 8004e8c:	f000 bde6 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004e90:	4b18      	ldr	r3, [pc, #96]	@ (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e9c:	d107      	bne.n	8004eae <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 8004e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ea4:	d103      	bne.n	8004eae <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 8004ea6:	4b15      	ldr	r3, [pc, #84]	@ (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8004ea8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004eaa:	f000 bdd7 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8004eae:	4b11      	ldr	r3, [pc, #68]	@ (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0320 	and.w	r3, r3, #32
 8004eb6:	2b20      	cmp	r3, #32
 8004eb8:	d122      	bne.n	8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 8004eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ebc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ec0:	d11e      	bne.n	8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d005      	beq.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 8004ece:	4b09      	ldr	r3, [pc, #36]	@ (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	0e1b      	lsrs	r3, r3, #24
 8004ed4:	f003 030f 	and.w	r3, r3, #15
 8004ed8:	e006      	b.n	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 8004eda:	4b06      	ldr	r3, [pc, #24]	@ (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004edc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004ee0:	041b      	lsls	r3, r3, #16
 8004ee2:	0e1b      	lsrs	r3, r3, #24
 8004ee4:	f003 030f 	and.w	r3, r3, #15
 8004ee8:	4a03      	ldr	r2, [pc, #12]	@ (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8004eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eee:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ef0:	f000 bdb4 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8004ef4:	46020c00 	.word	0x46020c00
 8004ef8:	080073b0 	.word	0x080073b0
 8004efc:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f04:	f000 bdaa 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8004f08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f0c:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8004f10:	430b      	orrs	r3, r1
 8004f12:	d14c      	bne.n	8004fae <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004f14:	4ba8      	ldr	r3, [pc, #672]	@ (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f1a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004f1e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d104      	bne.n	8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004f26:	f7fd fe91 	bl	8002c4c <HAL_RCC_GetPCLK1Freq>
 8004f2a:	6378      	str	r0, [r7, #52]	@ 0x34
 8004f2c:	f000 bd96 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8004f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f36:	d104      	bne.n	8004f42 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004f38:	f7fd fd66 	bl	8002a08 <HAL_RCC_GetSysClockFreq>
 8004f3c:	6378      	str	r0, [r7, #52]	@ 0x34
 8004f3e:	f000 bd8d 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004f42:	4b9d      	ldr	r3, [pc, #628]	@ (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f4e:	d107      	bne.n	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8004f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f56:	d103      	bne.n	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 8004f58:	4b98      	ldr	r3, [pc, #608]	@ (80051bc <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8004f5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f5c:	f000 bd7e 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8004f60:	4b95      	ldr	r3, [pc, #596]	@ (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0320 	and.w	r3, r3, #32
 8004f68:	2b20      	cmp	r3, #32
 8004f6a:	d11c      	bne.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 8004f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f6e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f72:	d118      	bne.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004f74:	4b90      	ldr	r3, [pc, #576]	@ (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d005      	beq.n	8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8004f80:	4b8d      	ldr	r3, [pc, #564]	@ (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	0e1b      	lsrs	r3, r3, #24
 8004f86:	f003 030f 	and.w	r3, r3, #15
 8004f8a:	e006      	b.n	8004f9a <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 8004f8c:	4b8a      	ldr	r3, [pc, #552]	@ (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004f8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004f92:	041b      	lsls	r3, r3, #16
 8004f94:	0e1b      	lsrs	r3, r3, #24
 8004f96:	f003 030f 	and.w	r3, r3, #15
 8004f9a:	4a89      	ldr	r2, [pc, #548]	@ (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8004f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fa2:	f000 bd5b 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004faa:	f000 bd57 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8004fae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fb2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8004fb6:	430b      	orrs	r3, r1
 8004fb8:	d158      	bne.n	800506c <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004fba:	4b7f      	ldr	r3, [pc, #508]	@ (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004fbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004fc0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004fc4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc8:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fca:	d028      	beq.n	800501e <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 8004fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fce:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fd0:	d848      	bhi.n	8005064 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8004fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd4:	2b80      	cmp	r3, #128	@ 0x80
 8004fd6:	d00e      	beq.n	8004ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8004fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fda:	2b80      	cmp	r3, #128	@ 0x80
 8004fdc:	d842      	bhi.n	8005064 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8004fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d003      	beq.n	8004fec <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 8004fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe6:	2b40      	cmp	r3, #64	@ 0x40
 8004fe8:	d014      	beq.n	8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8004fea:	e03b      	b.n	8005064 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8004fec:	f7fd fe56 	bl	8002c9c <HAL_RCC_GetPCLK3Freq>
 8004ff0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004ff2:	f000 bd33 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ff6:	4b70      	ldr	r3, [pc, #448]	@ (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ffe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005002:	d103      	bne.n	800500c <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 8005004:	4b6d      	ldr	r3, [pc, #436]	@ (80051bc <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8005006:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005008:	f000 bd28 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800500c:	2300      	movs	r3, #0
 800500e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005010:	f000 bd24 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8005014:	f7fd fcf8 	bl	8002a08 <HAL_RCC_GetSysClockFreq>
 8005018:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800501a:	f000 bd1f 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800501e:	4b66      	ldr	r3, [pc, #408]	@ (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0320 	and.w	r3, r3, #32
 8005026:	2b20      	cmp	r3, #32
 8005028:	d118      	bne.n	800505c <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800502a:	4b63      	ldr	r3, [pc, #396]	@ (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d005      	beq.n	8005042 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 8005036:	4b60      	ldr	r3, [pc, #384]	@ (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	0e1b      	lsrs	r3, r3, #24
 800503c:	f003 030f 	and.w	r3, r3, #15
 8005040:	e006      	b.n	8005050 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 8005042:	4b5d      	ldr	r3, [pc, #372]	@ (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005044:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005048:	041b      	lsls	r3, r3, #16
 800504a:	0e1b      	lsrs	r3, r3, #24
 800504c:	f003 030f 	and.w	r3, r3, #15
 8005050:	4a5b      	ldr	r2, [pc, #364]	@ (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8005052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005056:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005058:	f000 bd00 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800505c:	2300      	movs	r3, #0
 800505e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005060:	f000 bcfc 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      default:
      {
        frequency = 0U;
 8005064:	2300      	movs	r3, #0
 8005066:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005068:	f000 bcf8 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800506c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005070:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8005074:	430b      	orrs	r3, r1
 8005076:	d14c      	bne.n	8005112 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005078:	4b4f      	ldr	r3, [pc, #316]	@ (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800507a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800507e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005082:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8005084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005086:	2b00      	cmp	r3, #0
 8005088:	d104      	bne.n	8005094 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800508a:	f7fd fddf 	bl	8002c4c <HAL_RCC_GetPCLK1Freq>
 800508e:	6378      	str	r0, [r7, #52]	@ 0x34
 8005090:	f000 bce4 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8005094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005096:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800509a:	d104      	bne.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800509c:	f7fd fcb4 	bl	8002a08 <HAL_RCC_GetSysClockFreq>
 80050a0:	6378      	str	r0, [r7, #52]	@ 0x34
 80050a2:	f000 bcdb 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80050a6:	4b44      	ldr	r3, [pc, #272]	@ (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050b2:	d107      	bne.n	80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 80050b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050ba:	d103      	bne.n	80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 80050bc:	4b3f      	ldr	r3, [pc, #252]	@ (80051bc <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80050be:	637b      	str	r3, [r7, #52]	@ 0x34
 80050c0:	f000 bccc 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80050c4:	4b3c      	ldr	r3, [pc, #240]	@ (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0320 	and.w	r3, r3, #32
 80050cc:	2b20      	cmp	r3, #32
 80050ce:	d11c      	bne.n	800510a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 80050d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80050d6:	d118      	bne.n	800510a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80050d8:	4b37      	ldr	r3, [pc, #220]	@ (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d005      	beq.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 80050e4:	4b34      	ldr	r3, [pc, #208]	@ (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	0e1b      	lsrs	r3, r3, #24
 80050ea:	f003 030f 	and.w	r3, r3, #15
 80050ee:	e006      	b.n	80050fe <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 80050f0:	4b31      	ldr	r3, [pc, #196]	@ (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80050f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80050f6:	041b      	lsls	r3, r3, #16
 80050f8:	0e1b      	lsrs	r3, r3, #24
 80050fa:	f003 030f 	and.w	r3, r3, #15
 80050fe:	4a30      	ldr	r2, [pc, #192]	@ (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8005100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005104:	637b      	str	r3, [r7, #52]	@ 0x34
 8005106:	f000 bca9 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800510a:	2300      	movs	r3, #0
 800510c:	637b      	str	r3, [r7, #52]	@ 0x34
 800510e:	f000 bca5 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 8005112:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005116:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800511a:	430b      	orrs	r3, r1
 800511c:	d152      	bne.n	80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800511e:	4b26      	ldr	r3, [pc, #152]	@ (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005120:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005124:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8005128:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800512a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800512c:	2b00      	cmp	r3, #0
 800512e:	d104      	bne.n	800513a <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005130:	f7fd fd8c 	bl	8002c4c <HAL_RCC_GetPCLK1Freq>
 8005134:	6378      	str	r0, [r7, #52]	@ 0x34
 8005136:	f000 bc91 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800513a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800513c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005140:	d104      	bne.n	800514c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005142:	f7fd fc61 	bl	8002a08 <HAL_RCC_GetSysClockFreq>
 8005146:	6378      	str	r0, [r7, #52]	@ 0x34
 8005148:	f000 bc88 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800514c:	4b1a      	ldr	r3, [pc, #104]	@ (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005154:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005158:	d107      	bne.n	800516a <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800515a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800515c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005160:	d103      	bne.n	800516a <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 8005162:	4b16      	ldr	r3, [pc, #88]	@ (80051bc <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8005164:	637b      	str	r3, [r7, #52]	@ 0x34
 8005166:	f000 bc79 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800516a:	4b13      	ldr	r3, [pc, #76]	@ (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0320 	and.w	r3, r3, #32
 8005172:	2b20      	cmp	r3, #32
 8005174:	d11c      	bne.n	80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8005176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005178:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800517c:	d118      	bne.n	80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800517e:	4b0e      	ldr	r3, [pc, #56]	@ (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d005      	beq.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800518a:	4b0b      	ldr	r3, [pc, #44]	@ (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	0e1b      	lsrs	r3, r3, #24
 8005190:	f003 030f 	and.w	r3, r3, #15
 8005194:	e006      	b.n	80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 8005196:	4b08      	ldr	r3, [pc, #32]	@ (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005198:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800519c:	041b      	lsls	r3, r3, #16
 800519e:	0e1b      	lsrs	r3, r3, #24
 80051a0:	f003 030f 	and.w	r3, r3, #15
 80051a4:	4a06      	ldr	r2, [pc, #24]	@ (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 80051a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80051ac:	f000 bc56 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 80051b0:	2300      	movs	r3, #0
 80051b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80051b4:	f000 bc52 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 80051b8:	46020c00 	.word	0x46020c00
 80051bc:	00f42400 	.word	0x00f42400
 80051c0:	080073b0 	.word	0x080073b0
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 80051c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051c8:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 80051cc:	430b      	orrs	r3, r1
 80051ce:	d14a      	bne.n	8005266 <HAL_RCCEx_GetPeriphCLKFreq+0xeae>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 80051d0:	4ba5      	ldr	r3, [pc, #660]	@ (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80051d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80051d6:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80051da:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 80051dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d104      	bne.n	80051ec <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80051e2:	f7fd fd33 	bl	8002c4c <HAL_RCC_GetPCLK1Freq>
 80051e6:	6378      	str	r0, [r7, #52]	@ 0x34
 80051e8:	f000 bc38 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 80051ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80051f2:	d104      	bne.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80051f4:	f7fd fc08 	bl	8002a08 <HAL_RCC_GetSysClockFreq>
 80051f8:	6378      	str	r0, [r7, #52]	@ 0x34
 80051fa:	f000 bc2f 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 80051fe:	4b9a      	ldr	r3, [pc, #616]	@ (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005206:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800520a:	d107      	bne.n	800521c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800520c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800520e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005212:	d103      	bne.n	800521c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 8005214:	4b95      	ldr	r3, [pc, #596]	@ (800546c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8005216:	637b      	str	r3, [r7, #52]	@ 0x34
 8005218:	f000 bc20 	b.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800521c:	4b92      	ldr	r3, [pc, #584]	@ (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0320 	and.w	r3, r3, #32
 8005224:	2b20      	cmp	r3, #32
 8005226:	d11b      	bne.n	8005260 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 8005228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800522a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800522e:	d117      	bne.n	8005260 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005230:	4b8d      	ldr	r3, [pc, #564]	@ (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d005      	beq.n	8005248 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800523c:	4b8a      	ldr	r3, [pc, #552]	@ (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	0e1b      	lsrs	r3, r3, #24
 8005242:	f003 030f 	and.w	r3, r3, #15
 8005246:	e006      	b.n	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 8005248:	4b87      	ldr	r3, [pc, #540]	@ (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800524a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800524e:	041b      	lsls	r3, r3, #16
 8005250:	0e1b      	lsrs	r3, r3, #24
 8005252:	f003 030f 	and.w	r3, r3, #15
 8005256:	4a86      	ldr	r2, [pc, #536]	@ (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8005258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800525c:	637b      	str	r3, [r7, #52]	@ 0x34
 800525e:	e3fd      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	637b      	str	r3, [r7, #52]	@ 0x34
 8005264:	e3fa      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8005266:	e9d7 2300 	ldrd	r2, r3, [r7]
 800526a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800526e:	430b      	orrs	r3, r1
 8005270:	d164      	bne.n	800533c <HAL_RCCEx_GetPeriphCLKFreq+0xf84>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8005272:	4b7d      	ldr	r3, [pc, #500]	@ (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005274:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005278:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800527c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800527e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005280:	2b00      	cmp	r3, #0
 8005282:	d120      	bne.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0xf0e>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005284:	4b78      	ldr	r3, [pc, #480]	@ (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0320 	and.w	r3, r3, #32
 800528c:	2b20      	cmp	r3, #32
 800528e:	d117      	bne.n	80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005290:	4b75      	ldr	r3, [pc, #468]	@ (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d005      	beq.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0xef0>
 800529c:	4b72      	ldr	r3, [pc, #456]	@ (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	0e1b      	lsrs	r3, r3, #24
 80052a2:	f003 030f 	and.w	r3, r3, #15
 80052a6:	e006      	b.n	80052b6 <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
 80052a8:	4b6f      	ldr	r3, [pc, #444]	@ (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80052aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80052ae:	041b      	lsls	r3, r3, #16
 80052b0:	0e1b      	lsrs	r3, r3, #24
 80052b2:	f003 030f 	and.w	r3, r3, #15
 80052b6:	4a6e      	ldr	r2, [pc, #440]	@ (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 80052b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80052be:	e3cd      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 80052c0:	2300      	movs	r3, #0
 80052c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80052c4:	e3ca      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80052c6:	4b68      	ldr	r3, [pc, #416]	@ (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80052c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052d4:	d112      	bne.n	80052fc <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
 80052d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052dc:	d10e      	bne.n	80052fc <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80052de:	4b62      	ldr	r3, [pc, #392]	@ (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80052e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052ec:	d102      	bne.n	80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
      {
        frequency = LSI_VALUE / 128U;
 80052ee:	23fa      	movs	r3, #250	@ 0xfa
 80052f0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80052f2:	e3b3      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 80052f4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80052f8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80052fa:	e3af      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80052fc:	4b5a      	ldr	r3, [pc, #360]	@ (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005304:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005308:	d106      	bne.n	8005318 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800530a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005310:	d102      	bne.n	8005318 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
    {
      frequency = HSI_VALUE;
 8005312:	4b56      	ldr	r3, [pc, #344]	@ (800546c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8005314:	637b      	str	r3, [r7, #52]	@ 0x34
 8005316:	e3a1      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8005318:	4b53      	ldr	r3, [pc, #332]	@ (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800531a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b02      	cmp	r3, #2
 8005324:	d107      	bne.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
 8005326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005328:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800532c:	d103      	bne.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
    {
      frequency = LSE_VALUE;
 800532e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005332:	637b      	str	r3, [r7, #52]	@ 0x34
 8005334:	e392      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8005336:	2300      	movs	r3, #0
 8005338:	637b      	str	r3, [r7, #52]	@ 0x34
 800533a:	e38f      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800533c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005340:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8005344:	430b      	orrs	r3, r1
 8005346:	d164      	bne.n	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0x105a>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005348:	4b47      	ldr	r3, [pc, #284]	@ (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800534a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800534e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005352:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8005354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005356:	2b00      	cmp	r3, #0
 8005358:	d120      	bne.n	800539c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800535a:	4b43      	ldr	r3, [pc, #268]	@ (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0320 	and.w	r3, r3, #32
 8005362:	2b20      	cmp	r3, #32
 8005364:	d117      	bne.n	8005396 <HAL_RCCEx_GetPeriphCLKFreq+0xfde>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005366:	4b40      	ldr	r3, [pc, #256]	@ (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d005      	beq.n	800537e <HAL_RCCEx_GetPeriphCLKFreq+0xfc6>
 8005372:	4b3d      	ldr	r3, [pc, #244]	@ (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	0e1b      	lsrs	r3, r3, #24
 8005378:	f003 030f 	and.w	r3, r3, #15
 800537c:	e006      	b.n	800538c <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 800537e:	4b3a      	ldr	r3, [pc, #232]	@ (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005380:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005384:	041b      	lsls	r3, r3, #16
 8005386:	0e1b      	lsrs	r3, r3, #24
 8005388:	f003 030f 	and.w	r3, r3, #15
 800538c:	4a38      	ldr	r2, [pc, #224]	@ (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800538e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005392:	637b      	str	r3, [r7, #52]	@ 0x34
 8005394:	e362      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 8005396:	2300      	movs	r3, #0
 8005398:	637b      	str	r3, [r7, #52]	@ 0x34
 800539a:	e35f      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800539c:	4b32      	ldr	r3, [pc, #200]	@ (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800539e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053aa:	d112      	bne.n	80053d2 <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
 80053ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053b2:	d10e      	bne.n	80053d2 <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80053b4:	4b2c      	ldr	r3, [pc, #176]	@ (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80053b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053c2:	d102      	bne.n	80053ca <HAL_RCCEx_GetPeriphCLKFreq+0x1012>
      {
        frequency = LSI_VALUE / 128U;
 80053c4:	23fa      	movs	r3, #250	@ 0xfa
 80053c6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80053c8:	e348      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 80053ca:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80053ce:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80053d0:	e344      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80053d2:	4b25      	ldr	r3, [pc, #148]	@ (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053de:	d106      	bne.n	80053ee <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
 80053e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053e6:	d102      	bne.n	80053ee <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
    {
      frequency = HSI_VALUE;
 80053e8:	4b20      	ldr	r3, [pc, #128]	@ (800546c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80053ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80053ec:	e336      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80053ee:	4b1e      	ldr	r3, [pc, #120]	@ (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80053f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d107      	bne.n	800540c <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
 80053fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005402:	d103      	bne.n	800540c <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
    {
      frequency = LSE_VALUE;
 8005404:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005408:	637b      	str	r3, [r7, #52]	@ 0x34
 800540a:	e327      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800540c:	2300      	movs	r3, #0
 800540e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005410:	e324      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8005412:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005416:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800541a:	430b      	orrs	r3, r1
 800541c:	d14e      	bne.n	80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x1104>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800541e:	4b12      	ldr	r3, [pc, #72]	@ (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005424:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005428:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800542a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800542c:	2b00      	cmp	r3, #0
 800542e:	d103      	bne.n	8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x1080>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005430:	f7fd fc0c 	bl	8002c4c <HAL_RCC_GetPCLK1Freq>
 8005434:	6378      	str	r0, [r7, #52]	@ 0x34
 8005436:	e311      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8005438:	4b0b      	ldr	r3, [pc, #44]	@ (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800543a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800543e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005442:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005446:	d119      	bne.n	800547c <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 8005448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800544a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800544e:	d115      	bne.n	800547c <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005450:	4b05      	ldr	r3, [pc, #20]	@ (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005452:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800545a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800545e:	d109      	bne.n	8005474 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>
      {
        frequency = LSI_VALUE / 128U;
 8005460:	23fa      	movs	r3, #250	@ 0xfa
 8005462:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005464:	e2fa      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8005466:	bf00      	nop
 8005468:	46020c00 	.word	0x46020c00
 800546c:	00f42400 	.word	0x00f42400
 8005470:	080073b0 	.word	0x080073b0
      }
      else
      {
        frequency = LSI_VALUE;
 8005474:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005478:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800547a:	e2ef      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800547c:	4ba8      	ldr	r3, [pc, #672]	@ (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005484:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005488:	d106      	bne.n	8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
 800548a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800548c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005490:	d102      	bne.n	8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
    {
      frequency = HSI_VALUE;
 8005492:	4ba4      	ldr	r3, [pc, #656]	@ (8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8005494:	637b      	str	r3, [r7, #52]	@ 0x34
 8005496:	e2e1      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8005498:	4ba1      	ldr	r3, [pc, #644]	@ (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800549a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d107      	bne.n	80054b6 <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
 80054a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80054ac:	d103      	bne.n	80054b6 <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
    {
      frequency = LSE_VALUE;
 80054ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80054b4:	e2d2      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80054b6:	2300      	movs	r3, #0
 80054b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80054ba:	e2cf      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80054bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054c0:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80054c4:	430b      	orrs	r3, r1
 80054c6:	d12d      	bne.n	8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80054c8:	4b95      	ldr	r3, [pc, #596]	@ (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80054ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80054ce:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80054d2:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80054d4:	4b92      	ldr	r3, [pc, #584]	@ (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054e0:	d105      	bne.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
 80054e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d102      	bne.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
    {
      frequency = HSE_VALUE;
 80054e8:	4b8e      	ldr	r3, [pc, #568]	@ (8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80054ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80054ec:	e2b6      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80054ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054f4:	d107      	bne.n	8005506 <HAL_RCCEx_GetPeriphCLKFreq+0x114e>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80054f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7fe fb24 	bl	8003b48 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8005500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005502:	637b      	str	r3, [r7, #52]	@ 0x34
 8005504:	e2aa      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8005506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005508:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800550c:	d107      	bne.n	800551e <HAL_RCCEx_GetPeriphCLKFreq+0x1166>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800550e:	f107 0318 	add.w	r3, r7, #24
 8005512:	4618      	mov	r0, r3
 8005514:	f7fe fc80 	bl	8003e18 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	637b      	str	r3, [r7, #52]	@ 0x34
 800551c:	e29e      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800551e:	2300      	movs	r3, #0
 8005520:	637b      	str	r3, [r7, #52]	@ 0x34
 8005522:	e29b      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8005524:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005528:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800552c:	430b      	orrs	r3, r1
 800552e:	d156      	bne.n	80055de <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8005530:	4b7b      	ldr	r3, [pc, #492]	@ (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005536:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800553a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800553c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005542:	d028      	beq.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
 8005544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005546:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800554a:	d845      	bhi.n	80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 800554c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800554e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005552:	d013      	beq.n	800557c <HAL_RCCEx_GetPeriphCLKFreq+0x11c4>
 8005554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005556:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800555a:	d83d      	bhi.n	80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 800555c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555e:	2b00      	cmp	r3, #0
 8005560:	d004      	beq.n	800556c <HAL_RCCEx_GetPeriphCLKFreq+0x11b4>
 8005562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005564:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005568:	d004      	beq.n	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x11bc>
 800556a:	e035      	b.n	80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800556c:	f7fd fb82 	bl	8002c74 <HAL_RCC_GetPCLK2Freq>
 8005570:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005572:	e273      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005574:	f7fd fa48 	bl	8002a08 <HAL_RCC_GetSysClockFreq>
 8005578:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800557a:	e26f      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800557c:	4b68      	ldr	r3, [pc, #416]	@ (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005584:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005588:	d102      	bne.n	8005590 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        {
          frequency = HSI_VALUE;
 800558a:	4b66      	ldr	r3, [pc, #408]	@ (8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800558c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800558e:	e265      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8005590:	2300      	movs	r3, #0
 8005592:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005594:	e262      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005596:	4b62      	ldr	r3, [pc, #392]	@ (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0320 	and.w	r3, r3, #32
 800559e:	2b20      	cmp	r3, #32
 80055a0:	d117      	bne.n	80055d2 <HAL_RCCEx_GetPeriphCLKFreq+0x121a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80055a2:	4b5f      	ldr	r3, [pc, #380]	@ (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d005      	beq.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0x1202>
 80055ae:	4b5c      	ldr	r3, [pc, #368]	@ (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	0e1b      	lsrs	r3, r3, #24
 80055b4:	f003 030f 	and.w	r3, r3, #15
 80055b8:	e006      	b.n	80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1210>
 80055ba:	4b59      	ldr	r3, [pc, #356]	@ (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80055bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80055c0:	041b      	lsls	r3, r3, #16
 80055c2:	0e1b      	lsrs	r3, r3, #24
 80055c4:	f003 030f 	and.w	r3, r3, #15
 80055c8:	4a57      	ldr	r2, [pc, #348]	@ (8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 80055ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055ce:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80055d0:	e244      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80055d2:	2300      	movs	r3, #0
 80055d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80055d6:	e241      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80055d8:	2300      	movs	r3, #0
 80055da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80055dc:	e23e      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80055de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055e2:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 80055e6:	430b      	orrs	r3, r1
 80055e8:	d156      	bne.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80055ea:	4b4d      	ldr	r3, [pc, #308]	@ (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80055ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80055f4:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80055f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80055fc:	d028      	beq.n	8005650 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>
 80055fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005600:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005604:	d845      	bhi.n	8005692 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 8005606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005608:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800560c:	d013      	beq.n	8005636 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 800560e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005610:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005614:	d83d      	bhi.n	8005692 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 8005616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005618:	2b00      	cmp	r3, #0
 800561a:	d004      	beq.n	8005626 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 800561c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800561e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005622:	d004      	beq.n	800562e <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8005624:	e035      	b.n	8005692 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8005626:	f7fd fb11 	bl	8002c4c <HAL_RCC_GetPCLK1Freq>
 800562a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800562c:	e216      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800562e:	f7fd f9eb 	bl	8002a08 <HAL_RCC_GetSysClockFreq>
 8005632:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005634:	e212      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005636:	4b3a      	ldr	r3, [pc, #232]	@ (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800563e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005642:	d102      	bne.n	800564a <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
        {
          frequency = HSI_VALUE;
 8005644:	4b37      	ldr	r3, [pc, #220]	@ (8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8005646:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005648:	e208      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800564a:	2300      	movs	r3, #0
 800564c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800564e:	e205      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005650:	4b33      	ldr	r3, [pc, #204]	@ (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0320 	and.w	r3, r3, #32
 8005658:	2b20      	cmp	r3, #32
 800565a:	d117      	bne.n	800568c <HAL_RCCEx_GetPeriphCLKFreq+0x12d4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800565c:	4b30      	ldr	r3, [pc, #192]	@ (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d005      	beq.n	8005674 <HAL_RCCEx_GetPeriphCLKFreq+0x12bc>
 8005668:	4b2d      	ldr	r3, [pc, #180]	@ (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	0e1b      	lsrs	r3, r3, #24
 800566e:	f003 030f 	and.w	r3, r3, #15
 8005672:	e006      	b.n	8005682 <HAL_RCCEx_GetPeriphCLKFreq+0x12ca>
 8005674:	4b2a      	ldr	r3, [pc, #168]	@ (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005676:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800567a:	041b      	lsls	r3, r3, #16
 800567c:	0e1b      	lsrs	r3, r3, #24
 800567e:	f003 030f 	and.w	r3, r3, #15
 8005682:	4a29      	ldr	r2, [pc, #164]	@ (8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8005684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005688:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800568a:	e1e7      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800568c:	2300      	movs	r3, #0
 800568e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005690:	e1e4      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8005692:	2300      	movs	r3, #0
 8005694:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005696:	e1e1      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8005698:	e9d7 2300 	ldrd	r2, r3, [r7]
 800569c:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80056a0:	430b      	orrs	r3, r1
 80056a2:	d17c      	bne.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80056a4:	4b1e      	ldr	r3, [pc, #120]	@ (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80056a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80056aa:	f003 0318 	and.w	r3, r3, #24
 80056ae:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80056b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b2:	2b18      	cmp	r3, #24
 80056b4:	d870      	bhi.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>
 80056b6:	a201      	add	r2, pc, #4	@ (adr r2, 80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x1304>)
 80056b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056bc:	0800572d 	.word	0x0800572d
 80056c0:	08005799 	.word	0x08005799
 80056c4:	08005799 	.word	0x08005799
 80056c8:	08005799 	.word	0x08005799
 80056cc:	08005799 	.word	0x08005799
 80056d0:	08005799 	.word	0x08005799
 80056d4:	08005799 	.word	0x08005799
 80056d8:	08005799 	.word	0x08005799
 80056dc:	08005735 	.word	0x08005735
 80056e0:	08005799 	.word	0x08005799
 80056e4:	08005799 	.word	0x08005799
 80056e8:	08005799 	.word	0x08005799
 80056ec:	08005799 	.word	0x08005799
 80056f0:	08005799 	.word	0x08005799
 80056f4:	08005799 	.word	0x08005799
 80056f8:	08005799 	.word	0x08005799
 80056fc:	0800573d 	.word	0x0800573d
 8005700:	08005799 	.word	0x08005799
 8005704:	08005799 	.word	0x08005799
 8005708:	08005799 	.word	0x08005799
 800570c:	08005799 	.word	0x08005799
 8005710:	08005799 	.word	0x08005799
 8005714:	08005799 	.word	0x08005799
 8005718:	08005799 	.word	0x08005799
 800571c:	08005757 	.word	0x08005757
 8005720:	46020c00 	.word	0x46020c00
 8005724:	00f42400 	.word	0x00f42400
 8005728:	080073b0 	.word	0x080073b0
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800572c:	f7fd fab6 	bl	8002c9c <HAL_RCC_GetPCLK3Freq>
 8005730:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005732:	e193      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005734:	f7fd f968 	bl	8002a08 <HAL_RCC_GetSysClockFreq>
 8005738:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800573a:	e18f      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800573c:	4b9f      	ldr	r3, [pc, #636]	@ (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005744:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005748:	d102      	bne.n	8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
        {
          frequency = HSI_VALUE;
 800574a:	4b9d      	ldr	r3, [pc, #628]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800574c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800574e:	e185      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8005750:	2300      	movs	r3, #0
 8005752:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005754:	e182      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005756:	4b99      	ldr	r3, [pc, #612]	@ (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0320 	and.w	r3, r3, #32
 800575e:	2b20      	cmp	r3, #32
 8005760:	d117      	bne.n	8005792 <HAL_RCCEx_GetPeriphCLKFreq+0x13da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005762:	4b96      	ldr	r3, [pc, #600]	@ (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d005      	beq.n	800577a <HAL_RCCEx_GetPeriphCLKFreq+0x13c2>
 800576e:	4b93      	ldr	r3, [pc, #588]	@ (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	0e1b      	lsrs	r3, r3, #24
 8005774:	f003 030f 	and.w	r3, r3, #15
 8005778:	e006      	b.n	8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x13d0>
 800577a:	4b90      	ldr	r3, [pc, #576]	@ (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800577c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005780:	041b      	lsls	r3, r3, #16
 8005782:	0e1b      	lsrs	r3, r3, #24
 8005784:	f003 030f 	and.w	r3, r3, #15
 8005788:	4a8e      	ldr	r2, [pc, #568]	@ (80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800578a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800578e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005790:	e164      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8005792:	2300      	movs	r3, #0
 8005794:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005796:	e161      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8005798:	2300      	movs	r3, #0
 800579a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800579c:	e15e      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800579e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057a2:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 80057a6:	430b      	orrs	r3, r1
 80057a8:	d155      	bne.n	8005856 <HAL_RCCEx_GetPeriphCLKFreq+0x149e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80057aa:	4b84      	ldr	r3, [pc, #528]	@ (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80057ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80057b0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80057b4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80057b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80057bc:	d013      	beq.n	80057e6 <HAL_RCCEx_GetPeriphCLKFreq+0x142e>
 80057be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80057c4:	d844      	bhi.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 80057c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057cc:	d013      	beq.n	80057f6 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
 80057ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057d4:	d83c      	bhi.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 80057d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d014      	beq.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0x144e>
 80057dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057e2:	d014      	beq.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 80057e4:	e034      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057e6:	f107 0318 	add.w	r3, r7, #24
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fe fb14 	bl	8003e18 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80057f4:	e132      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fe f9a4 	bl	8003b48 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005802:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005804:	e12a      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005806:	f7fd f8ff 	bl	8002a08 <HAL_RCC_GetSysClockFreq>
 800580a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800580c:	e126      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800580e:	4b6b      	ldr	r3, [pc, #428]	@ (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0320 	and.w	r3, r3, #32
 8005816:	2b20      	cmp	r3, #32
 8005818:	d117      	bne.n	800584a <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800581a:	4b68      	ldr	r3, [pc, #416]	@ (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d005      	beq.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x147a>
 8005826:	4b65      	ldr	r3, [pc, #404]	@ (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	0e1b      	lsrs	r3, r3, #24
 800582c:	f003 030f 	and.w	r3, r3, #15
 8005830:	e006      	b.n	8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x1488>
 8005832:	4b62      	ldr	r3, [pc, #392]	@ (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005834:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005838:	041b      	lsls	r3, r3, #16
 800583a:	0e1b      	lsrs	r3, r3, #24
 800583c:	f003 030f 	and.w	r3, r3, #15
 8005840:	4a60      	ldr	r2, [pc, #384]	@ (80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8005842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005846:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005848:	e108      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800584a:	2300      	movs	r3, #0
 800584c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800584e:	e105      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8005850:	2300      	movs	r3, #0
 8005852:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005854:	e102      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 8005856:	e9d7 2300 	ldrd	r2, r3, [r7]
 800585a:	1e59      	subs	r1, r3, #1
 800585c:	ea52 0301 	orrs.w	r3, r2, r1
 8005860:	d13c      	bne.n	80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 8005862:	4b56      	ldr	r3, [pc, #344]	@ (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005864:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005868:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800586c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800586e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005870:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005874:	d027      	beq.n	80058c6 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 8005876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005878:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800587c:	d82b      	bhi.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 800587e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005880:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005884:	d017      	beq.n	80058b6 <HAL_RCCEx_GetPeriphCLKFreq+0x14fe>
 8005886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005888:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800588c:	d823      	bhi.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 800588e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005890:	2b00      	cmp	r3, #0
 8005892:	d004      	beq.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x14e6>
 8005894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005896:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800589a:	d004      	beq.n	80058a6 <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 800589c:	e01b      	b.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800589e:	f7fd f8b3 	bl	8002a08 <HAL_RCC_GetSysClockFreq>
 80058a2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80058a4:	e0da      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80058a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fe f94c 	bl	8003b48 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80058b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80058b4:	e0d2      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058b6:	f107 0318 	add.w	r3, r7, #24
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7fe faac 	bl	8003e18 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80058c4:	e0ca      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058c6:	f107 030c 	add.w	r3, r7, #12
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7fe fc0c 	bl	80040e8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80058d4:	e0c2      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80058d6:	2300      	movs	r3, #0
 80058d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80058da:	e0bf      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80058dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058e0:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 80058e4:	430b      	orrs	r3, r1
 80058e6:	d131      	bne.n	800594c <HAL_RCCEx_GetPeriphCLKFreq+0x1594>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80058e8:	4b34      	ldr	r3, [pc, #208]	@ (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80058ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80058ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058f2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80058f4:	4b31      	ldr	r3, [pc, #196]	@ (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80058f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058fa:	f003 0302 	and.w	r3, r3, #2
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d106      	bne.n	8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
 8005902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005904:	2b00      	cmp	r3, #0
 8005906:	d103      	bne.n	8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
    {
      frequency = LSE_VALUE;
 8005908:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800590c:	637b      	str	r3, [r7, #52]	@ 0x34
 800590e:	e0a5      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8005910:	4b2a      	ldr	r3, [pc, #168]	@ (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005912:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005916:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800591a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800591e:	d112      	bne.n	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
 8005920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005922:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005926:	d10e      	bne.n	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005928:	4b24      	ldr	r3, [pc, #144]	@ (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800592a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800592e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005932:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005936:	d102      	bne.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
      {
        frequency = LSI_VALUE / 128U;
 8005938:	23fa      	movs	r3, #250	@ 0xfa
 800593a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800593c:	e08e      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 800593e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005942:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005944:	e08a      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8005946:	2300      	movs	r3, #0
 8005948:	637b      	str	r3, [r7, #52]	@ 0x34
 800594a:	e087      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800594c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005950:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8005954:	430b      	orrs	r3, r1
 8005956:	d13b      	bne.n	80059d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005958:	4b18      	ldr	r3, [pc, #96]	@ (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800595a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800595e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005962:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8005964:	4b15      	ldr	r3, [pc, #84]	@ (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800596c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005970:	d105      	bne.n	800597e <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
 8005972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005974:	2b00      	cmp	r3, #0
 8005976:	d102      	bne.n	800597e <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
    {
      frequency = HSI48_VALUE;
 8005978:	4b13      	ldr	r3, [pc, #76]	@ (80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800597a:	637b      	str	r3, [r7, #52]	@ 0x34
 800597c:	e06e      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800597e:	4b0f      	ldr	r3, [pc, #60]	@ (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005986:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800598a:	d106      	bne.n	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
 800598c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800598e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005992:	d102      	bne.n	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
    {
      frequency = HSI48_VALUE >> 1U ;
 8005994:	4b0d      	ldr	r3, [pc, #52]	@ (80059cc <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 8005996:	637b      	str	r3, [r7, #52]	@ 0x34
 8005998:	e060      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800599a:	4b08      	ldr	r3, [pc, #32]	@ (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059a6:	d106      	bne.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
 80059a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059ae:	d102      	bne.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
    {
      frequency = HSI_VALUE;
 80059b0:	4b03      	ldr	r3, [pc, #12]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80059b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80059b4:	e052      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80059b6:	2300      	movs	r3, #0
 80059b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80059ba:	e04f      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 80059bc:	46020c00 	.word	0x46020c00
 80059c0:	00f42400 	.word	0x00f42400
 80059c4:	080073b0 	.word	0x080073b0
 80059c8:	02dc6c00 	.word	0x02dc6c00
 80059cc:	016e3600 	.word	0x016e3600
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 80059d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059d4:	f1a3 0108 	sub.w	r1, r3, #8
 80059d8:	ea52 0301 	orrs.w	r3, r2, r1
 80059dc:	d13c      	bne.n	8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 80059de:	4b22      	ldr	r3, [pc, #136]	@ (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 80059e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80059e4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80059e8:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 80059ea:	4b1f      	ldr	r3, [pc, #124]	@ (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059f6:	d105      	bne.n	8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
 80059f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d102      	bne.n	8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    {
      frequency = HSE_VALUE;
 80059fe:	4b1b      	ldr	r3, [pc, #108]	@ (8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0x16b4>)
 8005a00:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a02:	e02b      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 8005a04:	4b18      	ldr	r3, [pc, #96]	@ (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a10:	d106      	bne.n	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
 8005a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a18:	d102      	bne.n	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
    {
      frequency = HSE_VALUE >> 1U ;
 8005a1a:	4b15      	ldr	r3, [pc, #84]	@ (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 8005a1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a1e:	e01d      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 8005a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a26:	d107      	bne.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x1680>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7fe f88b 	bl	8003b48 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8005a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a34:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a36:	e011      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 8005a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a3a:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005a3e:	d108      	bne.n	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7fe f87f 	bl	8003b48 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a4c:	085b      	lsrs	r3, r3, #1
 8005a4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a50:	e004      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 8005a52:	2300      	movs	r3, #0
 8005a54:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a56:	e001      	b.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8005a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3738      	adds	r7, #56	@ 0x38
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	46020c00 	.word	0x46020c00
 8005a6c:	00f42400 	.word	0x00f42400
 8005a70:	007a1200 	.word	0x007a1200

08005a74 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8005a7c:	4b47      	ldr	r3, [pc, #284]	@ (8005b9c <RCCEx_PLL2_Config+0x128>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a46      	ldr	r2, [pc, #280]	@ (8005b9c <RCCEx_PLL2_Config+0x128>)
 8005a82:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005a86:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005a88:	f7fb fac0 	bl	800100c <HAL_GetTick>
 8005a8c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a8e:	e008      	b.n	8005aa2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005a90:	f7fb fabc 	bl	800100c <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d901      	bls.n	8005aa2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e077      	b.n	8005b92 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005aa2:	4b3e      	ldr	r3, [pc, #248]	@ (8005b9c <RCCEx_PLL2_Config+0x128>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1f0      	bne.n	8005a90 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005aae:	4b3b      	ldr	r3, [pc, #236]	@ (8005b9c <RCCEx_PLL2_Config+0x128>)
 8005ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005ab6:	f023 0303 	bic.w	r3, r3, #3
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	6811      	ldr	r1, [r2, #0]
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	6852      	ldr	r2, [r2, #4]
 8005ac2:	3a01      	subs	r2, #1
 8005ac4:	0212      	lsls	r2, r2, #8
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	4934      	ldr	r1, [pc, #208]	@ (8005b9c <RCCEx_PLL2_Config+0x128>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005ace:	4b33      	ldr	r3, [pc, #204]	@ (8005b9c <RCCEx_PLL2_Config+0x128>)
 8005ad0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ad2:	4b33      	ldr	r3, [pc, #204]	@ (8005ba0 <RCCEx_PLL2_Config+0x12c>)
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	6892      	ldr	r2, [r2, #8]
 8005ada:	3a01      	subs	r2, #1
 8005adc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	68d2      	ldr	r2, [r2, #12]
 8005ae4:	3a01      	subs	r2, #1
 8005ae6:	0252      	lsls	r2, r2, #9
 8005ae8:	b292      	uxth	r2, r2
 8005aea:	4311      	orrs	r1, r2
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	6912      	ldr	r2, [r2, #16]
 8005af0:	3a01      	subs	r2, #1
 8005af2:	0412      	lsls	r2, r2, #16
 8005af4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005af8:	4311      	orrs	r1, r2
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	6952      	ldr	r2, [r2, #20]
 8005afe:	3a01      	subs	r2, #1
 8005b00:	0612      	lsls	r2, r2, #24
 8005b02:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005b06:	430a      	orrs	r2, r1
 8005b08:	4924      	ldr	r1, [pc, #144]	@ (8005b9c <RCCEx_PLL2_Config+0x128>)
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005b0e:	4b23      	ldr	r3, [pc, #140]	@ (8005b9c <RCCEx_PLL2_Config+0x128>)
 8005b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b12:	f023 020c 	bic.w	r2, r3, #12
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	4920      	ldr	r1, [pc, #128]	@ (8005b9c <RCCEx_PLL2_Config+0x128>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005b20:	4b1e      	ldr	r3, [pc, #120]	@ (8005b9c <RCCEx_PLL2_Config+0x128>)
 8005b22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	491c      	ldr	r1, [pc, #112]	@ (8005b9c <RCCEx_PLL2_Config+0x128>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8005b2e:	4b1b      	ldr	r3, [pc, #108]	@ (8005b9c <RCCEx_PLL2_Config+0x128>)
 8005b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b32:	4a1a      	ldr	r2, [pc, #104]	@ (8005b9c <RCCEx_PLL2_Config+0x128>)
 8005b34:	f023 0310 	bic.w	r3, r3, #16
 8005b38:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005b3a:	4b18      	ldr	r3, [pc, #96]	@ (8005b9c <RCCEx_PLL2_Config+0x128>)
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b42:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	69d2      	ldr	r2, [r2, #28]
 8005b4a:	00d2      	lsls	r2, r2, #3
 8005b4c:	4913      	ldr	r1, [pc, #76]	@ (8005b9c <RCCEx_PLL2_Config+0x128>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8005b52:	4b12      	ldr	r3, [pc, #72]	@ (8005b9c <RCCEx_PLL2_Config+0x128>)
 8005b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b56:	4a11      	ldr	r2, [pc, #68]	@ (8005b9c <RCCEx_PLL2_Config+0x128>)
 8005b58:	f043 0310 	orr.w	r3, r3, #16
 8005b5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8005b5e:	4b0f      	ldr	r3, [pc, #60]	@ (8005b9c <RCCEx_PLL2_Config+0x128>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a0e      	ldr	r2, [pc, #56]	@ (8005b9c <RCCEx_PLL2_Config+0x128>)
 8005b64:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005b68:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005b6a:	f7fb fa4f 	bl	800100c <HAL_GetTick>
 8005b6e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b70:	e008      	b.n	8005b84 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005b72:	f7fb fa4b 	bl	800100c <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d901      	bls.n	8005b84 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e006      	b.n	8005b92 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b84:	4b05      	ldr	r3, [pc, #20]	@ (8005b9c <RCCEx_PLL2_Config+0x128>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d0f0      	beq.n	8005b72 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8005b90:	2300      	movs	r3, #0

}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	46020c00 	.word	0x46020c00
 8005ba0:	80800000 	.word	0x80800000

08005ba4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8005bac:	4b47      	ldr	r3, [pc, #284]	@ (8005ccc <RCCEx_PLL3_Config+0x128>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a46      	ldr	r2, [pc, #280]	@ (8005ccc <RCCEx_PLL3_Config+0x128>)
 8005bb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bb6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005bb8:	f7fb fa28 	bl	800100c <HAL_GetTick>
 8005bbc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005bbe:	e008      	b.n	8005bd2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005bc0:	f7fb fa24 	bl	800100c <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d901      	bls.n	8005bd2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e077      	b.n	8005cc2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005bd2:	4b3e      	ldr	r3, [pc, #248]	@ (8005ccc <RCCEx_PLL3_Config+0x128>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1f0      	bne.n	8005bc0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8005bde:	4b3b      	ldr	r3, [pc, #236]	@ (8005ccc <RCCEx_PLL3_Config+0x128>)
 8005be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005be2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005be6:	f023 0303 	bic.w	r3, r3, #3
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	6811      	ldr	r1, [r2, #0]
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	6852      	ldr	r2, [r2, #4]
 8005bf2:	3a01      	subs	r2, #1
 8005bf4:	0212      	lsls	r2, r2, #8
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	4934      	ldr	r1, [pc, #208]	@ (8005ccc <RCCEx_PLL3_Config+0x128>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	630b      	str	r3, [r1, #48]	@ 0x30
 8005bfe:	4b33      	ldr	r3, [pc, #204]	@ (8005ccc <RCCEx_PLL3_Config+0x128>)
 8005c00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c02:	4b33      	ldr	r3, [pc, #204]	@ (8005cd0 <RCCEx_PLL3_Config+0x12c>)
 8005c04:	4013      	ands	r3, r2
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	6892      	ldr	r2, [r2, #8]
 8005c0a:	3a01      	subs	r2, #1
 8005c0c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	68d2      	ldr	r2, [r2, #12]
 8005c14:	3a01      	subs	r2, #1
 8005c16:	0252      	lsls	r2, r2, #9
 8005c18:	b292      	uxth	r2, r2
 8005c1a:	4311      	orrs	r1, r2
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	6912      	ldr	r2, [r2, #16]
 8005c20:	3a01      	subs	r2, #1
 8005c22:	0412      	lsls	r2, r2, #16
 8005c24:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005c28:	4311      	orrs	r1, r2
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	6952      	ldr	r2, [r2, #20]
 8005c2e:	3a01      	subs	r2, #1
 8005c30:	0612      	lsls	r2, r2, #24
 8005c32:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005c36:	430a      	orrs	r2, r1
 8005c38:	4924      	ldr	r1, [pc, #144]	@ (8005ccc <RCCEx_PLL3_Config+0x128>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8005c3e:	4b23      	ldr	r3, [pc, #140]	@ (8005ccc <RCCEx_PLL3_Config+0x128>)
 8005c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c42:	f023 020c 	bic.w	r2, r3, #12
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	4920      	ldr	r1, [pc, #128]	@ (8005ccc <RCCEx_PLL3_Config+0x128>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005c50:	4b1e      	ldr	r3, [pc, #120]	@ (8005ccc <RCCEx_PLL3_Config+0x128>)
 8005c52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	491c      	ldr	r1, [pc, #112]	@ (8005ccc <RCCEx_PLL3_Config+0x128>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8005c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8005ccc <RCCEx_PLL3_Config+0x128>)
 8005c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c62:	4a1a      	ldr	r2, [pc, #104]	@ (8005ccc <RCCEx_PLL3_Config+0x128>)
 8005c64:	f023 0310 	bic.w	r3, r3, #16
 8005c68:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005c6a:	4b18      	ldr	r3, [pc, #96]	@ (8005ccc <RCCEx_PLL3_Config+0x128>)
 8005c6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c72:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	69d2      	ldr	r2, [r2, #28]
 8005c7a:	00d2      	lsls	r2, r2, #3
 8005c7c:	4913      	ldr	r1, [pc, #76]	@ (8005ccc <RCCEx_PLL3_Config+0x128>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8005c82:	4b12      	ldr	r3, [pc, #72]	@ (8005ccc <RCCEx_PLL3_Config+0x128>)
 8005c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c86:	4a11      	ldr	r2, [pc, #68]	@ (8005ccc <RCCEx_PLL3_Config+0x128>)
 8005c88:	f043 0310 	orr.w	r3, r3, #16
 8005c8c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8005c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8005ccc <RCCEx_PLL3_Config+0x128>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a0e      	ldr	r2, [pc, #56]	@ (8005ccc <RCCEx_PLL3_Config+0x128>)
 8005c94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c98:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005c9a:	f7fb f9b7 	bl	800100c <HAL_GetTick>
 8005c9e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ca0:	e008      	b.n	8005cb4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005ca2:	f7fb f9b3 	bl	800100c <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d901      	bls.n	8005cb4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e006      	b.n	8005cc2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005cb4:	4b05      	ldr	r3, [pc, #20]	@ (8005ccc <RCCEx_PLL3_Config+0x128>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d0f0      	beq.n	8005ca2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	46020c00 	.word	0x46020c00
 8005cd0:	80800000 	.word	0x80800000

08005cd4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e0fb      	b.n	8005ede <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a7f      	ldr	r2, [pc, #508]	@ (8005ee8 <HAL_SPI_Init+0x214>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d004      	beq.n	8005cfa <HAL_SPI_Init+0x26>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a7d      	ldr	r2, [pc, #500]	@ (8005eec <HAL_SPI_Init+0x218>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	e000      	b.n	8005cfc <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8005cfa:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a78      	ldr	r2, [pc, #480]	@ (8005ee8 <HAL_SPI_Init+0x214>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d004      	beq.n	8005d16 <HAL_SPI_Init+0x42>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a76      	ldr	r2, [pc, #472]	@ (8005eec <HAL_SPI_Init+0x218>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d105      	bne.n	8005d22 <HAL_SPI_Init+0x4e>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	2b0f      	cmp	r3, #15
 8005d1c:	d901      	bls.n	8005d22 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e0dd      	b.n	8005ede <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 fd88 	bl	8006838 <SPI_GetPacketSize>
 8005d28:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a6e      	ldr	r2, [pc, #440]	@ (8005ee8 <HAL_SPI_Init+0x214>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d004      	beq.n	8005d3e <HAL_SPI_Init+0x6a>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a6c      	ldr	r2, [pc, #432]	@ (8005eec <HAL_SPI_Init+0x218>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d102      	bne.n	8005d44 <HAL_SPI_Init+0x70>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2b08      	cmp	r3, #8
 8005d42:	d816      	bhi.n	8005d72 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005d48:	4a69      	ldr	r2, [pc, #420]	@ (8005ef0 <HAL_SPI_Init+0x21c>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d00e      	beq.n	8005d6c <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a68      	ldr	r2, [pc, #416]	@ (8005ef4 <HAL_SPI_Init+0x220>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d009      	beq.n	8005d6c <HAL_SPI_Init+0x98>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a66      	ldr	r2, [pc, #408]	@ (8005ef8 <HAL_SPI_Init+0x224>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d004      	beq.n	8005d6c <HAL_SPI_Init+0x98>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a65      	ldr	r2, [pc, #404]	@ (8005efc <HAL_SPI_Init+0x228>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d104      	bne.n	8005d76 <HAL_SPI_Init+0xa2>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2b10      	cmp	r3, #16
 8005d70:	d901      	bls.n	8005d76 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e0b3      	b.n	8005ede <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d106      	bne.n	8005d90 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f7fa fefa 	bl	8000b84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2202      	movs	r2, #2
 8005d94:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f022 0201 	bic.w	r2, r2, #1
 8005da6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8005db2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005dbc:	d119      	bne.n	8005df2 <HAL_SPI_Init+0x11e>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005dc6:	d103      	bne.n	8005dd0 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d008      	beq.n	8005de2 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10c      	bne.n	8005df2 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005ddc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005de0:	d107      	bne.n	8005df2 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005df0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00f      	beq.n	8005e1e <HAL_SPI_Init+0x14a>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	2b06      	cmp	r3, #6
 8005e04:	d90b      	bls.n	8005e1e <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	e007      	b.n	8005e2e <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e2c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	69da      	ldr	r2, [r3, #28]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e36:	431a      	orrs	r2, r3
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	431a      	orrs	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e40:	ea42 0103 	orr.w	r1, r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	68da      	ldr	r2, [r3, #12]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e58:	431a      	orrs	r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e5e:	431a      	orrs	r2, r3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	431a      	orrs	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	431a      	orrs	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	695b      	ldr	r3, [r3, #20]
 8005e70:	431a      	orrs	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	431a      	orrs	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	431a      	orrs	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e82:	431a      	orrs	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	431a      	orrs	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e8e:	431a      	orrs	r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e94:	431a      	orrs	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e9a:	ea42 0103 	orr.w	r1, r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00a      	beq.n	8005ecc <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	46002000 	.word	0x46002000
 8005eec:	56002000 	.word	0x56002000
 8005ef0:	40013000 	.word	0x40013000
 8005ef4:	50013000 	.word	0x50013000
 8005ef8:	40003800 	.word	0x40003800
 8005efc:	50003800 	.word	0x50003800

08005f00 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b08a      	sub	sp, #40	@ 0x28
 8005f04:	af02      	add	r7, sp, #8
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	603b      	str	r3, [r7, #0]
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	3320      	adds	r3, #32
 8005f16:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d101      	bne.n	8005f2a <HAL_SPI_Transmit+0x2a>
 8005f26:	2302      	movs	r3, #2
 8005f28:	e203      	b.n	8006332 <HAL_SPI_Transmit+0x432>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f32:	f7fb f86b 	bl	800100c <HAL_GetTick>
 8005f36:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d007      	beq.n	8005f54 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8005f44:	2302      	movs	r3, #2
 8005f46:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return errorcode;
 8005f50:	7efb      	ldrb	r3, [r7, #27]
 8005f52:	e1ee      	b.n	8006332 <HAL_SPI_Transmit+0x432>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d002      	beq.n	8005f60 <HAL_SPI_Transmit+0x60>
 8005f5a:	88fb      	ldrh	r3, [r7, #6]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d107      	bne.n	8005f70 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return errorcode;
 8005f6c:	7efb      	ldrb	r3, [r7, #27]
 8005f6e:	e1e0      	b.n	8006332 <HAL_SPI_Transmit+0x432>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2203      	movs	r2, #3
 8005f74:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	68ba      	ldr	r2, [r7, #8]
 8005f84:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	88fa      	ldrh	r2, [r7, #6]
 8005f8a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	88fa      	ldrh	r2, [r7, #6]
 8005f92:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005fc0:	d108      	bne.n	8005fd4 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	e009      	b.n	8005fe8 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005fe6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	0c1b      	lsrs	r3, r3, #16
 8005ff0:	041b      	lsls	r3, r3, #16
 8005ff2:	88f9      	ldrh	r1, [r7, #6]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	6812      	ldr	r2, [r2, #0]
 8005ff8:	430b      	orrs	r3, r1
 8005ffa:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f042 0201 	orr.w	r2, r2, #1
 800600a:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	69db      	ldr	r3, [r3, #28]
 8006012:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10c      	bne.n	8006034 <HAL_SPI_Transmit+0x134>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006022:	d107      	bne.n	8006034 <HAL_SPI_Transmit+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006032:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	2b0f      	cmp	r3, #15
 800603a:	d95b      	bls.n	80060f4 <HAL_SPI_Transmit+0x1f4>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a8f      	ldr	r2, [pc, #572]	@ (8006280 <HAL_SPI_Transmit+0x380>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d04f      	beq.n	80060e6 <HAL_SPI_Transmit+0x1e6>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a8e      	ldr	r2, [pc, #568]	@ (8006284 <HAL_SPI_Transmit+0x384>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d04a      	beq.n	80060e6 <HAL_SPI_Transmit+0x1e6>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a8c      	ldr	r2, [pc, #560]	@ (8006288 <HAL_SPI_Transmit+0x388>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d045      	beq.n	80060e6 <HAL_SPI_Transmit+0x1e6>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a8b      	ldr	r2, [pc, #556]	@ (800628c <HAL_SPI_Transmit+0x38c>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d147      	bne.n	80060f4 <HAL_SPI_Transmit+0x1f4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006064:	e03f      	b.n	80060e6 <HAL_SPI_Transmit+0x1e6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	f003 0302 	and.w	r3, r3, #2
 8006070:	2b02      	cmp	r3, #2
 8006072:	d114      	bne.n	800609e <HAL_SPI_Transmit+0x19e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6812      	ldr	r2, [r2, #0]
 800607e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006084:	1d1a      	adds	r2, r3, #4
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006090:	b29b      	uxth	r3, r3
 8006092:	3b01      	subs	r3, #1
 8006094:	b29a      	uxth	r2, r3
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800609c:	e023      	b.n	80060e6 <HAL_SPI_Transmit+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800609e:	f7fa ffb5 	bl	800100c <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	683a      	ldr	r2, [r7, #0]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d803      	bhi.n	80060b6 <HAL_SPI_Transmit+0x1b6>
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060b4:	d102      	bne.n	80060bc <HAL_SPI_Transmit+0x1bc>
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d114      	bne.n	80060e6 <HAL_SPI_Transmit+0x1e6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f000 faed 	bl	800669c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
          return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e125      	b.n	8006332 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1b9      	bne.n	8006066 <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80060f2:	e0f8      	b.n	80062e6 <HAL_SPI_Transmit+0x3e6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	2b07      	cmp	r3, #7
 80060fa:	f240 80ed 	bls.w	80062d8 <HAL_SPI_Transmit+0x3d8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80060fe:	e05d      	b.n	80061bc <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	f003 0302 	and.w	r3, r3, #2
 800610a:	2b02      	cmp	r3, #2
 800610c:	d132      	bne.n	8006174 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006114:	b29b      	uxth	r3, r3
 8006116:	2b01      	cmp	r3, #1
 8006118:	d918      	bls.n	800614c <HAL_SPI_Transmit+0x24c>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800611e:	2b00      	cmp	r3, #0
 8006120:	d014      	beq.n	800614c <HAL_SPI_Transmit+0x24c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	6812      	ldr	r2, [r2, #0]
 800612c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006132:	1d1a      	adds	r2, r3, #4
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800613e:	b29b      	uxth	r3, r3
 8006140:	3b02      	subs	r3, #2
 8006142:	b29a      	uxth	r2, r3
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800614a:	e037      	b.n	80061bc <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006150:	881a      	ldrh	r2, [r3, #0]
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800615a:	1c9a      	adds	r2, r3, #2
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006166:	b29b      	uxth	r3, r3
 8006168:	3b01      	subs	r3, #1
 800616a:	b29a      	uxth	r2, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006172:	e023      	b.n	80061bc <HAL_SPI_Transmit+0x2bc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006174:	f7fa ff4a 	bl	800100c <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	683a      	ldr	r2, [r7, #0]
 8006180:	429a      	cmp	r2, r3
 8006182:	d803      	bhi.n	800618c <HAL_SPI_Transmit+0x28c>
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800618a:	d102      	bne.n	8006192 <HAL_SPI_Transmit+0x292>
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d114      	bne.n	80061bc <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f000 fa82 	bl	800669c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80061a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
          return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e0ba      	b.n	8006332 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d19b      	bne.n	8006100 <HAL_SPI_Transmit+0x200>
 80061c8:	e08d      	b.n	80062e6 <HAL_SPI_Transmit+0x3e6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	f003 0302 	and.w	r3, r3, #2
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d15b      	bne.n	8006290 <HAL_SPI_Transmit+0x390>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80061de:	b29b      	uxth	r3, r3
 80061e0:	2b03      	cmp	r3, #3
 80061e2:	d918      	bls.n	8006216 <HAL_SPI_Transmit+0x316>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061e8:	2b40      	cmp	r3, #64	@ 0x40
 80061ea:	d914      	bls.n	8006216 <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6812      	ldr	r2, [r2, #0]
 80061f6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061fc:	1d1a      	adds	r2, r3, #4
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006208:	b29b      	uxth	r3, r3
 800620a:	3b04      	subs	r3, #4
 800620c:	b29a      	uxth	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006214:	e060      	b.n	80062d8 <HAL_SPI_Transmit+0x3d8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800621c:	b29b      	uxth	r3, r3
 800621e:	2b01      	cmp	r3, #1
 8006220:	d917      	bls.n	8006252 <HAL_SPI_Transmit+0x352>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006226:	2b00      	cmp	r3, #0
 8006228:	d013      	beq.n	8006252 <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800622e:	881a      	ldrh	r2, [r3, #0]
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006238:	1c9a      	adds	r2, r3, #2
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006244:	b29b      	uxth	r3, r3
 8006246:	3b02      	subs	r3, #2
 8006248:	b29a      	uxth	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006250:	e042      	b.n	80062d8 <HAL_SPI_Transmit+0x3d8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	3320      	adds	r3, #32
 800625c:	7812      	ldrb	r2, [r2, #0]
 800625e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006264:	1c5a      	adds	r2, r3, #1
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006270:	b29b      	uxth	r3, r3
 8006272:	3b01      	subs	r3, #1
 8006274:	b29a      	uxth	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800627c:	e02c      	b.n	80062d8 <HAL_SPI_Transmit+0x3d8>
 800627e:	bf00      	nop
 8006280:	40013000 	.word	0x40013000
 8006284:	50013000 	.word	0x50013000
 8006288:	40003800 	.word	0x40003800
 800628c:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006290:	f7fa febc 	bl	800100c <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	683a      	ldr	r2, [r7, #0]
 800629c:	429a      	cmp	r2, r3
 800629e:	d803      	bhi.n	80062a8 <HAL_SPI_Transmit+0x3a8>
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062a6:	d102      	bne.n	80062ae <HAL_SPI_Transmit+0x3ae>
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d114      	bne.n	80062d8 <HAL_SPI_Transmit+0x3d8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f000 f9f4 	bl	800669c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
          return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e02c      	b.n	8006332 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80062de:	b29b      	uxth	r3, r3
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f47f af72 	bne.w	80061ca <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	9300      	str	r3, [sp, #0]
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	2200      	movs	r2, #0
 80062ee:	2108      	movs	r1, #8
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f000 fa73 	bl	80067dc <SPI_WaitOnFlagUntilTimeout>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d007      	beq.n	800630c <HAL_SPI_Transmit+0x40c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006302:	f043 0220 	orr.w	r2, r3, #32
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f000 f9c5 	bl	800669c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  hspi->State = HAL_SPI_STATE_READY;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006328:	2b00      	cmp	r3, #0
 800632a:	d001      	beq.n	8006330 <HAL_SPI_Transmit+0x430>
  {
    return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e000      	b.n	8006332 <HAL_SPI_Transmit+0x432>
  }
  return errorcode;
 8006330:	7efb      	ldrb	r3, [r7, #27]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3720      	adds	r7, #32
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop

0800633c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b088      	sub	sp, #32
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	603b      	str	r3, [r7, #0]
 8006348:	4613      	mov	r3, r2
 800634a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800634c:	2300      	movs	r3, #0
 800634e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	3330      	adds	r3, #48	@ 0x30
 8006356:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800635e:	2b01      	cmp	r3, #1
 8006360:	d101      	bne.n	8006366 <HAL_SPI_Receive+0x2a>
 8006362:	2302      	movs	r3, #2
 8006364:	e18e      	b.n	8006684 <HAL_SPI_Receive+0x348>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2201      	movs	r2, #1
 800636a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800636e:	f7fa fe4d 	bl	800100c <HAL_GetTick>
 8006372:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b01      	cmp	r3, #1
 800637e:	d007      	beq.n	8006390 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 8006380:	2302      	movs	r3, #2
 8006382:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return errorcode;
 800638c:	7ffb      	ldrb	r3, [r7, #31]
 800638e:	e179      	b.n	8006684 <HAL_SPI_Receive+0x348>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d002      	beq.n	800639c <HAL_SPI_Receive+0x60>
 8006396:	88fb      	ldrh	r3, [r7, #6]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d107      	bne.n	80063ac <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return errorcode;
 80063a8:	7ffb      	ldrb	r3, [r7, #31]
 80063aa:	e16b      	b.n	8006684 <HAL_SPI_Receive+0x348>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2204      	movs	r2, #4
 80063b0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	88fa      	ldrh	r2, [r7, #6]
 80063c6:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	88fa      	ldrh	r2, [r7, #6]
 80063ce:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80063fc:	d108      	bne.n	8006410 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800640c:	601a      	str	r2, [r3, #0]
 800640e:	e009      	b.n	8006424 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006422:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	0c1b      	lsrs	r3, r3, #16
 800642c:	041b      	lsls	r3, r3, #16
 800642e:	88f9      	ldrh	r1, [r7, #6]
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	6812      	ldr	r2, [r2, #0]
 8006434:	430b      	orrs	r3, r1
 8006436:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f042 0201 	orr.w	r2, r2, #1
 8006446:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10c      	bne.n	8006470 <HAL_SPI_Receive+0x134>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800645e:	d107      	bne.n	8006470 <HAL_SPI_Receive+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800646e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	2b0f      	cmp	r3, #15
 8006476:	d95c      	bls.n	8006532 <HAL_SPI_Receive+0x1f6>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a83      	ldr	r2, [pc, #524]	@ (800668c <HAL_SPI_Receive+0x350>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d050      	beq.n	8006524 <HAL_SPI_Receive+0x1e8>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a82      	ldr	r2, [pc, #520]	@ (8006690 <HAL_SPI_Receive+0x354>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d04b      	beq.n	8006524 <HAL_SPI_Receive+0x1e8>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a80      	ldr	r2, [pc, #512]	@ (8006694 <HAL_SPI_Receive+0x358>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d046      	beq.n	8006524 <HAL_SPI_Receive+0x1e8>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a7f      	ldr	r2, [pc, #508]	@ (8006698 <HAL_SPI_Receive+0x35c>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d148      	bne.n	8006532 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80064a0:	e040      	b.n	8006524 <HAL_SPI_Receive+0x1e8>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	695a      	ldr	r2, [r3, #20]
 80064a8:	f248 0308 	movw	r3, #32776	@ 0x8008
 80064ac:	4013      	ands	r3, r2
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d014      	beq.n	80064dc <HAL_SPI_Receive+0x1a0>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064ba:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80064bc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064c2:	1d1a      	adds	r2, r3, #4
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	3b01      	subs	r3, #1
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80064da:	e023      	b.n	8006524 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064dc:	f7fa fd96 	bl	800100c <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	683a      	ldr	r2, [r7, #0]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d803      	bhi.n	80064f4 <HAL_SPI_Receive+0x1b8>
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064f2:	d102      	bne.n	80064fa <HAL_SPI_Receive+0x1be>
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d114      	bne.n	8006524 <HAL_SPI_Receive+0x1e8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f000 f8ce 	bl	800669c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800650e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
          return HAL_TIMEOUT;
 8006520:	2303      	movs	r3, #3
 8006522:	e0af      	b.n	8006684 <HAL_SPI_Receive+0x348>
    while (hspi->RxXferCount > 0UL)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800652a:	b29b      	uxth	r3, r3
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1b8      	bne.n	80064a2 <HAL_SPI_Receive+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8006530:	e095      	b.n	800665e <HAL_SPI_Receive+0x322>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	2b07      	cmp	r3, #7
 8006538:	f240 808b 	bls.w	8006652 <HAL_SPI_Receive+0x316>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800653c:	e03f      	b.n	80065be <HAL_SPI_Receive+0x282>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	695b      	ldr	r3, [r3, #20]
 8006544:	f003 0301 	and.w	r3, r3, #1
 8006548:	2b01      	cmp	r3, #1
 800654a:	d114      	bne.n	8006576 <HAL_SPI_Receive+0x23a>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006550:	69ba      	ldr	r2, [r7, #24]
 8006552:	8812      	ldrh	r2, [r2, #0]
 8006554:	b292      	uxth	r2, r2
 8006556:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800655c:	1c9a      	adds	r2, r3, #2
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006568:	b29b      	uxth	r3, r3
 800656a:	3b01      	subs	r3, #1
 800656c:	b29a      	uxth	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8006574:	e023      	b.n	80065be <HAL_SPI_Receive+0x282>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006576:	f7fa fd49 	bl	800100c <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	683a      	ldr	r2, [r7, #0]
 8006582:	429a      	cmp	r2, r3
 8006584:	d803      	bhi.n	800658e <HAL_SPI_Receive+0x252>
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800658c:	d102      	bne.n	8006594 <HAL_SPI_Receive+0x258>
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d114      	bne.n	80065be <HAL_SPI_Receive+0x282>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f000 f881 	bl	800669c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065a8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
          return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e062      	b.n	8006684 <HAL_SPI_Receive+0x348>
    while (hspi->RxXferCount > 0UL)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1b9      	bne.n	800653e <HAL_SPI_Receive+0x202>
 80065ca:	e048      	b.n	800665e <HAL_SPI_Receive+0x322>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d117      	bne.n	800660a <HAL_SPI_Receive+0x2ce>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065e6:	7812      	ldrb	r2, [r2, #0]
 80065e8:	b2d2      	uxtb	r2, r2
 80065ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065f0:	1c5a      	adds	r2, r3, #1
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	3b01      	subs	r3, #1
 8006600:	b29a      	uxth	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8006608:	e023      	b.n	8006652 <HAL_SPI_Receive+0x316>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800660a:	f7fa fcff 	bl	800100c <HAL_GetTick>
 800660e:	4602      	mov	r2, r0
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	683a      	ldr	r2, [r7, #0]
 8006616:	429a      	cmp	r2, r3
 8006618:	d803      	bhi.n	8006622 <HAL_SPI_Receive+0x2e6>
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006620:	d102      	bne.n	8006628 <HAL_SPI_Receive+0x2ec>
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d114      	bne.n	8006652 <HAL_SPI_Receive+0x316>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f000 f837 	bl	800669c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800663c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
          return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e018      	b.n	8006684 <HAL_SPI_Receive+0x348>
    while (hspi->RxXferCount > 0UL)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006658:	b29b      	uxth	r3, r3
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1b6      	bne.n	80065cc <HAL_SPI_Receive+0x290>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f000 f81c 	bl	800669c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  hspi->State = HAL_SPI_STATE_READY;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800667a:	2b00      	cmp	r3, #0
 800667c:	d001      	beq.n	8006682 <HAL_SPI_Receive+0x346>
  {
    return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e000      	b.n	8006684 <HAL_SPI_Receive+0x348>
  }
  return errorcode;
 8006682:	7ffb      	ldrb	r3, [r7, #31]
}
 8006684:	4618      	mov	r0, r3
 8006686:	3720      	adds	r7, #32
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	40013000 	.word	0x40013000
 8006690:	50013000 	.word	0x50013000
 8006694:	40003800 	.word	0x40003800
 8006698:	50003800 	.word	0x50003800

0800669c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	699a      	ldr	r2, [r3, #24]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f042 0208 	orr.w	r2, r2, #8
 80066ba:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	699a      	ldr	r2, [r3, #24]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f042 0210 	orr.w	r2, r2, #16
 80066ca:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 0201 	bic.w	r2, r2, #1
 80066da:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	6812      	ldr	r2, [r2, #0]
 80066e6:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 80066ea:	f023 0303 	bic.w	r3, r3, #3
 80066ee:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	689a      	ldr	r2, [r3, #8]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80066fe:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2b04      	cmp	r3, #4
 800670a:	d014      	beq.n	8006736 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f003 0320 	and.w	r3, r3, #32
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00f      	beq.n	8006736 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800671c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	699a      	ldr	r2, [r3, #24]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f042 0220 	orr.w	r2, r2, #32
 8006734:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b03      	cmp	r3, #3
 8006740:	d014      	beq.n	800676c <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00f      	beq.n	800676c <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006752:	f043 0204 	orr.w	r2, r3, #4
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	699a      	ldr	r2, [r3, #24]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800676a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00f      	beq.n	8006796 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800677c:	f043 0201 	orr.w	r2, r3, #1
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	699a      	ldr	r2, [r3, #24]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006794:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00f      	beq.n	80067c0 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067a6:	f043 0208 	orr.w	r2, r3, #8
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	699a      	ldr	r2, [r3, #24]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80067be:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 80067d0:	bf00      	nop
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	603b      	str	r3, [r7, #0]
 80067e8:	4613      	mov	r3, r2
 80067ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80067ec:	e010      	b.n	8006810 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067ee:	f7fa fc0d 	bl	800100c <HAL_GetTick>
 80067f2:	4602      	mov	r2, r0
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	683a      	ldr	r2, [r7, #0]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d803      	bhi.n	8006806 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006804:	d102      	bne.n	800680c <SPI_WaitOnFlagUntilTimeout+0x30>
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d101      	bne.n	8006810 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e00f      	b.n	8006830 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	695a      	ldr	r2, [r3, #20]
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	4013      	ands	r3, r2
 800681a:	68ba      	ldr	r2, [r7, #8]
 800681c:	429a      	cmp	r2, r3
 800681e:	bf0c      	ite	eq
 8006820:	2301      	moveq	r3, #1
 8006822:	2300      	movne	r3, #0
 8006824:	b2db      	uxtb	r3, r3
 8006826:	461a      	mov	r2, r3
 8006828:	79fb      	ldrb	r3, [r7, #7]
 800682a:	429a      	cmp	r2, r3
 800682c:	d0df      	beq.n	80067ee <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006844:	095b      	lsrs	r3, r3, #5
 8006846:	3301      	adds	r3, #1
 8006848:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	3301      	adds	r3, #1
 8006850:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	3307      	adds	r3, #7
 8006856:	08db      	lsrs	r3, r3, #3
 8006858:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	fb02 f303 	mul.w	r3, r2, r3
}
 8006862:	4618      	mov	r0, r3
 8006864:	3714      	adds	r7, #20
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr

0800686e <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800686e:	b480      	push	{r7}
 8006870:	b083      	sub	sp, #12
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
 8006876:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800687e:	b2db      	uxtb	r3, r3
 8006880:	2b01      	cmp	r3, #1
 8006882:	d12e      	bne.n	80068e2 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800688a:	2b01      	cmp	r3, #1
 800688c:	d101      	bne.n	8006892 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800688e:	2302      	movs	r3, #2
 8006890:	e028      	b.n	80068e4 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2202      	movs	r2, #2
 800689e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f022 0201 	bic.w	r2, r2, #1
 80068b0:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80068be:	ea42 0103 	orr.w	r1, r2, r3
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	689a      	ldr	r2, [r3, #8]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	430a      	orrs	r2, r1
 80068cc:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2201      	movs	r2, #1
 80068d2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80068de:	2300      	movs	r3, #0
 80068e0:	e000      	b.n	80068e4 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
  }
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d101      	bne.n	8006902 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e042      	b.n	8006988 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006908:	2b00      	cmp	r3, #0
 800690a:	d106      	bne.n	800691a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f7fa fa6d 	bl	8000df4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2224      	movs	r2, #36	@ 0x24
 800691e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f022 0201 	bic.w	r2, r2, #1
 8006930:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f82c 	bl	8006990 <UART_SetConfig>
 8006938:	4603      	mov	r3, r0
 800693a:	2b01      	cmp	r3, #1
 800693c:	d101      	bne.n	8006942 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e022      	b.n	8006988 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006946:	2b00      	cmp	r3, #0
 8006948:	d002      	beq.n	8006950 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f9ce 	bl	8006cec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	685a      	ldr	r2, [r3, #4]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800695e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	689a      	ldr	r2, [r3, #8]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800696e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f042 0201 	orr.w	r2, r2, #1
 800697e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 fa55 	bl	8006e30 <UART_CheckIdleState>
 8006986:	4603      	mov	r3, r0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3708      	adds	r7, #8
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006994:	b094      	sub	sp, #80	@ 0x50
 8006996:	af00      	add	r7, sp, #0
 8006998:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800699a:	2300      	movs	r3, #0
 800699c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80069a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	4b83      	ldr	r3, [pc, #524]	@ (8006bb4 <UART_SetConfig+0x224>)
 80069a6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069aa:	689a      	ldr	r2, [r3, #8]
 80069ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	431a      	orrs	r2, r3
 80069b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069b4:	695b      	ldr	r3, [r3, #20]
 80069b6:	431a      	orrs	r2, r3
 80069b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ba:	69db      	ldr	r3, [r3, #28]
 80069bc:	4313      	orrs	r3, r2
 80069be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	497c      	ldr	r1, [pc, #496]	@ (8006bb8 <UART_SetConfig+0x228>)
 80069c8:	4019      	ands	r1, r3
 80069ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069d0:	430b      	orrs	r3, r1
 80069d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80069de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069e0:	68d9      	ldr	r1, [r3, #12]
 80069e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	ea40 0301 	orr.w	r3, r0, r1
 80069ea:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	4b6f      	ldr	r3, [pc, #444]	@ (8006bb4 <UART_SetConfig+0x224>)
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d009      	beq.n	8006a10 <UART_SetConfig+0x80>
 80069fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	4b6e      	ldr	r3, [pc, #440]	@ (8006bbc <UART_SetConfig+0x22c>)
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d004      	beq.n	8006a10 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a08:	6a1a      	ldr	r2, [r3, #32]
 8006a0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8006a1a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8006a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a24:	430b      	orrs	r3, r1
 8006a26:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a2e:	f023 000f 	bic.w	r0, r3, #15
 8006a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a34:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	ea40 0301 	orr.w	r3, r0, r1
 8006a3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	4b5e      	ldr	r3, [pc, #376]	@ (8006bc0 <UART_SetConfig+0x230>)
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d102      	bne.n	8006a50 <UART_SetConfig+0xc0>
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a4e:	e032      	b.n	8006ab6 <UART_SetConfig+0x126>
 8006a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	4b5b      	ldr	r3, [pc, #364]	@ (8006bc4 <UART_SetConfig+0x234>)
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d102      	bne.n	8006a60 <UART_SetConfig+0xd0>
 8006a5a:	2302      	movs	r3, #2
 8006a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a5e:	e02a      	b.n	8006ab6 <UART_SetConfig+0x126>
 8006a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	4b58      	ldr	r3, [pc, #352]	@ (8006bc8 <UART_SetConfig+0x238>)
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d102      	bne.n	8006a70 <UART_SetConfig+0xe0>
 8006a6a:	2304      	movs	r3, #4
 8006a6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a6e:	e022      	b.n	8006ab6 <UART_SetConfig+0x126>
 8006a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	4b55      	ldr	r3, [pc, #340]	@ (8006bcc <UART_SetConfig+0x23c>)
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d102      	bne.n	8006a80 <UART_SetConfig+0xf0>
 8006a7a:	2308      	movs	r3, #8
 8006a7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a7e:	e01a      	b.n	8006ab6 <UART_SetConfig+0x126>
 8006a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	4b52      	ldr	r3, [pc, #328]	@ (8006bd0 <UART_SetConfig+0x240>)
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d102      	bne.n	8006a90 <UART_SetConfig+0x100>
 8006a8a:	2310      	movs	r3, #16
 8006a8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a8e:	e012      	b.n	8006ab6 <UART_SetConfig+0x126>
 8006a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	4b4f      	ldr	r3, [pc, #316]	@ (8006bd4 <UART_SetConfig+0x244>)
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d103      	bne.n	8006aa2 <UART_SetConfig+0x112>
 8006a9a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8006a9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006aa0:	e009      	b.n	8006ab6 <UART_SetConfig+0x126>
 8006aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	4b43      	ldr	r3, [pc, #268]	@ (8006bb4 <UART_SetConfig+0x224>)
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d102      	bne.n	8006ab2 <UART_SetConfig+0x122>
 8006aac:	2320      	movs	r3, #32
 8006aae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ab0:	e001      	b.n	8006ab6 <UART_SetConfig+0x126>
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	4b3e      	ldr	r3, [pc, #248]	@ (8006bb4 <UART_SetConfig+0x224>)
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d005      	beq.n	8006acc <UART_SetConfig+0x13c>
 8006ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	4b3d      	ldr	r3, [pc, #244]	@ (8006bbc <UART_SetConfig+0x22c>)
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	f040 8088 	bne.w	8006bdc <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006acc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ace:	2200      	movs	r2, #0
 8006ad0:	623b      	str	r3, [r7, #32]
 8006ad2:	627a      	str	r2, [r7, #36]	@ 0x24
 8006ad4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006ad8:	f7fd fc6e 	bl	80043b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8006adc:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ade:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f000 80eb 	beq.w	8006cbc <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aea:	4a3b      	ldr	r2, [pc, #236]	@ (8006bd8 <UART_SetConfig+0x248>)
 8006aec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006af0:	461a      	mov	r2, r3
 8006af2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006af4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006af8:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006afc:	685a      	ldr	r2, [r3, #4]
 8006afe:	4613      	mov	r3, r2
 8006b00:	005b      	lsls	r3, r3, #1
 8006b02:	4413      	add	r3, r2
 8006b04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d305      	bcc.n	8006b16 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d903      	bls.n	8006b1e <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006b1c:	e048      	b.n	8006bb0 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b20:	2200      	movs	r2, #0
 8006b22:	61bb      	str	r3, [r7, #24]
 8006b24:	61fa      	str	r2, [r7, #28]
 8006b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b2a:	4a2b      	ldr	r2, [pc, #172]	@ (8006bd8 <UART_SetConfig+0x248>)
 8006b2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	2200      	movs	r2, #0
 8006b34:	613b      	str	r3, [r7, #16]
 8006b36:	617a      	str	r2, [r7, #20]
 8006b38:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006b3c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006b40:	f7f9 fba6 	bl	8000290 <__aeabi_uldivmod>
 8006b44:	4602      	mov	r2, r0
 8006b46:	460b      	mov	r3, r1
 8006b48:	4610      	mov	r0, r2
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	f04f 0200 	mov.w	r2, #0
 8006b50:	f04f 0300 	mov.w	r3, #0
 8006b54:	020b      	lsls	r3, r1, #8
 8006b56:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006b5a:	0202      	lsls	r2, r0, #8
 8006b5c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b5e:	6849      	ldr	r1, [r1, #4]
 8006b60:	0849      	lsrs	r1, r1, #1
 8006b62:	2000      	movs	r0, #0
 8006b64:	460c      	mov	r4, r1
 8006b66:	4605      	mov	r5, r0
 8006b68:	eb12 0804 	adds.w	r8, r2, r4
 8006b6c:	eb43 0905 	adc.w	r9, r3, r5
 8006b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	60bb      	str	r3, [r7, #8]
 8006b78:	60fa      	str	r2, [r7, #12]
 8006b7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b7e:	4640      	mov	r0, r8
 8006b80:	4649      	mov	r1, r9
 8006b82:	f7f9 fb85 	bl	8000290 <__aeabi_uldivmod>
 8006b86:	4602      	mov	r2, r0
 8006b88:	460b      	mov	r3, r1
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b94:	d308      	bcc.n	8006ba8 <UART_SetConfig+0x218>
 8006b96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b9c:	d204      	bcs.n	8006ba8 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 8006b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006ba4:	60da      	str	r2, [r3, #12]
 8006ba6:	e003      	b.n	8006bb0 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8006bae:	e085      	b.n	8006cbc <UART_SetConfig+0x32c>
 8006bb0:	e084      	b.n	8006cbc <UART_SetConfig+0x32c>
 8006bb2:	bf00      	nop
 8006bb4:	46002400 	.word	0x46002400
 8006bb8:	cfff69f3 	.word	0xcfff69f3
 8006bbc:	56002400 	.word	0x56002400
 8006bc0:	40013800 	.word	0x40013800
 8006bc4:	40004400 	.word	0x40004400
 8006bc8:	40004800 	.word	0x40004800
 8006bcc:	40004c00 	.word	0x40004c00
 8006bd0:	40005000 	.word	0x40005000
 8006bd4:	40006400 	.word	0x40006400
 8006bd8:	08007470 	.word	0x08007470
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bde:	69db      	ldr	r3, [r3, #28]
 8006be0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006be4:	d13c      	bne.n	8006c60 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006be6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006be8:	2200      	movs	r2, #0
 8006bea:	603b      	str	r3, [r7, #0]
 8006bec:	607a      	str	r2, [r7, #4]
 8006bee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bf2:	f7fd fbe1 	bl	80043b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8006bf6:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006bf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d05e      	beq.n	8006cbc <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c02:	4a39      	ldr	r2, [pc, #228]	@ (8006ce8 <UART_SetConfig+0x358>)
 8006c04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c08:	461a      	mov	r2, r3
 8006c0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c10:	005a      	lsls	r2, r3, #1
 8006c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	085b      	lsrs	r3, r3, #1
 8006c18:	441a      	add	r2, r3
 8006c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c26:	2b0f      	cmp	r3, #15
 8006c28:	d916      	bls.n	8006c58 <UART_SetConfig+0x2c8>
 8006c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c30:	d212      	bcs.n	8006c58 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	f023 030f 	bic.w	r3, r3, #15
 8006c3a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c3e:	085b      	lsrs	r3, r3, #1
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	f003 0307 	and.w	r3, r3, #7
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8006c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8006c54:	60da      	str	r2, [r3, #12]
 8006c56:	e031      	b.n	8006cbc <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006c5e:	e02d      	b.n	8006cbc <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006c60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c62:	2200      	movs	r2, #0
 8006c64:	469a      	mov	sl, r3
 8006c66:	4693      	mov	fp, r2
 8006c68:	4650      	mov	r0, sl
 8006c6a:	4659      	mov	r1, fp
 8006c6c:	f7fd fba4 	bl	80043b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8006c70:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8006c72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d021      	beq.n	8006cbc <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c7c:	4a1a      	ldr	r2, [pc, #104]	@ (8006ce8 <UART_SetConfig+0x358>)
 8006c7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c82:	461a      	mov	r2, r3
 8006c84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c86:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	085b      	lsrs	r3, r3, #1
 8006c90:	441a      	add	r2, r3
 8006c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c9e:	2b0f      	cmp	r3, #15
 8006ca0:	d909      	bls.n	8006cb6 <UART_SetConfig+0x326>
 8006ca2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ca8:	d205      	bcs.n	8006cb6 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006caa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cac:	b29a      	uxth	r2, r3
 8006cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	60da      	str	r2, [r3, #12]
 8006cb4:	e002      	b.n	8006cbc <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cce:	2200      	movs	r2, #0
 8006cd0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006cd8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3750      	adds	r7, #80	@ 0x50
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ce6:	bf00      	nop
 8006ce8:	08007470 	.word	0x08007470

08006cec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf8:	f003 0301 	and.w	r3, r3, #1
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00a      	beq.n	8006d16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	430a      	orrs	r2, r1
 8006d14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d1a:	f003 0302 	and.w	r3, r3, #2
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00a      	beq.n	8006d38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	430a      	orrs	r2, r1
 8006d36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d3c:	f003 0304 	and.w	r3, r3, #4
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00a      	beq.n	8006d5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	430a      	orrs	r2, r1
 8006d58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d5e:	f003 0308 	and.w	r3, r3, #8
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00a      	beq.n	8006d7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	430a      	orrs	r2, r1
 8006d7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d80:	f003 0310 	and.w	r3, r3, #16
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d00a      	beq.n	8006d9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	430a      	orrs	r2, r1
 8006d9c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da2:	f003 0320 	and.w	r3, r3, #32
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00a      	beq.n	8006dc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	430a      	orrs	r2, r1
 8006dbe:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d01a      	beq.n	8006e02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	430a      	orrs	r2, r1
 8006de0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006de6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dea:	d10a      	bne.n	8006e02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	430a      	orrs	r2, r1
 8006e00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00a      	beq.n	8006e24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	430a      	orrs	r2, r1
 8006e22:	605a      	str	r2, [r3, #4]
  }
}
 8006e24:	bf00      	nop
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b098      	sub	sp, #96	@ 0x60
 8006e34:	af02      	add	r7, sp, #8
 8006e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e40:	f7fa f8e4 	bl	800100c <HAL_GetTick>
 8006e44:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 0308 	and.w	r3, r3, #8
 8006e50:	2b08      	cmp	r3, #8
 8006e52:	d12f      	bne.n	8006eb4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e58:	9300      	str	r3, [sp, #0]
 8006e5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f88e 	bl	8006f84 <UART_WaitOnFlagUntilTimeout>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d022      	beq.n	8006eb4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e76:	e853 3f00 	ldrex	r3, [r3]
 8006e7a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e82:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	461a      	mov	r2, r3
 8006e8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e8e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e94:	e841 2300 	strex	r3, r2, [r1]
 8006e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1e6      	bne.n	8006e6e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2220      	movs	r2, #32
 8006ea4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	e063      	b.n	8006f7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 0304 	and.w	r3, r3, #4
 8006ebe:	2b04      	cmp	r3, #4
 8006ec0:	d149      	bne.n	8006f56 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ec2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ec6:	9300      	str	r3, [sp, #0]
 8006ec8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 f857 	bl	8006f84 <UART_WaitOnFlagUntilTimeout>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d03c      	beq.n	8006f56 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee4:	e853 3f00 	ldrex	r3, [r3]
 8006ee8:	623b      	str	r3, [r7, #32]
   return(result);
 8006eea:	6a3b      	ldr	r3, [r7, #32]
 8006eec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ef0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006efa:	633b      	str	r3, [r7, #48]	@ 0x30
 8006efc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f02:	e841 2300 	strex	r3, r2, [r1]
 8006f06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1e6      	bne.n	8006edc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	3308      	adds	r3, #8
 8006f14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	e853 3f00 	ldrex	r3, [r3]
 8006f1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f023 0301 	bic.w	r3, r3, #1
 8006f24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	3308      	adds	r3, #8
 8006f2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f2e:	61fa      	str	r2, [r7, #28]
 8006f30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f32:	69b9      	ldr	r1, [r7, #24]
 8006f34:	69fa      	ldr	r2, [r7, #28]
 8006f36:	e841 2300 	strex	r3, r2, [r1]
 8006f3a:	617b      	str	r3, [r7, #20]
   return(result);
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1e5      	bne.n	8006f0e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2220      	movs	r2, #32
 8006f46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f52:	2303      	movs	r3, #3
 8006f54:	e012      	b.n	8006f7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2220      	movs	r2, #32
 8006f5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2220      	movs	r2, #32
 8006f62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3758      	adds	r7, #88	@ 0x58
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	603b      	str	r3, [r7, #0]
 8006f90:	4613      	mov	r3, r2
 8006f92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f94:	e049      	b.n	800702a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f9c:	d045      	beq.n	800702a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f9e:	f7fa f835 	bl	800100c <HAL_GetTick>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	69ba      	ldr	r2, [r7, #24]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d302      	bcc.n	8006fb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d101      	bne.n	8006fb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006fb4:	2303      	movs	r3, #3
 8006fb6:	e048      	b.n	800704a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 0304 	and.w	r3, r3, #4
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d031      	beq.n	800702a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	69db      	ldr	r3, [r3, #28]
 8006fcc:	f003 0308 	and.w	r3, r3, #8
 8006fd0:	2b08      	cmp	r3, #8
 8006fd2:	d110      	bne.n	8006ff6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2208      	movs	r2, #8
 8006fda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f000 f838 	bl	8007052 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2208      	movs	r2, #8
 8006fe6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e029      	b.n	800704a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	69db      	ldr	r3, [r3, #28]
 8006ffc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007000:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007004:	d111      	bne.n	800702a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800700e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f000 f81e 	bl	8007052 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2220      	movs	r2, #32
 800701a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e00f      	b.n	800704a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	69da      	ldr	r2, [r3, #28]
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	4013      	ands	r3, r2
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	429a      	cmp	r2, r3
 8007038:	bf0c      	ite	eq
 800703a:	2301      	moveq	r3, #1
 800703c:	2300      	movne	r3, #0
 800703e:	b2db      	uxtb	r3, r3
 8007040:	461a      	mov	r2, r3
 8007042:	79fb      	ldrb	r3, [r7, #7]
 8007044:	429a      	cmp	r2, r3
 8007046:	d0a6      	beq.n	8006f96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007052:	b480      	push	{r7}
 8007054:	b095      	sub	sp, #84	@ 0x54
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007062:	e853 3f00 	ldrex	r3, [r3]
 8007066:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800706a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800706e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	461a      	mov	r2, r3
 8007076:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007078:	643b      	str	r3, [r7, #64]	@ 0x40
 800707a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800707e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007080:	e841 2300 	strex	r3, r2, [r1]
 8007084:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007088:	2b00      	cmp	r3, #0
 800708a:	d1e6      	bne.n	800705a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	3308      	adds	r3, #8
 8007092:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007094:	6a3b      	ldr	r3, [r7, #32]
 8007096:	e853 3f00 	ldrex	r3, [r3]
 800709a:	61fb      	str	r3, [r7, #28]
   return(result);
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070a2:	f023 0301 	bic.w	r3, r3, #1
 80070a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	3308      	adds	r3, #8
 80070ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070b8:	e841 2300 	strex	r3, r2, [r1]
 80070bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80070be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d1e3      	bne.n	800708c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d118      	bne.n	80070fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	e853 3f00 	ldrex	r3, [r3]
 80070d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	f023 0310 	bic.w	r3, r3, #16
 80070e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	461a      	mov	r2, r3
 80070e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070ea:	61bb      	str	r3, [r7, #24]
 80070ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ee:	6979      	ldr	r1, [r7, #20]
 80070f0:	69ba      	ldr	r2, [r7, #24]
 80070f2:	e841 2300 	strex	r3, r2, [r1]
 80070f6:	613b      	str	r3, [r7, #16]
   return(result);
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1e6      	bne.n	80070cc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2220      	movs	r2, #32
 8007102:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007112:	bf00      	nop
 8007114:	3754      	adds	r7, #84	@ 0x54
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr

0800711e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800711e:	b480      	push	{r7}
 8007120:	b085      	sub	sp, #20
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800712c:	2b01      	cmp	r3, #1
 800712e:	d101      	bne.n	8007134 <HAL_UARTEx_DisableFifoMode+0x16>
 8007130:	2302      	movs	r3, #2
 8007132:	e027      	b.n	8007184 <HAL_UARTEx_DisableFifoMode+0x66>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2224      	movs	r2, #36	@ 0x24
 8007140:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f022 0201 	bic.w	r2, r2, #1
 800715a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007162:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2220      	movs	r2, #32
 8007176:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3714      	adds	r7, #20
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d101      	bne.n	80071a8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80071a4:	2302      	movs	r3, #2
 80071a6:	e02d      	b.n	8007204 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2224      	movs	r2, #36	@ 0x24
 80071b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f022 0201 	bic.w	r2, r2, #1
 80071ce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	683a      	ldr	r2, [r7, #0]
 80071e0:	430a      	orrs	r2, r1
 80071e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 f84f 	bl	8007288 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2220      	movs	r2, #32
 80071f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800721c:	2b01      	cmp	r3, #1
 800721e:	d101      	bne.n	8007224 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007220:	2302      	movs	r3, #2
 8007222:	e02d      	b.n	8007280 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2224      	movs	r2, #36	@ 0x24
 8007230:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f022 0201 	bic.w	r2, r2, #1
 800724a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	683a      	ldr	r2, [r7, #0]
 800725c:	430a      	orrs	r2, r1
 800725e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 f811 	bl	8007288 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2220      	movs	r2, #32
 8007272:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3710      	adds	r7, #16
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007294:	2b00      	cmp	r3, #0
 8007296:	d108      	bne.n	80072aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80072a8:	e031      	b.n	800730e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80072aa:	2308      	movs	r3, #8
 80072ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80072ae:	2308      	movs	r3, #8
 80072b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	0e5b      	lsrs	r3, r3, #25
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	f003 0307 	and.w	r3, r3, #7
 80072c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	0f5b      	lsrs	r3, r3, #29
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	f003 0307 	and.w	r3, r3, #7
 80072d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072d2:	7bbb      	ldrb	r3, [r7, #14]
 80072d4:	7b3a      	ldrb	r2, [r7, #12]
 80072d6:	4911      	ldr	r1, [pc, #68]	@ (800731c <UARTEx_SetNbDataToProcess+0x94>)
 80072d8:	5c8a      	ldrb	r2, [r1, r2]
 80072da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80072de:	7b3a      	ldrb	r2, [r7, #12]
 80072e0:	490f      	ldr	r1, [pc, #60]	@ (8007320 <UARTEx_SetNbDataToProcess+0x98>)
 80072e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072f0:	7bfb      	ldrb	r3, [r7, #15]
 80072f2:	7b7a      	ldrb	r2, [r7, #13]
 80072f4:	4909      	ldr	r1, [pc, #36]	@ (800731c <UARTEx_SetNbDataToProcess+0x94>)
 80072f6:	5c8a      	ldrb	r2, [r1, r2]
 80072f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80072fc:	7b7a      	ldrb	r2, [r7, #13]
 80072fe:	4908      	ldr	r1, [pc, #32]	@ (8007320 <UARTEx_SetNbDataToProcess+0x98>)
 8007300:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007302:	fb93 f3f2 	sdiv	r3, r3, r2
 8007306:	b29a      	uxth	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800730e:	bf00      	nop
 8007310:	3714      	adds	r7, #20
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	08007488 	.word	0x08007488
 8007320:	08007490 	.word	0x08007490

08007324 <memset>:
 8007324:	4402      	add	r2, r0
 8007326:	4603      	mov	r3, r0
 8007328:	4293      	cmp	r3, r2
 800732a:	d100      	bne.n	800732e <memset+0xa>
 800732c:	4770      	bx	lr
 800732e:	f803 1b01 	strb.w	r1, [r3], #1
 8007332:	e7f9      	b.n	8007328 <memset+0x4>

08007334 <__libc_init_array>:
 8007334:	b570      	push	{r4, r5, r6, lr}
 8007336:	4d0d      	ldr	r5, [pc, #52]	@ (800736c <__libc_init_array+0x38>)
 8007338:	2600      	movs	r6, #0
 800733a:	4c0d      	ldr	r4, [pc, #52]	@ (8007370 <__libc_init_array+0x3c>)
 800733c:	1b64      	subs	r4, r4, r5
 800733e:	10a4      	asrs	r4, r4, #2
 8007340:	42a6      	cmp	r6, r4
 8007342:	d109      	bne.n	8007358 <__libc_init_array+0x24>
 8007344:	4d0b      	ldr	r5, [pc, #44]	@ (8007374 <__libc_init_array+0x40>)
 8007346:	2600      	movs	r6, #0
 8007348:	4c0b      	ldr	r4, [pc, #44]	@ (8007378 <__libc_init_array+0x44>)
 800734a:	f000 f817 	bl	800737c <_init>
 800734e:	1b64      	subs	r4, r4, r5
 8007350:	10a4      	asrs	r4, r4, #2
 8007352:	42a6      	cmp	r6, r4
 8007354:	d105      	bne.n	8007362 <__libc_init_array+0x2e>
 8007356:	bd70      	pop	{r4, r5, r6, pc}
 8007358:	f855 3b04 	ldr.w	r3, [r5], #4
 800735c:	3601      	adds	r6, #1
 800735e:	4798      	blx	r3
 8007360:	e7ee      	b.n	8007340 <__libc_init_array+0xc>
 8007362:	f855 3b04 	ldr.w	r3, [r5], #4
 8007366:	3601      	adds	r6, #1
 8007368:	4798      	blx	r3
 800736a:	e7f2      	b.n	8007352 <__libc_init_array+0x1e>
 800736c:	080074a0 	.word	0x080074a0
 8007370:	080074a0 	.word	0x080074a0
 8007374:	080074a0 	.word	0x080074a0
 8007378:	080074a4 	.word	0x080074a4

0800737c <_init>:
 800737c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800737e:	bf00      	nop
 8007380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007382:	bc08      	pop	{r3}
 8007384:	469e      	mov	lr, r3
 8007386:	4770      	bx	lr

08007388 <_fini>:
 8007388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800738a:	bf00      	nop
 800738c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800738e:	bc08      	pop	{r3}
 8007390:	469e      	mov	lr, r3
 8007392:	4770      	bx	lr
