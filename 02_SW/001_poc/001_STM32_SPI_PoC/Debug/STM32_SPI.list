
STM32_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007188  08000250  08000250  00001250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  080073d8  080073d8  000083d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080074dc  080074dc  000084dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080074e4  080074e4  000084e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080074e8  080074e8  000084e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000009  20000000  080074ec  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000144  2000000c  080074f5  0000900c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000150  080074f5  00009150  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00009009  2**0
                  CONTENTS, READONLY
 10 .debug_info   000134f7  00000000  00000000  0000903f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000292d  00000000  00000000  0001c536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ee8  00000000  00000000  0001ee68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b5b  00000000  00000000  0001fd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037402  00000000  00000000  000208ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015350  00000000  00000000  00057cad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00151d8e  00000000  00000000  0006cffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001bed8b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003c74  00000000  00000000  001bedd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000083  00000000  00000000  001c2a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	2000000c 	.word	0x2000000c
 800026c:	00000000 	.word	0x00000000
 8000270:	080073c0 	.word	0x080073c0

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000010 	.word	0x20000010
 800028c:	080073c0 	.word	0x080073c0

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b97e 	b.w	80005a4 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14d      	bne.n	8000368 <__udivmoddi4+0xa8>
 80002cc:	428a      	cmp	r2, r1
 80002ce:	460f      	mov	r7, r1
 80002d0:	4684      	mov	ip, r0
 80002d2:	4696      	mov	lr, r2
 80002d4:	fab2 f382 	clz	r3, r2
 80002d8:	d960      	bls.n	800039c <__udivmoddi4+0xdc>
 80002da:	b14b      	cbz	r3, 80002f0 <__udivmoddi4+0x30>
 80002dc:	fa02 fe03 	lsl.w	lr, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80002ea:	fa20 f202 	lsr.w	r2, r0, r2
 80002ee:	4317      	orrs	r7, r2
 80002f0:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002f4:	fa1f f48e 	uxth.w	r4, lr
 80002f8:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002fc:	fbb7 f1f6 	udiv	r1, r7, r6
 8000300:	fb06 7711 	mls	r7, r6, r1, r7
 8000304:	fb01 f004 	mul.w	r0, r1, r4
 8000308:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800030c:	4290      	cmp	r0, r2
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0x62>
 8000310:	eb1e 0202 	adds.w	r2, lr, r2
 8000314:	f101 37ff 	add.w	r7, r1, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x60>
 800031a:	4290      	cmp	r0, r2
 800031c:	f200 812d 	bhi.w	800057a <__udivmoddi4+0x2ba>
 8000320:	4639      	mov	r1, r7
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	fa1f fc8c 	uxth.w	ip, ip
 8000328:	fbb2 f0f6 	udiv	r0, r2, r6
 800032c:	fb06 2210 	mls	r2, r6, r0, r2
 8000330:	fb00 f404 	mul.w	r4, r0, r4
 8000334:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000338:	4564      	cmp	r4, ip
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x8e>
 800033c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x8c>
 8000346:	4564      	cmp	r4, ip
 8000348:	f200 811a 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 800034c:	4610      	mov	r0, r2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	ebac 0c04 	sub.w	ip, ip, r4
 8000356:	2100      	movs	r1, #0
 8000358:	b125      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035a:	fa2c f303 	lsr.w	r3, ip, r3
 800035e:	2200      	movs	r2, #0
 8000360:	e9c5 3200 	strd	r3, r2, [r5]
 8000364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000368:	428b      	cmp	r3, r1
 800036a:	d905      	bls.n	8000378 <__udivmoddi4+0xb8>
 800036c:	b10d      	cbz	r5, 8000372 <__udivmoddi4+0xb2>
 800036e:	e9c5 0100 	strd	r0, r1, [r5]
 8000372:	2100      	movs	r1, #0
 8000374:	4608      	mov	r0, r1
 8000376:	e7f5      	b.n	8000364 <__udivmoddi4+0xa4>
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	d14d      	bne.n	800041c <__udivmoddi4+0x15c>
 8000380:	42a3      	cmp	r3, r4
 8000382:	f0c0 80f2 	bcc.w	800056a <__udivmoddi4+0x2aa>
 8000386:	4290      	cmp	r0, r2
 8000388:	f080 80ef 	bcs.w	800056a <__udivmoddi4+0x2aa>
 800038c:	4606      	mov	r6, r0
 800038e:	4623      	mov	r3, r4
 8000390:	4608      	mov	r0, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e6      	beq.n	8000364 <__udivmoddi4+0xa4>
 8000396:	e9c5 6300 	strd	r6, r3, [r5]
 800039a:	e7e3      	b.n	8000364 <__udivmoddi4+0xa4>
 800039c:	2b00      	cmp	r3, #0
 800039e:	f040 80a2 	bne.w	80004e6 <__udivmoddi4+0x226>
 80003a2:	1a8a      	subs	r2, r1, r2
 80003a4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a8:	fa1f f68e 	uxth.w	r6, lr
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb2 f4f7 	udiv	r4, r2, r7
 80003b2:	fb07 2014 	mls	r0, r7, r4, r2
 80003b6:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003ba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003be:	fb06 f004 	mul.w	r0, r6, r4
 80003c2:	4290      	cmp	r0, r2
 80003c4:	d90f      	bls.n	80003e6 <__udivmoddi4+0x126>
 80003c6:	eb1e 0202 	adds.w	r2, lr, r2
 80003ca:	f104 38ff 	add.w	r8, r4, #4294967295
 80003ce:	bf2c      	ite	cs
 80003d0:	f04f 0901 	movcs.w	r9, #1
 80003d4:	f04f 0900 	movcc.w	r9, #0
 80003d8:	4290      	cmp	r0, r2
 80003da:	d903      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003dc:	f1b9 0f00 	cmp.w	r9, #0
 80003e0:	f000 80c8 	beq.w	8000574 <__udivmoddi4+0x2b4>
 80003e4:	4644      	mov	r4, r8
 80003e6:	1a12      	subs	r2, r2, r0
 80003e8:	fa1f fc8c 	uxth.w	ip, ip
 80003ec:	fbb2 f0f7 	udiv	r0, r2, r7
 80003f0:	fb07 2210 	mls	r2, r7, r0, r2
 80003f4:	fb00 f606 	mul.w	r6, r0, r6
 80003f8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003fc:	4566      	cmp	r6, ip
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x152>
 8000400:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000404:	f100 32ff 	add.w	r2, r0, #4294967295
 8000408:	d202      	bcs.n	8000410 <__udivmoddi4+0x150>
 800040a:	4566      	cmp	r6, ip
 800040c:	f200 80bb 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000410:	4610      	mov	r0, r2
 8000412:	ebac 0c06 	sub.w	ip, ip, r6
 8000416:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800041a:	e79d      	b.n	8000358 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa04 fe01 	lsl.w	lr, r4, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	fa20 fc06 	lsr.w	ip, r0, r6
 800042e:	40f4      	lsrs	r4, r6
 8000430:	408a      	lsls	r2, r1
 8000432:	431f      	orrs	r7, r3
 8000434:	ea4e 030c 	orr.w	r3, lr, ip
 8000438:	fa00 fe01 	lsl.w	lr, r0, r1
 800043c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	fbb4 f0f8 	udiv	r0, r4, r8
 800044c:	fb08 4410 	mls	r4, r8, r0, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb00 f90c 	mul.w	r9, r0, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	d90e      	bls.n	800047a <__udivmoddi4+0x1ba>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	bf2c      	ite	cs
 8000464:	f04f 0b01 	movcs.w	fp, #1
 8000468:	f04f 0b00 	movcc.w	fp, #0
 800046c:	45a1      	cmp	r9, r4
 800046e:	d903      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000470:	f1bb 0f00 	cmp.w	fp, #0
 8000474:	f000 8093 	beq.w	800059e <__udivmoddi4+0x2de>
 8000478:	4650      	mov	r0, sl
 800047a:	eba4 0409 	sub.w	r4, r4, r9
 800047e:	fa1f f983 	uxth.w	r9, r3
 8000482:	fbb4 f3f8 	udiv	r3, r4, r8
 8000486:	fb08 4413 	mls	r4, r8, r3, r4
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000492:	45a4      	cmp	ip, r4
 8000494:	d906      	bls.n	80004a4 <__udivmoddi4+0x1e4>
 8000496:	193c      	adds	r4, r7, r4
 8000498:	f103 38ff 	add.w	r8, r3, #4294967295
 800049c:	d201      	bcs.n	80004a2 <__udivmoddi4+0x1e2>
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d87a      	bhi.n	8000598 <__udivmoddi4+0x2d8>
 80004a2:	4643      	mov	r3, r8
 80004a4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a8:	eba4 040c 	sub.w	r4, r4, ip
 80004ac:	fba0 9802 	umull	r9, r8, r0, r2
 80004b0:	4544      	cmp	r4, r8
 80004b2:	46cc      	mov	ip, r9
 80004b4:	4643      	mov	r3, r8
 80004b6:	d302      	bcc.n	80004be <__udivmoddi4+0x1fe>
 80004b8:	d106      	bne.n	80004c8 <__udivmoddi4+0x208>
 80004ba:	45ce      	cmp	lr, r9
 80004bc:	d204      	bcs.n	80004c8 <__udivmoddi4+0x208>
 80004be:	3801      	subs	r0, #1
 80004c0:	ebb9 0c02 	subs.w	ip, r9, r2
 80004c4:	eb68 0307 	sbc.w	r3, r8, r7
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x222>
 80004ca:	ebbe 020c 	subs.w	r2, lr, ip
 80004ce:	eb64 0403 	sbc.w	r4, r4, r3
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	fa22 f301 	lsr.w	r3, r2, r1
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	431e      	orrs	r6, r3
 80004de:	e9c5 6400 	strd	r6, r4, [r5]
 80004e2:	2100      	movs	r1, #0
 80004e4:	e73e      	b.n	8000364 <__udivmoddi4+0xa4>
 80004e6:	fa02 fe03 	lsl.w	lr, r2, r3
 80004ea:	f1c3 0120 	rsb	r1, r3, #32
 80004ee:	fa04 f203 	lsl.w	r2, r4, r3
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	40cc      	lsrs	r4, r1
 80004f8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004fc:	fa20 f101 	lsr.w	r1, r0, r1
 8000500:	fa1f f68e 	uxth.w	r6, lr
 8000504:	fbb4 f0f7 	udiv	r0, r4, r7
 8000508:	430a      	orrs	r2, r1
 800050a:	fb07 4410 	mls	r4, r7, r0, r4
 800050e:	0c11      	lsrs	r1, r2, #16
 8000510:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000514:	fb00 f406 	mul.w	r4, r0, r6
 8000518:	428c      	cmp	r4, r1
 800051a:	d90e      	bls.n	800053a <__udivmoddi4+0x27a>
 800051c:	eb1e 0101 	adds.w	r1, lr, r1
 8000520:	f100 38ff 	add.w	r8, r0, #4294967295
 8000524:	bf2c      	ite	cs
 8000526:	f04f 0901 	movcs.w	r9, #1
 800052a:	f04f 0900 	movcc.w	r9, #0
 800052e:	428c      	cmp	r4, r1
 8000530:	d902      	bls.n	8000538 <__udivmoddi4+0x278>
 8000532:	f1b9 0f00 	cmp.w	r9, #0
 8000536:	d02c      	beq.n	8000592 <__udivmoddi4+0x2d2>
 8000538:	4640      	mov	r0, r8
 800053a:	1b09      	subs	r1, r1, r4
 800053c:	b292      	uxth	r2, r2
 800053e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000542:	fb07 1114 	mls	r1, r7, r4, r1
 8000546:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054a:	fb04 f106 	mul.w	r1, r4, r6
 800054e:	4291      	cmp	r1, r2
 8000550:	d907      	bls.n	8000562 <__udivmoddi4+0x2a2>
 8000552:	eb1e 0202 	adds.w	r2, lr, r2
 8000556:	f104 38ff 	add.w	r8, r4, #4294967295
 800055a:	d201      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 800055c:	4291      	cmp	r1, r2
 800055e:	d815      	bhi.n	800058c <__udivmoddi4+0x2cc>
 8000560:	4644      	mov	r4, r8
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000568:	e721      	b.n	80003ae <__udivmoddi4+0xee>
 800056a:	1a86      	subs	r6, r0, r2
 800056c:	eb64 0303 	sbc.w	r3, r4, r3
 8000570:	2001      	movs	r0, #1
 8000572:	e70e      	b.n	8000392 <__udivmoddi4+0xd2>
 8000574:	3c02      	subs	r4, #2
 8000576:	4472      	add	r2, lr
 8000578:	e735      	b.n	80003e6 <__udivmoddi4+0x126>
 800057a:	3902      	subs	r1, #2
 800057c:	4472      	add	r2, lr
 800057e:	e6d0      	b.n	8000322 <__udivmoddi4+0x62>
 8000580:	44f4      	add	ip, lr
 8000582:	3802      	subs	r0, #2
 8000584:	e6e3      	b.n	800034e <__udivmoddi4+0x8e>
 8000586:	44f4      	add	ip, lr
 8000588:	3802      	subs	r0, #2
 800058a:	e742      	b.n	8000412 <__udivmoddi4+0x152>
 800058c:	3c02      	subs	r4, #2
 800058e:	4472      	add	r2, lr
 8000590:	e7e7      	b.n	8000562 <__udivmoddi4+0x2a2>
 8000592:	3802      	subs	r0, #2
 8000594:	4471      	add	r1, lr
 8000596:	e7d0      	b.n	800053a <__udivmoddi4+0x27a>
 8000598:	3b02      	subs	r3, #2
 800059a:	443c      	add	r4, r7
 800059c:	e782      	b.n	80004a4 <__udivmoddi4+0x1e4>
 800059e:	3802      	subs	r0, #2
 80005a0:	443c      	add	r4, r7
 80005a2:	e76a      	b.n	800047a <__udivmoddi4+0x1ba>

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08c      	sub	sp, #48	@ 0x30
 80005ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ae:	f107 031c 	add.w	r3, r7, #28
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	60da      	str	r2, [r3, #12]
 80005bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005be:	4b60      	ldr	r3, [pc, #384]	@ (8000740 <MX_GPIO_Init+0x198>)
 80005c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005c4:	4a5e      	ldr	r2, [pc, #376]	@ (8000740 <MX_GPIO_Init+0x198>)
 80005c6:	f043 0301 	orr.w	r3, r3, #1
 80005ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80005ce:	4b5c      	ldr	r3, [pc, #368]	@ (8000740 <MX_GPIO_Init+0x198>)
 80005d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005d4:	f003 0301 	and.w	r3, r3, #1
 80005d8:	61bb      	str	r3, [r7, #24]
 80005da:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005dc:	4b58      	ldr	r3, [pc, #352]	@ (8000740 <MX_GPIO_Init+0x198>)
 80005de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005e2:	4a57      	ldr	r2, [pc, #348]	@ (8000740 <MX_GPIO_Init+0x198>)
 80005e4:	f043 0320 	orr.w	r3, r3, #32
 80005e8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80005ec:	4b54      	ldr	r3, [pc, #336]	@ (8000740 <MX_GPIO_Init+0x198>)
 80005ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005f2:	f003 0320 	and.w	r3, r3, #32
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005fa:	4b51      	ldr	r3, [pc, #324]	@ (8000740 <MX_GPIO_Init+0x198>)
 80005fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000600:	4a4f      	ldr	r2, [pc, #316]	@ (8000740 <MX_GPIO_Init+0x198>)
 8000602:	f043 0308 	orr.w	r3, r3, #8
 8000606:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800060a:	4b4d      	ldr	r3, [pc, #308]	@ (8000740 <MX_GPIO_Init+0x198>)
 800060c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000610:	f003 0308 	and.w	r3, r3, #8
 8000614:	613b      	str	r3, [r7, #16]
 8000616:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000618:	4b49      	ldr	r3, [pc, #292]	@ (8000740 <MX_GPIO_Init+0x198>)
 800061a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800061e:	4a48      	ldr	r2, [pc, #288]	@ (8000740 <MX_GPIO_Init+0x198>)
 8000620:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000624:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000628:	4b45      	ldr	r3, [pc, #276]	@ (8000740 <MX_GPIO_Init+0x198>)
 800062a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800062e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000636:	4b42      	ldr	r3, [pc, #264]	@ (8000740 <MX_GPIO_Init+0x198>)
 8000638:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800063c:	4a40      	ldr	r2, [pc, #256]	@ (8000740 <MX_GPIO_Init+0x198>)
 800063e:	f043 0304 	orr.w	r3, r3, #4
 8000642:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000646:	4b3e      	ldr	r3, [pc, #248]	@ (8000740 <MX_GPIO_Init+0x198>)
 8000648:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800064c:	f003 0304 	and.w	r3, r3, #4
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000654:	4b3a      	ldr	r3, [pc, #232]	@ (8000740 <MX_GPIO_Init+0x198>)
 8000656:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800065a:	4a39      	ldr	r2, [pc, #228]	@ (8000740 <MX_GPIO_Init+0x198>)
 800065c:	f043 0302 	orr.w	r3, r3, #2
 8000660:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000664:	4b36      	ldr	r3, [pc, #216]	@ (8000740 <MX_GPIO_Init+0x198>)
 8000666:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800066a:	f003 0302 	and.w	r3, r3, #2
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000678:	4832      	ldr	r0, [pc, #200]	@ (8000744 <MX_GPIO_Init+0x19c>)
 800067a:	f000 ffd5 	bl	8001628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000684:	4830      	ldr	r0, [pc, #192]	@ (8000748 <MX_GPIO_Init+0x1a0>)
 8000686:	f000 ffcf 	bl	8001628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2104      	movs	r1, #4
 800068e:	482f      	ldr	r0, [pc, #188]	@ (800074c <MX_GPIO_Init+0x1a4>)
 8000690:	f000 ffca 	bl	8001628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	2180      	movs	r1, #128	@ 0x80
 8000698:	482d      	ldr	r0, [pc, #180]	@ (8000750 <MX_GPIO_Init+0x1a8>)
 800069a:	f000 ffc5 	bl	8001628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	2180      	movs	r1, #128	@ 0x80
 80006a2:	482c      	ldr	r0, [pc, #176]	@ (8000754 <MX_GPIO_Init+0x1ac>)
 80006a4:	f000 ffc0 	bl	8001628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 80006a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ae:	2301      	movs	r3, #1
 80006b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b6:	2300      	movs	r3, #0
 80006b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	4619      	mov	r1, r3
 80006c0:	4820      	ldr	r0, [pc, #128]	@ (8000744 <MX_GPIO_Init+0x19c>)
 80006c2:	f000 fdd9 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 80006c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	2300      	movs	r3, #0
 80006d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	4619      	mov	r1, r3
 80006de:	481a      	ldr	r0, [pc, #104]	@ (8000748 <MX_GPIO_Init+0x1a0>)
 80006e0:	f000 fdca 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80006e4:	2304      	movs	r3, #4
 80006e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e8:	2301      	movs	r3, #1
 80006ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	2300      	movs	r3, #0
 80006f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80006f4:	f107 031c 	add.w	r3, r7, #28
 80006f8:	4619      	mov	r1, r3
 80006fa:	4814      	ldr	r0, [pc, #80]	@ (800074c <MX_GPIO_Init+0x1a4>)
 80006fc:	f000 fdbc 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000700:	2380      	movs	r3, #128	@ 0x80
 8000702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000704:	2301      	movs	r3, #1
 8000706:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070c:	2300      	movs	r3, #0
 800070e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000710:	f107 031c 	add.w	r3, r7, #28
 8000714:	4619      	mov	r1, r3
 8000716:	480e      	ldr	r0, [pc, #56]	@ (8000750 <MX_GPIO_Init+0x1a8>)
 8000718:	f000 fdae 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 800071c:	2380      	movs	r3, #128	@ 0x80
 800071e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000720:	2301      	movs	r3, #1
 8000722:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000728:	2300      	movs	r3, #0
 800072a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4619      	mov	r1, r3
 8000732:	4808      	ldr	r0, [pc, #32]	@ (8000754 <MX_GPIO_Init+0x1ac>)
 8000734:	f000 fda0 	bl	8001278 <HAL_GPIO_Init>

}
 8000738:	bf00      	nop
 800073a:	3730      	adds	r7, #48	@ 0x30
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	46020c00 	.word	0x46020c00
 8000744:	42021400 	.word	0x42021400
 8000748:	42020c00 	.word	0x42020c00
 800074c:	42021800 	.word	0x42021800
 8000750:	42020800 	.word	0x42020800
 8000754:	42020400 	.word	0x42020400

08000758 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800075c:	2000      	movs	r0, #0
 800075e:	f000 ff7b 	bl	8001658 <HAL_ICACHE_ConfigAssociativityMode>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000768:	f000 f89b 	bl	80008a2 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800076c:	f000 ff94 	bl	8001698 <HAL_ICACHE_Enable>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000776:	f000 f894 	bl	80008a2 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  uint8_t RX_Data[5] = {0};
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	2300      	movs	r3, #0
 800078c:	733b      	strb	r3, [r7, #12]
  uint8_t RX_Data_BREAK[] = "\r\n";
 800078e:	4a16      	ldr	r2, [pc, #88]	@ (80007e8 <main+0x68>)
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	6812      	ldr	r2, [r2, #0]
 8000794:	4611      	mov	r1, r2
 8000796:	8019      	strh	r1, [r3, #0]
 8000798:	3302      	adds	r3, #2
 800079a:	0c12      	lsrs	r2, r2, #16
 800079c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800079e:	f000 fbdf 	bl	8000f60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a2:	f000 f825 	bl	80007f0 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80007a6:	f000 f86c 	bl	8000882 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007aa:	f7ff fefd 	bl	80005a8 <MX_GPIO_Init>
  MX_ICACHE_Init();
 80007ae:	f7ff ffd3 	bl	8000758 <MX_ICACHE_Init>
  MX_SPI1_Init();
 80007b2:	f000 f99b 	bl	8000aec <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80007b6:	f000 faf3 	bl	8000da0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //LCD_Init(&hspi1);
  RFM69_Init(0xAA, 0xAA);
 80007ba:	21aa      	movs	r1, #170	@ 0xaa
 80007bc:	20aa      	movs	r0, #170	@ 0xaa
 80007be:	f000 f88d 	bl	80008dc <RFM69_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 80007c2:	2201      	movs	r2, #1
 80007c4:	2180      	movs	r1, #128	@ 0x80
 80007c6:	4809      	ldr	r0, [pc, #36]	@ (80007ec <main+0x6c>)
 80007c8:	f000 ff2e 	bl	8001628 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 80007cc:	20c8      	movs	r0, #200	@ 0xc8
 80007ce:	f000 fc4b 	bl	8001068 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2180      	movs	r1, #128	@ 0x80
 80007d6:	4805      	ldr	r0, [pc, #20]	@ (80007ec <main+0x6c>)
 80007d8:	f000 ff26 	bl	8001628 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 80007dc:	20c8      	movs	r0, #200	@ 0xc8
 80007de:	f000 fc43 	bl	8001068 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 80007e2:	bf00      	nop
 80007e4:	e7ed      	b.n	80007c2 <main+0x42>
 80007e6:	bf00      	nop
 80007e8:	080073d8 	.word	0x080073d8
 80007ec:	42020400 	.word	0x42020400

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b09e      	sub	sp, #120	@ 0x78
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 0318 	add.w	r3, r7, #24
 80007fa:	2260      	movs	r2, #96	@ 0x60
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f006 fdb2 	bl	8007368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	463b      	mov	r3, r7
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]
 8000812:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE3) != HAL_OK)
 8000814:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8000818:	f000 ff4e 	bl	80016b8 <HAL_PWREx_ControlVoltageScaling>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000822:	f000 f83e 	bl	80008a2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000826:	2310      	movs	r3, #16
 8000828:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800082a:	2301      	movs	r3, #1
 800082c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800082e:	2310      	movs	r3, #16
 8000830:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8000832:	2300      	movs	r3, #0
 8000834:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000836:	2300      	movs	r3, #0
 8000838:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083a:	f107 0318 	add.w	r3, r7, #24
 800083e:	4618      	mov	r0, r3
 8000840:	f001 f836 	bl	80018b0 <HAL_RCC_OscConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800084a:	f000 f82a 	bl	80008a2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084e:	231f      	movs	r3, #31
 8000850:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 800085e:	2360      	movs	r3, #96	@ 0x60
 8000860:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000866:	463b      	mov	r3, r7
 8000868:	2101      	movs	r1, #1
 800086a:	4618      	mov	r0, r3
 800086c:	f001 fefc 	bl	8002668 <HAL_RCC_ClockConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000876:	f000 f814 	bl	80008a2 <Error_Handler>
  }
}
 800087a:	bf00      	nop
 800087c:	3778      	adds	r7, #120	@ 0x78
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000886:	f000 fff3 	bl	8001870 <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 800088a:	f001 f801 	bl	8001890 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800088e:	2002      	movs	r0, #2
 8000890:	f000 ff9e 	bl	80017d0 <HAL_PWREx_ConfigSupply>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemPower_Config+0x1c>
  {
    Error_Handler();
 800089a:	f000 f802 	bl	80008a2 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a6:	b672      	cpsid	i
}
 80008a8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008aa:	bf00      	nop
 80008ac:	e7fd      	b.n	80008aa <Error_Handler+0x8>
	...

080008b0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008b4:	f3bf 8f4f 	dsb	sy
}
 80008b8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80008ba:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <__NVIC_SystemReset+0x24>)
 80008bc:	68db      	ldr	r3, [r3, #12]
 80008be:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80008c2:	4904      	ldr	r1, [pc, #16]	@ (80008d4 <__NVIC_SystemReset+0x24>)
 80008c4:	4b04      	ldr	r3, [pc, #16]	@ (80008d8 <__NVIC_SystemReset+0x28>)
 80008c6:	4313      	orrs	r3, r2
 80008c8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80008ca:	f3bf 8f4f 	dsb	sy
}
 80008ce:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <__NVIC_SystemReset+0x20>
 80008d4:	e000ed00 	.word	0xe000ed00
 80008d8:	05fa0004 	.word	0x05fa0004

080008dc <RFM69_Init>:
 *  nodeID: Sets the nodeID
 *
 *  networkID: Sets the networkID
 *
 */
void RFM69_Init(uint8_t nodeID, uint8_t networkID){
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08e      	sub	sp, #56	@ 0x38
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	460a      	mov	r2, r1
 80008e6:	71fb      	strb	r3, [r7, #7]
 80008e8:	4613      	mov	r3, r2
 80008ea:	71bb      	strb	r3, [r7, #6]
	const uint8_t CONFIG[][2] = {
 80008ec:	f240 4301 	movw	r3, #1025	@ 0x401
 80008f0:	813b      	strh	r3, [r7, #8]
 80008f2:	2302      	movs	r3, #2
 80008f4:	817b      	strh	r3, [r7, #10]
 80008f6:	f641 2303 	movw	r3, #6659	@ 0x1a03
 80008fa:	81bb      	strh	r3, [r7, #12]
 80008fc:	f640 3304 	movw	r3, #2820	@ 0xb04
 8000900:	81fb      	strh	r3, [r7, #14]
 8000902:	f240 3305 	movw	r3, #773	@ 0x305
 8000906:	823b      	strh	r3, [r7, #16]
 8000908:	f243 3306 	movw	r3, #13062	@ 0x3306
 800090c:	827b      	strh	r3, [r7, #18]
 800090e:	f64d 1307 	movw	r3, #55559	@ 0xd907
 8000912:	82bb      	strh	r3, [r7, #20]
 8000914:	2308      	movs	r3, #8
 8000916:	82fb      	strh	r3, [r7, #22]
 8000918:	2309      	movs	r3, #9
 800091a:	833b      	strh	r3, [r7, #24]
 800091c:	f641 2313 	movw	r3, #6675	@ 0x1a13
 8000920:	837b      	strh	r3, [r7, #26]
 8000922:	f245 5319 	movw	r3, #21785	@ 0x5519
 8000926:	83bb      	strh	r3, [r7, #28]
 8000928:	f244 0325 	movw	r3, #16421	@ 0x4025
 800092c:	83fb      	strh	r3, [r7, #30]
 800092e:	f240 7326 	movw	r3, #1830	@ 0x726
 8000932:	843b      	strh	r3, [r7, #32]
 8000934:	f241 0328 	movw	r3, #4136	@ 0x1028
 8000938:	847b      	strh	r3, [r7, #34]	@ 0x22
 800093a:	f24e 4329 	movw	r3, #58409	@ 0xe429
 800093e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000940:	f648 032e 	movw	r3, #34862	@ 0x882e
 8000944:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000946:	f642 532f 	movw	r3, #11567	@ 0x2d2f
 800094a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800094c:	2330      	movs	r3, #48	@ 0x30
 800094e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8000952:	79bb      	ldrb	r3, [r7, #6]
 8000954:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8000958:	f248 0337 	movw	r3, #32823	@ 0x8037
 800095c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800095e:	f245 5338 	movw	r3, #21816	@ 0x5538
 8000962:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000964:	f648 733c 	movw	r3, #36668	@ 0x8f3c
 8000968:	863b      	strh	r3, [r7, #48]	@ 0x30
 800096a:	f241 033d 	movw	r3, #4157	@ 0x103d
 800096e:	867b      	strh	r3, [r7, #50]	@ 0x32
 8000970:	23ff      	movs	r3, #255	@ 0xff
 8000972:	86bb      	strh	r3, [r7, #52]	@ 0x34
			// Defines the delay between FIFO empty and start of new RSSI | No RX restart. -> RestartRX can be used | AES encryption turned off
			/* 0x3D */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_OFF | RF_PACKET2_AES_OFF },
			/* 0xFF */ { CONFIG_LAST_ELEMENT, 0 }
	};

	HAL_Delay(100);
 8000974:	2064      	movs	r0, #100	@ 0x64
 8000976:	f000 fb77 	bl	8001068 <HAL_Delay>
	uint8_t chip_select_status = chipPresent(&hspi1);
 800097a:	4811      	ldr	r0, [pc, #68]	@ (80009c0 <RFM69_Init+0xe4>)
 800097c:	f000 f826 	bl	80009cc <chipPresent>
 8000980:	4603      	mov	r3, r0
 8000982:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (chip_select_status == 0u) {
 8000986:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800098a:	2b00      	cmp	r3, #0
 800098c:	d10a      	bne.n	80009a4 <RFM69_Init+0xc8>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	2104      	movs	r1, #4
 8000992:	480c      	ldr	r0, [pc, #48]	@ (80009c4 <RFM69_Init+0xe8>)
 8000994:	f000 fe48 	bl	8001628 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000998:	2201      	movs	r2, #1
 800099a:	2180      	movs	r1, #128	@ 0x80
 800099c:	480a      	ldr	r0, [pc, #40]	@ (80009c8 <RFM69_Init+0xec>)
 800099e:	f000 fe43 	bl	8001628 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
		HAL_Delay(100);
		NVIC_SystemReset();
	}

}
 80009a2:	e009      	b.n	80009b8 <RFM69_Init+0xdc>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	2104      	movs	r1, #4
 80009a8:	4806      	ldr	r0, [pc, #24]	@ (80009c4 <RFM69_Init+0xe8>)
 80009aa:	f000 fe3d 	bl	8001628 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80009ae:	2064      	movs	r0, #100	@ 0x64
 80009b0:	f000 fb5a 	bl	8001068 <HAL_Delay>
		NVIC_SystemReset();
 80009b4:	f7ff ff7c 	bl	80008b0 <__NVIC_SystemReset>
}
 80009b8:	3738      	adds	r7, #56	@ 0x38
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000028 	.word	0x20000028
 80009c4:	42021800 	.word	0x42021800
 80009c8:	42020800 	.word	0x42020800

080009cc <chipPresent>:
 *  spi_handler: Pointer to the chosen SPI Interface
 *
 *  returns: 	1 if no Chip is found
 *  			0 if a RFM69 Chip is found
 */
uint8_t chipPresent(SPI_HandleTypeDef * spi_handler){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	uint8_t return_status = 1;
 80009d4:	2301      	movs	r3, #1
 80009d6:	73fb      	strb	r3, [r7, #15]

	writeREG(spi_handler, REG_SYNCVALUE1, 0xAA);
 80009d8:	22aa      	movs	r2, #170	@ 0xaa
 80009da:	212f      	movs	r1, #47	@ 0x2f
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f000 f825 	bl	8000a2c <writeREG>
	HAL_Delay(100);
 80009e2:	2064      	movs	r0, #100	@ 0x64
 80009e4:	f000 fb40 	bl	8001068 <HAL_Delay>

	if (readREG(spi_handler, REG_SYNCVALUE1) == 0xAA){
 80009e8:	212f      	movs	r1, #47	@ 0x2f
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f000 f84e 	bl	8000a8c <readREG>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2baa      	cmp	r3, #170	@ 0xaa
 80009f4:	d114      	bne.n	8000a20 <chipPresent+0x54>
		writeREG(spi_handler, REG_SYNCVALUE1, 0x55);
 80009f6:	2255      	movs	r2, #85	@ 0x55
 80009f8:	212f      	movs	r1, #47	@ 0x2f
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f000 f816 	bl	8000a2c <writeREG>
		HAL_Delay(100);
 8000a00:	2064      	movs	r0, #100	@ 0x64
 8000a02:	f000 fb31 	bl	8001068 <HAL_Delay>

		if (readREG(spi_handler, REG_SYNCVALUE1) == 0x55){
 8000a06:	212f      	movs	r1, #47	@ 0x2f
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f000 f83f 	bl	8000a8c <readREG>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b55      	cmp	r3, #85	@ 0x55
 8000a12:	d103      	bne.n	8000a1c <chipPresent+0x50>
			return_status = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	73fb      	strb	r3, [r7, #15]

			return return_status;
 8000a18:	7bfb      	ldrb	r3, [r7, #15]
 8000a1a:	e002      	b.n	8000a22 <chipPresent+0x56>
		}
		else{

			return return_status;
 8000a1c:	7bfb      	ldrb	r3, [r7, #15]
 8000a1e:	e000      	b.n	8000a22 <chipPresent+0x56>
		}
	}
	else{

		return return_status;
 8000a20:	7bfb      	ldrb	r3, [r7, #15]
	}
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
	...

08000a2c <writeREG>:
 *
 *  addr: [HEX] The Address to write to (See RFM69registers.h for predefined values)
 *
 *  value: [HEX] The Value
 */
void writeREG(SPI_HandleTypeDef * spi_handler, uint8_t addr, uint8_t value){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	460b      	mov	r3, r1
 8000a36:	70fb      	strb	r3, [r7, #3]
 8000a38:	4613      	mov	r3, r2
 8000a3a:	70bb      	strb	r3, [r7, #2]
	uint8_t write_addr = addr | 0x80;
 8000a3c:	78fb      	ldrb	r3, [r7, #3]
 8000a3e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	73fb      	strb	r3, [r7, #15]

	HAL_Delay(100);
 8000a46:	2064      	movs	r0, #100	@ 0x64
 8000a48:	f000 fb0e 	bl	8001068 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOF, LCD_CS_Pin, GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a52:	480d      	ldr	r0, [pc, #52]	@ (8000a88 <writeREG+0x5c>)
 8000a54:	f000 fde8 	bl	8001628 <HAL_GPIO_WritePin>

	// & 0x80 to set the 7th Bit to 1 (write)
	HAL_SPI_Transmit(spi_handler, &write_addr, 1, 100);
 8000a58:	f107 010f 	add.w	r1, r7, #15
 8000a5c:	2364      	movs	r3, #100	@ 0x64
 8000a5e:	2201      	movs	r2, #1
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f005 fa6f 	bl	8005f44 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(spi_handler, &value, 1, 100);
 8000a66:	1cb9      	adds	r1, r7, #2
 8000a68:	2364      	movs	r3, #100	@ 0x64
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f005 fa69 	bl	8005f44 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOF, LCD_CS_Pin, GPIO_PIN_SET);
 8000a72:	2201      	movs	r2, #1
 8000a74:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a78:	4803      	ldr	r0, [pc, #12]	@ (8000a88 <writeREG+0x5c>)
 8000a7a:	f000 fdd5 	bl	8001628 <HAL_GPIO_WritePin>
}
 8000a7e:	bf00      	nop
 8000a80:	3710      	adds	r7, #16
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	42021400 	.word	0x42021400

08000a8c <readREG>:
 *
 *  addr: [HEX] The Address to write to (See RFM69registers.h for predefined values)
 *
 *  returns: The value of the register addr.
 */
uint8_t readREG(SPI_HandleTypeDef * spi_handler, uint8_t addr){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	460b      	mov	r3, r1
 8000a96:	70fb      	strb	r3, [r7, #3]
	uint8_t read_addr = addr & 0x7F;
 8000a98:	78fb      	ldrb	r3, [r7, #3]
 8000a9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	73fb      	strb	r3, [r7, #15]
	uint8_t value;

	HAL_Delay(100);
 8000aa2:	2064      	movs	r0, #100	@ 0x64
 8000aa4:	f000 fae0 	bl	8001068 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOF, LCD_CS_Pin, GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000aae:	480e      	ldr	r0, [pc, #56]	@ (8000ae8 <readREG+0x5c>)
 8000ab0:	f000 fdba 	bl	8001628 <HAL_GPIO_WritePin>

	// & 0x7F to set the 7th Bit to 0 (read)
	HAL_SPI_Transmit(spi_handler, &read_addr, 1, 100);
 8000ab4:	f107 010f 	add.w	r1, r7, #15
 8000ab8:	2364      	movs	r3, #100	@ 0x64
 8000aba:	2201      	movs	r2, #1
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f005 fa41 	bl	8005f44 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi_handler, &value, 1, 100);
 8000ac2:	f107 010e 	add.w	r1, r7, #14
 8000ac6:	2364      	movs	r3, #100	@ 0x64
 8000ac8:	2201      	movs	r2, #1
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f005 fc58 	bl	8006380 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOF, LCD_CS_Pin, GPIO_PIN_SET);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ad6:	4804      	ldr	r0, [pc, #16]	@ (8000ae8 <readREG+0x5c>)
 8000ad8:	f000 fda6 	bl	8001628 <HAL_GPIO_WritePin>

	return value;
 8000adc:	7bbb      	ldrb	r3, [r7, #14]
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	42021400 	.word	0x42021400

08000aec <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000afc:	4b30      	ldr	r3, [pc, #192]	@ (8000bc0 <MX_SPI1_Init+0xd4>)
 8000afe:	4a31      	ldr	r2, [pc, #196]	@ (8000bc4 <MX_SPI1_Init+0xd8>)
 8000b00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b02:	4b2f      	ldr	r3, [pc, #188]	@ (8000bc0 <MX_SPI1_Init+0xd4>)
 8000b04:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000b08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b0a:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc0 <MX_SPI1_Init+0xd4>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b10:	4b2b      	ldr	r3, [pc, #172]	@ (8000bc0 <MX_SPI1_Init+0xd4>)
 8000b12:	2207      	movs	r2, #7
 8000b14:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b16:	4b2a      	ldr	r3, [pc, #168]	@ (8000bc0 <MX_SPI1_Init+0xd4>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b1c:	4b28      	ldr	r3, [pc, #160]	@ (8000bc0 <MX_SPI1_Init+0xd4>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b22:	4b27      	ldr	r3, [pc, #156]	@ (8000bc0 <MX_SPI1_Init+0xd4>)
 8000b24:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000b28:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b2a:	4b25      	ldr	r3, [pc, #148]	@ (8000bc0 <MX_SPI1_Init+0xd4>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b30:	4b23      	ldr	r3, [pc, #140]	@ (8000bc0 <MX_SPI1_Init+0xd4>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b36:	4b22      	ldr	r3, [pc, #136]	@ (8000bc0 <MX_SPI1_Init+0xd4>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b3c:	4b20      	ldr	r3, [pc, #128]	@ (8000bc0 <MX_SPI1_Init+0xd4>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000b42:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc0 <MX_SPI1_Init+0xd4>)
 8000b44:	2207      	movs	r2, #7
 8000b46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b48:	4b1d      	ldr	r3, [pc, #116]	@ (8000bc0 <MX_SPI1_Init+0xd4>)
 8000b4a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b4e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b50:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc0 <MX_SPI1_Init+0xd4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b56:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc0 <MX_SPI1_Init+0xd4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b5c:	4b18      	ldr	r3, [pc, #96]	@ (8000bc0 <MX_SPI1_Init+0xd4>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b62:	4b17      	ldr	r3, [pc, #92]	@ (8000bc0 <MX_SPI1_Init+0xd4>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b68:	4b15      	ldr	r3, [pc, #84]	@ (8000bc0 <MX_SPI1_Init+0xd4>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b6e:	4b14      	ldr	r3, [pc, #80]	@ (8000bc0 <MX_SPI1_Init+0xd4>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b74:	4b12      	ldr	r3, [pc, #72]	@ (8000bc0 <MX_SPI1_Init+0xd4>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000b7a:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <MX_SPI1_Init+0xd4>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000b80:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc0 <MX_SPI1_Init+0xd4>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b86:	480e      	ldr	r0, [pc, #56]	@ (8000bc0 <MX_SPI1_Init+0xd4>)
 8000b88:	f005 f8c6 	bl	8005d18 <HAL_SPI_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 8000b92:	f7ff fe86 	bl	80008a2 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000b9a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000b9e:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <MX_SPI1_Init+0xd4>)
 8000baa:	f005 fe82 	bl	80068b2 <HAL_SPIEx_SetConfigAutonomousMode>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 8000bb4:	f7ff fe75 	bl	80008a2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bb8:	bf00      	nop
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000028 	.word	0x20000028
 8000bc4:	40013000 	.word	0x40013000

08000bc8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b0c0      	sub	sp, #256	@ 0x100
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000be0:	f107 0310 	add.w	r3, r7, #16
 8000be4:	22d8      	movs	r2, #216	@ 0xd8
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f006 fbbd 	bl	8007368 <memset>
  if(spiHandle->Instance==SPI1)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a27      	ldr	r2, [pc, #156]	@ (8000c90 <HAL_SPI_MspInit+0xc8>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d145      	bne.n	8000c84 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000bf8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000bfc:	f04f 0300 	mov.w	r3, #0
 8000c00:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PCLK2;
 8000c04:	2300      	movs	r3, #0
 8000c06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c0a:	f107 0310 	add.w	r3, r7, #16
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f002 f900 	bl	8002e14 <HAL_RCCEx_PeriphCLKConfig>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8000c1a:	f7ff fe42 	bl	80008a2 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000c94 <HAL_SPI_MspInit+0xcc>)
 8000c20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000c24:	4a1b      	ldr	r2, [pc, #108]	@ (8000c94 <HAL_SPI_MspInit+0xcc>)
 8000c26:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c2a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000c2e:	4b19      	ldr	r3, [pc, #100]	@ (8000c94 <HAL_SPI_MspInit+0xcc>)
 8000c30:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000c34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3c:	4b15      	ldr	r3, [pc, #84]	@ (8000c94 <HAL_SPI_MspInit+0xcc>)
 8000c3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c42:	4a14      	ldr	r2, [pc, #80]	@ (8000c94 <HAL_SPI_MspInit+0xcc>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c4c:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <HAL_SPI_MspInit+0xcc>)
 8000c4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c5a:	23e0      	movs	r3, #224	@ 0xe0
 8000c5c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c72:	2305      	movs	r3, #5
 8000c74:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c78:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4806      	ldr	r0, [pc, #24]	@ (8000c98 <HAL_SPI_MspInit+0xd0>)
 8000c80:	f000 fafa 	bl	8001278 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000c84:	bf00      	nop
 8000c86:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40013000 	.word	0x40013000
 8000c94:	46020c00 	.word	0x46020c00
 8000c98:	42020000 	.word	0x42020000

08000c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ccc <HAL_MspInit+0x30>)
 8000ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ca8:	4a08      	ldr	r2, [pc, #32]	@ (8000ccc <HAL_MspInit+0x30>)
 8000caa:	f043 0304 	orr.w	r3, r3, #4
 8000cae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000cb2:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <HAL_MspInit+0x30>)
 8000cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	46020c00 	.word	0x46020c00

08000cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <NMI_Handler+0x4>

08000cd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <HardFault_Handler+0x4>

08000ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <MemManage_Handler+0x4>

08000ce8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <BusFault_Handler+0x4>

08000cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <UsageFault_Handler+0x4>

08000cf8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d26:	f000 f97f 	bl	8001028 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d34:	4b18      	ldr	r3, [pc, #96]	@ (8000d98 <SystemInit+0x68>)
 8000d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d3a:	4a17      	ldr	r2, [pc, #92]	@ (8000d98 <SystemInit+0x68>)
 8000d3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000d44:	4b15      	ldr	r3, [pc, #84]	@ (8000d9c <SystemInit+0x6c>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000d4a:	4b14      	ldr	r3, [pc, #80]	@ (8000d9c <SystemInit+0x6c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000d50:	4b12      	ldr	r3, [pc, #72]	@ (8000d9c <SystemInit+0x6c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000d56:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <SystemInit+0x6c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d9c <SystemInit+0x6c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a0e      	ldr	r2, [pc, #56]	@ (8000d9c <SystemInit+0x6c>)
 8000d62:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000d66:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000d6a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d9c <SystemInit+0x6c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000d72:	4b0a      	ldr	r3, [pc, #40]	@ (8000d9c <SystemInit+0x6c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a09      	ldr	r2, [pc, #36]	@ (8000d9c <SystemInit+0x6c>)
 8000d78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d7c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000d7e:	4b07      	ldr	r3, [pc, #28]	@ (8000d9c <SystemInit+0x6c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d84:	4b04      	ldr	r3, [pc, #16]	@ (8000d98 <SystemInit+0x68>)
 8000d86:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d8a:	609a      	str	r2, [r3, #8]
  #endif
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	e000ed00 	.word	0xe000ed00
 8000d9c:	46020c00 	.word	0x46020c00

08000da0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000da4:	4b22      	ldr	r3, [pc, #136]	@ (8000e30 <MX_USART1_UART_Init+0x90>)
 8000da6:	4a23      	ldr	r2, [pc, #140]	@ (8000e34 <MX_USART1_UART_Init+0x94>)
 8000da8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000daa:	4b21      	ldr	r3, [pc, #132]	@ (8000e30 <MX_USART1_UART_Init+0x90>)
 8000dac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000db0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000db2:	4b1f      	ldr	r3, [pc, #124]	@ (8000e30 <MX_USART1_UART_Init+0x90>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000db8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e30 <MX_USART1_UART_Init+0x90>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000e30 <MX_USART1_UART_Init+0x90>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e30 <MX_USART1_UART_Init+0x90>)
 8000dc6:	220c      	movs	r2, #12
 8000dc8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dca:	4b19      	ldr	r3, [pc, #100]	@ (8000e30 <MX_USART1_UART_Init+0x90>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd0:	4b17      	ldr	r3, [pc, #92]	@ (8000e30 <MX_USART1_UART_Init+0x90>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dd6:	4b16      	ldr	r3, [pc, #88]	@ (8000e30 <MX_USART1_UART_Init+0x90>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ddc:	4b14      	ldr	r3, [pc, #80]	@ (8000e30 <MX_USART1_UART_Init+0x90>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000de2:	4b13      	ldr	r3, [pc, #76]	@ (8000e30 <MX_USART1_UART_Init+0x90>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000de8:	4811      	ldr	r0, [pc, #68]	@ (8000e30 <MX_USART1_UART_Init+0x90>)
 8000dea:	f005 fda3 	bl	8006934 <HAL_UART_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000df4:	f7ff fd55 	bl	80008a2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000df8:	2100      	movs	r1, #0
 8000dfa:	480d      	ldr	r0, [pc, #52]	@ (8000e30 <MX_USART1_UART_Init+0x90>)
 8000dfc:	f006 f9ea 	bl	80071d4 <HAL_UARTEx_SetTxFifoThreshold>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000e06:	f7ff fd4c 	bl	80008a2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4808      	ldr	r0, [pc, #32]	@ (8000e30 <MX_USART1_UART_Init+0x90>)
 8000e0e:	f006 fa1f 	bl	8007250 <HAL_UARTEx_SetRxFifoThreshold>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e18:	f7ff fd43 	bl	80008a2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e1c:	4804      	ldr	r0, [pc, #16]	@ (8000e30 <MX_USART1_UART_Init+0x90>)
 8000e1e:	f006 f9a0 	bl	8007162 <HAL_UARTEx_DisableFifoMode>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e28:	f7ff fd3b 	bl	80008a2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	200000b8 	.word	0x200000b8
 8000e34:	40013800 	.word	0x40013800

08000e38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b0c0      	sub	sp, #256	@ 0x100
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e50:	f107 0310 	add.w	r3, r7, #16
 8000e54:	22d8      	movs	r2, #216	@ 0xd8
 8000e56:	2100      	movs	r1, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f006 fa85 	bl	8007368 <memset>
  if(uartHandle->Instance==USART1)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a27      	ldr	r2, [pc, #156]	@ (8000f00 <HAL_UART_MspInit+0xc8>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d145      	bne.n	8000ef4 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e68:	f04f 0201 	mov.w	r2, #1
 8000e6c:	f04f 0300 	mov.w	r3, #0
 8000e70:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e74:	2300      	movs	r3, #0
 8000e76:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e78:	f107 0310 	add.w	r3, r7, #16
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f001 ffc9 	bl	8002e14 <HAL_RCCEx_PeriphCLKConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000e88:	f7ff fd0b 	bl	80008a2 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000f04 <HAL_UART_MspInit+0xcc>)
 8000e8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000e92:	4a1c      	ldr	r2, [pc, #112]	@ (8000f04 <HAL_UART_MspInit+0xcc>)
 8000e94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e98:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000e9c:	4b19      	ldr	r3, [pc, #100]	@ (8000f04 <HAL_UART_MspInit+0xcc>)
 8000e9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000ea2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	4b16      	ldr	r3, [pc, #88]	@ (8000f04 <HAL_UART_MspInit+0xcc>)
 8000eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000eb0:	4a14      	ldr	r2, [pc, #80]	@ (8000f04 <HAL_UART_MspInit+0xcc>)
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000eba:	4b12      	ldr	r3, [pc, #72]	@ (8000f04 <HAL_UART_MspInit+0xcc>)
 8000ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ec8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ecc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2300      	movs	r3, #0
 8000ede:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ee2:	2307      	movs	r3, #7
 8000ee4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee8:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000eec:	4619      	mov	r1, r3
 8000eee:	4806      	ldr	r0, [pc, #24]	@ (8000f08 <HAL_UART_MspInit+0xd0>)
 8000ef0:	f000 f9c2 	bl	8001278 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000ef4:	bf00      	nop
 8000ef6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40013800 	.word	0x40013800
 8000f04:	46020c00 	.word	0x46020c00
 8000f08:	42020000 	.word	0x42020000

08000f0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000f0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f44 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f10:	f7ff ff0e 	bl	8000d30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f14:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f16:	e003      	b.n	8000f20 <LoopCopyDataInit>

08000f18 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f18:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f1a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f1c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f1e:	3104      	adds	r1, #4

08000f20 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f20:	480a      	ldr	r0, [pc, #40]	@ (8000f4c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f22:	4b0b      	ldr	r3, [pc, #44]	@ (8000f50 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f24:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f26:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f28:	d3f6      	bcc.n	8000f18 <CopyDataInit>
	ldr	r2, =_sbss
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f54 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f2c:	e002      	b.n	8000f34 <LoopFillZerobss>

08000f2e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f2e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f30:	f842 3b04 	str.w	r3, [r2], #4

08000f34 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f34:	4b08      	ldr	r3, [pc, #32]	@ (8000f58 <LoopForever+0x16>)
	cmp	r2, r3
 8000f36:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f38:	d3f9      	bcc.n	8000f2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f3a:	f006 fa1d 	bl	8007378 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f3e:	f7ff fc1f 	bl	8000780 <main>

08000f42 <LoopForever>:

LoopForever:
    b LoopForever
 8000f42:	e7fe      	b.n	8000f42 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000f44:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8000f48:	080074ec 	.word	0x080074ec
	ldr	r0, =_sdata
 8000f4c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f50:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8000f54:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000f58:	20000150 	.word	0x20000150

08000f5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f5c:	e7fe      	b.n	8000f5c <ADC1_2_IRQHandler>
	...

08000f60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f64:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <HAL_Init+0x4c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a10      	ldr	r2, [pc, #64]	@ (8000fac <HAL_Init+0x4c>)
 8000f6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f70:	2003      	movs	r0, #3
 8000f72:	f000 f94f 	bl	8001214 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000f76:	f001 fd69 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb0 <HAL_Init+0x50>)
 8000f7e:	6a1b      	ldr	r3, [r3, #32]
 8000f80:	f003 030f 	and.w	r3, r3, #15
 8000f84:	490b      	ldr	r1, [pc, #44]	@ (8000fb4 <HAL_Init+0x54>)
 8000f86:	5ccb      	ldrb	r3, [r1, r3]
 8000f88:	fa22 f303 	lsr.w	r3, r2, r3
 8000f8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb8 <HAL_Init+0x58>)
 8000f8e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f90:	200f      	movs	r0, #15
 8000f92:	f000 f813 	bl	8000fbc <HAL_InitTick>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e002      	b.n	8000fa6 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa0:	f7ff fe7c 	bl	8000c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40022000 	.word	0x40022000
 8000fb0:	46020c00 	.word	0x46020c00
 8000fb4:	080073dc 	.word	0x080073dc
 8000fb8:	20000000 	.word	0x20000000

08000fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000fc4:	4b15      	ldr	r3, [pc, #84]	@ (800101c <HAL_InitTick+0x60>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d101      	bne.n	8000fd0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e021      	b.n	8001014 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000fd0:	4b13      	ldr	r3, [pc, #76]	@ (8001020 <HAL_InitTick+0x64>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b11      	ldr	r3, [pc, #68]	@ (800101c <HAL_InitTick+0x60>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 f939 	bl	800125e <HAL_SYSTICK_Config>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e00e      	b.n	8001014 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b0f      	cmp	r3, #15
 8000ffa:	d80a      	bhi.n	8001012 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	6879      	ldr	r1, [r7, #4]
 8001000:	f04f 30ff 	mov.w	r0, #4294967295
 8001004:	f000 f911 	bl	800122a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001008:	4a06      	ldr	r2, [pc, #24]	@ (8001024 <HAL_InitTick+0x68>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800100e:	2300      	movs	r3, #0
 8001010:	e000      	b.n	8001014 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
}
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000008 	.word	0x20000008
 8001020:	20000000 	.word	0x20000000
 8001024:	20000004 	.word	0x20000004

08001028 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800102c:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <HAL_IncTick+0x20>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	4b06      	ldr	r3, [pc, #24]	@ (800104c <HAL_IncTick+0x24>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4413      	add	r3, r2
 8001038:	4a04      	ldr	r2, [pc, #16]	@ (800104c <HAL_IncTick+0x24>)
 800103a:	6013      	str	r3, [r2, #0]
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	20000008 	.word	0x20000008
 800104c:	2000014c 	.word	0x2000014c

08001050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return uwTick;
 8001054:	4b03      	ldr	r3, [pc, #12]	@ (8001064 <HAL_GetTick+0x14>)
 8001056:	681b      	ldr	r3, [r3, #0]
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	2000014c 	.word	0x2000014c

08001068 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001070:	f7ff ffee 	bl	8001050 <HAL_GetTick>
 8001074:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001080:	d005      	beq.n	800108e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001082:	4b0a      	ldr	r3, [pc, #40]	@ (80010ac <HAL_Delay+0x44>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	461a      	mov	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4413      	add	r3, r2
 800108c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800108e:	bf00      	nop
 8001090:	f7ff ffde 	bl	8001050 <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	429a      	cmp	r2, r3
 800109e:	d8f7      	bhi.n	8001090 <HAL_Delay+0x28>
  {
  }
}
 80010a0:	bf00      	nop
 80010a2:	bf00      	nop
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000008 	.word	0x20000008

080010b0 <__NVIC_SetPriorityGrouping>:
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c0:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <__NVIC_SetPriorityGrouping+0x44>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010cc:	4013      	ands	r3, r2
 80010ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e2:	4a04      	ldr	r2, [pc, #16]	@ (80010f4 <__NVIC_SetPriorityGrouping+0x44>)
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	60d3      	str	r3, [r2, #12]
}
 80010e8:	bf00      	nop
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_GetPriorityGrouping>:
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010fc:	4b04      	ldr	r3, [pc, #16]	@ (8001110 <__NVIC_GetPriorityGrouping+0x18>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	0a1b      	lsrs	r3, r3, #8
 8001102:	f003 0307 	and.w	r3, r3, #7
}
 8001106:	4618      	mov	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <__NVIC_SetPriority>:
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	6039      	str	r1, [r7, #0]
 800111e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001120:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001124:	2b00      	cmp	r3, #0
 8001126:	db0a      	blt.n	800113e <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	b2da      	uxtb	r2, r3
 800112c:	490c      	ldr	r1, [pc, #48]	@ (8001160 <__NVIC_SetPriority+0x4c>)
 800112e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001132:	0112      	lsls	r2, r2, #4
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	440b      	add	r3, r1
 8001138:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800113c:	e00a      	b.n	8001154 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4908      	ldr	r1, [pc, #32]	@ (8001164 <__NVIC_SetPriority+0x50>)
 8001144:	88fb      	ldrh	r3, [r7, #6]
 8001146:	f003 030f 	and.w	r3, r3, #15
 800114a:	3b04      	subs	r3, #4
 800114c:	0112      	lsls	r2, r2, #4
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	440b      	add	r3, r1
 8001152:	761a      	strb	r2, [r3, #24]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000e100 	.word	0xe000e100
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <NVIC_EncodePriority>:
{
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	@ 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f1c3 0307 	rsb	r3, r3, #7
 8001182:	2b04      	cmp	r3, #4
 8001184:	bf28      	it	cs
 8001186:	2304      	movcs	r3, #4
 8001188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3304      	adds	r3, #4
 800118e:	2b06      	cmp	r3, #6
 8001190:	d902      	bls.n	8001198 <NVIC_EncodePriority+0x30>
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3b03      	subs	r3, #3
 8001196:	e000      	b.n	800119a <NVIC_EncodePriority+0x32>
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	f04f 32ff 	mov.w	r2, #4294967295
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43da      	mvns	r2, r3
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	401a      	ands	r2, r3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b0:	f04f 31ff 	mov.w	r1, #4294967295
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	43d9      	mvns	r1, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	4313      	orrs	r3, r2
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3724      	adds	r7, #36	@ 0x24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3b01      	subs	r3, #1
 80011dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011e0:	d301      	bcc.n	80011e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011e2:	2301      	movs	r3, #1
 80011e4:	e00f      	b.n	8001206 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001210 <SysTick_Config+0x40>)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ee:	210f      	movs	r1, #15
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	f7ff ff8e 	bl	8001114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f8:	4b05      	ldr	r3, [pc, #20]	@ (8001210 <SysTick_Config+0x40>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011fe:	4b04      	ldr	r3, [pc, #16]	@ (8001210 <SysTick_Config+0x40>)
 8001200:	2207      	movs	r2, #7
 8001202:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	e000e010 	.word	0xe000e010

08001214 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ff47 	bl	80010b0 <__NVIC_SetPriorityGrouping>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b086      	sub	sp, #24
 800122e:	af00      	add	r7, sp, #0
 8001230:	4603      	mov	r3, r0
 8001232:	60b9      	str	r1, [r7, #8]
 8001234:	607a      	str	r2, [r7, #4]
 8001236:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001238:	f7ff ff5e 	bl	80010f8 <__NVIC_GetPriorityGrouping>
 800123c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	68b9      	ldr	r1, [r7, #8]
 8001242:	6978      	ldr	r0, [r7, #20]
 8001244:	f7ff ff90 	bl	8001168 <NVIC_EncodePriority>
 8001248:	4602      	mov	r2, r0
 800124a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800124e:	4611      	mov	r1, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff5f 	bl	8001114 <__NVIC_SetPriority>
}
 8001256:	bf00      	nop
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff ffb2 	bl	80011d0 <SysTick_Config>
 800126c:	4603      	mov	r3, r0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001278:	b480      	push	{r7}
 800127a:	b089      	sub	sp, #36	@ 0x24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800128a:	e1ba      	b.n	8001602 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	2101      	movs	r1, #1
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	fa01 f303 	lsl.w	r3, r1, r3
 8001298:	4013      	ands	r3, r2
 800129a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f000 81aa 	beq.w	80015fc <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a55      	ldr	r2, [pc, #340]	@ (8001400 <HAL_GPIO_Init+0x188>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d15d      	bne.n	800136c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80012b6:	2201      	movs	r2, #1
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	69fa      	ldr	r2, [r7, #28]
 80012c2:	4013      	ands	r3, r2
 80012c4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 0201 	and.w	r2, r3, #1
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	69fa      	ldr	r2, [r7, #28]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	69fa      	ldr	r2, [r7, #28]
 80012de:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80012e0:	4a48      	ldr	r2, [pc, #288]	@ (8001404 <HAL_GPIO_Init+0x18c>)
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80012e8:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80012ea:	4a46      	ldr	r2, [pc, #280]	@ (8001404 <HAL_GPIO_Init+0x18c>)
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	4413      	add	r3, r2
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	08da      	lsrs	r2, r3, #3
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	3208      	adds	r2, #8
 80012fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001302:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	220f      	movs	r2, #15
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	69fa      	ldr	r2, [r7, #28]
 8001316:	4013      	ands	r3, r2
 8001318:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	f003 0307 	and.w	r3, r3, #7
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	220b      	movs	r2, #11
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	69fa      	ldr	r2, [r7, #28]
 800132a:	4313      	orrs	r3, r2
 800132c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	08da      	lsrs	r2, r3, #3
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	3208      	adds	r2, #8
 8001336:	69f9      	ldr	r1, [r7, #28]
 8001338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	2203      	movs	r2, #3
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	69fa      	ldr	r2, [r7, #28]
 8001350:	4013      	ands	r3, r2
 8001352:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	2202      	movs	r2, #2
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	69fa      	ldr	r2, [r7, #28]
 8001360:	4313      	orrs	r3, r2
 8001362:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	69fa      	ldr	r2, [r7, #28]
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	e067      	b.n	800143c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	2b02      	cmp	r3, #2
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x104>
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b12      	cmp	r3, #18
 800137a:	d145      	bne.n	8001408 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	08da      	lsrs	r2, r3, #3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3208      	adds	r2, #8
 8001384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001388:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	f003 0307 	and.w	r3, r3, #7
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	220f      	movs	r2, #15
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	69fa      	ldr	r2, [r7, #28]
 800139c:	4013      	ands	r3, r2
 800139e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	f003 020f 	and.w	r2, r3, #15
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	69fa      	ldr	r2, [r7, #28]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	08da      	lsrs	r2, r3, #3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3208      	adds	r2, #8
 80013c2:	69f9      	ldr	r1, [r7, #28]
 80013c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	2203      	movs	r2, #3
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	69fa      	ldr	r2, [r7, #28]
 80013dc:	4013      	ands	r3, r2
 80013de:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 0203 	and.w	r2, r3, #3
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	69fa      	ldr	r2, [r7, #28]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	69fa      	ldr	r2, [r7, #28]
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	e01e      	b.n	800143c <HAL_GPIO_Init+0x1c4>
 80013fe:	bf00      	nop
 8001400:	46020000 	.word	0x46020000
 8001404:	08007434 	.word	0x08007434
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	2203      	movs	r2, #3
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	69fa      	ldr	r2, [r7, #28]
 800141c:	4013      	ands	r3, r2
 800141e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 0203 	and.w	r2, r3, #3
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	69fa      	ldr	r2, [r7, #28]
 8001432:	4313      	orrs	r3, r2
 8001434:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	69fa      	ldr	r2, [r7, #28]
 800143a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d00b      	beq.n	800145c <HAL_GPIO_Init+0x1e4>
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	2b02      	cmp	r3, #2
 800144a:	d007      	beq.n	800145c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001450:	2b11      	cmp	r3, #17
 8001452:	d003      	beq.n	800145c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b12      	cmp	r3, #18
 800145a:	d130      	bne.n	80014be <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	2203      	movs	r2, #3
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	69fa      	ldr	r2, [r7, #28]
 8001470:	4013      	ands	r3, r2
 8001472:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	68da      	ldr	r2, [r3, #12]
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	69fa      	ldr	r2, [r7, #28]
 8001482:	4313      	orrs	r3, r2
 8001484:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	69fa      	ldr	r2, [r7, #28]
 800148a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001492:	2201      	movs	r2, #1
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43db      	mvns	r3, r3
 800149c:	69fa      	ldr	r2, [r7, #28]
 800149e:	4013      	ands	r3, r2
 80014a0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	091b      	lsrs	r3, r3, #4
 80014a8:	f003 0201 	and.w	r2, r3, #1
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	69fa      	ldr	r2, [r7, #28]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	69fa      	ldr	r2, [r7, #28]
 80014bc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2b03      	cmp	r3, #3
 80014c4:	d017      	beq.n	80014f6 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	2203      	movs	r2, #3
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43db      	mvns	r3, r3
 80014d8:	69fa      	ldr	r2, [r7, #28]
 80014da:	4013      	ands	r3, r2
 80014dc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	689a      	ldr	r2, [r3, #8]
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	69fa      	ldr	r2, [r7, #28]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	69fa      	ldr	r2, [r7, #28]
 80014f4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d07c      	beq.n	80015fc <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001502:	4a47      	ldr	r2, [pc, #284]	@ (8001620 <HAL_GPIO_Init+0x3a8>)
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	089b      	lsrs	r3, r3, #2
 8001508:	3318      	adds	r3, #24
 800150a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	f003 0303 	and.w	r3, r3, #3
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	220f      	movs	r2, #15
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43db      	mvns	r3, r3
 8001520:	69fa      	ldr	r2, [r7, #28]
 8001522:	4013      	ands	r3, r2
 8001524:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	0a9a      	lsrs	r2, r3, #10
 800152a:	4b3e      	ldr	r3, [pc, #248]	@ (8001624 <HAL_GPIO_Init+0x3ac>)
 800152c:	4013      	ands	r3, r2
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	f002 0203 	and.w	r2, r2, #3
 8001534:	00d2      	lsls	r2, r2, #3
 8001536:	4093      	lsls	r3, r2
 8001538:	69fa      	ldr	r2, [r7, #28]
 800153a:	4313      	orrs	r3, r2
 800153c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800153e:	4938      	ldr	r1, [pc, #224]	@ (8001620 <HAL_GPIO_Init+0x3a8>)
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	089b      	lsrs	r3, r3, #2
 8001544:	3318      	adds	r3, #24
 8001546:	69fa      	ldr	r2, [r7, #28]
 8001548:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800154c:	4b34      	ldr	r3, [pc, #208]	@ (8001620 <HAL_GPIO_Init+0x3a8>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	43db      	mvns	r3, r3
 8001556:	69fa      	ldr	r2, [r7, #28]
 8001558:	4013      	ands	r3, r2
 800155a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8001568:	69fa      	ldr	r2, [r7, #28]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	4313      	orrs	r3, r2
 800156e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001570:	4a2b      	ldr	r2, [pc, #172]	@ (8001620 <HAL_GPIO_Init+0x3a8>)
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001576:	4b2a      	ldr	r3, [pc, #168]	@ (8001620 <HAL_GPIO_Init+0x3a8>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	43db      	mvns	r3, r3
 8001580:	69fa      	ldr	r2, [r7, #28]
 8001582:	4013      	ands	r3, r2
 8001584:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8001592:	69fa      	ldr	r2, [r7, #28]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4313      	orrs	r3, r2
 8001598:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800159a:	4a21      	ldr	r2, [pc, #132]	@ (8001620 <HAL_GPIO_Init+0x3a8>)
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80015a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001620 <HAL_GPIO_Init+0x3a8>)
 80015a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80015a6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	43db      	mvns	r3, r3
 80015ac:	69fa      	ldr	r2, [r7, #28]
 80015ae:	4013      	ands	r3, r2
 80015b0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80015be:	69fa      	ldr	r2, [r7, #28]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80015c6:	4a16      	ldr	r2, [pc, #88]	@ (8001620 <HAL_GPIO_Init+0x3a8>)
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80015ce:	4b14      	ldr	r3, [pc, #80]	@ (8001620 <HAL_GPIO_Init+0x3a8>)
 80015d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	43db      	mvns	r3, r3
 80015da:	69fa      	ldr	r2, [r7, #28]
 80015dc:	4013      	ands	r3, r2
 80015de:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d003      	beq.n	80015f4 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80015ec:	69fa      	ldr	r2, [r7, #28]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80015f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001620 <HAL_GPIO_Init+0x3a8>)
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	3301      	adds	r3, #1
 8001600:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	fa22 f303 	lsr.w	r3, r2, r3
 800160c:	2b00      	cmp	r3, #0
 800160e:	f47f ae3d 	bne.w	800128c <HAL_GPIO_Init+0x14>
  }
}
 8001612:	bf00      	nop
 8001614:	bf00      	nop
 8001616:	3724      	adds	r7, #36	@ 0x24
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	46022000 	.word	0x46022000
 8001624:	002f7f7f 	.word	0x002f7f7f

08001628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	807b      	strh	r3, [r7, #2]
 8001634:	4613      	mov	r3, r2
 8001636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001638:	787b      	ldrb	r3, [r7, #1]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800163e:	887a      	ldrh	r2, [r7, #2]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8001644:	e002      	b.n	800164c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8001646:	887a      	ldrh	r2, [r7, #2]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001660:	2300      	movs	r3, #0
 8001662:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001664:	4b0b      	ldr	r3, [pc, #44]	@ (8001694 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	2b00      	cmp	r3, #0
 800166e:	d002      	beq.n	8001676 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	73fb      	strb	r3, [r7, #15]
 8001674:	e007      	b.n	8001686 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8001676:	4b07      	ldr	r3, [pc, #28]	@ (8001694 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f023 0204 	bic.w	r2, r3, #4
 800167e:	4905      	ldr	r1, [pc, #20]	@ (8001694 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4313      	orrs	r3, r2
 8001684:	600b      	str	r3, [r1, #0]
  }

  return status;
 8001686:	7bfb      	ldrb	r3, [r7, #15]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	40030400 	.word	0x40030400

08001698 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800169c:	4b05      	ldr	r3, [pc, #20]	@ (80016b4 <HAL_ICACHE_Enable+0x1c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a04      	ldr	r2, [pc, #16]	@ (80016b4 <HAL_ICACHE_Enable+0x1c>)
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	40030400 	.word	0x40030400

080016b8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80016c0:	4b39      	ldr	r3, [pc, #228]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80016c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016c8:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d10b      	bne.n	80016ea <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016d8:	d905      	bls.n	80016e6 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80016da:	4b33      	ldr	r3, [pc, #204]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	4a32      	ldr	r2, [pc, #200]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80016e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016e4:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80016e6:	2300      	movs	r3, #0
 80016e8:	e057      	b.n	800179a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016f0:	d90a      	bls.n	8001708 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80016f2:	4b2d      	ldr	r3, [pc, #180]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	4a2a      	ldr	r2, [pc, #168]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001700:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001704:	60d3      	str	r3, [r2, #12]
 8001706:	e007      	b.n	8001718 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8001708:	4b27      	ldr	r3, [pc, #156]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8001710:	4925      	ldr	r1, [pc, #148]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4313      	orrs	r3, r2
 8001716:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001718:	4b24      	ldr	r3, [pc, #144]	@ (80017ac <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a24      	ldr	r2, [pc, #144]	@ (80017b0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800171e:	fba2 2303 	umull	r2, r3, r2, r3
 8001722:	099b      	lsrs	r3, r3, #6
 8001724:	2232      	movs	r2, #50	@ 0x32
 8001726:	fb02 f303 	mul.w	r3, r2, r3
 800172a:	4a21      	ldr	r2, [pc, #132]	@ (80017b0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800172c:	fba2 2303 	umull	r2, r3, r2, r3
 8001730:	099b      	lsrs	r3, r3, #6
 8001732:	3301      	adds	r3, #1
 8001734:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001736:	e002      	b.n	800173e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	3b01      	subs	r3, #1
 800173c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800173e:	4b1a      	ldr	r3, [pc, #104]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d102      	bne.n	8001750 <HAL_PWREx_ControlVoltageScaling+0x98>
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1f3      	bne.n	8001738 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d01b      	beq.n	800178e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001756:	4b15      	ldr	r3, [pc, #84]	@ (80017ac <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a15      	ldr	r2, [pc, #84]	@ (80017b0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800175c:	fba2 2303 	umull	r2, r3, r2, r3
 8001760:	099b      	lsrs	r3, r3, #6
 8001762:	2232      	movs	r2, #50	@ 0x32
 8001764:	fb02 f303 	mul.w	r3, r2, r3
 8001768:	4a11      	ldr	r2, [pc, #68]	@ (80017b0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800176a:	fba2 2303 	umull	r2, r3, r2, r3
 800176e:	099b      	lsrs	r3, r3, #6
 8001770:	3301      	adds	r3, #1
 8001772:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001774:	e002      	b.n	800177c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	3b01      	subs	r3, #1
 800177a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800177c:	4b0a      	ldr	r3, [pc, #40]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800177e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001780:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d102      	bne.n	800178e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f3      	bne.n	8001776 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e000      	b.n	800179a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	46020800 	.word	0x46020800
 80017ac:	20000000 	.word	0x20000000
 80017b0:	10624dd3 	.word	0x10624dd3

080017b4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80017b8:	4b04      	ldr	r3, [pc, #16]	@ (80017cc <HAL_PWREx_GetVoltageRange+0x18>)
 80017ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	46020800 	.word	0x46020800

080017d0 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80017d8:	4b22      	ldr	r3, [pc, #136]	@ (8001864 <HAL_PWREx_ConfigSupply+0x94>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a22      	ldr	r2, [pc, #136]	@ (8001868 <HAL_PWREx_ConfigSupply+0x98>)
 80017de:	fba2 2303 	umull	r2, r3, r2, r3
 80017e2:	099b      	lsrs	r3, r3, #6
 80017e4:	2232      	movs	r2, #50	@ 0x32
 80017e6:	fb02 f303 	mul.w	r3, r2, r3
 80017ea:	4a1f      	ldr	r2, [pc, #124]	@ (8001868 <HAL_PWREx_ConfigSupply+0x98>)
 80017ec:	fba2 2303 	umull	r2, r3, r2, r3
 80017f0:	099b      	lsrs	r3, r3, #6
 80017f2:	3301      	adds	r3, #1
 80017f4:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d113      	bne.n	8001824 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80017fc:	4b1b      	ldr	r3, [pc, #108]	@ (800186c <HAL_PWREx_ConfigSupply+0x9c>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	4a1a      	ldr	r2, [pc, #104]	@ (800186c <HAL_PWREx_ConfigSupply+0x9c>)
 8001802:	f023 0302 	bic.w	r3, r3, #2
 8001806:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001808:	e002      	b.n	8001810 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	3b01      	subs	r3, #1
 800180e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001810:	4b16      	ldr	r3, [pc, #88]	@ (800186c <HAL_PWREx_ConfigSupply+0x9c>)
 8001812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b02      	cmp	r3, #2
 800181a:	d116      	bne.n	800184a <HAL_PWREx_ConfigSupply+0x7a>
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f3      	bne.n	800180a <HAL_PWREx_ConfigSupply+0x3a>
 8001822:	e012      	b.n	800184a <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8001824:	4b11      	ldr	r3, [pc, #68]	@ (800186c <HAL_PWREx_ConfigSupply+0x9c>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	4a10      	ldr	r2, [pc, #64]	@ (800186c <HAL_PWREx_ConfigSupply+0x9c>)
 800182a:	f043 0302 	orr.w	r3, r3, #2
 800182e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001830:	e002      	b.n	8001838 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	3b01      	subs	r3, #1
 8001836:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001838:	4b0c      	ldr	r3, [pc, #48]	@ (800186c <HAL_PWREx_ConfigSupply+0x9c>)
 800183a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d102      	bne.n	800184a <HAL_PWREx_ConfigSupply+0x7a>
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f3      	bne.n	8001832 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d101      	bne.n	8001854 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e000      	b.n	8001856 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	20000000 	.word	0x20000000
 8001868:	10624dd3 	.word	0x10624dd3
 800186c:	46020800 	.word	0x46020800

08001870 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8001874:	4b05      	ldr	r3, [pc, #20]	@ (800188c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	4a04      	ldr	r2, [pc, #16]	@ (800188c <HAL_PWREx_EnableVddIO2+0x1c>)
 800187a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800187e:	6113      	str	r3, [r2, #16]
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	46020800 	.word	0x46020800

08001890 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8001894:	4b05      	ldr	r3, [pc, #20]	@ (80018ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001898:	4a04      	ldr	r2, [pc, #16]	@ (80018ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	46020800 	.word	0x46020800

080018b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08e      	sub	sp, #56	@ 0x38
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80018b8:	2300      	movs	r3, #0
 80018ba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d102      	bne.n	80018ca <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	f000 bec8 	b.w	800265a <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ca:	4b99      	ldr	r3, [pc, #612]	@ (8001b30 <HAL_RCC_OscConfig+0x280>)
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	f003 030c 	and.w	r3, r3, #12
 80018d2:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018d4:	4b96      	ldr	r3, [pc, #600]	@ (8001b30 <HAL_RCC_OscConfig+0x280>)
 80018d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d8:	f003 0303 	and.w	r3, r3, #3
 80018dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0310 	and.w	r3, r3, #16
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f000 816c 	beq.w	8001bc4 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80018ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d007      	beq.n	8001902 <HAL_RCC_OscConfig+0x52>
 80018f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018f4:	2b0c      	cmp	r3, #12
 80018f6:	f040 80de 	bne.w	8001ab6 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	f040 80da 	bne.w	8001ab6 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d102      	bne.n	8001910 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	f000 bea5 	b.w	800265a <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001914:	4b86      	ldr	r3, [pc, #536]	@ (8001b30 <HAL_RCC_OscConfig+0x280>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d004      	beq.n	800192a <HAL_RCC_OscConfig+0x7a>
 8001920:	4b83      	ldr	r3, [pc, #524]	@ (8001b30 <HAL_RCC_OscConfig+0x280>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001928:	e005      	b.n	8001936 <HAL_RCC_OscConfig+0x86>
 800192a:	4b81      	ldr	r3, [pc, #516]	@ (8001b30 <HAL_RCC_OscConfig+0x280>)
 800192c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001930:	041b      	lsls	r3, r3, #16
 8001932:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001936:	4293      	cmp	r3, r2
 8001938:	d255      	bcs.n	80019e6 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800193a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800193c:	2b00      	cmp	r3, #0
 800193e:	d10a      	bne.n	8001956 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001944:	4618      	mov	r0, r3
 8001946:	f001 f9df 	bl	8002d08 <RCC_SetFlashLatencyFromMSIRange>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d002      	beq.n	8001956 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	f000 be82 	b.w	800265a <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001956:	4b76      	ldr	r3, [pc, #472]	@ (8001b30 <HAL_RCC_OscConfig+0x280>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	4a75      	ldr	r2, [pc, #468]	@ (8001b30 <HAL_RCC_OscConfig+0x280>)
 800195c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001960:	6093      	str	r3, [r2, #8]
 8001962:	4b73      	ldr	r3, [pc, #460]	@ (8001b30 <HAL_RCC_OscConfig+0x280>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196e:	4970      	ldr	r1, [pc, #448]	@ (8001b30 <HAL_RCC_OscConfig+0x280>)
 8001970:	4313      	orrs	r3, r2
 8001972:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001978:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800197c:	d309      	bcc.n	8001992 <HAL_RCC_OscConfig+0xe2>
 800197e:	4b6c      	ldr	r3, [pc, #432]	@ (8001b30 <HAL_RCC_OscConfig+0x280>)
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	f023 021f 	bic.w	r2, r3, #31
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a1b      	ldr	r3, [r3, #32]
 800198a:	4969      	ldr	r1, [pc, #420]	@ (8001b30 <HAL_RCC_OscConfig+0x280>)
 800198c:	4313      	orrs	r3, r2
 800198e:	60cb      	str	r3, [r1, #12]
 8001990:	e07e      	b.n	8001a90 <HAL_RCC_OscConfig+0x1e0>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001996:	2b00      	cmp	r3, #0
 8001998:	da0a      	bge.n	80019b0 <HAL_RCC_OscConfig+0x100>
 800199a:	4b65      	ldr	r3, [pc, #404]	@ (8001b30 <HAL_RCC_OscConfig+0x280>)
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	015b      	lsls	r3, r3, #5
 80019a8:	4961      	ldr	r1, [pc, #388]	@ (8001b30 <HAL_RCC_OscConfig+0x280>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	60cb      	str	r3, [r1, #12]
 80019ae:	e06f      	b.n	8001a90 <HAL_RCC_OscConfig+0x1e0>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019b8:	d30a      	bcc.n	80019d0 <HAL_RCC_OscConfig+0x120>
 80019ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001b30 <HAL_RCC_OscConfig+0x280>)
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a1b      	ldr	r3, [r3, #32]
 80019c6:	029b      	lsls	r3, r3, #10
 80019c8:	4959      	ldr	r1, [pc, #356]	@ (8001b30 <HAL_RCC_OscConfig+0x280>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	60cb      	str	r3, [r1, #12]
 80019ce:	e05f      	b.n	8001a90 <HAL_RCC_OscConfig+0x1e0>
 80019d0:	4b57      	ldr	r3, [pc, #348]	@ (8001b30 <HAL_RCC_OscConfig+0x280>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	03db      	lsls	r3, r3, #15
 80019de:	4954      	ldr	r1, [pc, #336]	@ (8001b30 <HAL_RCC_OscConfig+0x280>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	60cb      	str	r3, [r1, #12]
 80019e4:	e054      	b.n	8001a90 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80019e6:	4b52      	ldr	r3, [pc, #328]	@ (8001b30 <HAL_RCC_OscConfig+0x280>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	4a51      	ldr	r2, [pc, #324]	@ (8001b30 <HAL_RCC_OscConfig+0x280>)
 80019ec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80019f0:	6093      	str	r3, [r2, #8]
 80019f2:	4b4f      	ldr	r3, [pc, #316]	@ (8001b30 <HAL_RCC_OscConfig+0x280>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019fe:	494c      	ldr	r1, [pc, #304]	@ (8001b30 <HAL_RCC_OscConfig+0x280>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a08:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001a0c:	d309      	bcc.n	8001a22 <HAL_RCC_OscConfig+0x172>
 8001a0e:	4b48      	ldr	r3, [pc, #288]	@ (8001b30 <HAL_RCC_OscConfig+0x280>)
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	f023 021f 	bic.w	r2, r3, #31
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	4945      	ldr	r1, [pc, #276]	@ (8001b30 <HAL_RCC_OscConfig+0x280>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	60cb      	str	r3, [r1, #12]
 8001a20:	e028      	b.n	8001a74 <HAL_RCC_OscConfig+0x1c4>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	da0a      	bge.n	8001a40 <HAL_RCC_OscConfig+0x190>
 8001a2a:	4b41      	ldr	r3, [pc, #260]	@ (8001b30 <HAL_RCC_OscConfig+0x280>)
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a1b      	ldr	r3, [r3, #32]
 8001a36:	015b      	lsls	r3, r3, #5
 8001a38:	493d      	ldr	r1, [pc, #244]	@ (8001b30 <HAL_RCC_OscConfig+0x280>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	60cb      	str	r3, [r1, #12]
 8001a3e:	e019      	b.n	8001a74 <HAL_RCC_OscConfig+0x1c4>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a48:	d30a      	bcc.n	8001a60 <HAL_RCC_OscConfig+0x1b0>
 8001a4a:	4b39      	ldr	r3, [pc, #228]	@ (8001b30 <HAL_RCC_OscConfig+0x280>)
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a1b      	ldr	r3, [r3, #32]
 8001a56:	029b      	lsls	r3, r3, #10
 8001a58:	4935      	ldr	r1, [pc, #212]	@ (8001b30 <HAL_RCC_OscConfig+0x280>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	60cb      	str	r3, [r1, #12]
 8001a5e:	e009      	b.n	8001a74 <HAL_RCC_OscConfig+0x1c4>
 8001a60:	4b33      	ldr	r3, [pc, #204]	@ (8001b30 <HAL_RCC_OscConfig+0x280>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	03db      	lsls	r3, r3, #15
 8001a6e:	4930      	ldr	r1, [pc, #192]	@ (8001b30 <HAL_RCC_OscConfig+0x280>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10a      	bne.n	8001a90 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f001 f942 	bl	8002d08 <RCC_SetFlashLatencyFromMSIRange>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d002      	beq.n	8001a90 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	f000 bde5 	b.w	800265a <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8001a90:	f001 f8e4 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a94:	4b27      	ldr	r3, [pc, #156]	@ (8001b34 <HAL_RCC_OscConfig+0x284>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fa8f 	bl	8000fbc <HAL_InitTick>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8001aa4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f000 808a 	beq.w	8001bc2 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8001aae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ab2:	f000 bdd2 	b.w	800265a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d066      	beq.n	8001b8c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8001abe:	4b1c      	ldr	r3, [pc, #112]	@ (8001b30 <HAL_RCC_OscConfig+0x280>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a1b      	ldr	r2, [pc, #108]	@ (8001b30 <HAL_RCC_OscConfig+0x280>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001aca:	f7ff fac1 	bl	8001050 <HAL_GetTick>
 8001ace:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001ad0:	e009      	b.n	8001ae6 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ad2:	f7ff fabd 	bl	8001050 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d902      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	f000 bdba 	b.w	800265a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001ae6:	4b12      	ldr	r3, [pc, #72]	@ (8001b30 <HAL_RCC_OscConfig+0x280>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0ef      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001af2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b30 <HAL_RCC_OscConfig+0x280>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	4a0e      	ldr	r2, [pc, #56]	@ (8001b30 <HAL_RCC_OscConfig+0x280>)
 8001af8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001afc:	6093      	str	r3, [r2, #8]
 8001afe:	4b0c      	ldr	r3, [pc, #48]	@ (8001b30 <HAL_RCC_OscConfig+0x280>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b0a:	4909      	ldr	r1, [pc, #36]	@ (8001b30 <HAL_RCC_OscConfig+0x280>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b14:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001b18:	d30e      	bcc.n	8001b38 <HAL_RCC_OscConfig+0x288>
 8001b1a:	4b05      	ldr	r3, [pc, #20]	@ (8001b30 <HAL_RCC_OscConfig+0x280>)
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	f023 021f 	bic.w	r2, r3, #31
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	4902      	ldr	r1, [pc, #8]	@ (8001b30 <HAL_RCC_OscConfig+0x280>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	60cb      	str	r3, [r1, #12]
 8001b2c:	e04a      	b.n	8001bc4 <HAL_RCC_OscConfig+0x314>
 8001b2e:	bf00      	nop
 8001b30:	46020c00 	.word	0x46020c00
 8001b34:	20000004 	.word	0x20000004
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	da0a      	bge.n	8001b56 <HAL_RCC_OscConfig+0x2a6>
 8001b40:	4b98      	ldr	r3, [pc, #608]	@ (8001da4 <HAL_RCC_OscConfig+0x4f4>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
 8001b4c:	015b      	lsls	r3, r3, #5
 8001b4e:	4995      	ldr	r1, [pc, #596]	@ (8001da4 <HAL_RCC_OscConfig+0x4f4>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	60cb      	str	r3, [r1, #12]
 8001b54:	e036      	b.n	8001bc4 <HAL_RCC_OscConfig+0x314>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b5e:	d30a      	bcc.n	8001b76 <HAL_RCC_OscConfig+0x2c6>
 8001b60:	4b90      	ldr	r3, [pc, #576]	@ (8001da4 <HAL_RCC_OscConfig+0x4f4>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	029b      	lsls	r3, r3, #10
 8001b6e:	498d      	ldr	r1, [pc, #564]	@ (8001da4 <HAL_RCC_OscConfig+0x4f4>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	60cb      	str	r3, [r1, #12]
 8001b74:	e026      	b.n	8001bc4 <HAL_RCC_OscConfig+0x314>
 8001b76:	4b8b      	ldr	r3, [pc, #556]	@ (8001da4 <HAL_RCC_OscConfig+0x4f4>)
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	03db      	lsls	r3, r3, #15
 8001b84:	4987      	ldr	r1, [pc, #540]	@ (8001da4 <HAL_RCC_OscConfig+0x4f4>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	60cb      	str	r3, [r1, #12]
 8001b8a:	e01b      	b.n	8001bc4 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8001b8c:	4b85      	ldr	r3, [pc, #532]	@ (8001da4 <HAL_RCC_OscConfig+0x4f4>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a84      	ldr	r2, [pc, #528]	@ (8001da4 <HAL_RCC_OscConfig+0x4f4>)
 8001b92:	f023 0301 	bic.w	r3, r3, #1
 8001b96:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001b98:	f7ff fa5a 	bl	8001050 <HAL_GetTick>
 8001b9c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001b9e:	e009      	b.n	8001bb4 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ba0:	f7ff fa56 	bl	8001050 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d902      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	f000 bd53 	b.w	800265a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001bb4:	4b7b      	ldr	r3, [pc, #492]	@ (8001da4 <HAL_RCC_OscConfig+0x4f4>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1ef      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x2f0>
 8001bc0:	e000      	b.n	8001bc4 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001bc2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 808b 	beq.w	8001ce8 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	d005      	beq.n	8001be4 <HAL_RCC_OscConfig+0x334>
 8001bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bda:	2b0c      	cmp	r3, #12
 8001bdc:	d109      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	d106      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d17d      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	f000 bd34 	b.w	800265a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bfa:	d106      	bne.n	8001c0a <HAL_RCC_OscConfig+0x35a>
 8001bfc:	4b69      	ldr	r3, [pc, #420]	@ (8001da4 <HAL_RCC_OscConfig+0x4f4>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a68      	ldr	r2, [pc, #416]	@ (8001da4 <HAL_RCC_OscConfig+0x4f4>)
 8001c02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c06:	6013      	str	r3, [r2, #0]
 8001c08:	e041      	b.n	8001c8e <HAL_RCC_OscConfig+0x3de>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c12:	d112      	bne.n	8001c3a <HAL_RCC_OscConfig+0x38a>
 8001c14:	4b63      	ldr	r3, [pc, #396]	@ (8001da4 <HAL_RCC_OscConfig+0x4f4>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a62      	ldr	r2, [pc, #392]	@ (8001da4 <HAL_RCC_OscConfig+0x4f4>)
 8001c1a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	4b60      	ldr	r3, [pc, #384]	@ (8001da4 <HAL_RCC_OscConfig+0x4f4>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a5f      	ldr	r2, [pc, #380]	@ (8001da4 <HAL_RCC_OscConfig+0x4f4>)
 8001c26:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001c2a:	6013      	str	r3, [r2, #0]
 8001c2c:	4b5d      	ldr	r3, [pc, #372]	@ (8001da4 <HAL_RCC_OscConfig+0x4f4>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a5c      	ldr	r2, [pc, #368]	@ (8001da4 <HAL_RCC_OscConfig+0x4f4>)
 8001c32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c36:	6013      	str	r3, [r2, #0]
 8001c38:	e029      	b.n	8001c8e <HAL_RCC_OscConfig+0x3de>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001c42:	d112      	bne.n	8001c6a <HAL_RCC_OscConfig+0x3ba>
 8001c44:	4b57      	ldr	r3, [pc, #348]	@ (8001da4 <HAL_RCC_OscConfig+0x4f4>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a56      	ldr	r2, [pc, #344]	@ (8001da4 <HAL_RCC_OscConfig+0x4f4>)
 8001c4a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	4b54      	ldr	r3, [pc, #336]	@ (8001da4 <HAL_RCC_OscConfig+0x4f4>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a53      	ldr	r2, [pc, #332]	@ (8001da4 <HAL_RCC_OscConfig+0x4f4>)
 8001c56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	4b51      	ldr	r3, [pc, #324]	@ (8001da4 <HAL_RCC_OscConfig+0x4f4>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a50      	ldr	r2, [pc, #320]	@ (8001da4 <HAL_RCC_OscConfig+0x4f4>)
 8001c62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c66:	6013      	str	r3, [r2, #0]
 8001c68:	e011      	b.n	8001c8e <HAL_RCC_OscConfig+0x3de>
 8001c6a:	4b4e      	ldr	r3, [pc, #312]	@ (8001da4 <HAL_RCC_OscConfig+0x4f4>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a4d      	ldr	r2, [pc, #308]	@ (8001da4 <HAL_RCC_OscConfig+0x4f4>)
 8001c70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	4b4b      	ldr	r3, [pc, #300]	@ (8001da4 <HAL_RCC_OscConfig+0x4f4>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a4a      	ldr	r2, [pc, #296]	@ (8001da4 <HAL_RCC_OscConfig+0x4f4>)
 8001c7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	4b48      	ldr	r3, [pc, #288]	@ (8001da4 <HAL_RCC_OscConfig+0x4f4>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a47      	ldr	r2, [pc, #284]	@ (8001da4 <HAL_RCC_OscConfig+0x4f4>)
 8001c88:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001c8c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d014      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8001c96:	f7ff f9db 	bl	8001050 <HAL_GetTick>
 8001c9a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c9c:	e009      	b.n	8001cb2 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c9e:	f7ff f9d7 	bl	8001050 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b64      	cmp	r3, #100	@ 0x64
 8001caa:	d902      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	f000 bcd4 	b.w	800265a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cb2:	4b3c      	ldr	r3, [pc, #240]	@ (8001da4 <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0ef      	beq.n	8001c9e <HAL_RCC_OscConfig+0x3ee>
 8001cbe:	e013      	b.n	8001ce8 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8001cc0:	f7ff f9c6 	bl	8001050 <HAL_GetTick>
 8001cc4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cc6:	e009      	b.n	8001cdc <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc8:	f7ff f9c2 	bl	8001050 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b64      	cmp	r3, #100	@ 0x64
 8001cd4:	d902      	bls.n	8001cdc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	f000 bcbf 	b.w	800265a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cdc:	4b31      	ldr	r3, [pc, #196]	@ (8001da4 <HAL_RCC_OscConfig+0x4f4>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1ef      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d05f      	beq.n	8001db4 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	d005      	beq.n	8001d06 <HAL_RCC_OscConfig+0x456>
 8001cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cfc:	2b0c      	cmp	r3, #12
 8001cfe:	d114      	bne.n	8001d2a <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d111      	bne.n	8001d2a <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d102      	bne.n	8001d14 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	f000 bca3 	b.w	800265a <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001d14:	4b23      	ldr	r3, [pc, #140]	@ (8001da4 <HAL_RCC_OscConfig+0x4f4>)
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	041b      	lsls	r3, r3, #16
 8001d22:	4920      	ldr	r1, [pc, #128]	@ (8001da4 <HAL_RCC_OscConfig+0x4f4>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001d28:	e044      	b.n	8001db4 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d024      	beq.n	8001d7c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8001d32:	4b1c      	ldr	r3, [pc, #112]	@ (8001da4 <HAL_RCC_OscConfig+0x4f4>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a1b      	ldr	r2, [pc, #108]	@ (8001da4 <HAL_RCC_OscConfig+0x4f4>)
 8001d38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d3c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001d3e:	f7ff f987 	bl	8001050 <HAL_GetTick>
 8001d42:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d44:	e009      	b.n	8001d5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d46:	f7ff f983 	bl	8001050 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d902      	bls.n	8001d5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	f000 bc80 	b.w	800265a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d5a:	4b12      	ldr	r3, [pc, #72]	@ (8001da4 <HAL_RCC_OscConfig+0x4f4>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0ef      	beq.n	8001d46 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001d66:	4b0f      	ldr	r3, [pc, #60]	@ (8001da4 <HAL_RCC_OscConfig+0x4f4>)
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	041b      	lsls	r3, r3, #16
 8001d74:	490b      	ldr	r1, [pc, #44]	@ (8001da4 <HAL_RCC_OscConfig+0x4f4>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	610b      	str	r3, [r1, #16]
 8001d7a:	e01b      	b.n	8001db4 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8001d7c:	4b09      	ldr	r3, [pc, #36]	@ (8001da4 <HAL_RCC_OscConfig+0x4f4>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a08      	ldr	r2, [pc, #32]	@ (8001da4 <HAL_RCC_OscConfig+0x4f4>)
 8001d82:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d86:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001d88:	f7ff f962 	bl	8001050 <HAL_GetTick>
 8001d8c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d8e:	e00b      	b.n	8001da8 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d90:	f7ff f95e 	bl	8001050 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d904      	bls.n	8001da8 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	f000 bc5b 	b.w	800265a <HAL_RCC_OscConfig+0xdaa>
 8001da4:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001da8:	4baf      	ldr	r3, [pc, #700]	@ (8002068 <HAL_RCC_OscConfig+0x7b8>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1ed      	bne.n	8001d90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 80c8 	beq.w	8001f52 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dc8:	4ba7      	ldr	r3, [pc, #668]	@ (8002068 <HAL_RCC_OscConfig+0x7b8>)
 8001dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d111      	bne.n	8001dfa <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd6:	4ba4      	ldr	r3, [pc, #656]	@ (8002068 <HAL_RCC_OscConfig+0x7b8>)
 8001dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ddc:	4aa2      	ldr	r2, [pc, #648]	@ (8002068 <HAL_RCC_OscConfig+0x7b8>)
 8001dde:	f043 0304 	orr.w	r3, r3, #4
 8001de2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001de6:	4ba0      	ldr	r3, [pc, #640]	@ (8002068 <HAL_RCC_OscConfig+0x7b8>)
 8001de8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8001df4:	2301      	movs	r3, #1
 8001df6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001dfa:	4b9c      	ldr	r3, [pc, #624]	@ (800206c <HAL_RCC_OscConfig+0x7bc>)
 8001dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d119      	bne.n	8001e3a <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001e06:	4b99      	ldr	r3, [pc, #612]	@ (800206c <HAL_RCC_OscConfig+0x7bc>)
 8001e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e0a:	4a98      	ldr	r2, [pc, #608]	@ (800206c <HAL_RCC_OscConfig+0x7bc>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e12:	f7ff f91d 	bl	8001050 <HAL_GetTick>
 8001e16:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001e18:	e009      	b.n	8001e2e <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e1a:	f7ff f919 	bl	8001050 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d902      	bls.n	8001e2e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	f000 bc16 	b.w	800265a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001e2e:	4b8f      	ldr	r3, [pc, #572]	@ (800206c <HAL_RCC_OscConfig+0x7bc>)
 8001e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0ef      	beq.n	8001e1a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d05f      	beq.n	8001f02 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8001e42:	4b89      	ldr	r3, [pc, #548]	@ (8002068 <HAL_RCC_OscConfig+0x7b8>)
 8001e44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e48:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	699a      	ldr	r2, [r3, #24]
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
 8001e50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d037      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001e58:	6a3b      	ldr	r3, [r7, #32]
 8001e5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d006      	beq.n	8001e70 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8001e62:	6a3b      	ldr	r3, [r7, #32]
 8001e64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e3f4      	b.n	800265a <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8001e70:	6a3b      	ldr	r3, [r7, #32]
 8001e72:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d01b      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8001e7a:	4b7b      	ldr	r3, [pc, #492]	@ (8002068 <HAL_RCC_OscConfig+0x7b8>)
 8001e7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e80:	4a79      	ldr	r2, [pc, #484]	@ (8002068 <HAL_RCC_OscConfig+0x7b8>)
 8001e82:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8001e86:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8001e8a:	f7ff f8e1 	bl	8001050 <HAL_GetTick>
 8001e8e:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e92:	f7ff f8dd 	bl	8001050 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b05      	cmp	r3, #5
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e3da      	b.n	800265a <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001ea4:	4b70      	ldr	r3, [pc, #448]	@ (8002068 <HAL_RCC_OscConfig+0x7b8>)
 8001ea6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001eaa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1ef      	bne.n	8001e92 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8001eb2:	4b6d      	ldr	r3, [pc, #436]	@ (8002068 <HAL_RCC_OscConfig+0x7b8>)
 8001eb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001eb8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	4969      	ldr	r1, [pc, #420]	@ (8002068 <HAL_RCC_OscConfig+0x7b8>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8001ec8:	4b67      	ldr	r3, [pc, #412]	@ (8002068 <HAL_RCC_OscConfig+0x7b8>)
 8001eca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ece:	4a66      	ldr	r2, [pc, #408]	@ (8002068 <HAL_RCC_OscConfig+0x7b8>)
 8001ed0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001ed4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8001ed8:	f7ff f8ba 	bl	8001050 <HAL_GetTick>
 8001edc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee0:	f7ff f8b6 	bl	8001050 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b05      	cmp	r3, #5
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e3b3      	b.n	800265a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001ef2:	4b5d      	ldr	r3, [pc, #372]	@ (8002068 <HAL_RCC_OscConfig+0x7b8>)
 8001ef4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ef8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0ef      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x630>
 8001f00:	e01b      	b.n	8001f3a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8001f02:	4b59      	ldr	r3, [pc, #356]	@ (8002068 <HAL_RCC_OscConfig+0x7b8>)
 8001f04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f08:	4a57      	ldr	r2, [pc, #348]	@ (8002068 <HAL_RCC_OscConfig+0x7b8>)
 8001f0a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8001f0e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8001f12:	f7ff f89d 	bl	8001050 <HAL_GetTick>
 8001f16:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f1a:	f7ff f899 	bl	8001050 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b05      	cmp	r3, #5
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e396      	b.n	800265a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001f2c:	4b4e      	ldr	r3, [pc, #312]	@ (8002068 <HAL_RCC_OscConfig+0x7b8>)
 8001f2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1ef      	bne.n	8001f1a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f3a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d107      	bne.n	8001f52 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f42:	4b49      	ldr	r3, [pc, #292]	@ (8002068 <HAL_RCC_OscConfig+0x7b8>)
 8001f44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f48:	4a47      	ldr	r2, [pc, #284]	@ (8002068 <HAL_RCC_OscConfig+0x7b8>)
 8001f4a:	f023 0304 	bic.w	r3, r3, #4
 8001f4e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f000 8111 	beq.w	8002182 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8001f60:	2300      	movs	r3, #0
 8001f62:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f66:	4b40      	ldr	r3, [pc, #256]	@ (8002068 <HAL_RCC_OscConfig+0x7b8>)
 8001f68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d111      	bne.n	8001f98 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f74:	4b3c      	ldr	r3, [pc, #240]	@ (8002068 <HAL_RCC_OscConfig+0x7b8>)
 8001f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f7a:	4a3b      	ldr	r2, [pc, #236]	@ (8002068 <HAL_RCC_OscConfig+0x7b8>)
 8001f7c:	f043 0304 	orr.w	r3, r3, #4
 8001f80:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001f84:	4b38      	ldr	r3, [pc, #224]	@ (8002068 <HAL_RCC_OscConfig+0x7b8>)
 8001f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8001f92:	2301      	movs	r3, #1
 8001f94:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001f98:	4b34      	ldr	r3, [pc, #208]	@ (800206c <HAL_RCC_OscConfig+0x7bc>)
 8001f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d118      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001fa4:	4b31      	ldr	r3, [pc, #196]	@ (800206c <HAL_RCC_OscConfig+0x7bc>)
 8001fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa8:	4a30      	ldr	r2, [pc, #192]	@ (800206c <HAL_RCC_OscConfig+0x7bc>)
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fb0:	f7ff f84e 	bl	8001050 <HAL_GetTick>
 8001fb4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb8:	f7ff f84a 	bl	8001050 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e347      	b.n	800265a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001fca:	4b28      	ldr	r3, [pc, #160]	@ (800206c <HAL_RCC_OscConfig+0x7bc>)
 8001fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0f0      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d01f      	beq.n	8002022 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 0304 	and.w	r3, r3, #4
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d010      	beq.n	8002010 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001fee:	4b1e      	ldr	r3, [pc, #120]	@ (8002068 <HAL_RCC_OscConfig+0x7b8>)
 8001ff0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ff4:	4a1c      	ldr	r2, [pc, #112]	@ (8002068 <HAL_RCC_OscConfig+0x7b8>)
 8001ff6:	f043 0304 	orr.w	r3, r3, #4
 8001ffa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8002068 <HAL_RCC_OscConfig+0x7b8>)
 8002000:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002004:	4a18      	ldr	r2, [pc, #96]	@ (8002068 <HAL_RCC_OscConfig+0x7b8>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800200e:	e018      	b.n	8002042 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002010:	4b15      	ldr	r3, [pc, #84]	@ (8002068 <HAL_RCC_OscConfig+0x7b8>)
 8002012:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002016:	4a14      	ldr	r2, [pc, #80]	@ (8002068 <HAL_RCC_OscConfig+0x7b8>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002020:	e00f      	b.n	8002042 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002022:	4b11      	ldr	r3, [pc, #68]	@ (8002068 <HAL_RCC_OscConfig+0x7b8>)
 8002024:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002028:	4a0f      	ldr	r2, [pc, #60]	@ (8002068 <HAL_RCC_OscConfig+0x7b8>)
 800202a:	f023 0301 	bic.w	r3, r3, #1
 800202e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002032:	4b0d      	ldr	r3, [pc, #52]	@ (8002068 <HAL_RCC_OscConfig+0x7b8>)
 8002034:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002038:	4a0b      	ldr	r2, [pc, #44]	@ (8002068 <HAL_RCC_OscConfig+0x7b8>)
 800203a:	f023 0304 	bic.w	r3, r3, #4
 800203e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d057      	beq.n	80020fa <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800204a:	f7ff f801 	bl	8001050 <HAL_GetTick>
 800204e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002050:	e00e      	b.n	8002070 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002052:	f7fe fffd 	bl	8001050 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002060:	4293      	cmp	r3, r2
 8002062:	d905      	bls.n	8002070 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e2f8      	b.n	800265a <HAL_RCC_OscConfig+0xdaa>
 8002068:	46020c00 	.word	0x46020c00
 800206c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002070:	4b9c      	ldr	r3, [pc, #624]	@ (80022e4 <HAL_RCC_OscConfig+0xa34>)
 8002072:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0e9      	beq.n	8002052 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002086:	2b00      	cmp	r3, #0
 8002088:	d01b      	beq.n	80020c2 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800208a:	4b96      	ldr	r3, [pc, #600]	@ (80022e4 <HAL_RCC_OscConfig+0xa34>)
 800208c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002090:	4a94      	ldr	r2, [pc, #592]	@ (80022e4 <HAL_RCC_OscConfig+0xa34>)
 8002092:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002096:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800209a:	e00a      	b.n	80020b2 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800209c:	f7fe ffd8 	bl	8001050 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e2d3      	b.n	800265a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80020b2:	4b8c      	ldr	r3, [pc, #560]	@ (80022e4 <HAL_RCC_OscConfig+0xa34>)
 80020b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0ed      	beq.n	800209c <HAL_RCC_OscConfig+0x7ec>
 80020c0:	e053      	b.n	800216a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80020c2:	4b88      	ldr	r3, [pc, #544]	@ (80022e4 <HAL_RCC_OscConfig+0xa34>)
 80020c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020c8:	4a86      	ldr	r2, [pc, #536]	@ (80022e4 <HAL_RCC_OscConfig+0xa34>)
 80020ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80020ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80020d2:	e00a      	b.n	80020ea <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d4:	f7fe ffbc 	bl	8001050 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e2b7      	b.n	800265a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80020ea:	4b7e      	ldr	r3, [pc, #504]	@ (80022e4 <HAL_RCC_OscConfig+0xa34>)
 80020ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1ed      	bne.n	80020d4 <HAL_RCC_OscConfig+0x824>
 80020f8:	e037      	b.n	800216a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80020fa:	f7fe ffa9 	bl	8001050 <HAL_GetTick>
 80020fe:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002100:	e00a      	b.n	8002118 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002102:	f7fe ffa5 	bl	8001050 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002110:	4293      	cmp	r3, r2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e2a0      	b.n	800265a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002118:	4b72      	ldr	r3, [pc, #456]	@ (80022e4 <HAL_RCC_OscConfig+0xa34>)
 800211a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1ed      	bne.n	8002102 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002126:	4b6f      	ldr	r3, [pc, #444]	@ (80022e4 <HAL_RCC_OscConfig+0xa34>)
 8002128:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800212c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002130:	2b00      	cmp	r3, #0
 8002132:	d01a      	beq.n	800216a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002134:	4b6b      	ldr	r3, [pc, #428]	@ (80022e4 <HAL_RCC_OscConfig+0xa34>)
 8002136:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800213a:	4a6a      	ldr	r2, [pc, #424]	@ (80022e4 <HAL_RCC_OscConfig+0xa34>)
 800213c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002140:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002144:	e00a      	b.n	800215c <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002146:	f7fe ff83 	bl	8001050 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002154:	4293      	cmp	r3, r2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e27e      	b.n	800265a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800215c:	4b61      	ldr	r3, [pc, #388]	@ (80022e4 <HAL_RCC_OscConfig+0xa34>)
 800215e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002162:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1ed      	bne.n	8002146 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800216a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800216e:	2b01      	cmp	r3, #1
 8002170:	d107      	bne.n	8002182 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002172:	4b5c      	ldr	r3, [pc, #368]	@ (80022e4 <HAL_RCC_OscConfig+0xa34>)
 8002174:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002178:	4a5a      	ldr	r2, [pc, #360]	@ (80022e4 <HAL_RCC_OscConfig+0xa34>)
 800217a:	f023 0304 	bic.w	r3, r3, #4
 800217e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0320 	and.w	r3, r3, #32
 800218a:	2b00      	cmp	r3, #0
 800218c:	d036      	beq.n	80021fc <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002192:	2b00      	cmp	r3, #0
 8002194:	d019      	beq.n	80021ca <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8002196:	4b53      	ldr	r3, [pc, #332]	@ (80022e4 <HAL_RCC_OscConfig+0xa34>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a52      	ldr	r2, [pc, #328]	@ (80022e4 <HAL_RCC_OscConfig+0xa34>)
 800219c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021a0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80021a2:	f7fe ff55 	bl	8001050 <HAL_GetTick>
 80021a6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021aa:	f7fe ff51 	bl	8001050 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e24e      	b.n	800265a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80021bc:	4b49      	ldr	r3, [pc, #292]	@ (80022e4 <HAL_RCC_OscConfig+0xa34>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0f0      	beq.n	80021aa <HAL_RCC_OscConfig+0x8fa>
 80021c8:	e018      	b.n	80021fc <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80021ca:	4b46      	ldr	r3, [pc, #280]	@ (80022e4 <HAL_RCC_OscConfig+0xa34>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a45      	ldr	r2, [pc, #276]	@ (80022e4 <HAL_RCC_OscConfig+0xa34>)
 80021d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80021d4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80021d6:	f7fe ff3b 	bl	8001050 <HAL_GetTick>
 80021da:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021de:	f7fe ff37 	bl	8001050 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e234      	b.n	800265a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80021f0:	4b3c      	ldr	r3, [pc, #240]	@ (80022e4 <HAL_RCC_OscConfig+0xa34>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1f0      	bne.n	80021de <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002204:	2b00      	cmp	r3, #0
 8002206:	d036      	beq.n	8002276 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220c:	2b00      	cmp	r3, #0
 800220e:	d019      	beq.n	8002244 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8002210:	4b34      	ldr	r3, [pc, #208]	@ (80022e4 <HAL_RCC_OscConfig+0xa34>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a33      	ldr	r2, [pc, #204]	@ (80022e4 <HAL_RCC_OscConfig+0xa34>)
 8002216:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800221a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800221c:	f7fe ff18 	bl	8001050 <HAL_GetTick>
 8002220:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002224:	f7fe ff14 	bl	8001050 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e211      	b.n	800265a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002236:	4b2b      	ldr	r3, [pc, #172]	@ (80022e4 <HAL_RCC_OscConfig+0xa34>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0f0      	beq.n	8002224 <HAL_RCC_OscConfig+0x974>
 8002242:	e018      	b.n	8002276 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8002244:	4b27      	ldr	r3, [pc, #156]	@ (80022e4 <HAL_RCC_OscConfig+0xa34>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a26      	ldr	r2, [pc, #152]	@ (80022e4 <HAL_RCC_OscConfig+0xa34>)
 800224a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800224e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002250:	f7fe fefe 	bl	8001050 <HAL_GetTick>
 8002254:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002258:	f7fe fefa 	bl	8001050 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e1f7      	b.n	800265a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800226a:	4b1e      	ldr	r3, [pc, #120]	@ (80022e4 <HAL_RCC_OscConfig+0xa34>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f0      	bne.n	8002258 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800227e:	2b00      	cmp	r3, #0
 8002280:	d07f      	beq.n	8002382 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002286:	2b00      	cmp	r3, #0
 8002288:	d062      	beq.n	8002350 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800228a:	4b16      	ldr	r3, [pc, #88]	@ (80022e4 <HAL_RCC_OscConfig+0xa34>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	4a15      	ldr	r2, [pc, #84]	@ (80022e4 <HAL_RCC_OscConfig+0xa34>)
 8002290:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002294:	6093      	str	r3, [r2, #8]
 8002296:	4b13      	ldr	r3, [pc, #76]	@ (80022e4 <HAL_RCC_OscConfig+0xa34>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a2:	4910      	ldr	r1, [pc, #64]	@ (80022e4 <HAL_RCC_OscConfig+0xa34>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ac:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80022b0:	d309      	bcc.n	80022c6 <HAL_RCC_OscConfig+0xa16>
 80022b2:	4b0c      	ldr	r3, [pc, #48]	@ (80022e4 <HAL_RCC_OscConfig+0xa34>)
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	f023 021f 	bic.w	r2, r3, #31
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	4909      	ldr	r1, [pc, #36]	@ (80022e4 <HAL_RCC_OscConfig+0xa34>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	60cb      	str	r3, [r1, #12]
 80022c4:	e02a      	b.n	800231c <HAL_RCC_OscConfig+0xa6c>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	da0c      	bge.n	80022e8 <HAL_RCC_OscConfig+0xa38>
 80022ce:	4b05      	ldr	r3, [pc, #20]	@ (80022e4 <HAL_RCC_OscConfig+0xa34>)
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	015b      	lsls	r3, r3, #5
 80022dc:	4901      	ldr	r1, [pc, #4]	@ (80022e4 <HAL_RCC_OscConfig+0xa34>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	60cb      	str	r3, [r1, #12]
 80022e2:	e01b      	b.n	800231c <HAL_RCC_OscConfig+0xa6c>
 80022e4:	46020c00 	.word	0x46020c00
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022f0:	d30a      	bcc.n	8002308 <HAL_RCC_OscConfig+0xa58>
 80022f2:	4ba1      	ldr	r3, [pc, #644]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	029b      	lsls	r3, r3, #10
 8002300:	499d      	ldr	r1, [pc, #628]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 8002302:	4313      	orrs	r3, r2
 8002304:	60cb      	str	r3, [r1, #12]
 8002306:	e009      	b.n	800231c <HAL_RCC_OscConfig+0xa6c>
 8002308:	4b9b      	ldr	r3, [pc, #620]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	03db      	lsls	r3, r3, #15
 8002316:	4998      	ldr	r1, [pc, #608]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 8002318:	4313      	orrs	r3, r2
 800231a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800231c:	4b96      	ldr	r3, [pc, #600]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a95      	ldr	r2, [pc, #596]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 8002322:	f043 0310 	orr.w	r3, r3, #16
 8002326:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002328:	f7fe fe92 	bl	8001050 <HAL_GetTick>
 800232c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002330:	f7fe fe8e 	bl	8001050 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e18b      	b.n	800265a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002342:	4b8d      	ldr	r3, [pc, #564]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0320 	and.w	r3, r3, #32
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0f0      	beq.n	8002330 <HAL_RCC_OscConfig+0xa80>
 800234e:	e018      	b.n	8002382 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8002350:	4b89      	ldr	r3, [pc, #548]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a88      	ldr	r2, [pc, #544]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 8002356:	f023 0310 	bic.w	r3, r3, #16
 800235a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800235c:	f7fe fe78 	bl	8001050 <HAL_GetTick>
 8002360:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002364:	f7fe fe74 	bl	8001050 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e171      	b.n	800265a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002376:	4b80      	ldr	r3, [pc, #512]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0320 	and.w	r3, r3, #32
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f0      	bne.n	8002364 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 8166 	beq.w	8002658 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800238c:	2300      	movs	r3, #0
 800238e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002392:	4b79      	ldr	r3, [pc, #484]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	f003 030c 	and.w	r3, r3, #12
 800239a:	2b0c      	cmp	r3, #12
 800239c:	f000 80f2 	beq.w	8002584 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	f040 80c5 	bne.w	8002534 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80023aa:	4b73      	ldr	r3, [pc, #460]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a72      	ldr	r2, [pc, #456]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 80023b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023b4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80023b6:	f7fe fe4b 	bl	8001050 <HAL_GetTick>
 80023ba:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023be:	f7fe fe47 	bl	8001050 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e144      	b.n	800265a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80023d0:	4b69      	ldr	r3, [pc, #420]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1f0      	bne.n	80023be <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023dc:	4b66      	ldr	r3, [pc, #408]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 80023de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023e2:	f003 0304 	and.w	r3, r3, #4
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d111      	bne.n	800240e <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80023ea:	4b63      	ldr	r3, [pc, #396]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 80023ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023f0:	4a61      	ldr	r2, [pc, #388]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 80023f2:	f043 0304 	orr.w	r3, r3, #4
 80023f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80023fa:	4b5f      	ldr	r3, [pc, #380]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 80023fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8002408:	2301      	movs	r3, #1
 800240a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800240e:	4b5b      	ldr	r3, [pc, #364]	@ (800257c <HAL_RCC_OscConfig+0xccc>)
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002416:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800241a:	d102      	bne.n	8002422 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800241c:	2301      	movs	r3, #1
 800241e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002422:	4b56      	ldr	r3, [pc, #344]	@ (800257c <HAL_RCC_OscConfig+0xccc>)
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	4a55      	ldr	r2, [pc, #340]	@ (800257c <HAL_RCC_OscConfig+0xccc>)
 8002428:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800242c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800242e:	4b52      	ldr	r3, [pc, #328]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 8002430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002432:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002436:	f023 0303 	bic.w	r3, r3, #3
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002442:	3a01      	subs	r2, #1
 8002444:	0212      	lsls	r2, r2, #8
 8002446:	4311      	orrs	r1, r2
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800244c:	430a      	orrs	r2, r1
 800244e:	494a      	ldr	r1, [pc, #296]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 8002450:	4313      	orrs	r3, r2
 8002452:	628b      	str	r3, [r1, #40]	@ 0x28
 8002454:	4b48      	ldr	r3, [pc, #288]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 8002456:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002458:	4b49      	ldr	r3, [pc, #292]	@ (8002580 <HAL_RCC_OscConfig+0xcd0>)
 800245a:	4013      	ands	r3, r2
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002460:	3a01      	subs	r2, #1
 8002462:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800246a:	3a01      	subs	r2, #1
 800246c:	0252      	lsls	r2, r2, #9
 800246e:	b292      	uxth	r2, r2
 8002470:	4311      	orrs	r1, r2
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002476:	3a01      	subs	r2, #1
 8002478:	0412      	lsls	r2, r2, #16
 800247a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800247e:	4311      	orrs	r1, r2
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002484:	3a01      	subs	r2, #1
 8002486:	0612      	lsls	r2, r2, #24
 8002488:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800248c:	430a      	orrs	r2, r1
 800248e:	493a      	ldr	r1, [pc, #232]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 8002490:	4313      	orrs	r3, r2
 8002492:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002494:	4b38      	ldr	r3, [pc, #224]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 8002496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002498:	4a37      	ldr	r2, [pc, #220]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 800249a:	f023 0310 	bic.w	r3, r3, #16
 800249e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a4:	4a34      	ldr	r2, [pc, #208]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80024aa:	4b33      	ldr	r3, [pc, #204]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 80024ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ae:	4a32      	ldr	r2, [pc, #200]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 80024b0:	f043 0310 	orr.w	r3, r3, #16
 80024b4:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80024b6:	4b30      	ldr	r3, [pc, #192]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 80024b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ba:	f023 020c 	bic.w	r2, r3, #12
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c2:	492d      	ldr	r1, [pc, #180]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80024c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d105      	bne.n	80024dc <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80024d0:	4b2a      	ldr	r3, [pc, #168]	@ (800257c <HAL_RCC_OscConfig+0xccc>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	4a29      	ldr	r2, [pc, #164]	@ (800257c <HAL_RCC_OscConfig+0xccc>)
 80024d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024da:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80024dc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d107      	bne.n	80024f4 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80024e4:	4b24      	ldr	r3, [pc, #144]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 80024e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024ea:	4a23      	ldr	r2, [pc, #140]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 80024ec:	f023 0304 	bic.w	r3, r3, #4
 80024f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80024f4:	4b20      	ldr	r3, [pc, #128]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 80024f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f8:	4a1f      	ldr	r2, [pc, #124]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 80024fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024fe:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8002500:	4b1d      	ldr	r3, [pc, #116]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a1c      	ldr	r2, [pc, #112]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 8002506:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800250a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800250c:	f7fe fda0 	bl	8001050 <HAL_GetTick>
 8002510:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002514:	f7fe fd9c 	bl	8001050 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e099      	b.n	800265a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002526:	4b14      	ldr	r3, [pc, #80]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0f0      	beq.n	8002514 <HAL_RCC_OscConfig+0xc64>
 8002532:	e091      	b.n	8002658 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002534:	4b10      	ldr	r3, [pc, #64]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a0f      	ldr	r2, [pc, #60]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 800253a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800253e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002540:	f7fe fd86 	bl	8001050 <HAL_GetTick>
 8002544:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002548:	f7fe fd82 	bl	8001050 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e07f      	b.n	800265a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800255a:	4b07      	ldr	r3, [pc, #28]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f0      	bne.n	8002548 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002566:	4b04      	ldr	r3, [pc, #16]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 8002568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800256a:	4a03      	ldr	r2, [pc, #12]	@ (8002578 <HAL_RCC_OscConfig+0xcc8>)
 800256c:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002570:	f023 0303 	bic.w	r3, r3, #3
 8002574:	6293      	str	r3, [r2, #40]	@ 0x28
 8002576:	e06f      	b.n	8002658 <HAL_RCC_OscConfig+0xda8>
 8002578:	46020c00 	.word	0x46020c00
 800257c:	46020800 	.word	0x46020800
 8002580:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002584:	4b37      	ldr	r3, [pc, #220]	@ (8002664 <HAL_RCC_OscConfig+0xdb4>)
 8002586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002588:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800258a:	4b36      	ldr	r3, [pc, #216]	@ (8002664 <HAL_RCC_OscConfig+0xdb4>)
 800258c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800258e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002594:	2b01      	cmp	r3, #1
 8002596:	d039      	beq.n	800260c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	f003 0203 	and.w	r2, r3, #3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d132      	bne.n	800260c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	0a1b      	lsrs	r3, r3, #8
 80025aa:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b2:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d129      	bne.n	800260c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d122      	bne.n	800260c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025d0:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d11a      	bne.n	800260c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	0a5b      	lsrs	r3, r3, #9
 80025da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025e2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d111      	bne.n	800260c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	0c1b      	lsrs	r3, r3, #16
 80025ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025f4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d108      	bne.n	800260c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	0e1b      	lsrs	r3, r3, #24
 80025fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002606:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002608:	429a      	cmp	r2, r3
 800260a:	d001      	beq.n	8002610 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e024      	b.n	800265a <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002610:	4b14      	ldr	r3, [pc, #80]	@ (8002664 <HAL_RCC_OscConfig+0xdb4>)
 8002612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002614:	08db      	lsrs	r3, r3, #3
 8002616:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800261e:	429a      	cmp	r2, r3
 8002620:	d01a      	beq.n	8002658 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002622:	4b10      	ldr	r3, [pc, #64]	@ (8002664 <HAL_RCC_OscConfig+0xdb4>)
 8002624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002626:	4a0f      	ldr	r2, [pc, #60]	@ (8002664 <HAL_RCC_OscConfig+0xdb4>)
 8002628:	f023 0310 	bic.w	r3, r3, #16
 800262c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262e:	f7fe fd0f 	bl	8001050 <HAL_GetTick>
 8002632:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8002634:	bf00      	nop
 8002636:	f7fe fd0b 	bl	8001050 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800263e:	4293      	cmp	r3, r2
 8002640:	d0f9      	beq.n	8002636 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002646:	4a07      	ldr	r2, [pc, #28]	@ (8002664 <HAL_RCC_OscConfig+0xdb4>)
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800264c:	4b05      	ldr	r3, [pc, #20]	@ (8002664 <HAL_RCC_OscConfig+0xdb4>)
 800264e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002650:	4a04      	ldr	r2, [pc, #16]	@ (8002664 <HAL_RCC_OscConfig+0xdb4>)
 8002652:	f043 0310 	orr.w	r3, r3, #16
 8002656:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3738      	adds	r7, #56	@ 0x38
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	46020c00 	.word	0x46020c00

08002668 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e1d9      	b.n	8002a30 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800267c:	4b9b      	ldr	r3, [pc, #620]	@ (80028ec <HAL_RCC_ClockConfig+0x284>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 030f 	and.w	r3, r3, #15
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d910      	bls.n	80026ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268a:	4b98      	ldr	r3, [pc, #608]	@ (80028ec <HAL_RCC_ClockConfig+0x284>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f023 020f 	bic.w	r2, r3, #15
 8002692:	4996      	ldr	r1, [pc, #600]	@ (80028ec <HAL_RCC_ClockConfig+0x284>)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	4313      	orrs	r3, r2
 8002698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800269a:	4b94      	ldr	r3, [pc, #592]	@ (80028ec <HAL_RCC_ClockConfig+0x284>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d001      	beq.n	80026ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e1c1      	b.n	8002a30 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0310 	and.w	r3, r3, #16
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d010      	beq.n	80026da <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	695a      	ldr	r2, [r3, #20]
 80026bc:	4b8c      	ldr	r3, [pc, #560]	@ (80028f0 <HAL_RCC_ClockConfig+0x288>)
 80026be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d908      	bls.n	80026da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80026c8:	4b89      	ldr	r3, [pc, #548]	@ (80028f0 <HAL_RCC_ClockConfig+0x288>)
 80026ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026cc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	4986      	ldr	r1, [pc, #536]	@ (80028f0 <HAL_RCC_ClockConfig+0x288>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d012      	beq.n	800270c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691a      	ldr	r2, [r3, #16]
 80026ea:	4b81      	ldr	r3, [pc, #516]	@ (80028f0 <HAL_RCC_ClockConfig+0x288>)
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	091b      	lsrs	r3, r3, #4
 80026f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d909      	bls.n	800270c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80026f8:	4b7d      	ldr	r3, [pc, #500]	@ (80028f0 <HAL_RCC_ClockConfig+0x288>)
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	011b      	lsls	r3, r3, #4
 8002706:	497a      	ldr	r1, [pc, #488]	@ (80028f0 <HAL_RCC_ClockConfig+0x288>)
 8002708:	4313      	orrs	r3, r2
 800270a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d010      	beq.n	800273a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	4b74      	ldr	r3, [pc, #464]	@ (80028f0 <HAL_RCC_ClockConfig+0x288>)
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002724:	429a      	cmp	r2, r3
 8002726:	d908      	bls.n	800273a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002728:	4b71      	ldr	r3, [pc, #452]	@ (80028f0 <HAL_RCC_ClockConfig+0x288>)
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	496e      	ldr	r1, [pc, #440]	@ (80028f0 <HAL_RCC_ClockConfig+0x288>)
 8002736:	4313      	orrs	r3, r2
 8002738:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d010      	beq.n	8002768 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	4b69      	ldr	r3, [pc, #420]	@ (80028f0 <HAL_RCC_ClockConfig+0x288>)
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	429a      	cmp	r2, r3
 8002754:	d908      	bls.n	8002768 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002756:	4b66      	ldr	r3, [pc, #408]	@ (80028f0 <HAL_RCC_ClockConfig+0x288>)
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	f023 020f 	bic.w	r2, r3, #15
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	4963      	ldr	r1, [pc, #396]	@ (80028f0 <HAL_RCC_ClockConfig+0x288>)
 8002764:	4313      	orrs	r3, r2
 8002766:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 80d2 	beq.w	800291a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8002776:	2300      	movs	r3, #0
 8002778:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b03      	cmp	r3, #3
 8002780:	d143      	bne.n	800280a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002782:	4b5b      	ldr	r3, [pc, #364]	@ (80028f0 <HAL_RCC_ClockConfig+0x288>)
 8002784:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b00      	cmp	r3, #0
 800278e:	d110      	bne.n	80027b2 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002790:	4b57      	ldr	r3, [pc, #348]	@ (80028f0 <HAL_RCC_ClockConfig+0x288>)
 8002792:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002796:	4a56      	ldr	r2, [pc, #344]	@ (80028f0 <HAL_RCC_ClockConfig+0x288>)
 8002798:	f043 0304 	orr.w	r3, r3, #4
 800279c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80027a0:	4b53      	ldr	r3, [pc, #332]	@ (80028f0 <HAL_RCC_ClockConfig+0x288>)
 80027a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	60bb      	str	r3, [r7, #8]
 80027ac:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80027ae:	2301      	movs	r3, #1
 80027b0:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80027b2:	f7fe fc4d 	bl	8001050 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80027b8:	4b4e      	ldr	r3, [pc, #312]	@ (80028f4 <HAL_RCC_ClockConfig+0x28c>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00f      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80027c6:	f7fe fc43 	bl	8001050 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e12b      	b.n	8002a30 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80027d8:	4b46      	ldr	r3, [pc, #280]	@ (80028f4 <HAL_RCC_ClockConfig+0x28c>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f0      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80027e4:	7dfb      	ldrb	r3, [r7, #23]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d107      	bne.n	80027fa <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80027ea:	4b41      	ldr	r3, [pc, #260]	@ (80028f0 <HAL_RCC_ClockConfig+0x288>)
 80027ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027f0:	4a3f      	ldr	r2, [pc, #252]	@ (80028f0 <HAL_RCC_ClockConfig+0x288>)
 80027f2:	f023 0304 	bic.w	r3, r3, #4
 80027f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80027fa:	4b3d      	ldr	r3, [pc, #244]	@ (80028f0 <HAL_RCC_ClockConfig+0x288>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d121      	bne.n	800284a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e112      	b.n	8002a30 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b02      	cmp	r3, #2
 8002810:	d107      	bne.n	8002822 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002812:	4b37      	ldr	r3, [pc, #220]	@ (80028f0 <HAL_RCC_ClockConfig+0x288>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d115      	bne.n	800284a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e106      	b.n	8002a30 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d107      	bne.n	800283a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800282a:	4b31      	ldr	r3, [pc, #196]	@ (80028f0 <HAL_RCC_ClockConfig+0x288>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0304 	and.w	r3, r3, #4
 8002832:	2b00      	cmp	r3, #0
 8002834:	d109      	bne.n	800284a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e0fa      	b.n	8002a30 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800283a:	4b2d      	ldr	r3, [pc, #180]	@ (80028f0 <HAL_RCC_ClockConfig+0x288>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e0f2      	b.n	8002a30 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800284a:	4b29      	ldr	r3, [pc, #164]	@ (80028f0 <HAL_RCC_ClockConfig+0x288>)
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	f023 0203 	bic.w	r2, r3, #3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	4926      	ldr	r1, [pc, #152]	@ (80028f0 <HAL_RCC_ClockConfig+0x288>)
 8002858:	4313      	orrs	r3, r2
 800285a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800285c:	f7fe fbf8 	bl	8001050 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b03      	cmp	r3, #3
 8002868:	d112      	bne.n	8002890 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800286a:	e00a      	b.n	8002882 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800286c:	f7fe fbf0 	bl	8001050 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800287a:	4293      	cmp	r3, r2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e0d6      	b.n	8002a30 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002882:	4b1b      	ldr	r3, [pc, #108]	@ (80028f0 <HAL_RCC_ClockConfig+0x288>)
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	f003 030c 	and.w	r3, r3, #12
 800288a:	2b0c      	cmp	r3, #12
 800288c:	d1ee      	bne.n	800286c <HAL_RCC_ClockConfig+0x204>
 800288e:	e044      	b.n	800291a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d112      	bne.n	80028be <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002898:	e00a      	b.n	80028b0 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800289a:	f7fe fbd9 	bl	8001050 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e0bf      	b.n	8002a30 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80028b0:	4b0f      	ldr	r3, [pc, #60]	@ (80028f0 <HAL_RCC_ClockConfig+0x288>)
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	f003 030c 	and.w	r3, r3, #12
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d1ee      	bne.n	800289a <HAL_RCC_ClockConfig+0x232>
 80028bc:	e02d      	b.n	800291a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d123      	bne.n	800290e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80028c6:	e00a      	b.n	80028de <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c8:	f7fe fbc2 	bl	8001050 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e0a8      	b.n	8002a30 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80028de:	4b04      	ldr	r3, [pc, #16]	@ (80028f0 <HAL_RCC_ClockConfig+0x288>)
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	f003 030c 	and.w	r3, r3, #12
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1ee      	bne.n	80028c8 <HAL_RCC_ClockConfig+0x260>
 80028ea:	e016      	b.n	800291a <HAL_RCC_ClockConfig+0x2b2>
 80028ec:	40022000 	.word	0x40022000
 80028f0:	46020c00 	.word	0x46020c00
 80028f4:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f8:	f7fe fbaa 	bl	8001050 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002906:	4293      	cmp	r3, r2
 8002908:	d901      	bls.n	800290e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e090      	b.n	8002a30 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800290e:	4b4a      	ldr	r3, [pc, #296]	@ (8002a38 <HAL_RCC_ClockConfig+0x3d0>)
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	f003 030c 	and.w	r3, r3, #12
 8002916:	2b04      	cmp	r3, #4
 8002918:	d1ee      	bne.n	80028f8 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d010      	beq.n	8002948 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	4b43      	ldr	r3, [pc, #268]	@ (8002a38 <HAL_RCC_ClockConfig+0x3d0>)
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	429a      	cmp	r2, r3
 8002934:	d208      	bcs.n	8002948 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002936:	4b40      	ldr	r3, [pc, #256]	@ (8002a38 <HAL_RCC_ClockConfig+0x3d0>)
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	f023 020f 	bic.w	r2, r3, #15
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	493d      	ldr	r1, [pc, #244]	@ (8002a38 <HAL_RCC_ClockConfig+0x3d0>)
 8002944:	4313      	orrs	r3, r2
 8002946:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002948:	4b3c      	ldr	r3, [pc, #240]	@ (8002a3c <HAL_RCC_ClockConfig+0x3d4>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 030f 	and.w	r3, r3, #15
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d210      	bcs.n	8002978 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002956:	4b39      	ldr	r3, [pc, #228]	@ (8002a3c <HAL_RCC_ClockConfig+0x3d4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f023 020f 	bic.w	r2, r3, #15
 800295e:	4937      	ldr	r1, [pc, #220]	@ (8002a3c <HAL_RCC_ClockConfig+0x3d4>)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	4313      	orrs	r3, r2
 8002964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002966:	4b35      	ldr	r3, [pc, #212]	@ (8002a3c <HAL_RCC_ClockConfig+0x3d4>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	429a      	cmp	r2, r3
 8002972:	d001      	beq.n	8002978 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e05b      	b.n	8002a30 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	d010      	beq.n	80029a6 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68da      	ldr	r2, [r3, #12]
 8002988:	4b2b      	ldr	r3, [pc, #172]	@ (8002a38 <HAL_RCC_ClockConfig+0x3d0>)
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002990:	429a      	cmp	r2, r3
 8002992:	d208      	bcs.n	80029a6 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002994:	4b28      	ldr	r3, [pc, #160]	@ (8002a38 <HAL_RCC_ClockConfig+0x3d0>)
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	4925      	ldr	r1, [pc, #148]	@ (8002a38 <HAL_RCC_ClockConfig+0x3d0>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0308 	and.w	r3, r3, #8
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d012      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	691a      	ldr	r2, [r3, #16]
 80029b6:	4b20      	ldr	r3, [pc, #128]	@ (8002a38 <HAL_RCC_ClockConfig+0x3d0>)
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	091b      	lsrs	r3, r3, #4
 80029bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d209      	bcs.n	80029d8 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80029c4:	4b1c      	ldr	r3, [pc, #112]	@ (8002a38 <HAL_RCC_ClockConfig+0x3d0>)
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	4919      	ldr	r1, [pc, #100]	@ (8002a38 <HAL_RCC_ClockConfig+0x3d0>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0310 	and.w	r3, r3, #16
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d010      	beq.n	8002a06 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	695a      	ldr	r2, [r3, #20]
 80029e8:	4b13      	ldr	r3, [pc, #76]	@ (8002a38 <HAL_RCC_ClockConfig+0x3d0>)
 80029ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d208      	bcs.n	8002a06 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80029f4:	4b10      	ldr	r3, [pc, #64]	@ (8002a38 <HAL_RCC_ClockConfig+0x3d0>)
 80029f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	490d      	ldr	r1, [pc, #52]	@ (8002a38 <HAL_RCC_ClockConfig+0x3d0>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002a06:	f000 f821 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a38 <HAL_RCC_ClockConfig+0x3d0>)
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	f003 030f 	and.w	r3, r3, #15
 8002a14:	490a      	ldr	r1, [pc, #40]	@ (8002a40 <HAL_RCC_ClockConfig+0x3d8>)
 8002a16:	5ccb      	ldrb	r3, [r1, r3]
 8002a18:	fa22 f303 	lsr.w	r3, r2, r3
 8002a1c:	4a09      	ldr	r2, [pc, #36]	@ (8002a44 <HAL_RCC_ClockConfig+0x3dc>)
 8002a1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a20:	4b09      	ldr	r3, [pc, #36]	@ (8002a48 <HAL_RCC_ClockConfig+0x3e0>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7fe fac9 	bl	8000fbc <HAL_InitTick>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	73fb      	strb	r3, [r7, #15]

  return status;
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	46020c00 	.word	0x46020c00
 8002a3c:	40022000 	.word	0x40022000
 8002a40:	080073dc 	.word	0x080073dc
 8002a44:	20000000 	.word	0x20000000
 8002a48:	20000004 	.word	0x20000004

08002a4c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b08b      	sub	sp, #44	@ 0x2c
 8002a50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002a52:	2300      	movs	r3, #0
 8002a54:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a5a:	4b7b      	ldr	r3, [pc, #492]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	f003 030c 	and.w	r3, r3, #12
 8002a62:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a64:	4b78      	ldr	r3, [pc, #480]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d005      	beq.n	8002a80 <HAL_RCC_GetSysClockFreq+0x34>
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	2b0c      	cmp	r3, #12
 8002a78:	d121      	bne.n	8002abe <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d11e      	bne.n	8002abe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8002a80:	4b71      	ldr	r3, [pc, #452]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d107      	bne.n	8002a9c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002a8c:	4b6e      	ldr	r3, [pc, #440]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002a8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002a92:	0b1b      	lsrs	r3, r3, #12
 8002a94:	f003 030f 	and.w	r3, r3, #15
 8002a98:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a9a:	e005      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002a9c:	4b6a      	ldr	r3, [pc, #424]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	0f1b      	lsrs	r3, r3, #28
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002aa8:	4a68      	ldr	r2, [pc, #416]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab0:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d110      	bne.n	8002ada <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aba:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002abc:	e00d      	b.n	8002ada <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002abe:	4b62      	ldr	r3, [pc, #392]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d102      	bne.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002aca:	4b61      	ldr	r3, [pc, #388]	@ (8002c50 <HAL_RCC_GetSysClockFreq+0x204>)
 8002acc:	623b      	str	r3, [r7, #32]
 8002ace:	e004      	b.n	8002ada <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d101      	bne.n	8002ada <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ad6:	4b5e      	ldr	r3, [pc, #376]	@ (8002c50 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ad8:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	2b0c      	cmp	r3, #12
 8002ade:	f040 80ac 	bne.w	8002c3a <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002ae2:	4b59      	ldr	r3, [pc, #356]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002aec:	4b56      	ldr	r3, [pc, #344]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af0:	0a1b      	lsrs	r3, r3, #8
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	3301      	adds	r3, #1
 8002af8:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002afa:	4b53      	ldr	r3, [pc, #332]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002afe:	091b      	lsrs	r3, r3, #4
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002b06:	4b50      	ldr	r3, [pc, #320]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b0a:	08db      	lsrs	r3, r3, #3
 8002b0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	fb02 f303 	mul.w	r3, r2, r3
 8002b16:	ee07 3a90 	vmov	s15, r3
 8002b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b1e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 8086 	beq.w	8002c36 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d003      	beq.n	8002b38 <HAL_RCC_GetSysClockFreq+0xec>
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	2b03      	cmp	r3, #3
 8002b34:	d022      	beq.n	8002b7c <HAL_RCC_GetSysClockFreq+0x130>
 8002b36:	e043      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	ee07 3a90 	vmov	s15, r3
 8002b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b42:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8002c54 <HAL_RCC_GetSysClockFreq+0x208>
 8002b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b4a:	4b3f      	ldr	r3, [pc, #252]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b52:	ee07 3a90 	vmov	s15, r3
 8002b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002b5a:	ed97 6a01 	vldr	s12, [r7, #4]
 8002b5e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8002c58 <HAL_RCC_GetSysClockFreq+0x20c>
 8002b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002b6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b76:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002b7a:	e046      	b.n	8002c0a <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	ee07 3a90 	vmov	s15, r3
 8002b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b86:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8002c54 <HAL_RCC_GetSysClockFreq+0x208>
 8002b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b8e:	4b2e      	ldr	r3, [pc, #184]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002b90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b96:	ee07 3a90 	vmov	s15, r3
 8002b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002b9e:	ed97 6a01 	vldr	s12, [r7, #4]
 8002ba2:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8002c58 <HAL_RCC_GetSysClockFreq+0x20c>
 8002ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002bae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bba:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002bbe:	e024      	b.n	8002c0a <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc2:	ee07 3a90 	vmov	s15, r3
 8002bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	ee07 3a90 	vmov	s15, r3
 8002bd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002be0:	ee07 3a90 	vmov	s15, r3
 8002be4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002be8:	ed97 6a01 	vldr	s12, [r7, #4]
 8002bec:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8002c58 <HAL_RCC_GetSysClockFreq+0x20c>
 8002bf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002bf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002bf8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c04:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002c08:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c0e:	0e1b      	lsrs	r3, r3, #24
 8002c10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c14:	3301      	adds	r3, #1
 8002c16:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	ee07 3a90 	vmov	s15, r3
 8002c1e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c22:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c2e:	ee17 3a90 	vmov	r3, s15
 8002c32:	623b      	str	r3, [r7, #32]
 8002c34:	e001      	b.n	8002c3a <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8002c36:	2300      	movs	r3, #0
 8002c38:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	372c      	adds	r7, #44	@ 0x2c
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	46020c00 	.word	0x46020c00
 8002c4c:	080073f4 	.word	0x080073f4
 8002c50:	00f42400 	.word	0x00f42400
 8002c54:	4b742400 	.word	0x4b742400
 8002c58:	46000000 	.word	0x46000000

08002c5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002c60:	f7ff fef4 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 8002c64:	4602      	mov	r2, r0
 8002c66:	4b07      	ldr	r3, [pc, #28]	@ (8002c84 <HAL_RCC_GetHCLKFreq+0x28>)
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	4906      	ldr	r1, [pc, #24]	@ (8002c88 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002c70:	5ccb      	ldrb	r3, [r1, r3]
 8002c72:	fa22 f303 	lsr.w	r3, r2, r3
 8002c76:	4a05      	ldr	r2, [pc, #20]	@ (8002c8c <HAL_RCC_GetHCLKFreq+0x30>)
 8002c78:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8002c7a:	4b04      	ldr	r3, [pc, #16]	@ (8002c8c <HAL_RCC_GetHCLKFreq+0x30>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	46020c00 	.word	0x46020c00
 8002c88:	080073dc 	.word	0x080073dc
 8002c8c:	20000000 	.word	0x20000000

08002c90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8002c94:	f7ff ffe2 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	4b05      	ldr	r3, [pc, #20]	@ (8002cb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	091b      	lsrs	r3, r3, #4
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	4903      	ldr	r1, [pc, #12]	@ (8002cb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ca6:	5ccb      	ldrb	r3, [r1, r3]
 8002ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	46020c00 	.word	0x46020c00
 8002cb4:	080073ec 	.word	0x080073ec

08002cb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8002cbc:	f7ff ffce 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	4b05      	ldr	r3, [pc, #20]	@ (8002cd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	0a1b      	lsrs	r3, r3, #8
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	4903      	ldr	r1, [pc, #12]	@ (8002cdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cce:	5ccb      	ldrb	r3, [r1, r3]
 8002cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	46020c00 	.word	0x46020c00
 8002cdc:	080073ec 	.word	0x080073ec

08002ce0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8002ce4:	f7ff ffba 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	4b05      	ldr	r3, [pc, #20]	@ (8002d00 <HAL_RCC_GetPCLK3Freq+0x20>)
 8002cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cee:	091b      	lsrs	r3, r3, #4
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	4903      	ldr	r1, [pc, #12]	@ (8002d04 <HAL_RCC_GetPCLK3Freq+0x24>)
 8002cf6:	5ccb      	ldrb	r3, [r1, r3]
 8002cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	46020c00 	.word	0x46020c00
 8002d04:	080073ec 	.word	0x080073ec

08002d08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d10:	4b3e      	ldr	r3, [pc, #248]	@ (8002e0c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d16:	f003 0304 	and.w	r3, r3, #4
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d1e:	f7fe fd49 	bl	80017b4 <HAL_PWREx_GetVoltageRange>
 8002d22:	6178      	str	r0, [r7, #20]
 8002d24:	e019      	b.n	8002d5a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d26:	4b39      	ldr	r3, [pc, #228]	@ (8002e0c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002d28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d2c:	4a37      	ldr	r2, [pc, #220]	@ (8002e0c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002d2e:	f043 0304 	orr.w	r3, r3, #4
 8002d32:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002d36:	4b35      	ldr	r3, [pc, #212]	@ (8002e0c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002d38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d44:	f7fe fd36 	bl	80017b4 <HAL_PWREx_GetVoltageRange>
 8002d48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d4a:	4b30      	ldr	r3, [pc, #192]	@ (8002e0c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002d4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d50:	4a2e      	ldr	r2, [pc, #184]	@ (8002e0c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002d52:	f023 0304 	bic.w	r3, r3, #4
 8002d56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002d60:	d003      	beq.n	8002d6a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d68:	d109      	bne.n	8002d7e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d70:	d202      	bcs.n	8002d78 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8002d72:	2301      	movs	r3, #1
 8002d74:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002d76:	e033      	b.n	8002de0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8002d78:	2300      	movs	r3, #0
 8002d7a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002d7c:	e030      	b.n	8002de0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d84:	d208      	bcs.n	8002d98 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d8c:	d102      	bne.n	8002d94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8002d8e:	2303      	movs	r3, #3
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	e025      	b.n	8002de0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e035      	b.n	8002e04 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d9e:	d90f      	bls.n	8002dc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d109      	bne.n	8002dba <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002dac:	d902      	bls.n	8002db4 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8002dae:	2300      	movs	r3, #0
 8002db0:	613b      	str	r3, [r7, #16]
 8002db2:	e015      	b.n	8002de0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8002db4:	2301      	movs	r3, #1
 8002db6:	613b      	str	r3, [r7, #16]
 8002db8:	e012      	b.n	8002de0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8002dba:	2300      	movs	r3, #0
 8002dbc:	613b      	str	r3, [r7, #16]
 8002dbe:	e00f      	b.n	8002de0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002dc6:	d109      	bne.n	8002ddc <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dce:	d102      	bne.n	8002dd6 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	613b      	str	r3, [r7, #16]
 8002dd4:	e004      	b.n	8002de0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	613b      	str	r3, [r7, #16]
 8002dda:	e001      	b.n	8002de0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8002ddc:	2301      	movs	r3, #1
 8002dde:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002de0:	4b0b      	ldr	r3, [pc, #44]	@ (8002e10 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f023 020f 	bic.w	r2, r3, #15
 8002de8:	4909      	ldr	r1, [pc, #36]	@ (8002e10 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002df0:	4b07      	ldr	r3, [pc, #28]	@ (8002e10 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 030f 	and.w	r3, r3, #15
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d001      	beq.n	8002e02 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	46020c00 	.word	0x46020c00
 8002e10:	40022000 	.word	0x40022000

08002e14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e18:	b0c4      	sub	sp, #272	@ 0x110
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e20:	2300      	movs	r3, #0
 8002e22:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e26:	2300      	movs	r3, #0
 8002e28:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e34:	f002 0401 	and.w	r4, r2, #1
 8002e38:	2500      	movs	r5, #0
 8002e3a:	ea54 0305 	orrs.w	r3, r4, r5
 8002e3e:	d00b      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002e40:	4bd5      	ldr	r3, [pc, #852]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e46:	f023 0103 	bic.w	r1, r3, #3
 8002e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e50:	4ad1      	ldr	r2, [pc, #836]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e52:	430b      	orrs	r3, r1
 8002e54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e60:	f002 0802 	and.w	r8, r2, #2
 8002e64:	f04f 0900 	mov.w	r9, #0
 8002e68:	ea58 0309 	orrs.w	r3, r8, r9
 8002e6c:	d00b      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002e6e:	4bca      	ldr	r3, [pc, #808]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e74:	f023 010c 	bic.w	r1, r3, #12
 8002e78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e7e:	4ac6      	ldr	r2, [pc, #792]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e80:	430b      	orrs	r3, r1
 8002e82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8e:	f002 0a04 	and.w	sl, r2, #4
 8002e92:	f04f 0b00 	mov.w	fp, #0
 8002e96:	ea5a 030b 	orrs.w	r3, sl, fp
 8002e9a:	d00b      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002e9c:	4bbe      	ldr	r3, [pc, #760]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ea2:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002ea6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eac:	4aba      	ldr	r2, [pc, #744]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002eae:	430b      	orrs	r3, r1
 8002eb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002eb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ebc:	f002 0308 	and.w	r3, r2, #8
 8002ec0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002eca:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	d00b      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002ed4:	4bb0      	ldr	r3, [pc, #704]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002eda:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002ede:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ee2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee4:	4aac      	ldr	r2, [pc, #688]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002ee6:	430b      	orrs	r3, r1
 8002ee8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002eec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef4:	f002 0310 	and.w	r3, r2, #16
 8002ef8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002efc:	2300      	movs	r3, #0
 8002efe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002f02:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002f06:	460b      	mov	r3, r1
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	d00b      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002f0c:	4ba2      	ldr	r3, [pc, #648]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f12:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f1c:	4a9e      	ldr	r2, [pc, #632]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f1e:	430b      	orrs	r3, r1
 8002f20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002f24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8002f30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f34:	2300      	movs	r3, #0
 8002f36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f3a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4313      	orrs	r3, r2
 8002f42:	d00b      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8002f44:	4b94      	ldr	r3, [pc, #592]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f46:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002f4a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f54:	4a90      	ldr	r2, [pc, #576]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f56:	430b      	orrs	r3, r1
 8002f58:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f64:	f002 0320 	and.w	r3, r2, #32
 8002f68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002f72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002f76:	460b      	mov	r3, r1
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	d00b      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002f7c:	4b86      	ldr	r3, [pc, #536]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f82:	f023 0107 	bic.w	r1, r3, #7
 8002f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f8c:	4a82      	ldr	r2, [pc, #520]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f8e:	430b      	orrs	r3, r1
 8002f90:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f9c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8002fa0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002faa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	d00b      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002fb4:	4b78      	ldr	r3, [pc, #480]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fba:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8002fbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fc4:	4a74      	ldr	r2, [pc, #464]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002fc6:	430b      	orrs	r3, r1
 8002fc8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8002fd8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002fdc:	2300      	movs	r3, #0
 8002fde:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002fe2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	d00b      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002fec:	4b6a      	ldr	r3, [pc, #424]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ff2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002ff6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ffc:	4a66      	ldr	r2, [pc, #408]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002ffe:	430b      	orrs	r3, r1
 8003000:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003004:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800300c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8003010:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003014:	2300      	movs	r3, #0
 8003016:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800301a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800301e:	460b      	mov	r3, r1
 8003020:	4313      	orrs	r3, r2
 8003022:	d00b      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003024:	4b5c      	ldr	r3, [pc, #368]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003026:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800302a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800302e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003032:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003034:	4a58      	ldr	r2, [pc, #352]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003036:	430b      	orrs	r3, r1
 8003038:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800303c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003044:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003048:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800304c:	2300      	movs	r3, #0
 800304e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003052:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003056:	460b      	mov	r3, r1
 8003058:	4313      	orrs	r3, r2
 800305a:	d00b      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800305c:	4b4e      	ldr	r3, [pc, #312]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800305e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003062:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8003066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800306a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800306c:	4a4a      	ldr	r2, [pc, #296]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800306e:	430b      	orrs	r3, r1
 8003070:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8003074:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003080:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003084:	2300      	movs	r3, #0
 8003086:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800308a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800308e:	460b      	mov	r3, r1
 8003090:	4313      	orrs	r3, r2
 8003092:	d00b      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8003094:	4b40      	ldr	r3, [pc, #256]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003096:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800309a:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800309e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030a4:	4a3c      	ldr	r2, [pc, #240]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80030a6:	430b      	orrs	r3, r1
 80030a8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 80030ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80030b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80030bc:	2300      	movs	r3, #0
 80030be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80030c2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80030c6:	460b      	mov	r3, r1
 80030c8:	4313      	orrs	r3, r2
 80030ca:	d00c      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 80030cc:	4b32      	ldr	r3, [pc, #200]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80030ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80030d2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80030d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030de:	4a2e      	ldr	r2, [pc, #184]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80030e0:	430b      	orrs	r3, r1
 80030e2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ee:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80030f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80030f6:	2300      	movs	r3, #0
 80030f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80030fc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003100:	460b      	mov	r3, r1
 8003102:	4313      	orrs	r3, r2
 8003104:	d00c      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003106:	4b24      	ldr	r3, [pc, #144]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003108:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800310c:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8003110:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003114:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003118:	4a1f      	ldr	r2, [pc, #124]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800311a:	430b      	orrs	r3, r1
 800311c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003120:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003128:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800312c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003130:	2300      	movs	r3, #0
 8003132:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003136:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800313a:	460b      	mov	r3, r1
 800313c:	4313      	orrs	r3, r2
 800313e:	d00c      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003140:	4b15      	ldr	r3, [pc, #84]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003146:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800314a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800314e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003152:	4a11      	ldr	r2, [pc, #68]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003154:	430b      	orrs	r3, r1
 8003156:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800315a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800315e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003162:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003166:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800316a:	2300      	movs	r3, #0
 800316c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003170:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003174:	460b      	mov	r3, r1
 8003176:	4313      	orrs	r3, r2
 8003178:	d010      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800317a:	4b07      	ldr	r3, [pc, #28]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800317c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003180:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003184:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003188:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800318c:	4a02      	ldr	r2, [pc, #8]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800318e:	430b      	orrs	r3, r1
 8003190:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003194:	e002      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x388>
 8003196:	bf00      	nop
 8003198:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800319c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a4:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80031a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80031ac:	2300      	movs	r3, #0
 80031ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80031b2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80031b6:	460b      	mov	r3, r1
 80031b8:	4313      	orrs	r3, r2
 80031ba:	d04c      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80031bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80031c4:	2b80      	cmp	r3, #128	@ 0x80
 80031c6:	d02d      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80031c8:	2b80      	cmp	r3, #128	@ 0x80
 80031ca:	d827      	bhi.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x408>
 80031cc:	2b60      	cmp	r3, #96	@ 0x60
 80031ce:	d02b      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80031d0:	2b60      	cmp	r3, #96	@ 0x60
 80031d2:	d823      	bhi.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x408>
 80031d4:	2b40      	cmp	r3, #64	@ 0x40
 80031d6:	d006      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 80031d8:	2b40      	cmp	r3, #64	@ 0x40
 80031da:	d81f      	bhi.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x408>
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d009      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	d011      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80031e4:	e01a      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80031e6:	4bbe      	ldr	r3, [pc, #760]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ea:	4abd      	ldr	r2, [pc, #756]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031f0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80031f2:	e01a      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80031f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031f8:	3308      	adds	r3, #8
 80031fa:	4618      	mov	r0, r3
 80031fc:	f002 fc5c 	bl	8005ab8 <RCCEx_PLL2_Config>
 8003200:	4603      	mov	r3, r0
 8003202:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003206:	e010      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003208:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800320c:	332c      	adds	r3, #44	@ 0x2c
 800320e:	4618      	mov	r0, r3
 8003210:	f002 fcea 	bl	8005be8 <RCCEx_PLL3_Config>
 8003214:	4603      	mov	r3, r0
 8003216:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800321a:	e006      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8003222:	e002      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8003224:	bf00      	nop
 8003226:	e000      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8003228:	bf00      	nop
    }

    if (ret == HAL_OK)
 800322a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10d      	bne.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003232:	4bab      	ldr	r3, [pc, #684]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003234:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003238:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800323c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003240:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003244:	4aa6      	ldr	r2, [pc, #664]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003246:	430b      	orrs	r3, r1
 8003248:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800324c:	e003      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800324e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003252:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003256:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800325a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003262:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003266:	2300      	movs	r3, #0
 8003268:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800326c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003270:	460b      	mov	r3, r1
 8003272:	4313      	orrs	r3, r2
 8003274:	d053      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8003276:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800327a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800327e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003282:	d033      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8003284:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003288:	d82c      	bhi.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800328a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800328e:	d02f      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8003290:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003294:	d826      	bhi.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003296:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800329a:	d008      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800329c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032a0:	d820      	bhi.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00a      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80032a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032aa:	d011      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80032ac:	e01a      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80032ae:	4b8c      	ldr	r3, [pc, #560]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b2:	4a8b      	ldr	r2, [pc, #556]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032b8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80032ba:	e01a      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80032bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032c0:	3308      	adds	r3, #8
 80032c2:	4618      	mov	r0, r3
 80032c4:	f002 fbf8 	bl	8005ab8 <RCCEx_PLL2_Config>
 80032c8:	4603      	mov	r3, r0
 80032ca:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80032ce:	e010      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80032d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032d4:	332c      	adds	r3, #44	@ 0x2c
 80032d6:	4618      	mov	r0, r3
 80032d8:	f002 fc86 	bl	8005be8 <RCCEx_PLL3_Config>
 80032dc:	4603      	mov	r3, r0
 80032de:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80032e2:	e006      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80032ea:	e002      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 80032ec:	bf00      	nop
 80032ee:	e000      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 80032f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032f2:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10d      	bne.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80032fa:	4b79      	ldr	r3, [pc, #484]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003300:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003304:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003308:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800330c:	4a74      	ldr	r2, [pc, #464]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800330e:	430b      	orrs	r3, r1
 8003310:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003314:	e003      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003316:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800331a:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800331e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003326:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800332a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800332c:	2300      	movs	r3, #0
 800332e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003330:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003334:	460b      	mov	r3, r1
 8003336:	4313      	orrs	r3, r2
 8003338:	d046      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800333a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800333e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003342:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003346:	d028      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003348:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800334c:	d821      	bhi.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 800334e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003352:	d022      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003354:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003358:	d81b      	bhi.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 800335a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800335e:	d01c      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003360:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003364:	d815      	bhi.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8003366:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800336a:	d008      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x56a>
 800336c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003370:	d80f      	bhi.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8003372:	2b00      	cmp	r3, #0
 8003374:	d011      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003376:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800337a:	d00e      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x586>
 800337c:	e009      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800337e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003382:	3308      	adds	r3, #8
 8003384:	4618      	mov	r0, r3
 8003386:	f002 fb97 	bl	8005ab8 <RCCEx_PLL2_Config>
 800338a:	4603      	mov	r3, r0
 800338c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8003390:	e004      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x588>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8003398:	e000      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x588>
        break;
 800339a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800339c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10d      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80033a4:	4b4e      	ldr	r3, [pc, #312]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80033aa:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80033ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80033b6:	4a4a      	ldr	r2, [pc, #296]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033b8:	430b      	orrs	r3, r1
 80033ba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80033be:	e003      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80033c4:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80033c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80033d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80033d6:	2300      	movs	r3, #0
 80033d8:	677b      	str	r3, [r7, #116]	@ 0x74
 80033da:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80033de:	460b      	mov	r3, r1
 80033e0:	4313      	orrs	r3, r2
 80033e2:	d03f      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80033e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033ec:	2b04      	cmp	r3, #4
 80033ee:	d81e      	bhi.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x61a>
 80033f0:	a201      	add	r2, pc, #4	@ (adr r2, 80033f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80033f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f6:	bf00      	nop
 80033f8:	08003437 	.word	0x08003437
 80033fc:	0800340d 	.word	0x0800340d
 8003400:	0800341b 	.word	0x0800341b
 8003404:	08003437 	.word	0x08003437
 8003408:	08003437 	.word	0x08003437
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800340c:	4b34      	ldr	r3, [pc, #208]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800340e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003410:	4a33      	ldr	r2, [pc, #204]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003412:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003416:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003418:	e00e      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800341a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800341e:	332c      	adds	r3, #44	@ 0x2c
 8003420:	4618      	mov	r0, r3
 8003422:	f002 fbe1 	bl	8005be8 <RCCEx_PLL3_Config>
 8003426:	4603      	mov	r3, r0
 8003428:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800342c:	e004      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8003434:	e000      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x624>
        break;
 8003436:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003438:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10d      	bne.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8003440:	4b27      	ldr	r3, [pc, #156]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003442:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003446:	f023 0107 	bic.w	r1, r3, #7
 800344a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800344e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003452:	4a23      	ldr	r2, [pc, #140]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003454:	430b      	orrs	r3, r1
 8003456:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800345a:	e003      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x650>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800345c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003460:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003464:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800346c:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003470:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003472:	2300      	movs	r3, #0
 8003474:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003476:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800347a:	460b      	mov	r3, r1
 800347c:	4313      	orrs	r3, r2
 800347e:	d04c      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x706>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003480:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003484:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003488:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800348c:	d02a      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 800348e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003492:	d821      	bhi.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8003494:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003498:	d026      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 800349a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800349e:	d81b      	bhi.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 80034a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034a4:	d00e      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80034a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034aa:	d815      	bhi.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d01d      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 80034b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034b4:	d110      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80034b6:	4b0a      	ldr	r3, [pc, #40]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ba:	4a09      	ldr	r2, [pc, #36]	@ (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034c0:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80034c2:	e014      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80034c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034c8:	332c      	adds	r3, #44	@ 0x2c
 80034ca:	4618      	mov	r0, r3
 80034cc:	f002 fb8c 	bl	8005be8 <RCCEx_PLL3_Config>
 80034d0:	4603      	mov	r3, r0
 80034d2:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80034d6:	e00a      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80034de:	e006      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x6da>
 80034e0:	46020c00 	.word	0x46020c00
        break;
 80034e4:	bf00      	nop
 80034e6:	e002      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 80034e8:	bf00      	nop
 80034ea:	e000      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 80034ec:	bf00      	nop
    }
    if (ret == HAL_OK)
 80034ee:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10d      	bne.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80034f6:	4baf      	ldr	r3, [pc, #700]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80034f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80034fc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003500:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003504:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003508:	4aaa      	ldr	r2, [pc, #680]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800350a:	430b      	orrs	r3, r1
 800350c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003510:	e003      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x706>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003512:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003516:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800351a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800351e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003522:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003526:	663b      	str	r3, [r7, #96]	@ 0x60
 8003528:	2300      	movs	r3, #0
 800352a:	667b      	str	r3, [r7, #100]	@ 0x64
 800352c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003530:	460b      	mov	r3, r1
 8003532:	4313      	orrs	r3, r2
 8003534:	f000 80b5 	beq.w	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x88e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003538:	2300      	movs	r3, #0
 800353a:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800353e:	4b9d      	ldr	r3, [pc, #628]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003540:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003544:	f003 0304 	and.w	r3, r3, #4
 8003548:	2b00      	cmp	r3, #0
 800354a:	d113      	bne.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x760>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800354c:	4b99      	ldr	r3, [pc, #612]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800354e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003552:	4a98      	ldr	r2, [pc, #608]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003554:	f043 0304 	orr.w	r3, r3, #4
 8003558:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800355c:	4b95      	ldr	r3, [pc, #596]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800355e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003562:	f003 0304 	and.w	r3, r3, #4
 8003566:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800356a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
      pwrclkchanged = SET;
 800356e:	2301      	movs	r3, #1
 8003570:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003574:	4b90      	ldr	r3, [pc, #576]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8003576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003578:	4a8f      	ldr	r2, [pc, #572]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 800357a:	f043 0301 	orr.w	r3, r3, #1
 800357e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003580:	f7fd fd66 	bl	8001050 <HAL_GetTick>
 8003584:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003588:	e00b      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x78e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800358a:	f7fd fd61 	bl	8001050 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d903      	bls.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        ret = HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80035a0:	e005      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x79a>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80035a2:	4b85      	ldr	r3, [pc, #532]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 80035a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d0ed      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x776>
      }
    }

    if (ret == HAL_OK)
 80035ae:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d165      	bne.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035b6:	4b7f      	ldr	r3, [pc, #508]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80035b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80035bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035c0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80035c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d023      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x800>
 80035cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035d0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80035d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035d8:	4293      	cmp	r3, r2
 80035da:	d01b      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x800>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035dc:	4b75      	ldr	r3, [pc, #468]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80035de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80035e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035e6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035ea:	4b72      	ldr	r3, [pc, #456]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80035ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80035f0:	4a70      	ldr	r2, [pc, #448]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80035f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035fa:	4b6e      	ldr	r3, [pc, #440]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80035fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003600:	4a6c      	ldr	r2, [pc, #432]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003602:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003606:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800360a:	4a6a      	ldr	r2, [pc, #424]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800360c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003610:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003614:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b00      	cmp	r3, #0
 800361e:	d019      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x840>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003620:	f7fd fd16 	bl	8001050 <HAL_GetTick>
 8003624:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003628:	e00d      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x832>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800362a:	f7fd fd11 	bl	8001050 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003634:	1ad2      	subs	r2, r2, r3
 8003636:	f241 3388 	movw	r3, #5000	@ 0x1388
 800363a:	429a      	cmp	r2, r3
 800363c:	d903      	bls.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x832>
          {
            ret = HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
            break;
 8003644:	e006      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x840>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003646:	4b5b      	ldr	r3, [pc, #364]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003648:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0ea      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x816>
          }
        }
      }

      if (ret == HAL_OK)
 8003654:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10d      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x864>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800365c:	4b55      	ldr	r3, [pc, #340]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800365e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003662:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003666:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800366a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800366e:	4a51      	ldr	r2, [pc, #324]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003670:	430b      	orrs	r3, r1
 8003672:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003676:	e008      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003678:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800367c:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
 8003680:	e003      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003682:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003686:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800368a:	f897 3109 	ldrb.w	r3, [r7, #265]	@ 0x109
 800368e:	2b01      	cmp	r3, #1
 8003690:	d107      	bne.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x88e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003692:	4b48      	ldr	r3, [pc, #288]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003694:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003698:	4a46      	ldr	r2, [pc, #280]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800369a:	f023 0304 	bic.w	r3, r3, #4
 800369e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80036a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036aa:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80036ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80036b0:	2300      	movs	r3, #0
 80036b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80036b4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80036b8:	460b      	mov	r3, r1
 80036ba:	4313      	orrs	r3, r2
 80036bc:	d042      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80036be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80036c6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80036ca:	d022      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 80036cc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80036d0:	d81b      	bhi.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 80036d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036d6:	d011      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 80036d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036dc:	d815      	bhi.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d019      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x902>
 80036e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036e6:	d110      	bne.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036ec:	3308      	adds	r3, #8
 80036ee:	4618      	mov	r0, r3
 80036f0:	f002 f9e2 	bl	8005ab8 <RCCEx_PLL2_Config>
 80036f4:	4603      	mov	r3, r0
 80036f6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80036fa:	e00d      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036fc:	4b2d      	ldr	r3, [pc, #180]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80036fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003700:	4a2c      	ldr	r2, [pc, #176]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003702:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003706:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003708:	e006      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8003710:	e002      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8003712:	bf00      	nop
 8003714:	e000      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8003716:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003718:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10d      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x928>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8003720:	4b24      	ldr	r3, [pc, #144]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003726:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800372a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800372e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003732:	4a20      	ldr	r2, [pc, #128]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003734:	430b      	orrs	r3, r1
 8003736:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800373a:	e003      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800373c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003740:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003744:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003750:	653b      	str	r3, [r7, #80]	@ 0x50
 8003752:	2300      	movs	r3, #0
 8003754:	657b      	str	r3, [r7, #84]	@ 0x54
 8003756:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800375a:	460b      	mov	r3, r1
 800375c:	4313      	orrs	r3, r2
 800375e:	d031      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003760:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003764:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003768:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800376c:	d00b      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800376e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003772:	d804      	bhi.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003774:	2b00      	cmp	r3, #0
 8003776:	d008      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003778:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800377c:	d007      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x97a>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8003784:	e004      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8003786:	bf00      	nop
 8003788:	e002      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 800378a:	bf00      	nop
 800378c:	e000      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 800378e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003790:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003794:	2b00      	cmp	r3, #0
 8003796:	d111      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003798:	4b06      	ldr	r3, [pc, #24]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800379a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800379e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80037a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80037aa:	4a02      	ldr	r2, [pc, #8]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80037ac:	430b      	orrs	r3, r1
 80037ae:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80037b2:	e007      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 80037b4:	46020c00 	.word	0x46020c00
 80037b8:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037bc:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80037c0:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 80037c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037cc:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80037d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037d2:	2300      	movs	r3, #0
 80037d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037d6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80037da:	460b      	mov	r3, r1
 80037dc:	4313      	orrs	r3, r2
 80037de:	d00c      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 80037e0:	4bb2      	ldr	r3, [pc, #712]	@ (8003aac <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80037e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80037e6:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 80037ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80037f2:	4aae      	ldr	r2, [pc, #696]	@ (8003aac <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80037f4:	430b      	orrs	r3, r1
 80037f6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80037fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003802:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003806:	643b      	str	r3, [r7, #64]	@ 0x40
 8003808:	2300      	movs	r3, #0
 800380a:	647b      	str	r3, [r7, #68]	@ 0x44
 800380c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003810:	460b      	mov	r3, r1
 8003812:	4313      	orrs	r3, r2
 8003814:	d019      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8003816:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800381a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800381e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003822:	d105      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003824:	4ba1      	ldr	r3, [pc, #644]	@ (8003aac <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003828:	4aa0      	ldr	r2, [pc, #640]	@ (8003aac <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800382a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800382e:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8003830:	4b9e      	ldr	r3, [pc, #632]	@ (8003aac <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003832:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003836:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800383a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800383e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003842:	4a9a      	ldr	r2, [pc, #616]	@ (8003aac <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003844:	430b      	orrs	r3, r1
 8003846:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800384a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800384e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003852:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003856:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003858:	2300      	movs	r3, #0
 800385a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800385c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003860:	460b      	mov	r3, r1
 8003862:	4313      	orrs	r3, r2
 8003864:	d00c      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003866:	4b91      	ldr	r3, [pc, #580]	@ (8003aac <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800386c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003870:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003874:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003878:	4a8c      	ldr	r2, [pc, #560]	@ (8003aac <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800387a:	430b      	orrs	r3, r1
 800387c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003880:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003888:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800388c:	633b      	str	r3, [r7, #48]	@ 0x30
 800388e:	2300      	movs	r3, #0
 8003890:	637b      	str	r3, [r7, #52]	@ 0x34
 8003892:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003896:	460b      	mov	r3, r1
 8003898:	4313      	orrs	r3, r2
 800389a:	d00c      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800389c:	4b83      	ldr	r3, [pc, #524]	@ (8003aac <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800389e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038a2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80038a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038aa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80038ae:	4a7f      	ldr	r2, [pc, #508]	@ (8003aac <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80038b0:	430b      	orrs	r3, r1
 80038b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80038b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038be:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80038c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038c4:	2300      	movs	r3, #0
 80038c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038c8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80038cc:	460b      	mov	r3, r1
 80038ce:	4313      	orrs	r3, r2
 80038d0:	d00c      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0xad8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80038d2:	4b76      	ldr	r3, [pc, #472]	@ (8003aac <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80038d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80038d8:	f023 0218 	bic.w	r2, r3, #24
 80038dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038e0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80038e4:	4971      	ldr	r1, [pc, #452]	@ (8003aac <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80038ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f4:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80038f8:	623b      	str	r3, [r7, #32]
 80038fa:	2300      	movs	r3, #0
 80038fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80038fe:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003902:	460b      	mov	r3, r1
 8003904:	4313      	orrs	r3, r2
 8003906:	d032      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8003908:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800390c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003910:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003914:	d105      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003916:	4b65      	ldr	r3, [pc, #404]	@ (8003aac <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800391a:	4a64      	ldr	r2, [pc, #400]	@ (8003aac <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800391c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003920:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8003922:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003926:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800392a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800392e:	d108      	bne.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003930:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003934:	3308      	adds	r3, #8
 8003936:	4618      	mov	r0, r3
 8003938:	f002 f8be 	bl	8005ab8 <RCCEx_PLL2_Config>
 800393c:	4603      	mov	r3, r0
 800393e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
    }
    if (ret == HAL_OK)
 8003942:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10d      	bne.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0xb52>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800394a:	4b58      	ldr	r3, [pc, #352]	@ (8003aac <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800394c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003950:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003954:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003958:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800395c:	4953      	ldr	r1, [pc, #332]	@ (8003aac <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800395e:	4313      	orrs	r3, r2
 8003960:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003964:	e003      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003966:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800396a:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800396e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003976:	2100      	movs	r1, #0
 8003978:	61b9      	str	r1, [r7, #24]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	61fb      	str	r3, [r7, #28]
 8003980:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003984:	460b      	mov	r3, r1
 8003986:	4313      	orrs	r3, r2
 8003988:	d04a      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800398a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800398e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003992:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003996:	d01e      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 8003998:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800399c:	d825      	bhi.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 800399e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039a2:	d00e      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80039a4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039a8:	d81f      	bhi.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d021      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 80039ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039b2:	d11a      	bne.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039b4:	4b3d      	ldr	r3, [pc, #244]	@ (8003aac <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80039b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b8:	4a3c      	ldr	r2, [pc, #240]	@ (8003aac <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80039ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039be:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80039c0:	e018      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80039c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039c6:	3308      	adds	r3, #8
 80039c8:	4618      	mov	r0, r3
 80039ca:	f002 f875 	bl	8005ab8 <RCCEx_PLL2_Config>
 80039ce:	4603      	mov	r3, r0
 80039d0:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80039d4:	e00e      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80039d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039da:	332c      	adds	r3, #44	@ 0x2c
 80039dc:	4618      	mov	r0, r3
 80039de:	f002 f903 	bl	8005be8 <RCCEx_PLL3_Config>
 80039e2:	4603      	mov	r3, r0
 80039e4:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80039e8:	e004      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      default:
        ret = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80039f0:	e000      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        break;
 80039f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039f4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10d      	bne.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xc04>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 80039fc:	4b2b      	ldr	r3, [pc, #172]	@ (8003aac <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80039fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003a02:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a0a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003a0e:	4927      	ldr	r1, [pc, #156]	@ (8003aac <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003a16:	e003      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a18:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003a1c:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8003a20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a28:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8003a2c:	613b      	str	r3, [r7, #16]
 8003a2e:	2300      	movs	r3, #0
 8003a30:	617b      	str	r3, [r7, #20]
 8003a32:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003a36:	460b      	mov	r3, r1
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	d03d      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8003a3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a48:	d00e      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8003a4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a4e:	d815      	bhi.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d017      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003a54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a58:	d110      	bne.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xc68>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a5a:	4b14      	ldr	r3, [pc, #80]	@ (8003aac <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a5e:	4a13      	ldr	r2, [pc, #76]	@ (8003aac <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003a60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a64:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8003a66:	e00e      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a6c:	3308      	adds	r3, #8
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f002 f822 	bl	8005ab8 <RCCEx_PLL2_Config>
 8003a74:	4603      	mov	r3, r0
 8003a76:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8003a7a:	e004      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      default:
        ret = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8003a82:	e000      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0xc72>
        break;
 8003a84:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003a86:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d110      	bne.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8003a8e:	4b07      	ldr	r3, [pc, #28]	@ (8003aac <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a94:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003a98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aa0:	4902      	ldr	r1, [pc, #8]	@ (8003aac <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003aa8:	e006      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
 8003aaa:	bf00      	nop
 8003aac:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003ab4:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8003ab8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003ace:	460b      	mov	r3, r1
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	d00c      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0xcda>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8003ad4:	4b2c      	ldr	r3, [pc, #176]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8003ad6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003ada:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003ade:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ae2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003ae6:	4928      	ldr	r1, [pc, #160]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 8003aee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af6:	2100      	movs	r1, #0
 8003af8:	6039      	str	r1, [r7, #0]
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	607b      	str	r3, [r7, #4]
 8003b00:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003b04:	460b      	mov	r3, r1
 8003b06:	4313      	orrs	r3, r2
 8003b08:	d036      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 8003b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b0e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003b12:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003b16:	d00d      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003b18:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003b1c:	d811      	bhi.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8003b1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b22:	d012      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003b24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b28:	d80b      	bhi.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00d      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b32:	d106      	bne.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003b34:	4b14      	ldr	r3, [pc, #80]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8003b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b38:	4a13      	ldr	r2, [pc, #76]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8003b3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b3e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8003b40:	e004      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xd38>

      default:
        ret = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8003b48:	e000      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xd38>
        break;
 8003b4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b4c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10d      	bne.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8003b54:	4b0c      	ldr	r3, [pc, #48]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8003b56:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003b5a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003b5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b62:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003b66:	4908      	ldr	r1, [pc, #32]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003b6e:	e003      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b70:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003b74:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8003b78:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8003b82:	46bd      	mov	sp, r7
 8003b84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b88:	46020c00 	.word	0x46020c00

08003b8c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b089      	sub	sp, #36	@ 0x24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003b94:	4bad      	ldr	r3, [pc, #692]	@ (8003e4c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b9c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003b9e:	4bab      	ldr	r3, [pc, #684]	@ (8003e4c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003ba8:	4ba8      	ldr	r3, [pc, #672]	@ (8003e4c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bac:	0a1b      	lsrs	r3, r3, #8
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003bb6:	4ba5      	ldr	r3, [pc, #660]	@ (8003e4c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bba:	091b      	lsrs	r3, r3, #4
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003bc2:	4ba2      	ldr	r3, [pc, #648]	@ (8003e4c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc6:	08db      	lsrs	r3, r3, #3
 8003bc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	fb02 f303 	mul.w	r3, r2, r3
 8003bd2:	ee07 3a90 	vmov	s15, r3
 8003bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bda:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 8123 	beq.w	8003e2c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	2b03      	cmp	r3, #3
 8003bea:	d062      	beq.n	8003cb2 <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	2b03      	cmp	r3, #3
 8003bf0:	f200 8081 	bhi.w	8003cf6 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d024      	beq.n	8003c44 <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d17a      	bne.n	8003cf6 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	ee07 3a90 	vmov	s15, r3
 8003c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c0a:	eddf 6a91 	vldr	s13, [pc, #580]	@ 8003e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8003c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c12:	4b8e      	ldr	r3, [pc, #568]	@ (8003e4c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003c14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c1a:	ee07 3a90 	vmov	s15, r3
 8003c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c22:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c26:	eddf 5a8b 	vldr	s11, [pc, #556]	@ 8003e54 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c42:	e08f      	b.n	8003d64 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003c44:	4b81      	ldr	r3, [pc, #516]	@ (8003e4c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d005      	beq.n	8003c5c <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 8003c50:	4b7e      	ldr	r3, [pc, #504]	@ (8003e4c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	0f1b      	lsrs	r3, r3, #28
 8003c56:	f003 030f 	and.w	r3, r3, #15
 8003c5a:	e006      	b.n	8003c6a <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 8003c5c:	4b7b      	ldr	r3, [pc, #492]	@ (8003e4c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003c5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003c62:	041b      	lsls	r3, r3, #16
 8003c64:	0f1b      	lsrs	r3, r3, #28
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	4a7b      	ldr	r2, [pc, #492]	@ (8003e58 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8003c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c70:	ee07 3a90 	vmov	s15, r3
 8003c74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	ee07 3a90 	vmov	s15, r3
 8003c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	ee07 3a90 	vmov	s15, r3
 8003c8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c90:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c94:	eddf 5a6f 	vldr	s11, [pc, #444]	@ 8003e54 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003c98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ca0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ca4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cb0:	e058      	b.n	8003d64 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	ee07 3a90 	vmov	s15, r3
 8003cb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cbc:	eddf 6a64 	vldr	s13, [pc, #400]	@ 8003e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8003cc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cc4:	4b61      	ldr	r3, [pc, #388]	@ (8003e4c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ccc:	ee07 3a90 	vmov	s15, r3
 8003cd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003cd4:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cd8:	eddf 5a5e 	vldr	s11, [pc, #376]	@ 8003e54 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003cdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ce0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ce4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ce8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003cec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cf0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cf4:	e036      	b.n	8003d64 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003cf6:	4b55      	ldr	r3, [pc, #340]	@ (8003e4c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d005      	beq.n	8003d0e <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 8003d02:	4b52      	ldr	r3, [pc, #328]	@ (8003e4c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	0f1b      	lsrs	r3, r3, #28
 8003d08:	f003 030f 	and.w	r3, r3, #15
 8003d0c:	e006      	b.n	8003d1c <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 8003d0e:	4b4f      	ldr	r3, [pc, #316]	@ (8003e4c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003d10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003d14:	041b      	lsls	r3, r3, #16
 8003d16:	0f1b      	lsrs	r3, r3, #28
 8003d18:	f003 030f 	and.w	r3, r3, #15
 8003d1c:	4a4e      	ldr	r2, [pc, #312]	@ (8003e58 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8003d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d22:	ee07 3a90 	vmov	s15, r3
 8003d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	ee07 3a90 	vmov	s15, r3
 8003d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	ee07 3a90 	vmov	s15, r3
 8003d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d42:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d46:	eddf 5a43 	vldr	s11, [pc, #268]	@ 8003e54 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d62:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003d64:	4b39      	ldr	r3, [pc, #228]	@ (8003e4c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d017      	beq.n	8003da0 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003d70:	4b36      	ldr	r3, [pc, #216]	@ (8003e4c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003d72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d74:	0a5b      	lsrs	r3, r3, #9
 8003d76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d7a:	ee07 3a90 	vmov	s15, r3
 8003d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8003d82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d86:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003d8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d96:	ee17 2a90 	vmov	r2, s15
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	e002      	b.n	8003da6 <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8003da6:	4b29      	ldr	r3, [pc, #164]	@ (8003e4c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d017      	beq.n	8003de2 <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003db2:	4b26      	ldr	r3, [pc, #152]	@ (8003e4c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003db6:	0c1b      	lsrs	r3, r3, #16
 8003db8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dbc:	ee07 3a90 	vmov	s15, r3
 8003dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003dc4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003dc8:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003dcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dd8:	ee17 2a90 	vmov	r2, s15
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	605a      	str	r2, [r3, #4]
 8003de0:	e002      	b.n	8003de8 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8003de8:	4b18      	ldr	r3, [pc, #96]	@ (8003e4c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d017      	beq.n	8003e24 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003df4:	4b15      	ldr	r3, [pc, #84]	@ (8003e4c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003df6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003df8:	0e1b      	lsrs	r3, r3, #24
 8003dfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dfe:	ee07 3a90 	vmov	s15, r3
 8003e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8003e06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e0a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003e0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e1a:	ee17 2a90 	vmov	r2, s15
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003e22:	e00c      	b.n	8003e3e <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	609a      	str	r2, [r3, #8]
}
 8003e2a:	e008      	b.n	8003e3e <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	609a      	str	r2, [r3, #8]
}
 8003e3e:	bf00      	nop
 8003e40:	3724      	adds	r7, #36	@ 0x24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	46020c00 	.word	0x46020c00
 8003e50:	4b742400 	.word	0x4b742400
 8003e54:	46000000 	.word	0x46000000
 8003e58:	080073f4 	.word	0x080073f4

08003e5c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b089      	sub	sp, #36	@ 0x24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003e64:	4bad      	ldr	r3, [pc, #692]	@ (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e6c:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003e6e:	4bab      	ldr	r3, [pc, #684]	@ (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8003e78:	4ba8      	ldr	r3, [pc, #672]	@ (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7c:	0a1b      	lsrs	r3, r3, #8
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	3301      	adds	r3, #1
 8003e84:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8003e86:	4ba5      	ldr	r3, [pc, #660]	@ (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e8a:	091b      	lsrs	r3, r3, #4
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003e92:	4ba2      	ldr	r3, [pc, #648]	@ (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e96:	08db      	lsrs	r3, r3, #3
 8003e98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ea2:	ee07 3a90 	vmov	s15, r3
 8003ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eaa:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 8123 	beq.w	80040fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	2b03      	cmp	r3, #3
 8003eba:	d062      	beq.n	8003f82 <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	2b03      	cmp	r3, #3
 8003ec0:	f200 8081 	bhi.w	8003fc6 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d024      	beq.n	8003f14 <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d17a      	bne.n	8003fc6 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	ee07 3a90 	vmov	s15, r3
 8003ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eda:	eddf 6a91 	vldr	s13, [pc, #580]	@ 8004120 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ee2:	4b8e      	ldr	r3, [pc, #568]	@ (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eea:	ee07 3a90 	vmov	s15, r3
 8003eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ef2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ef6:	eddf 5a8b 	vldr	s11, [pc, #556]	@ 8004124 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003f02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f12:	e08f      	b.n	8004034 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003f14:	4b81      	ldr	r3, [pc, #516]	@ (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d005      	beq.n	8003f2c <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 8003f20:	4b7e      	ldr	r3, [pc, #504]	@ (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	0f1b      	lsrs	r3, r3, #28
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	e006      	b.n	8003f3a <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 8003f2c:	4b7b      	ldr	r3, [pc, #492]	@ (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003f2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003f32:	041b      	lsls	r3, r3, #16
 8003f34:	0f1b      	lsrs	r3, r3, #28
 8003f36:	f003 030f 	and.w	r3, r3, #15
 8003f3a:	4a7b      	ldr	r2, [pc, #492]	@ (8004128 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8003f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f40:	ee07 3a90 	vmov	s15, r3
 8003f44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	ee07 3a90 	vmov	s15, r3
 8003f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	ee07 3a90 	vmov	s15, r3
 8003f5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f60:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f64:	eddf 5a6f 	vldr	s11, [pc, #444]	@ 8004124 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003f68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f70:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f74:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003f78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f7c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f80:	e058      	b.n	8004034 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	ee07 3a90 	vmov	s15, r3
 8003f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f8c:	eddf 6a64 	vldr	s13, [pc, #400]	@ 8004120 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003f90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f94:	4b61      	ldr	r3, [pc, #388]	@ (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f9c:	ee07 3a90 	vmov	s15, r3
 8003fa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003fa4:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fa8:	eddf 5a5e 	vldr	s11, [pc, #376]	@ 8004124 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003fac:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003fb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003fb4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fc0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fc4:	e036      	b.n	8004034 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003fc6:	4b55      	ldr	r3, [pc, #340]	@ (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d005      	beq.n	8003fde <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 8003fd2:	4b52      	ldr	r3, [pc, #328]	@ (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	0f1b      	lsrs	r3, r3, #28
 8003fd8:	f003 030f 	and.w	r3, r3, #15
 8003fdc:	e006      	b.n	8003fec <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 8003fde:	4b4f      	ldr	r3, [pc, #316]	@ (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003fe0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003fe4:	041b      	lsls	r3, r3, #16
 8003fe6:	0f1b      	lsrs	r3, r3, #28
 8003fe8:	f003 030f 	and.w	r3, r3, #15
 8003fec:	4a4e      	ldr	r2, [pc, #312]	@ (8004128 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8003fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ff2:	ee07 3a90 	vmov	s15, r3
 8003ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	ee07 3a90 	vmov	s15, r3
 8004000:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004004:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	ee07 3a90 	vmov	s15, r3
 800400e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004012:	ed97 6a02 	vldr	s12, [r7, #8]
 8004016:	eddf 5a43 	vldr	s11, [pc, #268]	@ 8004124 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800401a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800401e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004022:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004026:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800402a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800402e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004032:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004034:	4b39      	ldr	r3, [pc, #228]	@ (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004038:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d017      	beq.n	8004070 <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004040:	4b36      	ldr	r3, [pc, #216]	@ (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004044:	0a5b      	lsrs	r3, r3, #9
 8004046:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800404a:	ee07 3a90 	vmov	s15, r3
 800404e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8004052:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004056:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800405a:	edd7 6a07 	vldr	s13, [r7, #28]
 800405e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004062:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004066:	ee17 2a90 	vmov	r2, s15
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	e002      	b.n	8004076 <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004076:	4b29      	ldr	r3, [pc, #164]	@ (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800407a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d017      	beq.n	80040b2 <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004082:	4b26      	ldr	r3, [pc, #152]	@ (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004086:	0c1b      	lsrs	r3, r3, #16
 8004088:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800408c:	ee07 3a90 	vmov	s15, r3
 8004090:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004094:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004098:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800409c:	edd7 6a07 	vldr	s13, [r7, #28]
 80040a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040a8:	ee17 2a90 	vmov	r2, s15
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	605a      	str	r2, [r3, #4]
 80040b0:	e002      	b.n	80040b8 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80040b8:	4b18      	ldr	r3, [pc, #96]	@ (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80040ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d017      	beq.n	80040f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80040c4:	4b15      	ldr	r3, [pc, #84]	@ (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80040c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c8:	0e1b      	lsrs	r3, r3, #24
 80040ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040ce:	ee07 3a90 	vmov	s15, r3
 80040d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80040d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80040da:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80040de:	edd7 6a07 	vldr	s13, [r7, #28]
 80040e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040ea:	ee17 2a90 	vmov	r2, s15
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80040f2:	e00c      	b.n	800410e <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	609a      	str	r2, [r3, #8]
}
 80040fa:	e008      	b.n	800410e <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	609a      	str	r2, [r3, #8]
}
 800410e:	bf00      	nop
 8004110:	3724      	adds	r7, #36	@ 0x24
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	46020c00 	.word	0x46020c00
 8004120:	4b742400 	.word	0x4b742400
 8004124:	46000000 	.word	0x46000000
 8004128:	080073f4 	.word	0x080073f4

0800412c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800412c:	b480      	push	{r7}
 800412e:	b089      	sub	sp, #36	@ 0x24
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8004134:	4bad      	ldr	r3, [pc, #692]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800413c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800413e:	4bab      	ldr	r3, [pc, #684]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8004148:	4ba8      	ldr	r3, [pc, #672]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800414a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414c:	0a1b      	lsrs	r3, r3, #8
 800414e:	f003 030f 	and.w	r3, r3, #15
 8004152:	3301      	adds	r3, #1
 8004154:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8004156:	4ba5      	ldr	r3, [pc, #660]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800415a:	091b      	lsrs	r3, r3, #4
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8004162:	4ba2      	ldr	r3, [pc, #648]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004164:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004166:	08db      	lsrs	r3, r3, #3
 8004168:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	fb02 f303 	mul.w	r3, r2, r3
 8004172:	ee07 3a90 	vmov	s15, r3
 8004176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800417a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 8123 	beq.w	80043cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	2b03      	cmp	r3, #3
 800418a:	d062      	beq.n	8004252 <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	2b03      	cmp	r3, #3
 8004190:	f200 8081 	bhi.w	8004296 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d024      	beq.n	80041e4 <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	2b02      	cmp	r3, #2
 800419e:	d17a      	bne.n	8004296 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	ee07 3a90 	vmov	s15, r3
 80041a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041aa:	eddf 6a91 	vldr	s13, [pc, #580]	@ 80043f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80041ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041b2:	4b8e      	ldr	r3, [pc, #568]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80041b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ba:	ee07 3a90 	vmov	s15, r3
 80041be:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80041c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80041c6:	eddf 5a8b 	vldr	s11, [pc, #556]	@ 80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80041ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80041ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80041d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80041da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041de:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 80041e2:	e08f      	b.n	8004304 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80041e4:	4b81      	ldr	r3, [pc, #516]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d005      	beq.n	80041fc <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 80041f0:	4b7e      	ldr	r3, [pc, #504]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	0f1b      	lsrs	r3, r3, #28
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	e006      	b.n	800420a <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 80041fc:	4b7b      	ldr	r3, [pc, #492]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80041fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004202:	041b      	lsls	r3, r3, #16
 8004204:	0f1b      	lsrs	r3, r3, #28
 8004206:	f003 030f 	and.w	r3, r3, #15
 800420a:	4a7b      	ldr	r2, [pc, #492]	@ (80043f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 800420c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004210:	ee07 3a90 	vmov	s15, r3
 8004214:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	ee07 3a90 	vmov	s15, r3
 800421e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	ee07 3a90 	vmov	s15, r3
 800422c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004230:	ed97 6a02 	vldr	s12, [r7, #8]
 8004234:	eddf 5a6f 	vldr	s11, [pc, #444]	@ 80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004238:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800423c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004240:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004244:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800424c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004250:	e058      	b.n	8004304 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	ee07 3a90 	vmov	s15, r3
 8004258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800425c:	eddf 6a64 	vldr	s13, [pc, #400]	@ 80043f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8004260:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004264:	4b61      	ldr	r3, [pc, #388]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800426c:	ee07 3a90 	vmov	s15, r3
 8004270:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004274:	ed97 6a02 	vldr	s12, [r7, #8]
 8004278:	eddf 5a5e 	vldr	s11, [pc, #376]	@ 80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800427c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004280:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004284:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004288:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800428c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004290:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004294:	e036      	b.n	8004304 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004296:	4b55      	ldr	r3, [pc, #340]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d005      	beq.n	80042ae <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 80042a2:	4b52      	ldr	r3, [pc, #328]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	0f1b      	lsrs	r3, r3, #28
 80042a8:	f003 030f 	and.w	r3, r3, #15
 80042ac:	e006      	b.n	80042bc <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 80042ae:	4b4f      	ldr	r3, [pc, #316]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80042b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80042b4:	041b      	lsls	r3, r3, #16
 80042b6:	0f1b      	lsrs	r3, r3, #28
 80042b8:	f003 030f 	and.w	r3, r3, #15
 80042bc:	4a4e      	ldr	r2, [pc, #312]	@ (80043f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 80042be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042c2:	ee07 3a90 	vmov	s15, r3
 80042c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	ee07 3a90 	vmov	s15, r3
 80042d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	ee07 3a90 	vmov	s15, r3
 80042de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80042e6:	eddf 5a43 	vldr	s11, [pc, #268]	@ 80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80042ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80042fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004302:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8004304:	4b39      	ldr	r3, [pc, #228]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004308:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d017      	beq.n	8004340 <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004310:	4b36      	ldr	r3, [pc, #216]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004314:	0a5b      	lsrs	r3, r3, #9
 8004316:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800431a:	ee07 3a90 	vmov	s15, r3
 800431e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8004322:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004326:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800432a:	edd7 6a07 	vldr	s13, [r7, #28]
 800432e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004332:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004336:	ee17 2a90 	vmov	r2, s15
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	e002      	b.n	8004346 <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8004346:	4b29      	ldr	r3, [pc, #164]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d017      	beq.n	8004382 <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004352:	4b26      	ldr	r3, [pc, #152]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004356:	0c1b      	lsrs	r3, r3, #16
 8004358:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800435c:	ee07 3a90 	vmov	s15, r3
 8004360:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8004364:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004368:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800436c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004370:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004374:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004378:	ee17 2a90 	vmov	r2, s15
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	605a      	str	r2, [r3, #4]
 8004380:	e002      	b.n	8004388 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8004388:	4b18      	ldr	r3, [pc, #96]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800438a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d017      	beq.n	80043c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004394:	4b15      	ldr	r3, [pc, #84]	@ (80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004398:	0e1b      	lsrs	r3, r3, #24
 800439a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800439e:	ee07 3a90 	vmov	s15, r3
 80043a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80043a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80043aa:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80043ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80043b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043ba:	ee17 2a90 	vmov	r2, s15
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80043c2:	e00c      	b.n	80043de <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	609a      	str	r2, [r3, #8]
}
 80043ca:	e008      	b.n	80043de <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	609a      	str	r2, [r3, #8]
}
 80043de:	bf00      	nop
 80043e0:	3724      	adds	r7, #36	@ 0x24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	46020c00 	.word	0x46020c00
 80043f0:	4b742400 	.word	0x4b742400
 80043f4:	46000000 	.word	0x46000000
 80043f8:	080073f4 	.word	0x080073f4

080043fc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b08e      	sub	sp, #56	@ 0x38
 8004400:	af00      	add	r7, sp, #0
 8004402:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8004406:	e9d7 2300 	ldrd	r2, r3, [r7]
 800440a:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800440e:	430b      	orrs	r3, r1
 8004410:	d145      	bne.n	800449e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004412:	4ba7      	ldr	r3, [pc, #668]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004414:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004418:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800441c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800441e:	4ba4      	ldr	r3, [pc, #656]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004420:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b02      	cmp	r3, #2
 800442a:	d108      	bne.n	800443e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800442c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800442e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004432:	d104      	bne.n	800443e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8004434:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004438:	637b      	str	r3, [r7, #52]	@ 0x34
 800443a:	f001 bb31 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800443e:	4b9c      	ldr	r3, [pc, #624]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004440:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004444:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004448:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800444c:	d114      	bne.n	8004478 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800444e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004450:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004454:	d110      	bne.n	8004478 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004456:	4b96      	ldr	r3, [pc, #600]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004458:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800445c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004460:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004464:	d103      	bne.n	800446e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8004466:	23fa      	movs	r3, #250	@ 0xfa
 8004468:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800446a:	f001 bb19 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 800446e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004472:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004474:	f001 bb14 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8004478:	4b8d      	ldr	r3, [pc, #564]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004480:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004484:	d107      	bne.n	8004496 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8004486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004488:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800448c:	d103      	bne.n	8004496 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800448e:	4b89      	ldr	r3, [pc, #548]	@ (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004490:	637b      	str	r3, [r7, #52]	@ 0x34
 8004492:	f001 bb05 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004496:	2300      	movs	r3, #0
 8004498:	637b      	str	r3, [r7, #52]	@ 0x34
 800449a:	f001 bb01 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800449e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044a2:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80044a6:	430b      	orrs	r3, r1
 80044a8:	d151      	bne.n	800454e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80044aa:	4b81      	ldr	r3, [pc, #516]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80044ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80044b0:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80044b4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80044b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b8:	2b80      	cmp	r3, #128	@ 0x80
 80044ba:	d035      	beq.n	8004528 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80044bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044be:	2b80      	cmp	r3, #128	@ 0x80
 80044c0:	d841      	bhi.n	8004546 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80044c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c4:	2b60      	cmp	r3, #96	@ 0x60
 80044c6:	d02a      	beq.n	800451e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80044c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ca:	2b60      	cmp	r3, #96	@ 0x60
 80044cc:	d83b      	bhi.n	8004546 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80044ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d0:	2b40      	cmp	r3, #64	@ 0x40
 80044d2:	d009      	beq.n	80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80044d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d6:	2b40      	cmp	r3, #64	@ 0x40
 80044d8:	d835      	bhi.n	8004546 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80044da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00c      	beq.n	80044fa <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80044e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e2:	2b20      	cmp	r3, #32
 80044e4:	d012      	beq.n	800450c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80044e6:	e02e      	b.n	8004546 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80044e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7ff fb4d 	bl	8003b8c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80044f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80044f6:	f001 bad3 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80044fa:	f107 0318 	add.w	r3, r7, #24
 80044fe:	4618      	mov	r0, r3
 8004500:	f7ff fcac 	bl	8003e5c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004508:	f001 baca 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800450c:	f107 030c 	add.w	r3, r7, #12
 8004510:	4618      	mov	r0, r3
 8004512:	f7ff fe0b 	bl	800412c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800451a:	f001 bac1 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800451e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004522:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004524:	f001 babc 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004528:	4b61      	ldr	r3, [pc, #388]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004530:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004534:	d103      	bne.n	800453e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8004536:	4b60      	ldr	r3, [pc, #384]	@ (80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004538:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800453a:	f001 bab1 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800453e:	2300      	movs	r3, #0
 8004540:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004542:	f001 baad 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :
      {
        frequency = 0U;
 8004546:	2300      	movs	r3, #0
 8004548:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800454a:	f001 baa9 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800454e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004552:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8004556:	430b      	orrs	r3, r1
 8004558:	d158      	bne.n	800460c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800455a:	4b55      	ldr	r3, [pc, #340]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800455c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004560:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004564:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004568:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800456c:	d03b      	beq.n	80045e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800456e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004570:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004574:	d846      	bhi.n	8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004578:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800457c:	d02e      	beq.n	80045dc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800457e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004580:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004584:	d83e      	bhi.n	8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004588:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800458c:	d00b      	beq.n	80045a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800458e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004590:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004594:	d836      	bhi.n	8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00d      	beq.n	80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800459c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800459e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045a2:	d012      	beq.n	80045ca <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80045a4:	e02e      	b.n	8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80045a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7ff faee 	bl	8003b8c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80045b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80045b4:	f001 ba74 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80045b8:	f107 0318 	add.w	r3, r7, #24
 80045bc:	4618      	mov	r0, r3
 80045be:	f7ff fc4d 	bl	8003e5c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80045c6:	f001 ba6b 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80045ca:	f107 030c 	add.w	r3, r7, #12
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7ff fdac 	bl	800412c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80045d8:	f001 ba62 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80045dc:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80045e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80045e2:	f001 ba5d 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80045e6:	4b32      	ldr	r3, [pc, #200]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045f2:	d103      	bne.n	80045fc <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80045f4:	4b30      	ldr	r3, [pc, #192]	@ (80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80045f6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80045f8:	f001 ba52 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004600:	f001 ba4e 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 8004604:	2300      	movs	r3, #0
 8004606:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004608:	f001 ba4a 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800460c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004610:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8004614:	430b      	orrs	r3, r1
 8004616:	d126      	bne.n	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8004618:	4b25      	ldr	r3, [pc, #148]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800461a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800461e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004622:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8004624:	4b22      	ldr	r3, [pc, #136]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800462c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004630:	d106      	bne.n	8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8004632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004634:	2b00      	cmp	r3, #0
 8004636:	d103      	bne.n	8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8004638:	4b1f      	ldr	r3, [pc, #124]	@ (80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800463a:	637b      	str	r3, [r7, #52]	@ 0x34
 800463c:	f001 ba30 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8004640:	4b1b      	ldr	r3, [pc, #108]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004648:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800464c:	d107      	bne.n	800465e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800464e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004650:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004654:	d103      	bne.n	800465e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8004656:	4b19      	ldr	r3, [pc, #100]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004658:	637b      	str	r3, [r7, #52]	@ 0x34
 800465a:	f001 ba21 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800465e:	2300      	movs	r3, #0
 8004660:	637b      	str	r3, [r7, #52]	@ 0x34
 8004662:	f001 ba1d 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8004666:	e9d7 2300 	ldrd	r2, r3, [r7]
 800466a:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800466e:	430b      	orrs	r3, r1
 8004670:	d16e      	bne.n	8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004672:	4b0f      	ldr	r3, [pc, #60]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004678:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800467c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800467e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004680:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004684:	d03d      	beq.n	8004702 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8004686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004688:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800468c:	d85c      	bhi.n	8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800468e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004690:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004694:	d014      	beq.n	80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8004696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004698:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800469c:	d854      	bhi.n	8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800469e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d01f      	beq.n	80046e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80046a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046aa:	d012      	beq.n	80046d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80046ac:	e04c      	b.n	8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80046ae:	bf00      	nop
 80046b0:	46020c00 	.word	0x46020c00
 80046b4:	0007a120 	.word	0x0007a120
 80046b8:	00f42400 	.word	0x00f42400
 80046bc:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80046c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7ff fa61 	bl	8003b8c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80046ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80046ce:	f001 b9e7 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80046d2:	f107 0318 	add.w	r3, r7, #24
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7ff fbc0 	bl	8003e5c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80046e0:	f001 b9de 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80046e4:	4ba7      	ldr	r3, [pc, #668]	@ (8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046f0:	d103      	bne.n	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 80046f2:	4ba5      	ldr	r3, [pc, #660]	@ (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80046f4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80046f6:	f001 b9d3 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80046fa:	2300      	movs	r3, #0
 80046fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80046fe:	f001 b9cf 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004702:	4ba0      	ldr	r3, [pc, #640]	@ (8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0320 	and.w	r3, r3, #32
 800470a:	2b20      	cmp	r3, #32
 800470c:	d118      	bne.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800470e:	4b9d      	ldr	r3, [pc, #628]	@ (8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d005      	beq.n	8004726 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800471a:	4b9a      	ldr	r3, [pc, #616]	@ (8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	0e1b      	lsrs	r3, r3, #24
 8004720:	f003 030f 	and.w	r3, r3, #15
 8004724:	e006      	b.n	8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8004726:	4b97      	ldr	r3, [pc, #604]	@ (8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004728:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800472c:	041b      	lsls	r3, r3, #16
 800472e:	0e1b      	lsrs	r3, r3, #24
 8004730:	f003 030f 	and.w	r3, r3, #15
 8004734:	4a95      	ldr	r2, [pc, #596]	@ (800498c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800473a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800473c:	f001 b9b0 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004740:	2300      	movs	r3, #0
 8004742:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004744:	f001 b9ac 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 8004748:	2300      	movs	r3, #0
 800474a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800474c:	f001 b9a8 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004750:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004754:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8004758:	430b      	orrs	r3, r1
 800475a:	d17f      	bne.n	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800475c:	4b89      	ldr	r3, [pc, #548]	@ (8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800475e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004762:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004766:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8004768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800476a:	2b00      	cmp	r3, #0
 800476c:	d165      	bne.n	800483a <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800476e:	4b85      	ldr	r3, [pc, #532]	@ (8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004774:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004778:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800477a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800477c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004780:	d034      	beq.n	80047ec <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8004782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004784:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004788:	d853      	bhi.n	8004832 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800478a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800478c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004790:	d00b      	beq.n	80047aa <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8004792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004794:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004798:	d84b      	bhi.n	8004832 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800479a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800479c:	2b00      	cmp	r3, #0
 800479e:	d016      	beq.n	80047ce <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 80047a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80047a6:	d009      	beq.n	80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80047a8:	e043      	b.n	8004832 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80047aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7ff f9ec 	bl	8003b8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80047b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80047b8:	f001 b972 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047bc:	f107 0318 	add.w	r3, r7, #24
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7ff fb4b 	bl	8003e5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80047ca:	f001 b969 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80047ce:	4b6d      	ldr	r3, [pc, #436]	@ (8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047da:	d103      	bne.n	80047e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 80047dc:	4b6a      	ldr	r3, [pc, #424]	@ (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80047de:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80047e0:	f001 b95e 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80047e8:	f001 b95a 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80047ec:	4b65      	ldr	r3, [pc, #404]	@ (8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0320 	and.w	r3, r3, #32
 80047f4:	2b20      	cmp	r3, #32
 80047f6:	d118      	bne.n	800482a <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80047f8:	4b62      	ldr	r3, [pc, #392]	@ (8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d005      	beq.n	8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8004804:	4b5f      	ldr	r3, [pc, #380]	@ (8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	0e1b      	lsrs	r3, r3, #24
 800480a:	f003 030f 	and.w	r3, r3, #15
 800480e:	e006      	b.n	800481e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8004810:	4b5c      	ldr	r3, [pc, #368]	@ (8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004812:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004816:	041b      	lsls	r3, r3, #16
 8004818:	0e1b      	lsrs	r3, r3, #24
 800481a:	f003 030f 	and.w	r3, r3, #15
 800481e:	4a5b      	ldr	r2, [pc, #364]	@ (800498c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004824:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004826:	f001 b93b 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 800482a:	2300      	movs	r3, #0
 800482c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800482e:	f001 b937 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        default :
        {
          frequency = 0U;
 8004832:	2300      	movs	r3, #0
 8004834:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004836:	f001 b933 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800483a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800483c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004840:	d108      	bne.n	8004854 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004842:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004846:	4618      	mov	r0, r3
 8004848:	f7ff f9a0 	bl	8003b8c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800484c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004850:	f001 b926 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else
    {
      frequency = 0U;
 8004854:	2300      	movs	r3, #0
 8004856:	637b      	str	r3, [r7, #52]	@ 0x34
 8004858:	f001 b922 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800485c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004860:	1e51      	subs	r1, r2, #1
 8004862:	430b      	orrs	r3, r1
 8004864:	d136      	bne.n	80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004866:	4b47      	ldr	r3, [pc, #284]	@ (8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800486c:	f003 0303 	and.w	r3, r3, #3
 8004870:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8004872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004874:	2b00      	cmp	r3, #0
 8004876:	d104      	bne.n	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8004878:	f7fe fa1e 	bl	8002cb8 <HAL_RCC_GetPCLK2Freq>
 800487c:	6378      	str	r0, [r7, #52]	@ 0x34
 800487e:	f001 b90f 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8004882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004884:	2b01      	cmp	r3, #1
 8004886:	d104      	bne.n	8004892 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004888:	f7fe f8e0 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 800488c:	6378      	str	r0, [r7, #52]	@ 0x34
 800488e:	f001 b907 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8004892:	4b3c      	ldr	r3, [pc, #240]	@ (8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800489a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800489e:	d106      	bne.n	80048ae <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80048a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d103      	bne.n	80048ae <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 80048a6:	4b3a      	ldr	r3, [pc, #232]	@ (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80048a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80048aa:	f001 b8f9 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80048ae:	4b35      	ldr	r3, [pc, #212]	@ (8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80048b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d107      	bne.n	80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80048bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048be:	2b03      	cmp	r3, #3
 80048c0:	d104      	bne.n	80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 80048c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80048c8:	f001 b8ea 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80048d0:	f001 b8e6 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80048d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048d8:	1e91      	subs	r1, r2, #2
 80048da:	430b      	orrs	r3, r1
 80048dc:	d136      	bne.n	800494c <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80048de:	4b29      	ldr	r3, [pc, #164]	@ (8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80048e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048e4:	f003 030c 	and.w	r3, r3, #12
 80048e8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80048ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d104      	bne.n	80048fa <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80048f0:	f7fe f9ce 	bl	8002c90 <HAL_RCC_GetPCLK1Freq>
 80048f4:	6378      	str	r0, [r7, #52]	@ 0x34
 80048f6:	f001 b8d3 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80048fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048fc:	2b04      	cmp	r3, #4
 80048fe:	d104      	bne.n	800490a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004900:	f7fe f8a4 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 8004904:	6378      	str	r0, [r7, #52]	@ 0x34
 8004906:	f001 b8cb 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800490a:	4b1e      	ldr	r3, [pc, #120]	@ (8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004912:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004916:	d106      	bne.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8004918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800491a:	2b08      	cmp	r3, #8
 800491c:	d103      	bne.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800491e:	4b1c      	ldr	r3, [pc, #112]	@ (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004920:	637b      	str	r3, [r7, #52]	@ 0x34
 8004922:	f001 b8bd 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8004926:	4b17      	ldr	r3, [pc, #92]	@ (8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004928:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b02      	cmp	r3, #2
 8004932:	d107      	bne.n	8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8004934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004936:	2b0c      	cmp	r3, #12
 8004938:	d104      	bne.n	8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800493a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800493e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004940:	f001 b8ae 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	637b      	str	r3, [r7, #52]	@ 0x34
 8004948:	f001 b8aa 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800494c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004950:	1f11      	subs	r1, r2, #4
 8004952:	430b      	orrs	r3, r1
 8004954:	d13f      	bne.n	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004956:	4b0b      	ldr	r3, [pc, #44]	@ (8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800495c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004960:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8004962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004964:	2b00      	cmp	r3, #0
 8004966:	d104      	bne.n	8004972 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004968:	f7fe f992 	bl	8002c90 <HAL_RCC_GetPCLK1Freq>
 800496c:	6378      	str	r0, [r7, #52]	@ 0x34
 800496e:	f001 b897 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8004972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004974:	2b10      	cmp	r3, #16
 8004976:	d10d      	bne.n	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004978:	f7fe f868 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 800497c:	6378      	str	r0, [r7, #52]	@ 0x34
 800497e:	f001 b88f 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8004982:	bf00      	nop
 8004984:	46020c00 	.word	0x46020c00
 8004988:	02dc6c00 	.word	0x02dc6c00
 800498c:	080073f4 	.word	0x080073f4
 8004990:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8004994:	4ba8      	ldr	r3, [pc, #672]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800499c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049a0:	d106      	bne.n	80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 80049a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a4:	2b20      	cmp	r3, #32
 80049a6:	d103      	bne.n	80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 80049a8:	4ba4      	ldr	r3, [pc, #656]	@ (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80049aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80049ac:	f001 b878 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80049b0:	4ba1      	ldr	r3, [pc, #644]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80049b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d107      	bne.n	80049ce <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80049be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c0:	2b30      	cmp	r3, #48	@ 0x30
 80049c2:	d104      	bne.n	80049ce <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 80049c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80049ca:	f001 b869 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80049d2:	f001 b865 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80049d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049da:	f1a2 0108 	sub.w	r1, r2, #8
 80049de:	430b      	orrs	r3, r1
 80049e0:	d136      	bne.n	8004a50 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80049e2:	4b95      	ldr	r3, [pc, #596]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80049e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049e8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80049ec:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80049ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d104      	bne.n	80049fe <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80049f4:	f7fe f94c 	bl	8002c90 <HAL_RCC_GetPCLK1Freq>
 80049f8:	6378      	str	r0, [r7, #52]	@ 0x34
 80049fa:	f001 b851 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80049fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a00:	2b40      	cmp	r3, #64	@ 0x40
 8004a02:	d104      	bne.n	8004a0e <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004a04:	f7fe f822 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 8004a08:	6378      	str	r0, [r7, #52]	@ 0x34
 8004a0a:	f001 b849 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8004a0e:	4b8a      	ldr	r3, [pc, #552]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a1a:	d106      	bne.n	8004a2a <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8004a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a1e:	2b80      	cmp	r3, #128	@ 0x80
 8004a20:	d103      	bne.n	8004a2a <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8004a22:	4b86      	ldr	r3, [pc, #536]	@ (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004a24:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a26:	f001 b83b 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8004a2a:	4b83      	ldr	r3, [pc, #524]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d107      	bne.n	8004a48 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8004a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a3c:	d104      	bne.n	8004a48 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8004a3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a42:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a44:	f001 b82c 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a4c:	f001 b828 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8004a50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a54:	f1a2 0110 	sub.w	r1, r2, #16
 8004a58:	430b      	orrs	r3, r1
 8004a5a:	d139      	bne.n	8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004a5c:	4b76      	ldr	r3, [pc, #472]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a66:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8004a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d104      	bne.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004a6e:	f7fe f90f 	bl	8002c90 <HAL_RCC_GetPCLK1Freq>
 8004a72:	6378      	str	r0, [r7, #52]	@ 0x34
 8004a74:	f001 b814 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8004a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a7e:	d104      	bne.n	8004a8a <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004a80:	f7fd ffe4 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 8004a84:	6378      	str	r0, [r7, #52]	@ 0x34
 8004a86:	f001 b80b 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8004a8a:	4b6b      	ldr	r3, [pc, #428]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a96:	d107      	bne.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8004a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a9e:	d103      	bne.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8004aa0:	4b66      	ldr	r3, [pc, #408]	@ (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004aa2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004aa4:	f000 bffc 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8004aa8:	4b63      	ldr	r3, [pc, #396]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004aaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d108      	bne.n	8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8004ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004abc:	d104      	bne.n	8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8004abe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ac2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ac4:	f000 bfec 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	637b      	str	r3, [r7, #52]	@ 0x34
 8004acc:	f000 bfe8 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 8004ad0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ad4:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8004ad8:	430b      	orrs	r3, r1
 8004ada:	d139      	bne.n	8004b50 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8004adc:	4b56      	ldr	r3, [pc, #344]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004ade:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ae2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ae6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8004ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d104      	bne.n	8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004aee:	f7fe f8cf 	bl	8002c90 <HAL_RCC_GetPCLK1Freq>
 8004af2:	6378      	str	r0, [r7, #52]	@ 0x34
 8004af4:	f000 bfd4 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 8004af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004afa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004afe:	d104      	bne.n	8004b0a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004b00:	f7fd ffa4 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 8004b04:	6378      	str	r0, [r7, #52]	@ 0x34
 8004b06:	f000 bfcb 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8004b0a:	4b4b      	ldr	r3, [pc, #300]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b16:	d107      	bne.n	8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8004b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b1e:	d103      	bne.n	8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 8004b20:	4b46      	ldr	r3, [pc, #280]	@ (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004b22:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b24:	f000 bfbc 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8004b28:	4b43      	ldr	r3, [pc, #268]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d108      	bne.n	8004b48 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 8004b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b38:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b3c:	d104      	bne.n	8004b48 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 8004b3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b42:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b44:	f000 bfac 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b4c:	f000 bfa8 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8004b50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b54:	f1a2 0120 	sub.w	r1, r2, #32
 8004b58:	430b      	orrs	r3, r1
 8004b5a:	d158      	bne.n	8004c0e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004b5c:	4b36      	ldr	r3, [pc, #216]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d104      	bne.n	8004b78 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8004b6e:	f7fe f8b7 	bl	8002ce0 <HAL_RCC_GetPCLK3Freq>
 8004b72:	6378      	str	r0, [r7, #52]	@ 0x34
 8004b74:	f000 bf94 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8004b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d104      	bne.n	8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004b7e:	f7fd ff65 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 8004b82:	6378      	str	r0, [r7, #52]	@ 0x34
 8004b84:	f000 bf8c 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004b88:	4b2b      	ldr	r3, [pc, #172]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b94:	d106      	bne.n	8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8004b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d103      	bne.n	8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 8004b9c:	4b27      	ldr	r3, [pc, #156]	@ (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004b9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ba0:	f000 bf7e 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004ba4:	4b24      	ldr	r3, [pc, #144]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004ba6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d107      	bne.n	8004bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8004bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb4:	2b03      	cmp	r3, #3
 8004bb6:	d104      	bne.n	8004bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 8004bb8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bbe:	f000 bf6f 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8004bc2:	4b1d      	ldr	r3, [pc, #116]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0320 	and.w	r3, r3, #32
 8004bca:	2b20      	cmp	r3, #32
 8004bcc:	d11b      	bne.n	8004c06 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8004bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd0:	2b04      	cmp	r3, #4
 8004bd2:	d118      	bne.n	8004c06 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004bd4:	4b18      	ldr	r3, [pc, #96]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d005      	beq.n	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 8004be0:	4b15      	ldr	r3, [pc, #84]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	0e1b      	lsrs	r3, r3, #24
 8004be6:	f003 030f 	and.w	r3, r3, #15
 8004bea:	e006      	b.n	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8004bec:	4b12      	ldr	r3, [pc, #72]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004bee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004bf2:	041b      	lsls	r3, r3, #16
 8004bf4:	0e1b      	lsrs	r3, r3, #24
 8004bf6:	f003 030f 	and.w	r3, r3, #15
 8004bfa:	4a11      	ldr	r2, [pc, #68]	@ (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c00:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c02:	f000 bf4d 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8004c06:	2300      	movs	r3, #0
 8004c08:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c0a:	f000 bf49 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8004c0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c12:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8004c16:	430b      	orrs	r3, r1
 8004c18:	d172      	bne.n	8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004c1a:	4b07      	ldr	r3, [pc, #28]	@ (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c20:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004c24:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c2c:	d10a      	bne.n	8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004c2e:	f7fd ff0d 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 8004c32:	6378      	str	r0, [r7, #52]	@ 0x34
 8004c34:	f000 bf34 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8004c38:	46020c00 	.word	0x46020c00
 8004c3c:	00f42400 	.word	0x00f42400
 8004c40:	080073f4 	.word	0x080073f4
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8004c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c4a:	d108      	bne.n	8004c5e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c4c:	f107 0318 	add.w	r3, r7, #24
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7ff f903 	bl	8003e5c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8004c56:	6a3b      	ldr	r3, [r7, #32]
 8004c58:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c5a:	f000 bf21 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d104      	bne.n	8004c6e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8004c64:	f7fd fffa 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
 8004c68:	6378      	str	r0, [r7, #52]	@ 0x34
 8004c6a:	f000 bf19 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8004c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c70:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004c74:	d122      	bne.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004c76:	4bb0      	ldr	r3, [pc, #704]	@ (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0320 	and.w	r3, r3, #32
 8004c7e:	2b20      	cmp	r3, #32
 8004c80:	d118      	bne.n	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004c82:	4bad      	ldr	r3, [pc, #692]	@ (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d005      	beq.n	8004c9a <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 8004c8e:	4baa      	ldr	r3, [pc, #680]	@ (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	0e1b      	lsrs	r3, r3, #24
 8004c94:	f003 030f 	and.w	r3, r3, #15
 8004c98:	e006      	b.n	8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8004c9a:	4ba7      	ldr	r3, [pc, #668]	@ (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004c9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004ca0:	041b      	lsls	r3, r3, #16
 8004ca2:	0e1b      	lsrs	r3, r3, #24
 8004ca4:	f003 030f 	and.w	r3, r3, #15
 8004ca8:	4aa4      	ldr	r2, [pc, #656]	@ (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8004caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cae:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cb0:	f000 bef6 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cb8:	f000 bef2 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004cbc:	4b9e      	ldr	r3, [pc, #632]	@ (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004cc8:	d107      	bne.n	8004cda <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8004cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ccc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004cd0:	d103      	bne.n	8004cda <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 8004cd2:	4b9b      	ldr	r3, [pc, #620]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8004cd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cd6:	f000 bee3 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004cda:	4b97      	ldr	r3, [pc, #604]	@ (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ce2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ce6:	d107      	bne.n	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8004ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cee:	d103      	bne.n	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 8004cf0:	4b93      	ldr	r3, [pc, #588]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8004cf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cf4:	f000 bed4 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cfc:	f000 bed0 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8004d00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d04:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8004d08:	430b      	orrs	r3, r1
 8004d0a:	d158      	bne.n	8004dbe <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8004d0c:	4b8a      	ldr	r3, [pc, #552]	@ (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004d0e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	d84b      	bhi.n	8004db6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 8004d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 8004d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d24:	08004d5d 	.word	0x08004d5d
 8004d28:	08004d39 	.word	0x08004d39
 8004d2c:	08004d4b 	.word	0x08004d4b
 8004d30:	08004d67 	.word	0x08004d67
 8004d34:	08004d71 	.word	0x08004d71
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7fe ff25 	bl	8003b8c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d46:	f000 beab 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d4a:	f107 030c 	add.w	r3, r7, #12
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff f9ec 	bl	800412c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d58:	f000 bea2 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004d5c:	f7fd ff7e 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
 8004d60:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004d62:	f000 be9d 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004d66:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004d6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d6c:	f000 be98 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004d70:	4b71      	ldr	r3, [pc, #452]	@ (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0320 	and.w	r3, r3, #32
 8004d78:	2b20      	cmp	r3, #32
 8004d7a:	d118      	bne.n	8004dae <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004d7c:	4b6e      	ldr	r3, [pc, #440]	@ (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d005      	beq.n	8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8004d88:	4b6b      	ldr	r3, [pc, #428]	@ (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	0e1b      	lsrs	r3, r3, #24
 8004d8e:	f003 030f 	and.w	r3, r3, #15
 8004d92:	e006      	b.n	8004da2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8004d94:	4b68      	ldr	r3, [pc, #416]	@ (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004d96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004d9a:	041b      	lsls	r3, r3, #16
 8004d9c:	0e1b      	lsrs	r3, r3, #24
 8004d9e:	f003 030f 	and.w	r3, r3, #15
 8004da2:	4a66      	ldr	r2, [pc, #408]	@ (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8004da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004da8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004daa:	f000 be79 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004dae:	2300      	movs	r3, #0
 8004db0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004db2:	f000 be75 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8004db6:	2300      	movs	r3, #0
 8004db8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004dba:	f000 be71 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8004dbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dc2:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8004dc6:	430b      	orrs	r3, r1
 8004dc8:	d167      	bne.n	8004e9a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8004dca:	4b5b      	ldr	r3, [pc, #364]	@ (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004dcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004dd0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8004dd4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ddc:	d036      	beq.n	8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8004dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004de4:	d855      	bhi.n	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8004de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004dec:	d029      	beq.n	8004e42 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8004dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004df4:	d84d      	bhi.n	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8004df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dfc:	d013      	beq.n	8004e26 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8004dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e04:	d845      	bhi.n	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8004e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d015      	beq.n	8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 8004e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e12:	d13e      	bne.n	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7fe feb7 	bl	8003b8c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e22:	f000 be3d 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e26:	f107 030c 	add.w	r3, r7, #12
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7ff f97e 	bl	800412c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e34:	f000 be34 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004e38:	f7fd ff10 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
 8004e3c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004e3e:	f000 be2f 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004e42:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004e46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e48:	f000 be2a 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004e4c:	4b3a      	ldr	r3, [pc, #232]	@ (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0320 	and.w	r3, r3, #32
 8004e54:	2b20      	cmp	r3, #32
 8004e56:	d118      	bne.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004e58:	4b37      	ldr	r3, [pc, #220]	@ (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d005      	beq.n	8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8004e64:	4b34      	ldr	r3, [pc, #208]	@ (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	0e1b      	lsrs	r3, r3, #24
 8004e6a:	f003 030f 	and.w	r3, r3, #15
 8004e6e:	e006      	b.n	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8004e70:	4b31      	ldr	r3, [pc, #196]	@ (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004e72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004e76:	041b      	lsls	r3, r3, #16
 8004e78:	0e1b      	lsrs	r3, r3, #24
 8004e7a:	f003 030f 	and.w	r3, r3, #15
 8004e7e:	4a2f      	ldr	r2, [pc, #188]	@ (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8004e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e84:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004e86:	f000 be0b 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e8e:	f000 be07 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8004e92:	2300      	movs	r3, #0
 8004e94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e96:	f000 be03 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8004e9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e9e:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8004ea2:	430b      	orrs	r3, r1
 8004ea4:	d152      	bne.n	8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004ea6:	4b24      	ldr	r3, [pc, #144]	@ (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004eac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004eb0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d104      	bne.n	8004ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004eb8:	f7fd feea 	bl	8002c90 <HAL_RCC_GetPCLK1Freq>
 8004ebc:	6378      	str	r0, [r7, #52]	@ 0x34
 8004ebe:	f000 bdef 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8004ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ec8:	d104      	bne.n	8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004eca:	f7fd fdbf 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 8004ece:	6378      	str	r0, [r7, #52]	@ 0x34
 8004ed0:	f000 bde6 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004ed4:	4b18      	ldr	r3, [pc, #96]	@ (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004edc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ee0:	d107      	bne.n	8004ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 8004ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ee8:	d103      	bne.n	8004ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 8004eea:	4b15      	ldr	r3, [pc, #84]	@ (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8004eec:	637b      	str	r3, [r7, #52]	@ 0x34
 8004eee:	f000 bdd7 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8004ef2:	4b11      	ldr	r3, [pc, #68]	@ (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0320 	and.w	r3, r3, #32
 8004efa:	2b20      	cmp	r3, #32
 8004efc:	d122      	bne.n	8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 8004efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f04:	d11e      	bne.n	8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004f06:	4b0c      	ldr	r3, [pc, #48]	@ (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d005      	beq.n	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 8004f12:	4b09      	ldr	r3, [pc, #36]	@ (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	0e1b      	lsrs	r3, r3, #24
 8004f18:	f003 030f 	and.w	r3, r3, #15
 8004f1c:	e006      	b.n	8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 8004f1e:	4b06      	ldr	r3, [pc, #24]	@ (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004f20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004f24:	041b      	lsls	r3, r3, #16
 8004f26:	0e1b      	lsrs	r3, r3, #24
 8004f28:	f003 030f 	and.w	r3, r3, #15
 8004f2c:	4a03      	ldr	r2, [pc, #12]	@ (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8004f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f32:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f34:	f000 bdb4 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8004f38:	46020c00 	.word	0x46020c00
 8004f3c:	080073f4 	.word	0x080073f4
 8004f40:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8004f44:	2300      	movs	r3, #0
 8004f46:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f48:	f000 bdaa 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8004f4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f50:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8004f54:	430b      	orrs	r3, r1
 8004f56:	d14c      	bne.n	8004ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004f58:	4ba8      	ldr	r3, [pc, #672]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f5e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004f62:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d104      	bne.n	8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004f6a:	f7fd fe91 	bl	8002c90 <HAL_RCC_GetPCLK1Freq>
 8004f6e:	6378      	str	r0, [r7, #52]	@ 0x34
 8004f70:	f000 bd96 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8004f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f7a:	d104      	bne.n	8004f86 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004f7c:	f7fd fd66 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 8004f80:	6378      	str	r0, [r7, #52]	@ 0x34
 8004f82:	f000 bd8d 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004f86:	4b9d      	ldr	r3, [pc, #628]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f92:	d107      	bne.n	8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8004f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f9a:	d103      	bne.n	8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 8004f9c:	4b98      	ldr	r3, [pc, #608]	@ (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8004f9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fa0:	f000 bd7e 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8004fa4:	4b95      	ldr	r3, [pc, #596]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0320 	and.w	r3, r3, #32
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	d11c      	bne.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004fb6:	d118      	bne.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004fb8:	4b90      	ldr	r3, [pc, #576]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d005      	beq.n	8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8004fc4:	4b8d      	ldr	r3, [pc, #564]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	0e1b      	lsrs	r3, r3, #24
 8004fca:	f003 030f 	and.w	r3, r3, #15
 8004fce:	e006      	b.n	8004fde <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 8004fd0:	4b8a      	ldr	r3, [pc, #552]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004fd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004fd6:	041b      	lsls	r3, r3, #16
 8004fd8:	0e1b      	lsrs	r3, r3, #24
 8004fda:	f003 030f 	and.w	r3, r3, #15
 8004fde:	4a89      	ldr	r2, [pc, #548]	@ (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8004fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fe4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fe6:	f000 bd5b 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8004fea:	2300      	movs	r3, #0
 8004fec:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fee:	f000 bd57 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8004ff2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ff6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8004ffa:	430b      	orrs	r3, r1
 8004ffc:	d158      	bne.n	80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004ffe:	4b7f      	ldr	r3, [pc, #508]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005000:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005004:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005008:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800500a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800500c:	2bc0      	cmp	r3, #192	@ 0xc0
 800500e:	d028      	beq.n	8005062 <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 8005010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005012:	2bc0      	cmp	r3, #192	@ 0xc0
 8005014:	d848      	bhi.n	80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8005016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005018:	2b80      	cmp	r3, #128	@ 0x80
 800501a:	d00e      	beq.n	800503a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800501c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800501e:	2b80      	cmp	r3, #128	@ 0x80
 8005020:	d842      	bhi.n	80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8005022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 8005028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800502a:	2b40      	cmp	r3, #64	@ 0x40
 800502c:	d014      	beq.n	8005058 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800502e:	e03b      	b.n	80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8005030:	f7fd fe56 	bl	8002ce0 <HAL_RCC_GetPCLK3Freq>
 8005034:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005036:	f000 bd33 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800503a:	4b70      	ldr	r3, [pc, #448]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005042:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005046:	d103      	bne.n	8005050 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 8005048:	4b6d      	ldr	r3, [pc, #436]	@ (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800504a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800504c:	f000 bd28 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8005050:	2300      	movs	r3, #0
 8005052:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005054:	f000 bd24 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8005058:	f7fd fcf8 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 800505c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800505e:	f000 bd1f 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005062:	4b66      	ldr	r3, [pc, #408]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0320 	and.w	r3, r3, #32
 800506a:	2b20      	cmp	r3, #32
 800506c:	d118      	bne.n	80050a0 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800506e:	4b63      	ldr	r3, [pc, #396]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d005      	beq.n	8005086 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800507a:	4b60      	ldr	r3, [pc, #384]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	0e1b      	lsrs	r3, r3, #24
 8005080:	f003 030f 	and.w	r3, r3, #15
 8005084:	e006      	b.n	8005094 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 8005086:	4b5d      	ldr	r3, [pc, #372]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005088:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800508c:	041b      	lsls	r3, r3, #16
 800508e:	0e1b      	lsrs	r3, r3, #24
 8005090:	f003 030f 	and.w	r3, r3, #15
 8005094:	4a5b      	ldr	r2, [pc, #364]	@ (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8005096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800509a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800509c:	f000 bd00 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80050a0:	2300      	movs	r3, #0
 80050a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80050a4:	f000 bcfc 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      default:
      {
        frequency = 0U;
 80050a8:	2300      	movs	r3, #0
 80050aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80050ac:	f000 bcf8 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80050b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050b4:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 80050b8:	430b      	orrs	r3, r1
 80050ba:	d14c      	bne.n	8005156 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80050bc:	4b4f      	ldr	r3, [pc, #316]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80050be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050c2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80050c6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80050c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d104      	bne.n	80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80050ce:	f7fd fddf 	bl	8002c90 <HAL_RCC_GetPCLK1Freq>
 80050d2:	6378      	str	r0, [r7, #52]	@ 0x34
 80050d4:	f000 bce4 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80050d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050de:	d104      	bne.n	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80050e0:	f7fd fcb4 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 80050e4:	6378      	str	r0, [r7, #52]	@ 0x34
 80050e6:	f000 bcdb 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80050ea:	4b44      	ldr	r3, [pc, #272]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050f6:	d107      	bne.n	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 80050f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050fe:	d103      	bne.n	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 8005100:	4b3f      	ldr	r3, [pc, #252]	@ (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8005102:	637b      	str	r3, [r7, #52]	@ 0x34
 8005104:	f000 bccc 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8005108:	4b3c      	ldr	r3, [pc, #240]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0320 	and.w	r3, r3, #32
 8005110:	2b20      	cmp	r3, #32
 8005112:	d11c      	bne.n	800514e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8005114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005116:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800511a:	d118      	bne.n	800514e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800511c:	4b37      	ldr	r3, [pc, #220]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d005      	beq.n	8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8005128:	4b34      	ldr	r3, [pc, #208]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	0e1b      	lsrs	r3, r3, #24
 800512e:	f003 030f 	and.w	r3, r3, #15
 8005132:	e006      	b.n	8005142 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8005134:	4b31      	ldr	r3, [pc, #196]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005136:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800513a:	041b      	lsls	r3, r3, #16
 800513c:	0e1b      	lsrs	r3, r3, #24
 800513e:	f003 030f 	and.w	r3, r3, #15
 8005142:	4a30      	ldr	r2, [pc, #192]	@ (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8005144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005148:	637b      	str	r3, [r7, #52]	@ 0x34
 800514a:	f000 bca9 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800514e:	2300      	movs	r3, #0
 8005150:	637b      	str	r3, [r7, #52]	@ 0x34
 8005152:	f000 bca5 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 8005156:	e9d7 2300 	ldrd	r2, r3, [r7]
 800515a:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800515e:	430b      	orrs	r3, r1
 8005160:	d152      	bne.n	8005208 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 8005162:	4b26      	ldr	r3, [pc, #152]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005164:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005168:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800516c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800516e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005170:	2b00      	cmp	r3, #0
 8005172:	d104      	bne.n	800517e <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005174:	f7fd fd8c 	bl	8002c90 <HAL_RCC_GetPCLK1Freq>
 8005178:	6378      	str	r0, [r7, #52]	@ 0x34
 800517a:	f000 bc91 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800517e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005180:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005184:	d104      	bne.n	8005190 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005186:	f7fd fc61 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 800518a:	6378      	str	r0, [r7, #52]	@ 0x34
 800518c:	f000 bc88 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 8005190:	4b1a      	ldr	r3, [pc, #104]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005198:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800519c:	d107      	bne.n	80051ae <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800519e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80051a4:	d103      	bne.n	80051ae <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 80051a6:	4b16      	ldr	r3, [pc, #88]	@ (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80051a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80051aa:	f000 bc79 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 80051ae:	4b13      	ldr	r3, [pc, #76]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0320 	and.w	r3, r3, #32
 80051b6:	2b20      	cmp	r3, #32
 80051b8:	d11c      	bne.n	80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 80051ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051bc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80051c0:	d118      	bne.n	80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80051c2:	4b0e      	ldr	r3, [pc, #56]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d005      	beq.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 80051ce:	4b0b      	ldr	r3, [pc, #44]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	0e1b      	lsrs	r3, r3, #24
 80051d4:	f003 030f 	and.w	r3, r3, #15
 80051d8:	e006      	b.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 80051da:	4b08      	ldr	r3, [pc, #32]	@ (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80051dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80051e0:	041b      	lsls	r3, r3, #16
 80051e2:	0e1b      	lsrs	r3, r3, #24
 80051e4:	f003 030f 	and.w	r3, r3, #15
 80051e8:	4a06      	ldr	r2, [pc, #24]	@ (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 80051ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80051f0:	f000 bc56 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 80051f4:	2300      	movs	r3, #0
 80051f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80051f8:	f000 bc52 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 80051fc:	46020c00 	.word	0x46020c00
 8005200:	00f42400 	.word	0x00f42400
 8005204:	080073f4 	.word	0x080073f4
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 8005208:	e9d7 2300 	ldrd	r2, r3, [r7]
 800520c:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 8005210:	430b      	orrs	r3, r1
 8005212:	d14a      	bne.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0xeae>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 8005214:	4ba5      	ldr	r3, [pc, #660]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005216:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800521a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800521e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 8005220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005222:	2b00      	cmp	r3, #0
 8005224:	d104      	bne.n	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005226:	f7fd fd33 	bl	8002c90 <HAL_RCC_GetPCLK1Freq>
 800522a:	6378      	str	r0, [r7, #52]	@ 0x34
 800522c:	f000 bc38 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 8005230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005232:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005236:	d104      	bne.n	8005242 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005238:	f7fd fc08 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 800523c:	6378      	str	r0, [r7, #52]	@ 0x34
 800523e:	f000 bc2f 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 8005242:	4b9a      	ldr	r3, [pc, #616]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800524a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800524e:	d107      	bne.n	8005260 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005252:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005256:	d103      	bne.n	8005260 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 8005258:	4b95      	ldr	r3, [pc, #596]	@ (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800525a:	637b      	str	r3, [r7, #52]	@ 0x34
 800525c:	f000 bc20 	b.w	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 8005260:	4b92      	ldr	r3, [pc, #584]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0320 	and.w	r3, r3, #32
 8005268:	2b20      	cmp	r3, #32
 800526a:	d11b      	bne.n	80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 800526c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800526e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005272:	d117      	bne.n	80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005274:	4b8d      	ldr	r3, [pc, #564]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d005      	beq.n	800528c <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 8005280:	4b8a      	ldr	r3, [pc, #552]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	0e1b      	lsrs	r3, r3, #24
 8005286:	f003 030f 	and.w	r3, r3, #15
 800528a:	e006      	b.n	800529a <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800528c:	4b87      	ldr	r3, [pc, #540]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800528e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005292:	041b      	lsls	r3, r3, #16
 8005294:	0e1b      	lsrs	r3, r3, #24
 8005296:	f003 030f 	and.w	r3, r3, #15
 800529a:	4a86      	ldr	r2, [pc, #536]	@ (80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800529c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80052a2:	e3fd      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 80052a4:	2300      	movs	r3, #0
 80052a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80052a8:	e3fa      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80052aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052ae:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80052b2:	430b      	orrs	r3, r1
 80052b4:	d164      	bne.n	8005380 <HAL_RCCEx_GetPeriphCLKFreq+0xf84>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80052b6:	4b7d      	ldr	r3, [pc, #500]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80052b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80052bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052c0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80052c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d120      	bne.n	800530a <HAL_RCCEx_GetPeriphCLKFreq+0xf0e>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80052c8:	4b78      	ldr	r3, [pc, #480]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0320 	and.w	r3, r3, #32
 80052d0:	2b20      	cmp	r3, #32
 80052d2:	d117      	bne.n	8005304 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80052d4:	4b75      	ldr	r3, [pc, #468]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d005      	beq.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0xef0>
 80052e0:	4b72      	ldr	r3, [pc, #456]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	0e1b      	lsrs	r3, r3, #24
 80052e6:	f003 030f 	and.w	r3, r3, #15
 80052ea:	e006      	b.n	80052fa <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
 80052ec:	4b6f      	ldr	r3, [pc, #444]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80052ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80052f2:	041b      	lsls	r3, r3, #16
 80052f4:	0e1b      	lsrs	r3, r3, #24
 80052f6:	f003 030f 	and.w	r3, r3, #15
 80052fa:	4a6e      	ldr	r2, [pc, #440]	@ (80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 80052fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005300:	637b      	str	r3, [r7, #52]	@ 0x34
 8005302:	e3cd      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 8005304:	2300      	movs	r3, #0
 8005306:	637b      	str	r3, [r7, #52]	@ 0x34
 8005308:	e3ca      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800530a:	4b68      	ldr	r3, [pc, #416]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800530c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005310:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005314:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005318:	d112      	bne.n	8005340 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
 800531a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005320:	d10e      	bne.n	8005340 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005322:	4b62      	ldr	r3, [pc, #392]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005324:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005328:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800532c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005330:	d102      	bne.n	8005338 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
      {
        frequency = LSI_VALUE / 128U;
 8005332:	23fa      	movs	r3, #250	@ 0xfa
 8005334:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005336:	e3b3      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 8005338:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800533c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800533e:	e3af      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8005340:	4b5a      	ldr	r3, [pc, #360]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005348:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800534c:	d106      	bne.n	800535c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800534e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005350:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005354:	d102      	bne.n	800535c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
    {
      frequency = HSI_VALUE;
 8005356:	4b56      	ldr	r3, [pc, #344]	@ (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8005358:	637b      	str	r3, [r7, #52]	@ 0x34
 800535a:	e3a1      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800535c:	4b53      	ldr	r3, [pc, #332]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800535e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b02      	cmp	r3, #2
 8005368:	d107      	bne.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
 800536a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800536c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005370:	d103      	bne.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
    {
      frequency = LSE_VALUE;
 8005372:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005376:	637b      	str	r3, [r7, #52]	@ 0x34
 8005378:	e392      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800537a:	2300      	movs	r3, #0
 800537c:	637b      	str	r3, [r7, #52]	@ 0x34
 800537e:	e38f      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8005380:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005384:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8005388:	430b      	orrs	r3, r1
 800538a:	d164      	bne.n	8005456 <HAL_RCCEx_GetPeriphCLKFreq+0x105a>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800538c:	4b47      	ldr	r3, [pc, #284]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800538e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005392:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005396:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8005398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800539a:	2b00      	cmp	r3, #0
 800539c:	d120      	bne.n	80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800539e:	4b43      	ldr	r3, [pc, #268]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0320 	and.w	r3, r3, #32
 80053a6:	2b20      	cmp	r3, #32
 80053a8:	d117      	bne.n	80053da <HAL_RCCEx_GetPeriphCLKFreq+0xfde>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80053aa:	4b40      	ldr	r3, [pc, #256]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d005      	beq.n	80053c2 <HAL_RCCEx_GetPeriphCLKFreq+0xfc6>
 80053b6:	4b3d      	ldr	r3, [pc, #244]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	0e1b      	lsrs	r3, r3, #24
 80053bc:	f003 030f 	and.w	r3, r3, #15
 80053c0:	e006      	b.n	80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 80053c2:	4b3a      	ldr	r3, [pc, #232]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80053c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80053c8:	041b      	lsls	r3, r3, #16
 80053ca:	0e1b      	lsrs	r3, r3, #24
 80053cc:	f003 030f 	and.w	r3, r3, #15
 80053d0:	4a38      	ldr	r2, [pc, #224]	@ (80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 80053d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80053d8:	e362      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 80053da:	2300      	movs	r3, #0
 80053dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80053de:	e35f      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80053e0:	4b32      	ldr	r3, [pc, #200]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80053e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053ee:	d112      	bne.n	8005416 <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
 80053f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053f6:	d10e      	bne.n	8005416 <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80053f8:	4b2c      	ldr	r3, [pc, #176]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80053fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005402:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005406:	d102      	bne.n	800540e <HAL_RCCEx_GetPeriphCLKFreq+0x1012>
      {
        frequency = LSI_VALUE / 128U;
 8005408:	23fa      	movs	r3, #250	@ 0xfa
 800540a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800540c:	e348      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 800540e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005412:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005414:	e344      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8005416:	4b25      	ldr	r3, [pc, #148]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800541e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005422:	d106      	bne.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
 8005424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005426:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800542a:	d102      	bne.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
    {
      frequency = HSI_VALUE;
 800542c:	4b20      	ldr	r3, [pc, #128]	@ (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800542e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005430:	e336      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8005432:	4b1e      	ldr	r3, [pc, #120]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005434:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005438:	f003 0302 	and.w	r3, r3, #2
 800543c:	2b02      	cmp	r3, #2
 800543e:	d107      	bne.n	8005450 <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
 8005440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005442:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005446:	d103      	bne.n	8005450 <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
    {
      frequency = LSE_VALUE;
 8005448:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800544c:	637b      	str	r3, [r7, #52]	@ 0x34
 800544e:	e327      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8005450:	2300      	movs	r3, #0
 8005452:	637b      	str	r3, [r7, #52]	@ 0x34
 8005454:	e324      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8005456:	e9d7 2300 	ldrd	r2, r3, [r7]
 800545a:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800545e:	430b      	orrs	r3, r1
 8005460:	d14e      	bne.n	8005500 <HAL_RCCEx_GetPeriphCLKFreq+0x1104>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005462:	4b12      	ldr	r3, [pc, #72]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005468:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800546c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800546e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005470:	2b00      	cmp	r3, #0
 8005472:	d103      	bne.n	800547c <HAL_RCCEx_GetPeriphCLKFreq+0x1080>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005474:	f7fd fc0c 	bl	8002c90 <HAL_RCC_GetPCLK1Freq>
 8005478:	6378      	str	r0, [r7, #52]	@ 0x34
 800547a:	e311      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800547c:	4b0b      	ldr	r3, [pc, #44]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800547e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005482:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005486:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800548a:	d119      	bne.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 800548c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800548e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005492:	d115      	bne.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005494:	4b05      	ldr	r3, [pc, #20]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005496:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800549a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800549e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054a2:	d109      	bne.n	80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>
      {
        frequency = LSI_VALUE / 128U;
 80054a4:	23fa      	movs	r3, #250	@ 0xfa
 80054a6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80054a8:	e2fa      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 80054aa:	bf00      	nop
 80054ac:	46020c00 	.word	0x46020c00
 80054b0:	00f42400 	.word	0x00f42400
 80054b4:	080073f4 	.word	0x080073f4
      }
      else
      {
        frequency = LSI_VALUE;
 80054b8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80054bc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80054be:	e2ef      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80054c0:	4ba8      	ldr	r3, [pc, #672]	@ (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054cc:	d106      	bne.n	80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
 80054ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80054d4:	d102      	bne.n	80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
    {
      frequency = HSI_VALUE;
 80054d6:	4ba4      	ldr	r3, [pc, #656]	@ (8005768 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80054d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80054da:	e2e1      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80054dc:	4ba1      	ldr	r3, [pc, #644]	@ (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80054de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d107      	bne.n	80054fa <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
 80054ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ec:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80054f0:	d103      	bne.n	80054fa <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
    {
      frequency = LSE_VALUE;
 80054f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80054f8:	e2d2      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80054fa:	2300      	movs	r3, #0
 80054fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80054fe:	e2cf      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8005500:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005504:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8005508:	430b      	orrs	r3, r1
 800550a:	d12d      	bne.n	8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800550c:	4b95      	ldr	r3, [pc, #596]	@ (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800550e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005512:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8005516:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8005518:	4b92      	ldr	r3, [pc, #584]	@ (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005520:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005524:	d105      	bne.n	8005532 <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
 8005526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005528:	2b00      	cmp	r3, #0
 800552a:	d102      	bne.n	8005532 <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
    {
      frequency = HSE_VALUE;
 800552c:	4b8e      	ldr	r3, [pc, #568]	@ (8005768 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800552e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005530:	e2b6      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8005532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005534:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005538:	d107      	bne.n	800554a <HAL_RCCEx_GetPeriphCLKFreq+0x114e>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800553a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800553e:	4618      	mov	r0, r3
 8005540:	f7fe fb24 	bl	8003b8c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8005544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005546:	637b      	str	r3, [r7, #52]	@ 0x34
 8005548:	e2aa      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800554a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800554c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005550:	d107      	bne.n	8005562 <HAL_RCCEx_GetPeriphCLKFreq+0x1166>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005552:	f107 0318 	add.w	r3, r7, #24
 8005556:	4618      	mov	r0, r3
 8005558:	f7fe fc80 	bl	8003e5c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005560:	e29e      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8005562:	2300      	movs	r3, #0
 8005564:	637b      	str	r3, [r7, #52]	@ 0x34
 8005566:	e29b      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8005568:	e9d7 2300 	ldrd	r2, r3, [r7]
 800556c:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8005570:	430b      	orrs	r3, r1
 8005572:	d156      	bne.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8005574:	4b7b      	ldr	r3, [pc, #492]	@ (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800557a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800557e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8005580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005582:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005586:	d028      	beq.n	80055da <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
 8005588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800558a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800558e:	d845      	bhi.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 8005590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005592:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005596:	d013      	beq.n	80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c4>
 8005598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800559e:	d83d      	bhi.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 80055a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d004      	beq.n	80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x11b4>
 80055a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055ac:	d004      	beq.n	80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x11bc>
 80055ae:	e035      	b.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80055b0:	f7fd fb82 	bl	8002cb8 <HAL_RCC_GetPCLK2Freq>
 80055b4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80055b6:	e273      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80055b8:	f7fd fa48 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 80055bc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80055be:	e26f      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80055c0:	4b68      	ldr	r3, [pc, #416]	@ (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055cc:	d102      	bne.n	80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        {
          frequency = HSI_VALUE;
 80055ce:	4b66      	ldr	r3, [pc, #408]	@ (8005768 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80055d0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80055d2:	e265      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80055d4:	2300      	movs	r3, #0
 80055d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80055d8:	e262      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80055da:	4b62      	ldr	r3, [pc, #392]	@ (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0320 	and.w	r3, r3, #32
 80055e2:	2b20      	cmp	r3, #32
 80055e4:	d117      	bne.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x121a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80055e6:	4b5f      	ldr	r3, [pc, #380]	@ (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d005      	beq.n	80055fe <HAL_RCCEx_GetPeriphCLKFreq+0x1202>
 80055f2:	4b5c      	ldr	r3, [pc, #368]	@ (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	0e1b      	lsrs	r3, r3, #24
 80055f8:	f003 030f 	and.w	r3, r3, #15
 80055fc:	e006      	b.n	800560c <HAL_RCCEx_GetPeriphCLKFreq+0x1210>
 80055fe:	4b59      	ldr	r3, [pc, #356]	@ (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005600:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005604:	041b      	lsls	r3, r3, #16
 8005606:	0e1b      	lsrs	r3, r3, #24
 8005608:	f003 030f 	and.w	r3, r3, #15
 800560c:	4a57      	ldr	r2, [pc, #348]	@ (800576c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800560e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005612:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005614:	e244      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8005616:	2300      	movs	r3, #0
 8005618:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800561a:	e241      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 800561c:	2300      	movs	r3, #0
 800561e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005620:	e23e      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8005622:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005626:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800562a:	430b      	orrs	r3, r1
 800562c:	d156      	bne.n	80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800562e:	4b4d      	ldr	r3, [pc, #308]	@ (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005634:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005638:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800563a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005640:	d028      	beq.n	8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>
 8005642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005644:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005648:	d845      	bhi.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 800564a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005650:	d013      	beq.n	800567a <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 8005652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005654:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005658:	d83d      	bhi.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 800565a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565c:	2b00      	cmp	r3, #0
 800565e:	d004      	beq.n	800566a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8005660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005662:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005666:	d004      	beq.n	8005672 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8005668:	e035      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800566a:	f7fd fb11 	bl	8002c90 <HAL_RCC_GetPCLK1Freq>
 800566e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005670:	e216      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005672:	f7fd f9eb 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 8005676:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005678:	e212      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800567a:	4b3a      	ldr	r3, [pc, #232]	@ (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005682:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005686:	d102      	bne.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
        {
          frequency = HSI_VALUE;
 8005688:	4b37      	ldr	r3, [pc, #220]	@ (8005768 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800568a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800568c:	e208      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800568e:	2300      	movs	r3, #0
 8005690:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005692:	e205      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005694:	4b33      	ldr	r3, [pc, #204]	@ (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0320 	and.w	r3, r3, #32
 800569c:	2b20      	cmp	r3, #32
 800569e:	d117      	bne.n	80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12d4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80056a0:	4b30      	ldr	r3, [pc, #192]	@ (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d005      	beq.n	80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12bc>
 80056ac:	4b2d      	ldr	r3, [pc, #180]	@ (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	0e1b      	lsrs	r3, r3, #24
 80056b2:	f003 030f 	and.w	r3, r3, #15
 80056b6:	e006      	b.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ca>
 80056b8:	4b2a      	ldr	r3, [pc, #168]	@ (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80056ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80056be:	041b      	lsls	r3, r3, #16
 80056c0:	0e1b      	lsrs	r3, r3, #24
 80056c2:	f003 030f 	and.w	r3, r3, #15
 80056c6:	4a29      	ldr	r2, [pc, #164]	@ (800576c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 80056c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056cc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80056ce:	e1e7      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80056d0:	2300      	movs	r3, #0
 80056d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80056d4:	e1e4      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80056d6:	2300      	movs	r3, #0
 80056d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80056da:	e1e1      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80056dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056e0:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80056e4:	430b      	orrs	r3, r1
 80056e6:	d17c      	bne.n	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80056e8:	4b1e      	ldr	r3, [pc, #120]	@ (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80056ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80056ee:	f003 0318 	and.w	r3, r3, #24
 80056f2:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80056f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f6:	2b18      	cmp	r3, #24
 80056f8:	d870      	bhi.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>
 80056fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005700 <HAL_RCCEx_GetPeriphCLKFreq+0x1304>)
 80056fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005700:	08005771 	.word	0x08005771
 8005704:	080057dd 	.word	0x080057dd
 8005708:	080057dd 	.word	0x080057dd
 800570c:	080057dd 	.word	0x080057dd
 8005710:	080057dd 	.word	0x080057dd
 8005714:	080057dd 	.word	0x080057dd
 8005718:	080057dd 	.word	0x080057dd
 800571c:	080057dd 	.word	0x080057dd
 8005720:	08005779 	.word	0x08005779
 8005724:	080057dd 	.word	0x080057dd
 8005728:	080057dd 	.word	0x080057dd
 800572c:	080057dd 	.word	0x080057dd
 8005730:	080057dd 	.word	0x080057dd
 8005734:	080057dd 	.word	0x080057dd
 8005738:	080057dd 	.word	0x080057dd
 800573c:	080057dd 	.word	0x080057dd
 8005740:	08005781 	.word	0x08005781
 8005744:	080057dd 	.word	0x080057dd
 8005748:	080057dd 	.word	0x080057dd
 800574c:	080057dd 	.word	0x080057dd
 8005750:	080057dd 	.word	0x080057dd
 8005754:	080057dd 	.word	0x080057dd
 8005758:	080057dd 	.word	0x080057dd
 800575c:	080057dd 	.word	0x080057dd
 8005760:	0800579b 	.word	0x0800579b
 8005764:	46020c00 	.word	0x46020c00
 8005768:	00f42400 	.word	0x00f42400
 800576c:	080073f4 	.word	0x080073f4
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8005770:	f7fd fab6 	bl	8002ce0 <HAL_RCC_GetPCLK3Freq>
 8005774:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005776:	e193      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005778:	f7fd f968 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 800577c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800577e:	e18f      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005780:	4b9f      	ldr	r3, [pc, #636]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005788:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800578c:	d102      	bne.n	8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
        {
          frequency = HSI_VALUE;
 800578e:	4b9d      	ldr	r3, [pc, #628]	@ (8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8005790:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005792:	e185      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8005794:	2300      	movs	r3, #0
 8005796:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005798:	e182      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800579a:	4b99      	ldr	r3, [pc, #612]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0320 	and.w	r3, r3, #32
 80057a2:	2b20      	cmp	r3, #32
 80057a4:	d117      	bne.n	80057d6 <HAL_RCCEx_GetPeriphCLKFreq+0x13da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80057a6:	4b96      	ldr	r3, [pc, #600]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d005      	beq.n	80057be <HAL_RCCEx_GetPeriphCLKFreq+0x13c2>
 80057b2:	4b93      	ldr	r3, [pc, #588]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	0e1b      	lsrs	r3, r3, #24
 80057b8:	f003 030f 	and.w	r3, r3, #15
 80057bc:	e006      	b.n	80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x13d0>
 80057be:	4b90      	ldr	r3, [pc, #576]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80057c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80057c4:	041b      	lsls	r3, r3, #16
 80057c6:	0e1b      	lsrs	r3, r3, #24
 80057c8:	f003 030f 	and.w	r3, r3, #15
 80057cc:	4a8e      	ldr	r2, [pc, #568]	@ (8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80057ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057d2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80057d4:	e164      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80057d6:	2300      	movs	r3, #0
 80057d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80057da:	e161      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80057dc:	2300      	movs	r3, #0
 80057de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80057e0:	e15e      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80057e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057e6:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 80057ea:	430b      	orrs	r3, r1
 80057ec:	d155      	bne.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0x149e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80057ee:	4b84      	ldr	r3, [pc, #528]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80057f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80057f4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80057f8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80057fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005800:	d013      	beq.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x142e>
 8005802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005804:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005808:	d844      	bhi.n	8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 800580a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800580c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005810:	d013      	beq.n	800583a <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
 8005812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005814:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005818:	d83c      	bhi.n	8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 800581a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800581c:	2b00      	cmp	r3, #0
 800581e:	d014      	beq.n	800584a <HAL_RCCEx_GetPeriphCLKFreq+0x144e>
 8005820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005822:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005826:	d014      	beq.n	8005852 <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 8005828:	e034      	b.n	8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800582a:	f107 0318 	add.w	r3, r7, #24
 800582e:	4618      	mov	r0, r3
 8005830:	f7fe fb14 	bl	8003e5c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005838:	e132      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800583a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800583e:	4618      	mov	r0, r3
 8005840:	f7fe f9a4 	bl	8003b8c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005846:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005848:	e12a      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800584a:	f7fd f8ff 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 800584e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005850:	e126      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005852:	4b6b      	ldr	r3, [pc, #428]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0320 	and.w	r3, r3, #32
 800585a:	2b20      	cmp	r3, #32
 800585c:	d117      	bne.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800585e:	4b68      	ldr	r3, [pc, #416]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d005      	beq.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0x147a>
 800586a:	4b65      	ldr	r3, [pc, #404]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	0e1b      	lsrs	r3, r3, #24
 8005870:	f003 030f 	and.w	r3, r3, #15
 8005874:	e006      	b.n	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x1488>
 8005876:	4b62      	ldr	r3, [pc, #392]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005878:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800587c:	041b      	lsls	r3, r3, #16
 800587e:	0e1b      	lsrs	r3, r3, #24
 8005880:	f003 030f 	and.w	r3, r3, #15
 8005884:	4a60      	ldr	r2, [pc, #384]	@ (8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8005886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800588a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800588c:	e108      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800588e:	2300      	movs	r3, #0
 8005890:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005892:	e105      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8005894:	2300      	movs	r3, #0
 8005896:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005898:	e102      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800589a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800589e:	1e59      	subs	r1, r3, #1
 80058a0:	ea52 0301 	orrs.w	r3, r2, r1
 80058a4:	d13c      	bne.n	8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 80058a6:	4b56      	ldr	r3, [pc, #344]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80058a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80058ac:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80058b0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80058b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80058b8:	d027      	beq.n	800590a <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 80058ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058bc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80058c0:	d82b      	bhi.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 80058c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80058c8:	d017      	beq.n	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0x14fe>
 80058ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80058d0:	d823      	bhi.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 80058d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d004      	beq.n	80058e2 <HAL_RCCEx_GetPeriphCLKFreq+0x14e6>
 80058d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058de:	d004      	beq.n	80058ea <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 80058e0:	e01b      	b.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80058e2:	f7fd f8b3 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 80058e6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80058e8:	e0da      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80058ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7fe f94c 	bl	8003b8c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80058f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80058f8:	e0d2      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058fa:	f107 0318 	add.w	r3, r7, #24
 80058fe:	4618      	mov	r0, r3
 8005900:	f7fe faac 	bl	8003e5c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005908:	e0ca      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800590a:	f107 030c 	add.w	r3, r7, #12
 800590e:	4618      	mov	r0, r3
 8005910:	f7fe fc0c 	bl	800412c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005918:	e0c2      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 800591a:	2300      	movs	r3, #0
 800591c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800591e:	e0bf      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8005920:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005924:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8005928:	430b      	orrs	r3, r1
 800592a:	d131      	bne.n	8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x1594>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800592c:	4b34      	ldr	r3, [pc, #208]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800592e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005932:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005936:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8005938:	4b31      	ldr	r3, [pc, #196]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800593a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b02      	cmp	r3, #2
 8005944:	d106      	bne.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
 8005946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005948:	2b00      	cmp	r3, #0
 800594a:	d103      	bne.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
    {
      frequency = LSE_VALUE;
 800594c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005950:	637b      	str	r3, [r7, #52]	@ 0x34
 8005952:	e0a5      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8005954:	4b2a      	ldr	r3, [pc, #168]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005956:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800595a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800595e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005962:	d112      	bne.n	800598a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
 8005964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005966:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800596a:	d10e      	bne.n	800598a <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800596c:	4b24      	ldr	r3, [pc, #144]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800596e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005972:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005976:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800597a:	d102      	bne.n	8005982 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
      {
        frequency = LSI_VALUE / 128U;
 800597c:	23fa      	movs	r3, #250	@ 0xfa
 800597e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005980:	e08e      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 8005982:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005986:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005988:	e08a      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800598a:	2300      	movs	r3, #0
 800598c:	637b      	str	r3, [r7, #52]	@ 0x34
 800598e:	e087      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8005990:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005994:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8005998:	430b      	orrs	r3, r1
 800599a:	d13b      	bne.n	8005a14 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800599c:	4b18      	ldr	r3, [pc, #96]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800599e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80059a2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80059a6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80059a8:	4b15      	ldr	r3, [pc, #84]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059b4:	d105      	bne.n	80059c2 <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
 80059b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d102      	bne.n	80059c2 <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
    {
      frequency = HSI48_VALUE;
 80059bc:	4b13      	ldr	r3, [pc, #76]	@ (8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 80059be:	637b      	str	r3, [r7, #52]	@ 0x34
 80059c0:	e06e      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 80059c2:	4b0f      	ldr	r3, [pc, #60]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059ce:	d106      	bne.n	80059de <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
 80059d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059d6:	d102      	bne.n	80059de <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
    {
      frequency = HSI48_VALUE >> 1U ;
 80059d8:	4b0d      	ldr	r3, [pc, #52]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 80059da:	637b      	str	r3, [r7, #52]	@ 0x34
 80059dc:	e060      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80059de:	4b08      	ldr	r3, [pc, #32]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059ea:	d106      	bne.n	80059fa <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
 80059ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059f2:	d102      	bne.n	80059fa <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
    {
      frequency = HSI_VALUE;
 80059f4:	4b03      	ldr	r3, [pc, #12]	@ (8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80059f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80059f8:	e052      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80059fa:	2300      	movs	r3, #0
 80059fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80059fe:	e04f      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8005a00:	46020c00 	.word	0x46020c00
 8005a04:	00f42400 	.word	0x00f42400
 8005a08:	080073f4 	.word	0x080073f4
 8005a0c:	02dc6c00 	.word	0x02dc6c00
 8005a10:	016e3600 	.word	0x016e3600
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 8005a14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a18:	f1a3 0108 	sub.w	r1, r3, #8
 8005a1c:	ea52 0301 	orrs.w	r3, r2, r1
 8005a20:	d13c      	bne.n	8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 8005a22:	4b22      	ldr	r3, [pc, #136]	@ (8005aac <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 8005a24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a28:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005a2c:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 8005a2e:	4b1f      	ldr	r3, [pc, #124]	@ (8005aac <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a3a:	d105      	bne.n	8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
 8005a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d102      	bne.n	8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    {
      frequency = HSE_VALUE;
 8005a42:	4b1b      	ldr	r3, [pc, #108]	@ (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x16b4>)
 8005a44:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a46:	e02b      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 8005a48:	4b18      	ldr	r3, [pc, #96]	@ (8005aac <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a54:	d106      	bne.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
 8005a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a5c:	d102      	bne.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
    {
      frequency = HSE_VALUE >> 1U ;
 8005a5e:	4b15      	ldr	r3, [pc, #84]	@ (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 8005a60:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a62:	e01d      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 8005a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a6a:	d107      	bne.n	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1680>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7fe f88b 	bl	8003b8c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8005a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a78:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a7a:	e011      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 8005a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7e:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005a82:	d108      	bne.n	8005a96 <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7fe f87f 	bl	8003b8c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a90:	085b      	lsrs	r3, r3, #1
 8005a92:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a94:	e004      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 8005a96:	2300      	movs	r3, #0
 8005a98:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a9a:	e001      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8005aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3738      	adds	r7, #56	@ 0x38
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	46020c00 	.word	0x46020c00
 8005ab0:	00f42400 	.word	0x00f42400
 8005ab4:	007a1200 	.word	0x007a1200

08005ab8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8005ac0:	4b47      	ldr	r3, [pc, #284]	@ (8005be0 <RCCEx_PLL2_Config+0x128>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a46      	ldr	r2, [pc, #280]	@ (8005be0 <RCCEx_PLL2_Config+0x128>)
 8005ac6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005aca:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005acc:	f7fb fac0 	bl	8001050 <HAL_GetTick>
 8005ad0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ad2:	e008      	b.n	8005ae6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005ad4:	f7fb fabc 	bl	8001050 <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d901      	bls.n	8005ae6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e077      	b.n	8005bd6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ae6:	4b3e      	ldr	r3, [pc, #248]	@ (8005be0 <RCCEx_PLL2_Config+0x128>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1f0      	bne.n	8005ad4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005af2:	4b3b      	ldr	r3, [pc, #236]	@ (8005be0 <RCCEx_PLL2_Config+0x128>)
 8005af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005af6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005afa:	f023 0303 	bic.w	r3, r3, #3
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	6811      	ldr	r1, [r2, #0]
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	6852      	ldr	r2, [r2, #4]
 8005b06:	3a01      	subs	r2, #1
 8005b08:	0212      	lsls	r2, r2, #8
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	4934      	ldr	r1, [pc, #208]	@ (8005be0 <RCCEx_PLL2_Config+0x128>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005b12:	4b33      	ldr	r3, [pc, #204]	@ (8005be0 <RCCEx_PLL2_Config+0x128>)
 8005b14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b16:	4b33      	ldr	r3, [pc, #204]	@ (8005be4 <RCCEx_PLL2_Config+0x12c>)
 8005b18:	4013      	ands	r3, r2
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	6892      	ldr	r2, [r2, #8]
 8005b1e:	3a01      	subs	r2, #1
 8005b20:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	68d2      	ldr	r2, [r2, #12]
 8005b28:	3a01      	subs	r2, #1
 8005b2a:	0252      	lsls	r2, r2, #9
 8005b2c:	b292      	uxth	r2, r2
 8005b2e:	4311      	orrs	r1, r2
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	6912      	ldr	r2, [r2, #16]
 8005b34:	3a01      	subs	r2, #1
 8005b36:	0412      	lsls	r2, r2, #16
 8005b38:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005b3c:	4311      	orrs	r1, r2
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6952      	ldr	r2, [r2, #20]
 8005b42:	3a01      	subs	r2, #1
 8005b44:	0612      	lsls	r2, r2, #24
 8005b46:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	4924      	ldr	r1, [pc, #144]	@ (8005be0 <RCCEx_PLL2_Config+0x128>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005b52:	4b23      	ldr	r3, [pc, #140]	@ (8005be0 <RCCEx_PLL2_Config+0x128>)
 8005b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b56:	f023 020c 	bic.w	r2, r3, #12
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	4920      	ldr	r1, [pc, #128]	@ (8005be0 <RCCEx_PLL2_Config+0x128>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005b64:	4b1e      	ldr	r3, [pc, #120]	@ (8005be0 <RCCEx_PLL2_Config+0x128>)
 8005b66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a1b      	ldr	r3, [r3, #32]
 8005b6c:	491c      	ldr	r1, [pc, #112]	@ (8005be0 <RCCEx_PLL2_Config+0x128>)
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8005b72:	4b1b      	ldr	r3, [pc, #108]	@ (8005be0 <RCCEx_PLL2_Config+0x128>)
 8005b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b76:	4a1a      	ldr	r2, [pc, #104]	@ (8005be0 <RCCEx_PLL2_Config+0x128>)
 8005b78:	f023 0310 	bic.w	r3, r3, #16
 8005b7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005b7e:	4b18      	ldr	r3, [pc, #96]	@ (8005be0 <RCCEx_PLL2_Config+0x128>)
 8005b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b86:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	69d2      	ldr	r2, [r2, #28]
 8005b8e:	00d2      	lsls	r2, r2, #3
 8005b90:	4913      	ldr	r1, [pc, #76]	@ (8005be0 <RCCEx_PLL2_Config+0x128>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8005b96:	4b12      	ldr	r3, [pc, #72]	@ (8005be0 <RCCEx_PLL2_Config+0x128>)
 8005b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b9a:	4a11      	ldr	r2, [pc, #68]	@ (8005be0 <RCCEx_PLL2_Config+0x128>)
 8005b9c:	f043 0310 	orr.w	r3, r3, #16
 8005ba0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8005ba2:	4b0f      	ldr	r3, [pc, #60]	@ (8005be0 <RCCEx_PLL2_Config+0x128>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a0e      	ldr	r2, [pc, #56]	@ (8005be0 <RCCEx_PLL2_Config+0x128>)
 8005ba8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005bac:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005bae:	f7fb fa4f 	bl	8001050 <HAL_GetTick>
 8005bb2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005bb4:	e008      	b.n	8005bc8 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005bb6:	f7fb fa4b 	bl	8001050 <HAL_GetTick>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d901      	bls.n	8005bc8 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e006      	b.n	8005bd6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005bc8:	4b05      	ldr	r3, [pc, #20]	@ (8005be0 <RCCEx_PLL2_Config+0x128>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d0f0      	beq.n	8005bb6 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0

}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	46020c00 	.word	0x46020c00
 8005be4:	80800000 	.word	0x80800000

08005be8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8005bf0:	4b47      	ldr	r3, [pc, #284]	@ (8005d10 <RCCEx_PLL3_Config+0x128>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a46      	ldr	r2, [pc, #280]	@ (8005d10 <RCCEx_PLL3_Config+0x128>)
 8005bf6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bfa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005bfc:	f7fb fa28 	bl	8001050 <HAL_GetTick>
 8005c00:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c02:	e008      	b.n	8005c16 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005c04:	f7fb fa24 	bl	8001050 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d901      	bls.n	8005c16 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e077      	b.n	8005d06 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c16:	4b3e      	ldr	r3, [pc, #248]	@ (8005d10 <RCCEx_PLL3_Config+0x128>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1f0      	bne.n	8005c04 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8005c22:	4b3b      	ldr	r3, [pc, #236]	@ (8005d10 <RCCEx_PLL3_Config+0x128>)
 8005c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c26:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005c2a:	f023 0303 	bic.w	r3, r3, #3
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	6811      	ldr	r1, [r2, #0]
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	6852      	ldr	r2, [r2, #4]
 8005c36:	3a01      	subs	r2, #1
 8005c38:	0212      	lsls	r2, r2, #8
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	4934      	ldr	r1, [pc, #208]	@ (8005d10 <RCCEx_PLL3_Config+0x128>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	630b      	str	r3, [r1, #48]	@ 0x30
 8005c42:	4b33      	ldr	r3, [pc, #204]	@ (8005d10 <RCCEx_PLL3_Config+0x128>)
 8005c44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c46:	4b33      	ldr	r3, [pc, #204]	@ (8005d14 <RCCEx_PLL3_Config+0x12c>)
 8005c48:	4013      	ands	r3, r2
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	6892      	ldr	r2, [r2, #8]
 8005c4e:	3a01      	subs	r2, #1
 8005c50:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	68d2      	ldr	r2, [r2, #12]
 8005c58:	3a01      	subs	r2, #1
 8005c5a:	0252      	lsls	r2, r2, #9
 8005c5c:	b292      	uxth	r2, r2
 8005c5e:	4311      	orrs	r1, r2
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	6912      	ldr	r2, [r2, #16]
 8005c64:	3a01      	subs	r2, #1
 8005c66:	0412      	lsls	r2, r2, #16
 8005c68:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005c6c:	4311      	orrs	r1, r2
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	6952      	ldr	r2, [r2, #20]
 8005c72:	3a01      	subs	r2, #1
 8005c74:	0612      	lsls	r2, r2, #24
 8005c76:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	4924      	ldr	r1, [pc, #144]	@ (8005d10 <RCCEx_PLL3_Config+0x128>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8005c82:	4b23      	ldr	r3, [pc, #140]	@ (8005d10 <RCCEx_PLL3_Config+0x128>)
 8005c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c86:	f023 020c 	bic.w	r2, r3, #12
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	4920      	ldr	r1, [pc, #128]	@ (8005d10 <RCCEx_PLL3_Config+0x128>)
 8005c90:	4313      	orrs	r3, r2
 8005c92:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005c94:	4b1e      	ldr	r3, [pc, #120]	@ (8005d10 <RCCEx_PLL3_Config+0x128>)
 8005c96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a1b      	ldr	r3, [r3, #32]
 8005c9c:	491c      	ldr	r1, [pc, #112]	@ (8005d10 <RCCEx_PLL3_Config+0x128>)
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8005ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8005d10 <RCCEx_PLL3_Config+0x128>)
 8005ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ca6:	4a1a      	ldr	r2, [pc, #104]	@ (8005d10 <RCCEx_PLL3_Config+0x128>)
 8005ca8:	f023 0310 	bic.w	r3, r3, #16
 8005cac:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005cae:	4b18      	ldr	r3, [pc, #96]	@ (8005d10 <RCCEx_PLL3_Config+0x128>)
 8005cb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005cb6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	69d2      	ldr	r2, [r2, #28]
 8005cbe:	00d2      	lsls	r2, r2, #3
 8005cc0:	4913      	ldr	r1, [pc, #76]	@ (8005d10 <RCCEx_PLL3_Config+0x128>)
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8005cc6:	4b12      	ldr	r3, [pc, #72]	@ (8005d10 <RCCEx_PLL3_Config+0x128>)
 8005cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cca:	4a11      	ldr	r2, [pc, #68]	@ (8005d10 <RCCEx_PLL3_Config+0x128>)
 8005ccc:	f043 0310 	orr.w	r3, r3, #16
 8005cd0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8005cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8005d10 <RCCEx_PLL3_Config+0x128>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a0e      	ldr	r2, [pc, #56]	@ (8005d10 <RCCEx_PLL3_Config+0x128>)
 8005cd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cdc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005cde:	f7fb f9b7 	bl	8001050 <HAL_GetTick>
 8005ce2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ce4:	e008      	b.n	8005cf8 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005ce6:	f7fb f9b3 	bl	8001050 <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d901      	bls.n	8005cf8 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e006      	b.n	8005d06 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005cf8:	4b05      	ldr	r3, [pc, #20]	@ (8005d10 <RCCEx_PLL3_Config+0x128>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d0f0      	beq.n	8005ce6 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	46020c00 	.word	0x46020c00
 8005d14:	80800000 	.word	0x80800000

08005d18 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d101      	bne.n	8005d2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e0fb      	b.n	8005f22 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a7f      	ldr	r2, [pc, #508]	@ (8005f2c <HAL_SPI_Init+0x214>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d004      	beq.n	8005d3e <HAL_SPI_Init+0x26>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a7d      	ldr	r2, [pc, #500]	@ (8005f30 <HAL_SPI_Init+0x218>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	e000      	b.n	8005d40 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8005d3e:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a78      	ldr	r2, [pc, #480]	@ (8005f2c <HAL_SPI_Init+0x214>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d004      	beq.n	8005d5a <HAL_SPI_Init+0x42>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a76      	ldr	r2, [pc, #472]	@ (8005f30 <HAL_SPI_Init+0x218>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d105      	bne.n	8005d66 <HAL_SPI_Init+0x4e>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	2b0f      	cmp	r3, #15
 8005d60:	d901      	bls.n	8005d66 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e0dd      	b.n	8005f22 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 fd88 	bl	800687c <SPI_GetPacketSize>
 8005d6c:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a6e      	ldr	r2, [pc, #440]	@ (8005f2c <HAL_SPI_Init+0x214>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d004      	beq.n	8005d82 <HAL_SPI_Init+0x6a>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a6c      	ldr	r2, [pc, #432]	@ (8005f30 <HAL_SPI_Init+0x218>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d102      	bne.n	8005d88 <HAL_SPI_Init+0x70>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2b08      	cmp	r3, #8
 8005d86:	d816      	bhi.n	8005db6 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005d8c:	4a69      	ldr	r2, [pc, #420]	@ (8005f34 <HAL_SPI_Init+0x21c>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d00e      	beq.n	8005db0 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a68      	ldr	r2, [pc, #416]	@ (8005f38 <HAL_SPI_Init+0x220>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d009      	beq.n	8005db0 <HAL_SPI_Init+0x98>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a66      	ldr	r2, [pc, #408]	@ (8005f3c <HAL_SPI_Init+0x224>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d004      	beq.n	8005db0 <HAL_SPI_Init+0x98>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a65      	ldr	r2, [pc, #404]	@ (8005f40 <HAL_SPI_Init+0x228>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d104      	bne.n	8005dba <HAL_SPI_Init+0xa2>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2b10      	cmp	r3, #16
 8005db4:	d901      	bls.n	8005dba <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e0b3      	b.n	8005f22 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d106      	bne.n	8005dd4 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f7fa fefa 	bl	8000bc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f022 0201 	bic.w	r2, r2, #1
 8005dea:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8005df6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e00:	d119      	bne.n	8005e36 <HAL_SPI_Init+0x11e>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e0a:	d103      	bne.n	8005e14 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d008      	beq.n	8005e26 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d10c      	bne.n	8005e36 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005e20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e24:	d107      	bne.n	8005e36 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005e34:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00f      	beq.n	8005e62 <HAL_SPI_Init+0x14a>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	2b06      	cmp	r3, #6
 8005e48:	d90b      	bls.n	8005e62 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	601a      	str	r2, [r3, #0]
 8005e60:	e007      	b.n	8005e72 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e70:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	69da      	ldr	r2, [r3, #28]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e7a:	431a      	orrs	r2, r3
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	431a      	orrs	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e84:	ea42 0103 	orr.w	r1, r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68da      	ldr	r2, [r3, #12]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	430a      	orrs	r2, r1
 8005e92:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e9c:	431a      	orrs	r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ea2:	431a      	orrs	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	431a      	orrs	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	431a      	orrs	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	431a      	orrs	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a1b      	ldr	r3, [r3, #32]
 8005eba:	431a      	orrs	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	431a      	orrs	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ec6:	431a      	orrs	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	431a      	orrs	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ed2:	431a      	orrs	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ed8:	431a      	orrs	r2, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ede:	ea42 0103 	orr.w	r1, r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	430a      	orrs	r2, r1
 8005eec:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00a      	beq.n	8005f10 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	430a      	orrs	r2, r1
 8005f0e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	46002000 	.word	0x46002000
 8005f30:	56002000 	.word	0x56002000
 8005f34:	40013000 	.word	0x40013000
 8005f38:	50013000 	.word	0x50013000
 8005f3c:	40003800 	.word	0x40003800
 8005f40:	50003800 	.word	0x50003800

08005f44 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b08a      	sub	sp, #40	@ 0x28
 8005f48:	af02      	add	r7, sp, #8
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	603b      	str	r3, [r7, #0]
 8005f50:	4613      	mov	r3, r2
 8005f52:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	3320      	adds	r3, #32
 8005f5a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d101      	bne.n	8005f6e <HAL_SPI_Transmit+0x2a>
 8005f6a:	2302      	movs	r3, #2
 8005f6c:	e203      	b.n	8006376 <HAL_SPI_Transmit+0x432>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f76:	f7fb f86b 	bl	8001050 <HAL_GetTick>
 8005f7a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d007      	beq.n	8005f98 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8005f88:	2302      	movs	r3, #2
 8005f8a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return errorcode;
 8005f94:	7efb      	ldrb	r3, [r7, #27]
 8005f96:	e1ee      	b.n	8006376 <HAL_SPI_Transmit+0x432>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d002      	beq.n	8005fa4 <HAL_SPI_Transmit+0x60>
 8005f9e:	88fb      	ldrh	r3, [r7, #6]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d107      	bne.n	8005fb4 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return errorcode;
 8005fb0:	7efb      	ldrb	r3, [r7, #27]
 8005fb2:	e1e0      	b.n	8006376 <HAL_SPI_Transmit+0x432>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2203      	movs	r2, #3
 8005fb8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	88fa      	ldrh	r2, [r7, #6]
 8005fce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	88fa      	ldrh	r2, [r7, #6]
 8005fd6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006004:	d108      	bne.n	8006018 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006014:	601a      	str	r2, [r3, #0]
 8006016:	e009      	b.n	800602c <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800602a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	0c1b      	lsrs	r3, r3, #16
 8006034:	041b      	lsls	r3, r3, #16
 8006036:	88f9      	ldrh	r1, [r7, #6]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	6812      	ldr	r2, [r2, #0]
 800603c:	430b      	orrs	r3, r1
 800603e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f042 0201 	orr.w	r2, r2, #1
 800604e:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	69db      	ldr	r3, [r3, #28]
 8006056:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10c      	bne.n	8006078 <HAL_SPI_Transmit+0x134>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006066:	d107      	bne.n	8006078 <HAL_SPI_Transmit+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006076:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	2b0f      	cmp	r3, #15
 800607e:	d95b      	bls.n	8006138 <HAL_SPI_Transmit+0x1f4>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a8f      	ldr	r2, [pc, #572]	@ (80062c4 <HAL_SPI_Transmit+0x380>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d04f      	beq.n	800612a <HAL_SPI_Transmit+0x1e6>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a8e      	ldr	r2, [pc, #568]	@ (80062c8 <HAL_SPI_Transmit+0x384>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d04a      	beq.n	800612a <HAL_SPI_Transmit+0x1e6>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a8c      	ldr	r2, [pc, #560]	@ (80062cc <HAL_SPI_Transmit+0x388>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d045      	beq.n	800612a <HAL_SPI_Transmit+0x1e6>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a8b      	ldr	r2, [pc, #556]	@ (80062d0 <HAL_SPI_Transmit+0x38c>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d147      	bne.n	8006138 <HAL_SPI_Transmit+0x1f4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80060a8:	e03f      	b.n	800612a <HAL_SPI_Transmit+0x1e6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	695b      	ldr	r3, [r3, #20]
 80060b0:	f003 0302 	and.w	r3, r3, #2
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d114      	bne.n	80060e2 <HAL_SPI_Transmit+0x19e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6812      	ldr	r2, [r2, #0]
 80060c2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060c8:	1d1a      	adds	r2, r3, #4
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	3b01      	subs	r3, #1
 80060d8:	b29a      	uxth	r2, r3
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80060e0:	e023      	b.n	800612a <HAL_SPI_Transmit+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060e2:	f7fa ffb5 	bl	8001050 <HAL_GetTick>
 80060e6:	4602      	mov	r2, r0
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d803      	bhi.n	80060fa <HAL_SPI_Transmit+0x1b6>
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f8:	d102      	bne.n	8006100 <HAL_SPI_Transmit+0x1bc>
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d114      	bne.n	800612a <HAL_SPI_Transmit+0x1e6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f000 faed 	bl	80066e0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006114:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2201      	movs	r2, #1
 8006122:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
          return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e125      	b.n	8006376 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006130:	b29b      	uxth	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1b9      	bne.n	80060aa <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8006136:	e0f8      	b.n	800632a <HAL_SPI_Transmit+0x3e6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	2b07      	cmp	r3, #7
 800613e:	f240 80ed 	bls.w	800631c <HAL_SPI_Transmit+0x3d8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006142:	e05d      	b.n	8006200 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	f003 0302 	and.w	r3, r3, #2
 800614e:	2b02      	cmp	r3, #2
 8006150:	d132      	bne.n	80061b8 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006158:	b29b      	uxth	r3, r3
 800615a:	2b01      	cmp	r3, #1
 800615c:	d918      	bls.n	8006190 <HAL_SPI_Transmit+0x24c>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006162:	2b00      	cmp	r3, #0
 8006164:	d014      	beq.n	8006190 <HAL_SPI_Transmit+0x24c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	6812      	ldr	r2, [r2, #0]
 8006170:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006176:	1d1a      	adds	r2, r3, #4
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006182:	b29b      	uxth	r3, r3
 8006184:	3b02      	subs	r3, #2
 8006186:	b29a      	uxth	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800618e:	e037      	b.n	8006200 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006194:	881a      	ldrh	r2, [r3, #0]
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800619e:	1c9a      	adds	r2, r3, #2
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	3b01      	subs	r3, #1
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80061b6:	e023      	b.n	8006200 <HAL_SPI_Transmit+0x2bc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061b8:	f7fa ff4a 	bl	8001050 <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	683a      	ldr	r2, [r7, #0]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d803      	bhi.n	80061d0 <HAL_SPI_Transmit+0x28c>
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ce:	d102      	bne.n	80061d6 <HAL_SPI_Transmit+0x292>
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d114      	bne.n	8006200 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f000 fa82 	bl	80066e0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80061ea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
          return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e0ba      	b.n	8006376 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006206:	b29b      	uxth	r3, r3
 8006208:	2b00      	cmp	r3, #0
 800620a:	d19b      	bne.n	8006144 <HAL_SPI_Transmit+0x200>
 800620c:	e08d      	b.n	800632a <HAL_SPI_Transmit+0x3e6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	695b      	ldr	r3, [r3, #20]
 8006214:	f003 0302 	and.w	r3, r3, #2
 8006218:	2b02      	cmp	r3, #2
 800621a:	d15b      	bne.n	80062d4 <HAL_SPI_Transmit+0x390>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006222:	b29b      	uxth	r3, r3
 8006224:	2b03      	cmp	r3, #3
 8006226:	d918      	bls.n	800625a <HAL_SPI_Transmit+0x316>
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800622c:	2b40      	cmp	r3, #64	@ 0x40
 800622e:	d914      	bls.n	800625a <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6812      	ldr	r2, [r2, #0]
 800623a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006240:	1d1a      	adds	r2, r3, #4
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800624c:	b29b      	uxth	r3, r3
 800624e:	3b04      	subs	r3, #4
 8006250:	b29a      	uxth	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006258:	e060      	b.n	800631c <HAL_SPI_Transmit+0x3d8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006260:	b29b      	uxth	r3, r3
 8006262:	2b01      	cmp	r3, #1
 8006264:	d917      	bls.n	8006296 <HAL_SPI_Transmit+0x352>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800626a:	2b00      	cmp	r3, #0
 800626c:	d013      	beq.n	8006296 <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006272:	881a      	ldrh	r2, [r3, #0]
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800627c:	1c9a      	adds	r2, r3, #2
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006288:	b29b      	uxth	r3, r3
 800628a:	3b02      	subs	r3, #2
 800628c:	b29a      	uxth	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006294:	e042      	b.n	800631c <HAL_SPI_Transmit+0x3d8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	3320      	adds	r3, #32
 80062a0:	7812      	ldrb	r2, [r2, #0]
 80062a2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062a8:	1c5a      	adds	r2, r3, #1
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	3b01      	subs	r3, #1
 80062b8:	b29a      	uxth	r2, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80062c0:	e02c      	b.n	800631c <HAL_SPI_Transmit+0x3d8>
 80062c2:	bf00      	nop
 80062c4:	40013000 	.word	0x40013000
 80062c8:	50013000 	.word	0x50013000
 80062cc:	40003800 	.word	0x40003800
 80062d0:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062d4:	f7fa febc 	bl	8001050 <HAL_GetTick>
 80062d8:	4602      	mov	r2, r0
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	683a      	ldr	r2, [r7, #0]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d803      	bhi.n	80062ec <HAL_SPI_Transmit+0x3a8>
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ea:	d102      	bne.n	80062f2 <HAL_SPI_Transmit+0x3ae>
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d114      	bne.n	800631c <HAL_SPI_Transmit+0x3d8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f000 f9f4 	bl	80066e0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006306:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
          return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e02c      	b.n	8006376 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006322:	b29b      	uxth	r3, r3
 8006324:	2b00      	cmp	r3, #0
 8006326:	f47f af72 	bne.w	800620e <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	9300      	str	r3, [sp, #0]
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	2200      	movs	r2, #0
 8006332:	2108      	movs	r1, #8
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f000 fa73 	bl	8006820 <SPI_WaitOnFlagUntilTimeout>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d007      	beq.n	8006350 <HAL_SPI_Transmit+0x40c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006346:	f043 0220 	orr.w	r2, r3, #32
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f000 f9c5 	bl	80066e0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  hspi->State = HAL_SPI_STATE_READY;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800636c:	2b00      	cmp	r3, #0
 800636e:	d001      	beq.n	8006374 <HAL_SPI_Transmit+0x430>
  {
    return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e000      	b.n	8006376 <HAL_SPI_Transmit+0x432>
  }
  return errorcode;
 8006374:	7efb      	ldrb	r3, [r7, #27]
}
 8006376:	4618      	mov	r0, r3
 8006378:	3720      	adds	r7, #32
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop

08006380 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b088      	sub	sp, #32
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	603b      	str	r3, [r7, #0]
 800638c:	4613      	mov	r3, r2
 800638e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006390:	2300      	movs	r3, #0
 8006392:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	3330      	adds	r3, #48	@ 0x30
 800639a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d101      	bne.n	80063aa <HAL_SPI_Receive+0x2a>
 80063a6:	2302      	movs	r3, #2
 80063a8:	e18e      	b.n	80066c8 <HAL_SPI_Receive+0x348>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063b2:	f7fa fe4d 	bl	8001050 <HAL_GetTick>
 80063b6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d007      	beq.n	80063d4 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 80063c4:	2302      	movs	r3, #2
 80063c6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return errorcode;
 80063d0:	7ffb      	ldrb	r3, [r7, #31]
 80063d2:	e179      	b.n	80066c8 <HAL_SPI_Receive+0x348>
  }

  if ((pData == NULL) || (Size == 0UL))
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d002      	beq.n	80063e0 <HAL_SPI_Receive+0x60>
 80063da:	88fb      	ldrh	r3, [r7, #6]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d107      	bne.n	80063f0 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return errorcode;
 80063ec:	7ffb      	ldrb	r3, [r7, #31]
 80063ee:	e16b      	b.n	80066c8 <HAL_SPI_Receive+0x348>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2204      	movs	r2, #4
 80063f4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	88fa      	ldrh	r2, [r7, #6]
 800640a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	88fa      	ldrh	r2, [r7, #6]
 8006412:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2200      	movs	r2, #0
 8006420:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006440:	d108      	bne.n	8006454 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006450:	601a      	str	r2, [r3, #0]
 8006452:	e009      	b.n	8006468 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006466:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	0c1b      	lsrs	r3, r3, #16
 8006470:	041b      	lsls	r3, r3, #16
 8006472:	88f9      	ldrh	r1, [r7, #6]
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	6812      	ldr	r2, [r2, #0]
 8006478:	430b      	orrs	r3, r1
 800647a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f042 0201 	orr.w	r2, r2, #1
 800648a:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	69db      	ldr	r3, [r3, #28]
 8006492:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10c      	bne.n	80064b4 <HAL_SPI_Receive+0x134>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064a2:	d107      	bne.n	80064b4 <HAL_SPI_Receive+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064b2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	2b0f      	cmp	r3, #15
 80064ba:	d95c      	bls.n	8006576 <HAL_SPI_Receive+0x1f6>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a83      	ldr	r2, [pc, #524]	@ (80066d0 <HAL_SPI_Receive+0x350>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d050      	beq.n	8006568 <HAL_SPI_Receive+0x1e8>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a82      	ldr	r2, [pc, #520]	@ (80066d4 <HAL_SPI_Receive+0x354>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d04b      	beq.n	8006568 <HAL_SPI_Receive+0x1e8>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a80      	ldr	r2, [pc, #512]	@ (80066d8 <HAL_SPI_Receive+0x358>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d046      	beq.n	8006568 <HAL_SPI_Receive+0x1e8>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a7f      	ldr	r2, [pc, #508]	@ (80066dc <HAL_SPI_Receive+0x35c>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d148      	bne.n	8006576 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80064e4:	e040      	b.n	8006568 <HAL_SPI_Receive+0x1e8>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	695a      	ldr	r2, [r3, #20]
 80064ec:	f248 0308 	movw	r3, #32776	@ 0x8008
 80064f0:	4013      	ands	r3, r2
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d014      	beq.n	8006520 <HAL_SPI_Receive+0x1a0>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064fe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006500:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006506:	1d1a      	adds	r2, r3, #4
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006512:	b29b      	uxth	r3, r3
 8006514:	3b01      	subs	r3, #1
 8006516:	b29a      	uxth	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800651e:	e023      	b.n	8006568 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006520:	f7fa fd96 	bl	8001050 <HAL_GetTick>
 8006524:	4602      	mov	r2, r0
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	683a      	ldr	r2, [r7, #0]
 800652c:	429a      	cmp	r2, r3
 800652e:	d803      	bhi.n	8006538 <HAL_SPI_Receive+0x1b8>
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006536:	d102      	bne.n	800653e <HAL_SPI_Receive+0x1be>
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d114      	bne.n	8006568 <HAL_SPI_Receive+0x1e8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f000 f8ce 	bl	80066e0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006552:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
          return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e0af      	b.n	80066c8 <HAL_SPI_Receive+0x348>
    while (hspi->RxXferCount > 0UL)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800656e:	b29b      	uxth	r3, r3
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1b8      	bne.n	80064e6 <HAL_SPI_Receive+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8006574:	e095      	b.n	80066a2 <HAL_SPI_Receive+0x322>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	2b07      	cmp	r3, #7
 800657c:	f240 808b 	bls.w	8006696 <HAL_SPI_Receive+0x316>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006580:	e03f      	b.n	8006602 <HAL_SPI_Receive+0x282>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	f003 0301 	and.w	r3, r3, #1
 800658c:	2b01      	cmp	r3, #1
 800658e:	d114      	bne.n	80065ba <HAL_SPI_Receive+0x23a>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006594:	69ba      	ldr	r2, [r7, #24]
 8006596:	8812      	ldrh	r2, [r2, #0]
 8006598:	b292      	uxth	r2, r2
 800659a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065a0:	1c9a      	adds	r2, r3, #2
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	3b01      	subs	r3, #1
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80065b8:	e023      	b.n	8006602 <HAL_SPI_Receive+0x282>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065ba:	f7fa fd49 	bl	8001050 <HAL_GetTick>
 80065be:	4602      	mov	r2, r0
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d803      	bhi.n	80065d2 <HAL_SPI_Receive+0x252>
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d0:	d102      	bne.n	80065d8 <HAL_SPI_Receive+0x258>
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d114      	bne.n	8006602 <HAL_SPI_Receive+0x282>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f000 f881 	bl	80066e0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
          return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e062      	b.n	80066c8 <HAL_SPI_Receive+0x348>
    while (hspi->RxXferCount > 0UL)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006608:	b29b      	uxth	r3, r3
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1b9      	bne.n	8006582 <HAL_SPI_Receive+0x202>
 800660e:	e048      	b.n	80066a2 <HAL_SPI_Receive+0x322>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	f003 0301 	and.w	r3, r3, #1
 800661a:	2b01      	cmp	r3, #1
 800661c:	d117      	bne.n	800664e <HAL_SPI_Receive+0x2ce>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800662a:	7812      	ldrb	r2, [r2, #0]
 800662c:	b2d2      	uxtb	r2, r2
 800662e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006634:	1c5a      	adds	r2, r3, #1
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006640:	b29b      	uxth	r3, r3
 8006642:	3b01      	subs	r3, #1
 8006644:	b29a      	uxth	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800664c:	e023      	b.n	8006696 <HAL_SPI_Receive+0x316>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800664e:	f7fa fcff 	bl	8001050 <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	683a      	ldr	r2, [r7, #0]
 800665a:	429a      	cmp	r2, r3
 800665c:	d803      	bhi.n	8006666 <HAL_SPI_Receive+0x2e6>
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006664:	d102      	bne.n	800666c <HAL_SPI_Receive+0x2ec>
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d114      	bne.n	8006696 <HAL_SPI_Receive+0x316>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f000 f837 	bl	80066e0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006680:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2201      	movs	r2, #1
 800668e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
          return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e018      	b.n	80066c8 <HAL_SPI_Receive+0x348>
    while (hspi->RxXferCount > 0UL)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800669c:	b29b      	uxth	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1b6      	bne.n	8006610 <HAL_SPI_Receive+0x290>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f000 f81c 	bl	80066e0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  hspi->State = HAL_SPI_STATE_READY;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d001      	beq.n	80066c6 <HAL_SPI_Receive+0x346>
  {
    return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e000      	b.n	80066c8 <HAL_SPI_Receive+0x348>
  }
  return errorcode;
 80066c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3720      	adds	r7, #32
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	40013000 	.word	0x40013000
 80066d4:	50013000 	.word	0x50013000
 80066d8:	40003800 	.word	0x40003800
 80066dc:	50003800 	.word	0x50003800

080066e0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	699a      	ldr	r2, [r3, #24]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f042 0208 	orr.w	r2, r2, #8
 80066fe:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	699a      	ldr	r2, [r3, #24]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f042 0210 	orr.w	r2, r2, #16
 800670e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f022 0201 	bic.w	r2, r2, #1
 800671e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	6812      	ldr	r2, [r2, #0]
 800672a:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800672e:	f023 0303 	bic.w	r3, r3, #3
 8006732:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	689a      	ldr	r2, [r3, #8]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006742:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800674a:	b2db      	uxtb	r3, r3
 800674c:	2b04      	cmp	r3, #4
 800674e:	d014      	beq.n	800677a <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f003 0320 	and.w	r3, r3, #32
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00f      	beq.n	800677a <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006760:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	699a      	ldr	r2, [r3, #24]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f042 0220 	orr.w	r2, r2, #32
 8006778:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b03      	cmp	r3, #3
 8006784:	d014      	beq.n	80067b0 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00f      	beq.n	80067b0 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006796:	f043 0204 	orr.w	r2, r3, #4
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	699a      	ldr	r2, [r3, #24]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067ae:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00f      	beq.n	80067da <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067c0:	f043 0201 	orr.w	r2, r3, #1
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	699a      	ldr	r2, [r3, #24]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067d8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00f      	beq.n	8006804 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067ea:	f043 0208 	orr.w	r2, r3, #8
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	699a      	ldr	r2, [r3, #24]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006802:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8006814:	bf00      	nop
 8006816:	3714      	adds	r7, #20
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	603b      	str	r3, [r7, #0]
 800682c:	4613      	mov	r3, r2
 800682e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006830:	e010      	b.n	8006854 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006832:	f7fa fc0d 	bl	8001050 <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	683a      	ldr	r2, [r7, #0]
 800683e:	429a      	cmp	r2, r3
 8006840:	d803      	bhi.n	800684a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006848:	d102      	bne.n	8006850 <SPI_WaitOnFlagUntilTimeout+0x30>
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d101      	bne.n	8006854 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e00f      	b.n	8006874 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	695a      	ldr	r2, [r3, #20]
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	4013      	ands	r3, r2
 800685e:	68ba      	ldr	r2, [r7, #8]
 8006860:	429a      	cmp	r2, r3
 8006862:	bf0c      	ite	eq
 8006864:	2301      	moveq	r3, #1
 8006866:	2300      	movne	r3, #0
 8006868:	b2db      	uxtb	r3, r3
 800686a:	461a      	mov	r2, r3
 800686c:	79fb      	ldrb	r3, [r7, #7]
 800686e:	429a      	cmp	r2, r3
 8006870:	d0df      	beq.n	8006832 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006888:	095b      	lsrs	r3, r3, #5
 800688a:	3301      	adds	r3, #1
 800688c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	3301      	adds	r3, #1
 8006894:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	3307      	adds	r3, #7
 800689a:	08db      	lsrs	r3, r3, #3
 800689c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	fb02 f303 	mul.w	r3, r2, r3
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr

080068b2 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 80068b2:	b480      	push	{r7}
 80068b4:	b083      	sub	sp, #12
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
 80068ba:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d12e      	bne.n	8006926 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d101      	bne.n	80068d6 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 80068d2:	2302      	movs	r3, #2
 80068d4:	e028      	b.n	8006928 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2201      	movs	r2, #1
 80068da:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2202      	movs	r2, #2
 80068e2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f022 0201 	bic.w	r2, r2, #1
 80068f4:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8006902:	ea42 0103 	orr.w	r1, r2, r3
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	689a      	ldr	r2, [r3, #8]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	430a      	orrs	r2, r1
 8006910:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006922:	2300      	movs	r3, #0
 8006924:	e000      	b.n	8006928 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
  }
}
 8006928:	4618      	mov	r0, r3
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d101      	bne.n	8006946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e042      	b.n	80069cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800694c:	2b00      	cmp	r3, #0
 800694e:	d106      	bne.n	800695e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f7fa fa6d 	bl	8000e38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2224      	movs	r2, #36	@ 0x24
 8006962:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f022 0201 	bic.w	r2, r2, #1
 8006974:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 f82c 	bl	80069d4 <UART_SetConfig>
 800697c:	4603      	mov	r3, r0
 800697e:	2b01      	cmp	r3, #1
 8006980:	d101      	bne.n	8006986 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e022      	b.n	80069cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800698a:	2b00      	cmp	r3, #0
 800698c:	d002      	beq.n	8006994 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 f9ce 	bl	8006d30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	685a      	ldr	r2, [r3, #4]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80069a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	689a      	ldr	r2, [r3, #8]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80069b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f042 0201 	orr.w	r2, r2, #1
 80069c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fa55 	bl	8006e74 <UART_CheckIdleState>
 80069ca:	4603      	mov	r3, r0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3708      	adds	r7, #8
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069d8:	b094      	sub	sp, #80	@ 0x50
 80069da:	af00      	add	r7, sp, #0
 80069dc:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069de:	2300      	movs	r3, #0
 80069e0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80069e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	4b83      	ldr	r3, [pc, #524]	@ (8006bf8 <UART_SetConfig+0x224>)
 80069ea:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ee:	689a      	ldr	r2, [r3, #8]
 80069f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	431a      	orrs	r2, r3
 80069f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	431a      	orrs	r2, r3
 80069fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069fe:	69db      	ldr	r3, [r3, #28]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	497c      	ldr	r1, [pc, #496]	@ (8006bfc <UART_SetConfig+0x228>)
 8006a0c:	4019      	ands	r1, r3
 8006a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a14:	430b      	orrs	r3, r1
 8006a16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a24:	68d9      	ldr	r1, [r3, #12]
 8006a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	ea40 0301 	orr.w	r3, r0, r1
 8006a2e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	4b6f      	ldr	r3, [pc, #444]	@ (8006bf8 <UART_SetConfig+0x224>)
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d009      	beq.n	8006a54 <UART_SetConfig+0x80>
 8006a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	4b6e      	ldr	r3, [pc, #440]	@ (8006c00 <UART_SetConfig+0x22c>)
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d004      	beq.n	8006a54 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a4c:	6a1a      	ldr	r2, [r3, #32]
 8006a4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a50:	4313      	orrs	r3, r2
 8006a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8006a5e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8006a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a68:	430b      	orrs	r3, r1
 8006a6a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a72:	f023 000f 	bic.w	r0, r3, #15
 8006a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a78:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	ea40 0301 	orr.w	r3, r0, r1
 8006a82:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	4b5e      	ldr	r3, [pc, #376]	@ (8006c04 <UART_SetConfig+0x230>)
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d102      	bne.n	8006a94 <UART_SetConfig+0xc0>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a92:	e032      	b.n	8006afa <UART_SetConfig+0x126>
 8006a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	4b5b      	ldr	r3, [pc, #364]	@ (8006c08 <UART_SetConfig+0x234>)
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d102      	bne.n	8006aa4 <UART_SetConfig+0xd0>
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006aa2:	e02a      	b.n	8006afa <UART_SetConfig+0x126>
 8006aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	4b58      	ldr	r3, [pc, #352]	@ (8006c0c <UART_SetConfig+0x238>)
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d102      	bne.n	8006ab4 <UART_SetConfig+0xe0>
 8006aae:	2304      	movs	r3, #4
 8006ab0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ab2:	e022      	b.n	8006afa <UART_SetConfig+0x126>
 8006ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	4b55      	ldr	r3, [pc, #340]	@ (8006c10 <UART_SetConfig+0x23c>)
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d102      	bne.n	8006ac4 <UART_SetConfig+0xf0>
 8006abe:	2308      	movs	r3, #8
 8006ac0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ac2:	e01a      	b.n	8006afa <UART_SetConfig+0x126>
 8006ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	4b52      	ldr	r3, [pc, #328]	@ (8006c14 <UART_SetConfig+0x240>)
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d102      	bne.n	8006ad4 <UART_SetConfig+0x100>
 8006ace:	2310      	movs	r3, #16
 8006ad0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ad2:	e012      	b.n	8006afa <UART_SetConfig+0x126>
 8006ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	4b4f      	ldr	r3, [pc, #316]	@ (8006c18 <UART_SetConfig+0x244>)
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d103      	bne.n	8006ae6 <UART_SetConfig+0x112>
 8006ade:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8006ae2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ae4:	e009      	b.n	8006afa <UART_SetConfig+0x126>
 8006ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	4b43      	ldr	r3, [pc, #268]	@ (8006bf8 <UART_SetConfig+0x224>)
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d102      	bne.n	8006af6 <UART_SetConfig+0x122>
 8006af0:	2320      	movs	r3, #32
 8006af2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006af4:	e001      	b.n	8006afa <UART_SetConfig+0x126>
 8006af6:	2300      	movs	r3, #0
 8006af8:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	4b3e      	ldr	r3, [pc, #248]	@ (8006bf8 <UART_SetConfig+0x224>)
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d005      	beq.n	8006b10 <UART_SetConfig+0x13c>
 8006b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	4b3d      	ldr	r3, [pc, #244]	@ (8006c00 <UART_SetConfig+0x22c>)
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	f040 8088 	bne.w	8006c20 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006b10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b12:	2200      	movs	r2, #0
 8006b14:	623b      	str	r3, [r7, #32]
 8006b16:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b18:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006b1c:	f7fd fc6e 	bl	80043fc <HAL_RCCEx_GetPeriphCLKFreq>
 8006b20:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f000 80eb 	beq.w	8006d00 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b2e:	4a3b      	ldr	r2, [pc, #236]	@ (8006c1c <UART_SetConfig+0x248>)
 8006b30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b34:	461a      	mov	r2, r3
 8006b36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b38:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b3c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b40:	685a      	ldr	r2, [r3, #4]
 8006b42:	4613      	mov	r3, r2
 8006b44:	005b      	lsls	r3, r3, #1
 8006b46:	4413      	add	r3, r2
 8006b48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d305      	bcc.n	8006b5a <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d903      	bls.n	8006b62 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006b60:	e048      	b.n	8006bf4 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b64:	2200      	movs	r2, #0
 8006b66:	61bb      	str	r3, [r7, #24]
 8006b68:	61fa      	str	r2, [r7, #28]
 8006b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b6e:	4a2b      	ldr	r2, [pc, #172]	@ (8006c1c <UART_SetConfig+0x248>)
 8006b70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	2200      	movs	r2, #0
 8006b78:	613b      	str	r3, [r7, #16]
 8006b7a:	617a      	str	r2, [r7, #20]
 8006b7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006b80:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006b84:	f7f9 fb84 	bl	8000290 <__aeabi_uldivmod>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	4610      	mov	r0, r2
 8006b8e:	4619      	mov	r1, r3
 8006b90:	f04f 0200 	mov.w	r2, #0
 8006b94:	f04f 0300 	mov.w	r3, #0
 8006b98:	020b      	lsls	r3, r1, #8
 8006b9a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006b9e:	0202      	lsls	r2, r0, #8
 8006ba0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ba2:	6849      	ldr	r1, [r1, #4]
 8006ba4:	0849      	lsrs	r1, r1, #1
 8006ba6:	2000      	movs	r0, #0
 8006ba8:	460c      	mov	r4, r1
 8006baa:	4605      	mov	r5, r0
 8006bac:	eb12 0804 	adds.w	r8, r2, r4
 8006bb0:	eb43 0905 	adc.w	r9, r3, r5
 8006bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	60bb      	str	r3, [r7, #8]
 8006bbc:	60fa      	str	r2, [r7, #12]
 8006bbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006bc2:	4640      	mov	r0, r8
 8006bc4:	4649      	mov	r1, r9
 8006bc6:	f7f9 fb63 	bl	8000290 <__aeabi_uldivmod>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	460b      	mov	r3, r1
 8006bce:	4613      	mov	r3, r2
 8006bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006bd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bd8:	d308      	bcc.n	8006bec <UART_SetConfig+0x218>
 8006bda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bdc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006be0:	d204      	bcs.n	8006bec <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 8006be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006be8:	60da      	str	r2, [r3, #12]
 8006bea:	e003      	b.n	8006bf4 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8006bf2:	e085      	b.n	8006d00 <UART_SetConfig+0x32c>
 8006bf4:	e084      	b.n	8006d00 <UART_SetConfig+0x32c>
 8006bf6:	bf00      	nop
 8006bf8:	46002400 	.word	0x46002400
 8006bfc:	cfff69f3 	.word	0xcfff69f3
 8006c00:	56002400 	.word	0x56002400
 8006c04:	40013800 	.word	0x40013800
 8006c08:	40004400 	.word	0x40004400
 8006c0c:	40004800 	.word	0x40004800
 8006c10:	40004c00 	.word	0x40004c00
 8006c14:	40005000 	.word	0x40005000
 8006c18:	40006400 	.word	0x40006400
 8006c1c:	080074b4 	.word	0x080074b4
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c22:	69db      	ldr	r3, [r3, #28]
 8006c24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c28:	d13c      	bne.n	8006ca4 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006c2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	603b      	str	r3, [r7, #0]
 8006c30:	607a      	str	r2, [r7, #4]
 8006c32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c36:	f7fd fbe1 	bl	80043fc <HAL_RCCEx_GetPeriphCLKFreq>
 8006c3a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d05e      	beq.n	8006d00 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c46:	4a39      	ldr	r2, [pc, #228]	@ (8006d2c <UART_SetConfig+0x358>)
 8006c48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c50:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c54:	005a      	lsls	r2, r3, #1
 8006c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	085b      	lsrs	r3, r3, #1
 8006c5c:	441a      	add	r2, r3
 8006c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c6a:	2b0f      	cmp	r3, #15
 8006c6c:	d916      	bls.n	8006c9c <UART_SetConfig+0x2c8>
 8006c6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c74:	d212      	bcs.n	8006c9c <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	f023 030f 	bic.w	r3, r3, #15
 8006c7e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c82:	085b      	lsrs	r3, r3, #1
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	f003 0307 	and.w	r3, r3, #7
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8006c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8006c98:	60da      	str	r2, [r3, #12]
 8006c9a:	e031      	b.n	8006d00 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006ca2:	e02d      	b.n	8006d00 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006ca4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	469a      	mov	sl, r3
 8006caa:	4693      	mov	fp, r2
 8006cac:	4650      	mov	r0, sl
 8006cae:	4659      	mov	r1, fp
 8006cb0:	f7fd fba4 	bl	80043fc <HAL_RCCEx_GetPeriphCLKFreq>
 8006cb4:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8006cb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d021      	beq.n	8006d00 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc0:	4a1a      	ldr	r2, [pc, #104]	@ (8006d2c <UART_SetConfig+0x358>)
 8006cc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cca:	fbb3 f2f2 	udiv	r2, r3, r2
 8006cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	085b      	lsrs	r3, r3, #1
 8006cd4:	441a      	add	r2, r3
 8006cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ce2:	2b0f      	cmp	r3, #15
 8006ce4:	d909      	bls.n	8006cfa <UART_SetConfig+0x326>
 8006ce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cec:	d205      	bcs.n	8006cfa <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006cee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	60da      	str	r2, [r3, #12]
 8006cf8:	e002      	b.n	8006d00 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d02:	2201      	movs	r2, #1
 8006d04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d12:	2200      	movs	r2, #0
 8006d14:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d18:	2200      	movs	r2, #0
 8006d1a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006d1c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3750      	adds	r7, #80	@ 0x50
 8006d24:	46bd      	mov	sp, r7
 8006d26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d2a:	bf00      	nop
 8006d2c:	080074b4 	.word	0x080074b4

08006d30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d3c:	f003 0301 	and.w	r3, r3, #1
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00a      	beq.n	8006d5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	430a      	orrs	r2, r1
 8006d58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d5e:	f003 0302 	and.w	r3, r3, #2
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00a      	beq.n	8006d7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	430a      	orrs	r2, r1
 8006d7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d80:	f003 0304 	and.w	r3, r3, #4
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d00a      	beq.n	8006d9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	430a      	orrs	r2, r1
 8006d9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da2:	f003 0308 	and.w	r3, r3, #8
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00a      	beq.n	8006dc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	430a      	orrs	r2, r1
 8006dbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dc4:	f003 0310 	and.w	r3, r3, #16
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00a      	beq.n	8006de2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	430a      	orrs	r2, r1
 8006de0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006de6:	f003 0320 	and.w	r3, r3, #32
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00a      	beq.n	8006e04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	430a      	orrs	r2, r1
 8006e02:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d01a      	beq.n	8006e46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	430a      	orrs	r2, r1
 8006e24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e2e:	d10a      	bne.n	8006e46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	430a      	orrs	r2, r1
 8006e44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00a      	beq.n	8006e68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	430a      	orrs	r2, r1
 8006e66:	605a      	str	r2, [r3, #4]
  }
}
 8006e68:	bf00      	nop
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b098      	sub	sp, #96	@ 0x60
 8006e78:	af02      	add	r7, sp, #8
 8006e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e84:	f7fa f8e4 	bl	8001050 <HAL_GetTick>
 8006e88:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0308 	and.w	r3, r3, #8
 8006e94:	2b08      	cmp	r3, #8
 8006e96:	d12f      	bne.n	8006ef8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e9c:	9300      	str	r3, [sp, #0]
 8006e9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f88e 	bl	8006fc8 <UART_WaitOnFlagUntilTimeout>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d022      	beq.n	8006ef8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eba:	e853 3f00 	ldrex	r3, [r3]
 8006ebe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ec2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ec6:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ed0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ed2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ed6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ed8:	e841 2300 	strex	r3, r2, [r1]
 8006edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ede:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1e6      	bne.n	8006eb2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2220      	movs	r2, #32
 8006ee8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e063      	b.n	8006fc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0304 	and.w	r3, r3, #4
 8006f02:	2b04      	cmp	r3, #4
 8006f04:	d149      	bne.n	8006f9a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f06:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f0a:	9300      	str	r3, [sp, #0]
 8006f0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 f857 	bl	8006fc8 <UART_WaitOnFlagUntilTimeout>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d03c      	beq.n	8006f9a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f28:	e853 3f00 	ldrex	r3, [r3]
 8006f2c:	623b      	str	r3, [r7, #32]
   return(result);
 8006f2e:	6a3b      	ldr	r3, [r7, #32]
 8006f30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f40:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f46:	e841 2300 	strex	r3, r2, [r1]
 8006f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1e6      	bne.n	8006f20 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	3308      	adds	r3, #8
 8006f58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	e853 3f00 	ldrex	r3, [r3]
 8006f60:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f023 0301 	bic.w	r3, r3, #1
 8006f68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	3308      	adds	r3, #8
 8006f70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f72:	61fa      	str	r2, [r7, #28]
 8006f74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f76:	69b9      	ldr	r1, [r7, #24]
 8006f78:	69fa      	ldr	r2, [r7, #28]
 8006f7a:	e841 2300 	strex	r3, r2, [r1]
 8006f7e:	617b      	str	r3, [r7, #20]
   return(result);
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1e5      	bne.n	8006f52 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2220      	movs	r2, #32
 8006f8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e012      	b.n	8006fc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2220      	movs	r2, #32
 8006f9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2220      	movs	r2, #32
 8006fa6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3758      	adds	r7, #88	@ 0x58
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	603b      	str	r3, [r7, #0]
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fd8:	e049      	b.n	800706e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe0:	d045      	beq.n	800706e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fe2:	f7fa f835 	bl	8001050 <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	69ba      	ldr	r2, [r7, #24]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d302      	bcc.n	8006ff8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d101      	bne.n	8006ffc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e048      	b.n	800708e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 0304 	and.w	r3, r3, #4
 8007006:	2b00      	cmp	r3, #0
 8007008:	d031      	beq.n	800706e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	69db      	ldr	r3, [r3, #28]
 8007010:	f003 0308 	and.w	r3, r3, #8
 8007014:	2b08      	cmp	r3, #8
 8007016:	d110      	bne.n	800703a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2208      	movs	r2, #8
 800701e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f000 f838 	bl	8007096 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2208      	movs	r2, #8
 800702a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2200      	movs	r2, #0
 8007032:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e029      	b.n	800708e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	69db      	ldr	r3, [r3, #28]
 8007040:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007044:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007048:	d111      	bne.n	800706e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007052:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	f000 f81e 	bl	8007096 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2220      	movs	r2, #32
 800705e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	e00f      	b.n	800708e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	69da      	ldr	r2, [r3, #28]
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	4013      	ands	r3, r2
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	429a      	cmp	r2, r3
 800707c:	bf0c      	ite	eq
 800707e:	2301      	moveq	r3, #1
 8007080:	2300      	movne	r3, #0
 8007082:	b2db      	uxtb	r3, r3
 8007084:	461a      	mov	r2, r3
 8007086:	79fb      	ldrb	r3, [r7, #7]
 8007088:	429a      	cmp	r2, r3
 800708a:	d0a6      	beq.n	8006fda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007096:	b480      	push	{r7}
 8007098:	b095      	sub	sp, #84	@ 0x54
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070a6:	e853 3f00 	ldrex	r3, [r3]
 80070aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80070ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	461a      	mov	r2, r3
 80070ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80070be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80070c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80070c4:	e841 2300 	strex	r3, r2, [r1]
 80070c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80070ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1e6      	bne.n	800709e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	3308      	adds	r3, #8
 80070d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	e853 3f00 	ldrex	r3, [r3]
 80070de:	61fb      	str	r3, [r7, #28]
   return(result);
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070e6:	f023 0301 	bic.w	r3, r3, #1
 80070ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	3308      	adds	r3, #8
 80070f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070fc:	e841 2300 	strex	r3, r2, [r1]
 8007100:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007104:	2b00      	cmp	r3, #0
 8007106:	d1e3      	bne.n	80070d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800710c:	2b01      	cmp	r3, #1
 800710e:	d118      	bne.n	8007142 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	e853 3f00 	ldrex	r3, [r3]
 800711c:	60bb      	str	r3, [r7, #8]
   return(result);
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	f023 0310 	bic.w	r3, r3, #16
 8007124:	647b      	str	r3, [r7, #68]	@ 0x44
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	461a      	mov	r2, r3
 800712c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800712e:	61bb      	str	r3, [r7, #24]
 8007130:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007132:	6979      	ldr	r1, [r7, #20]
 8007134:	69ba      	ldr	r2, [r7, #24]
 8007136:	e841 2300 	strex	r3, r2, [r1]
 800713a:	613b      	str	r3, [r7, #16]
   return(result);
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1e6      	bne.n	8007110 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2220      	movs	r2, #32
 8007146:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007156:	bf00      	nop
 8007158:	3754      	adds	r7, #84	@ 0x54
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007162:	b480      	push	{r7}
 8007164:	b085      	sub	sp, #20
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007170:	2b01      	cmp	r3, #1
 8007172:	d101      	bne.n	8007178 <HAL_UARTEx_DisableFifoMode+0x16>
 8007174:	2302      	movs	r3, #2
 8007176:	e027      	b.n	80071c8 <HAL_UARTEx_DisableFifoMode+0x66>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2224      	movs	r2, #36	@ 0x24
 8007184:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f022 0201 	bic.w	r2, r2, #1
 800719e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80071a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2220      	movs	r2, #32
 80071ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3714      	adds	r7, #20
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d101      	bne.n	80071ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80071e8:	2302      	movs	r3, #2
 80071ea:	e02d      	b.n	8007248 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2224      	movs	r2, #36	@ 0x24
 80071f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f022 0201 	bic.w	r2, r2, #1
 8007212:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	683a      	ldr	r2, [r7, #0]
 8007224:	430a      	orrs	r2, r1
 8007226:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 f84f 	bl	80072cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2220      	movs	r2, #32
 800723a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007260:	2b01      	cmp	r3, #1
 8007262:	d101      	bne.n	8007268 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007264:	2302      	movs	r3, #2
 8007266:	e02d      	b.n	80072c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2224      	movs	r2, #36	@ 0x24
 8007274:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f022 0201 	bic.w	r2, r2, #1
 800728e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	683a      	ldr	r2, [r7, #0]
 80072a0:	430a      	orrs	r2, r1
 80072a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 f811 	bl	80072cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2220      	movs	r2, #32
 80072b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3710      	adds	r7, #16
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d108      	bne.n	80072ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80072ec:	e031      	b.n	8007352 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80072ee:	2308      	movs	r3, #8
 80072f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80072f2:	2308      	movs	r3, #8
 80072f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	0e5b      	lsrs	r3, r3, #25
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	f003 0307 	and.w	r3, r3, #7
 8007304:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	0f5b      	lsrs	r3, r3, #29
 800730e:	b2db      	uxtb	r3, r3
 8007310:	f003 0307 	and.w	r3, r3, #7
 8007314:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007316:	7bbb      	ldrb	r3, [r7, #14]
 8007318:	7b3a      	ldrb	r2, [r7, #12]
 800731a:	4911      	ldr	r1, [pc, #68]	@ (8007360 <UARTEx_SetNbDataToProcess+0x94>)
 800731c:	5c8a      	ldrb	r2, [r1, r2]
 800731e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007322:	7b3a      	ldrb	r2, [r7, #12]
 8007324:	490f      	ldr	r1, [pc, #60]	@ (8007364 <UARTEx_SetNbDataToProcess+0x98>)
 8007326:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007328:	fb93 f3f2 	sdiv	r3, r3, r2
 800732c:	b29a      	uxth	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007334:	7bfb      	ldrb	r3, [r7, #15]
 8007336:	7b7a      	ldrb	r2, [r7, #13]
 8007338:	4909      	ldr	r1, [pc, #36]	@ (8007360 <UARTEx_SetNbDataToProcess+0x94>)
 800733a:	5c8a      	ldrb	r2, [r1, r2]
 800733c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007340:	7b7a      	ldrb	r2, [r7, #13]
 8007342:	4908      	ldr	r1, [pc, #32]	@ (8007364 <UARTEx_SetNbDataToProcess+0x98>)
 8007344:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007346:	fb93 f3f2 	sdiv	r3, r3, r2
 800734a:	b29a      	uxth	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007352:	bf00      	nop
 8007354:	3714      	adds	r7, #20
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	080074cc 	.word	0x080074cc
 8007364:	080074d4 	.word	0x080074d4

08007368 <memset>:
 8007368:	4402      	add	r2, r0
 800736a:	4603      	mov	r3, r0
 800736c:	4293      	cmp	r3, r2
 800736e:	d100      	bne.n	8007372 <memset+0xa>
 8007370:	4770      	bx	lr
 8007372:	f803 1b01 	strb.w	r1, [r3], #1
 8007376:	e7f9      	b.n	800736c <memset+0x4>

08007378 <__libc_init_array>:
 8007378:	b570      	push	{r4, r5, r6, lr}
 800737a:	4d0d      	ldr	r5, [pc, #52]	@ (80073b0 <__libc_init_array+0x38>)
 800737c:	2600      	movs	r6, #0
 800737e:	4c0d      	ldr	r4, [pc, #52]	@ (80073b4 <__libc_init_array+0x3c>)
 8007380:	1b64      	subs	r4, r4, r5
 8007382:	10a4      	asrs	r4, r4, #2
 8007384:	42a6      	cmp	r6, r4
 8007386:	d109      	bne.n	800739c <__libc_init_array+0x24>
 8007388:	4d0b      	ldr	r5, [pc, #44]	@ (80073b8 <__libc_init_array+0x40>)
 800738a:	2600      	movs	r6, #0
 800738c:	4c0b      	ldr	r4, [pc, #44]	@ (80073bc <__libc_init_array+0x44>)
 800738e:	f000 f817 	bl	80073c0 <_init>
 8007392:	1b64      	subs	r4, r4, r5
 8007394:	10a4      	asrs	r4, r4, #2
 8007396:	42a6      	cmp	r6, r4
 8007398:	d105      	bne.n	80073a6 <__libc_init_array+0x2e>
 800739a:	bd70      	pop	{r4, r5, r6, pc}
 800739c:	f855 3b04 	ldr.w	r3, [r5], #4
 80073a0:	3601      	adds	r6, #1
 80073a2:	4798      	blx	r3
 80073a4:	e7ee      	b.n	8007384 <__libc_init_array+0xc>
 80073a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80073aa:	3601      	adds	r6, #1
 80073ac:	4798      	blx	r3
 80073ae:	e7f2      	b.n	8007396 <__libc_init_array+0x1e>
 80073b0:	080074e4 	.word	0x080074e4
 80073b4:	080074e4 	.word	0x080074e4
 80073b8:	080074e4 	.word	0x080074e4
 80073bc:	080074e8 	.word	0x080074e8

080073c0 <_init>:
 80073c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073c2:	bf00      	nop
 80073c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073c6:	bc08      	pop	{r3}
 80073c8:	469e      	mov	lr, r3
 80073ca:	4770      	bx	lr

080073cc <_fini>:
 80073cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ce:	bf00      	nop
 80073d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073d2:	bc08      	pop	{r3}
 80073d4:	469e      	mov	lr, r3
 80073d6:	4770      	bx	lr
