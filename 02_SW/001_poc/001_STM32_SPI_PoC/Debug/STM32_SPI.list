
STM32_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dd0  08000250  08000250  00010250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08007020  08007020  00017020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007140  08007140  00017140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007148  08007148  00017148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800714c  0800714c  0001714c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000009  20000000  08007150  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000144  2000000c  08007159  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000150  08007159  00020150  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020009  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003f  2**0
                  CONTENTS, READONLY
 11 .debug_info   00013c5e  00000000  00000000  00020082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000028db  00000000  00000000  00033ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000ec8  00000000  00000000  000365c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000b43  00000000  00000000  00037488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00035b8b  00000000  00000000  00037fcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000151ba  00000000  00000000  0006db56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0014c608  00000000  00000000  00082d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00003bf0  00000000  00000000  001cf318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000083  00000000  00000000  001d2f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	; (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	2000000c 	.word	0x2000000c
 800026c:	00000000 	.word	0x00000000
 8000270:	08007008 	.word	0x08007008

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	; (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000010 	.word	0x20000010
 800028c:	08007008 	.word	0x08007008

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b982 	b.w	80005ac <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d146      	bne.n	800035e <__udivmoddi4+0x9e>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d95e      	bls.n	8000394 <__udivmoddi4+0xd4>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	409c      	lsls	r4, r3
 80002e8:	fa20 f202 	lsr.w	r2, r0, r2
 80002ec:	4317      	orrs	r7, r2
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	0c22      	lsrs	r2, r4, #16
 80002f8:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	fb01 f005 	mul.w	r0, r1, r5
 8000304:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000308:	4290      	cmp	r0, r2
 800030a:	d908      	bls.n	800031e <__udivmoddi4+0x5e>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x5c>
 8000316:	4290      	cmp	r0, r2
 8000318:	f200 8134 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 800031c:	4639      	mov	r1, r7
 800031e:	1a12      	subs	r2, r2, r0
 8000320:	b2a4      	uxth	r4, r4
 8000322:	fbb2 f0fe 	udiv	r0, r2, lr
 8000326:	fb0e 2210 	mls	r2, lr, r0, r2
 800032a:	fb00 f505 	mul.w	r5, r0, r5
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	42a5      	cmp	r5, r4
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x88>
 8000336:	eb1c 0404 	adds.w	r4, ip, r4
 800033a:	f100 32ff 	add.w	r2, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x86>
 8000340:	42a5      	cmp	r5, r4
 8000342:	f200 8119 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 8000346:	4610      	mov	r0, r2
 8000348:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034c:	1b64      	subs	r4, r4, r5
 800034e:	2100      	movs	r1, #0
 8000350:	b11e      	cbz	r6, 800035a <__udivmoddi4+0x9a>
 8000352:	40dc      	lsrs	r4, r3
 8000354:	2300      	movs	r3, #0
 8000356:	e9c6 4300 	strd	r4, r3, [r6]
 800035a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0xb4>
 8000362:	2e00      	cmp	r6, #0
 8000364:	f000 80fc 	beq.w	8000560 <__udivmoddi4+0x2a0>
 8000368:	2100      	movs	r1, #0
 800036a:	e9c6 0500 	strd	r0, r5, [r6]
 800036e:	4608      	mov	r0, r1
 8000370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000374:	fab3 f183 	clz	r1, r3
 8000378:	2900      	cmp	r1, #0
 800037a:	d14c      	bne.n	8000416 <__udivmoddi4+0x156>
 800037c:	42ab      	cmp	r3, r5
 800037e:	f0c0 80f2 	bcc.w	8000566 <__udivmoddi4+0x2a6>
 8000382:	4282      	cmp	r2, r0
 8000384:	f240 80ef 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000388:	4608      	mov	r0, r1
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e5      	beq.n	800035a <__udivmoddi4+0x9a>
 800038e:	e9c6 4700 	strd	r4, r7, [r6]
 8000392:	e7e2      	b.n	800035a <__udivmoddi4+0x9a>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xd8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f382 	clz	r3, r2
 800039c:	2b00      	cmp	r3, #0
 800039e:	f040 809f 	bne.w	80004e0 <__udivmoddi4+0x220>
 80003a2:	1a8a      	subs	r2, r1, r2
 80003a4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a8:	fa1f f78c 	uxth.w	r7, ip
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb2 f5fe 	udiv	r5, r2, lr
 80003b2:	fb0e 2015 	mls	r0, lr, r5, r2
 80003b6:	0c22      	lsrs	r2, r4, #16
 80003b8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003bc:	fb07 f005 	mul.w	r0, r7, r5
 80003c0:	4290      	cmp	r0, r2
 80003c2:	d90f      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003c4:	eb1c 0202 	adds.w	r2, ip, r2
 80003c8:	f105 38ff 	add.w	r8, r5, #4294967295
 80003cc:	bf2c      	ite	cs
 80003ce:	f04f 0901 	movcs.w	r9, #1
 80003d2:	f04f 0900 	movcc.w	r9, #0
 80003d6:	4290      	cmp	r0, r2
 80003d8:	d903      	bls.n	80003e2 <__udivmoddi4+0x122>
 80003da:	f1b9 0f00 	cmp.w	r9, #0
 80003de:	f000 80ce 	beq.w	800057e <__udivmoddi4+0x2be>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ec:	fb0e 2210 	mls	r2, lr, r0, r2
 80003f0:	fb00 f707 	mul.w	r7, r0, r7
 80003f4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f8:	42a7      	cmp	r7, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	42a7      	cmp	r7, r4
 8000408:	f200 80b3 	bhi.w	8000572 <__udivmoddi4+0x2b2>
 800040c:	4610      	mov	r0, r2
 800040e:	1be4      	subs	r4, r4, r7
 8000410:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000414:	e79c      	b.n	8000350 <__udivmoddi4+0x90>
 8000416:	f1c1 0420 	rsb	r4, r1, #32
 800041a:	408b      	lsls	r3, r1
 800041c:	fa05 fc01 	lsl.w	ip, r5, r1
 8000420:	fa22 f704 	lsr.w	r7, r2, r4
 8000424:	40e5      	lsrs	r5, r4
 8000426:	408a      	lsls	r2, r1
 8000428:	431f      	orrs	r7, r3
 800042a:	fa20 f304 	lsr.w	r3, r0, r4
 800042e:	4088      	lsls	r0, r1
 8000430:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000440:	fbb5 fef8 	udiv	lr, r5, r8
 8000444:	fb08 551e 	mls	r5, r8, lr, r5
 8000448:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800044c:	fb0e f90c 	mul.w	r9, lr, ip
 8000450:	45a9      	cmp	r9, r5
 8000452:	d90e      	bls.n	8000472 <__udivmoddi4+0x1b2>
 8000454:	197d      	adds	r5, r7, r5
 8000456:	f10e 3aff 	add.w	sl, lr, #4294967295
 800045a:	bf2c      	ite	cs
 800045c:	f04f 0b01 	movcs.w	fp, #1
 8000460:	f04f 0b00 	movcc.w	fp, #0
 8000464:	45a9      	cmp	r9, r5
 8000466:	d903      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000468:	f1bb 0f00 	cmp.w	fp, #0
 800046c:	f000 808d 	beq.w	800058a <__udivmoddi4+0x2ca>
 8000470:	46d6      	mov	lr, sl
 8000472:	eba5 0509 	sub.w	r5, r5, r9
 8000476:	fa1f f983 	uxth.w	r9, r3
 800047a:	fbb5 f3f8 	udiv	r3, r5, r8
 800047e:	fb08 5513 	mls	r5, r8, r3, r5
 8000482:	fb03 fc0c 	mul.w	ip, r3, ip
 8000486:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800048a:	45ac      	cmp	ip, r5
 800048c:	d906      	bls.n	800049c <__udivmoddi4+0x1dc>
 800048e:	197d      	adds	r5, r7, r5
 8000490:	f103 38ff 	add.w	r8, r3, #4294967295
 8000494:	d201      	bcs.n	800049a <__udivmoddi4+0x1da>
 8000496:	45ac      	cmp	ip, r5
 8000498:	d87e      	bhi.n	8000598 <__udivmoddi4+0x2d8>
 800049a:	4643      	mov	r3, r8
 800049c:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80004a0:	eba5 050c 	sub.w	r5, r5, ip
 80004a4:	fba3 9802 	umull	r9, r8, r3, r2
 80004a8:	4545      	cmp	r5, r8
 80004aa:	46ce      	mov	lr, r9
 80004ac:	46c4      	mov	ip, r8
 80004ae:	d302      	bcc.n	80004b6 <__udivmoddi4+0x1f6>
 80004b0:	d106      	bne.n	80004c0 <__udivmoddi4+0x200>
 80004b2:	4548      	cmp	r0, r9
 80004b4:	d204      	bcs.n	80004c0 <__udivmoddi4+0x200>
 80004b6:	3b01      	subs	r3, #1
 80004b8:	ebb9 0e02 	subs.w	lr, r9, r2
 80004bc:	eb68 0c07 	sbc.w	ip, r8, r7
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d06f      	beq.n	80005a4 <__udivmoddi4+0x2e4>
 80004c4:	ebb0 020e 	subs.w	r2, r0, lr
 80004c8:	eb65 050c 	sbc.w	r5, r5, ip
 80004cc:	40ca      	lsrs	r2, r1
 80004ce:	fa05 f404 	lsl.w	r4, r5, r4
 80004d2:	40cd      	lsrs	r5, r1
 80004d4:	4618      	mov	r0, r3
 80004d6:	4314      	orrs	r4, r2
 80004d8:	2100      	movs	r1, #0
 80004da:	e9c6 4500 	strd	r4, r5, [r6]
 80004de:	e73c      	b.n	800035a <__udivmoddi4+0x9a>
 80004e0:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e4:	f1c3 0220 	rsb	r2, r3, #32
 80004e8:	4099      	lsls	r1, r3
 80004ea:	409c      	lsls	r4, r3
 80004ec:	40d5      	lsrs	r5, r2
 80004ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004f2:	fa20 f202 	lsr.w	r2, r0, r2
 80004f6:	fa1f f78c 	uxth.w	r7, ip
 80004fa:	fbb5 f0fe 	udiv	r0, r5, lr
 80004fe:	430a      	orrs	r2, r1
 8000500:	fb0e 5510 	mls	r5, lr, r0, r5
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f507 	mul.w	r5, r0, r7
 800050e:	428d      	cmp	r5, r1
 8000510:	d90e      	bls.n	8000530 <__udivmoddi4+0x270>
 8000512:	eb1c 0101 	adds.w	r1, ip, r1
 8000516:	f100 38ff 	add.w	r8, r0, #4294967295
 800051a:	bf2c      	ite	cs
 800051c:	f04f 0901 	movcs.w	r9, #1
 8000520:	f04f 0900 	movcc.w	r9, #0
 8000524:	428d      	cmp	r5, r1
 8000526:	d902      	bls.n	800052e <__udivmoddi4+0x26e>
 8000528:	f1b9 0f00 	cmp.w	r9, #0
 800052c:	d031      	beq.n	8000592 <__udivmoddi4+0x2d2>
 800052e:	4640      	mov	r0, r8
 8000530:	1b49      	subs	r1, r1, r5
 8000532:	b292      	uxth	r2, r2
 8000534:	fbb1 f5fe 	udiv	r5, r1, lr
 8000538:	fb0e 1115 	mls	r1, lr, r5, r1
 800053c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000540:	fb05 f107 	mul.w	r1, r5, r7
 8000544:	4291      	cmp	r1, r2
 8000546:	d907      	bls.n	8000558 <__udivmoddi4+0x298>
 8000548:	eb1c 0202 	adds.w	r2, ip, r2
 800054c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x296>
 8000552:	4291      	cmp	r1, r2
 8000554:	d823      	bhi.n	800059e <__udivmoddi4+0x2de>
 8000556:	4645      	mov	r5, r8
 8000558:	1a52      	subs	r2, r2, r1
 800055a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800055e:	e726      	b.n	80003ae <__udivmoddi4+0xee>
 8000560:	4631      	mov	r1, r6
 8000562:	4630      	mov	r0, r6
 8000564:	e6f9      	b.n	800035a <__udivmoddi4+0x9a>
 8000566:	1a84      	subs	r4, r0, r2
 8000568:	eb65 0203 	sbc.w	r2, r5, r3
 800056c:	2001      	movs	r0, #1
 800056e:	4617      	mov	r7, r2
 8000570:	e70b      	b.n	800038a <__udivmoddi4+0xca>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e74a      	b.n	800040e <__udivmoddi4+0x14e>
 8000578:	4464      	add	r4, ip
 800057a:	3802      	subs	r0, #2
 800057c:	e6e4      	b.n	8000348 <__udivmoddi4+0x88>
 800057e:	3d02      	subs	r5, #2
 8000580:	4462      	add	r2, ip
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	3902      	subs	r1, #2
 8000586:	4462      	add	r2, ip
 8000588:	e6c9      	b.n	800031e <__udivmoddi4+0x5e>
 800058a:	f1ae 0e02 	sub.w	lr, lr, #2
 800058e:	443d      	add	r5, r7
 8000590:	e76f      	b.n	8000472 <__udivmoddi4+0x1b2>
 8000592:	3802      	subs	r0, #2
 8000594:	4461      	add	r1, ip
 8000596:	e7cb      	b.n	8000530 <__udivmoddi4+0x270>
 8000598:	3b02      	subs	r3, #2
 800059a:	443d      	add	r5, r7
 800059c:	e77e      	b.n	800049c <__udivmoddi4+0x1dc>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	e7d9      	b.n	8000558 <__udivmoddi4+0x298>
 80005a4:	4618      	mov	r0, r3
 80005a6:	4631      	mov	r1, r6
 80005a8:	e6d7      	b.n	800035a <__udivmoddi4+0x9a>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08c      	sub	sp, #48	; 0x30
 80005b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	f107 031c 	add.w	r3, r7, #28
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	4b60      	ldr	r3, [pc, #384]	; (8000748 <MX_GPIO_Init+0x198>)
 80005c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005cc:	4a5e      	ldr	r2, [pc, #376]	; (8000748 <MX_GPIO_Init+0x198>)
 80005ce:	f043 0301 	orr.w	r3, r3, #1
 80005d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80005d6:	4b5c      	ldr	r3, [pc, #368]	; (8000748 <MX_GPIO_Init+0x198>)
 80005d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005dc:	f003 0301 	and.w	r3, r3, #1
 80005e0:	61bb      	str	r3, [r7, #24]
 80005e2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005e4:	4b58      	ldr	r3, [pc, #352]	; (8000748 <MX_GPIO_Init+0x198>)
 80005e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005ea:	4a57      	ldr	r2, [pc, #348]	; (8000748 <MX_GPIO_Init+0x198>)
 80005ec:	f043 0320 	orr.w	r3, r3, #32
 80005f0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80005f4:	4b54      	ldr	r3, [pc, #336]	; (8000748 <MX_GPIO_Init+0x198>)
 80005f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005fa:	f003 0320 	and.w	r3, r3, #32
 80005fe:	617b      	str	r3, [r7, #20]
 8000600:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000602:	4b51      	ldr	r3, [pc, #324]	; (8000748 <MX_GPIO_Init+0x198>)
 8000604:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000608:	4a4f      	ldr	r2, [pc, #316]	; (8000748 <MX_GPIO_Init+0x198>)
 800060a:	f043 0308 	orr.w	r3, r3, #8
 800060e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000612:	4b4d      	ldr	r3, [pc, #308]	; (8000748 <MX_GPIO_Init+0x198>)
 8000614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000618:	f003 0308 	and.w	r3, r3, #8
 800061c:	613b      	str	r3, [r7, #16]
 800061e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000620:	4b49      	ldr	r3, [pc, #292]	; (8000748 <MX_GPIO_Init+0x198>)
 8000622:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000626:	4a48      	ldr	r2, [pc, #288]	; (8000748 <MX_GPIO_Init+0x198>)
 8000628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800062c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000630:	4b45      	ldr	r3, [pc, #276]	; (8000748 <MX_GPIO_Init+0x198>)
 8000632:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063e:	4b42      	ldr	r3, [pc, #264]	; (8000748 <MX_GPIO_Init+0x198>)
 8000640:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000644:	4a40      	ldr	r2, [pc, #256]	; (8000748 <MX_GPIO_Init+0x198>)
 8000646:	f043 0304 	orr.w	r3, r3, #4
 800064a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800064e:	4b3e      	ldr	r3, [pc, #248]	; (8000748 <MX_GPIO_Init+0x198>)
 8000650:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000654:	f003 0304 	and.w	r3, r3, #4
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065c:	4b3a      	ldr	r3, [pc, #232]	; (8000748 <MX_GPIO_Init+0x198>)
 800065e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000662:	4a39      	ldr	r2, [pc, #228]	; (8000748 <MX_GPIO_Init+0x198>)
 8000664:	f043 0302 	orr.w	r3, r3, #2
 8000668:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800066c:	4b36      	ldr	r3, [pc, #216]	; (8000748 <MX_GPIO_Init+0x198>)
 800066e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000672:	f003 0302 	and.w	r3, r3, #2
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000680:	4832      	ldr	r0, [pc, #200]	; (800074c <MX_GPIO_Init+0x19c>)
 8000682:	f000 ff17 	bl	80014b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800068c:	4830      	ldr	r0, [pc, #192]	; (8000750 <MX_GPIO_Init+0x1a0>)
 800068e:	f000 ff11 	bl	80014b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000692:	2201      	movs	r2, #1
 8000694:	2104      	movs	r1, #4
 8000696:	482f      	ldr	r0, [pc, #188]	; (8000754 <MX_GPIO_Init+0x1a4>)
 8000698:	f000 ff0c 	bl	80014b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800069c:	2201      	movs	r2, #1
 800069e:	2180      	movs	r1, #128	; 0x80
 80006a0:	482d      	ldr	r0, [pc, #180]	; (8000758 <MX_GPIO_Init+0x1a8>)
 80006a2:	f000 ff07 	bl	80014b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2180      	movs	r1, #128	; 0x80
 80006aa:	482c      	ldr	r0, [pc, #176]	; (800075c <MX_GPIO_Init+0x1ac>)
 80006ac:	f000 ff02 	bl	80014b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 80006b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b6:	2301      	movs	r3, #1
 80006b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006be:	2300      	movs	r3, #0
 80006c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	4619      	mov	r1, r3
 80006c8:	4820      	ldr	r0, [pc, #128]	; (800074c <MX_GPIO_Init+0x19c>)
 80006ca:	f000 fd1b 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 80006ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	2301      	movs	r3, #1
 80006d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	2300      	movs	r3, #0
 80006de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	4619      	mov	r1, r3
 80006e6:	481a      	ldr	r0, [pc, #104]	; (8000750 <MX_GPIO_Init+0x1a0>)
 80006e8:	f000 fd0c 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80006ec:	2304      	movs	r3, #4
 80006ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f0:	2301      	movs	r3, #1
 80006f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f8:	2300      	movs	r3, #0
 80006fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80006fc:	f107 031c 	add.w	r3, r7, #28
 8000700:	4619      	mov	r1, r3
 8000702:	4814      	ldr	r0, [pc, #80]	; (8000754 <MX_GPIO_Init+0x1a4>)
 8000704:	f000 fcfe 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000708:	2380      	movs	r3, #128	; 0x80
 800070a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070c:	2301      	movs	r3, #1
 800070e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	2300      	movs	r3, #0
 8000716:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000718:	f107 031c 	add.w	r3, r7, #28
 800071c:	4619      	mov	r1, r3
 800071e:	480e      	ldr	r0, [pc, #56]	; (8000758 <MX_GPIO_Init+0x1a8>)
 8000720:	f000 fcf0 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8000724:	2380      	movs	r3, #128	; 0x80
 8000726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	2300      	movs	r3, #0
 8000732:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000734:	f107 031c 	add.w	r3, r7, #28
 8000738:	4619      	mov	r1, r3
 800073a:	4808      	ldr	r0, [pc, #32]	; (800075c <MX_GPIO_Init+0x1ac>)
 800073c:	f000 fce2 	bl	8001104 <HAL_GPIO_Init>

}
 8000740:	bf00      	nop
 8000742:	3730      	adds	r7, #48	; 0x30
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	46020c00 	.word	0x46020c00
 800074c:	42021400 	.word	0x42021400
 8000750:	42020c00 	.word	0x42020c00
 8000754:	42021800 	.word	0x42021800
 8000758:	42020800 	.word	0x42020800
 800075c:	42020400 	.word	0x42020400

08000760 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000764:	2000      	movs	r0, #0
 8000766:	f000 febd 	bl	80014e4 <HAL_ICACHE_ConfigAssociativityMode>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000770:	f000 f903 	bl	800097a <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000774:	f000 fed6 	bl	8001524 <HAL_ICACHE_Enable>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800077e:	f000 f8fc 	bl	800097a <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <LCD_Init>:

/* Includes ------------------------------------------------------------------*/
#include "main.h"

void LCD_Init(SPI_HandleTypeDef * spi_handler)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  //Start unlocking the EEProm
  uint8_t initFrequence[] = {0x38u, 0x38u, 0x38u, 0x38u, 0x08u, 0x01u, 0x06u, 0x0Fu};
 8000790:	4a15      	ldr	r2, [pc, #84]	; (80007e8 <LCD_Init+0x60>)
 8000792:	f107 030c 	add.w	r3, r7, #12
 8000796:	e892 0003 	ldmia.w	r2, {r0, r1}
 800079a:	e883 0003 	stmia.w	r3, {r0, r1}

  for (uint8_t i; i < sizeof(initFrequence); i++)
 800079e:	e01a      	b.n	80007d6 <LCD_Init+0x4e>
  {
    HAL_GPIO_WritePin(GPIOF, LCD_CS_Pin, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007a6:	4811      	ldr	r0, [pc, #68]	; (80007ec <LCD_Init+0x64>)
 80007a8:	f000 fe84 	bl	80014b4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(spi_handler, &initFrequence[i], 1, 10);
 80007ac:	7dfb      	ldrb	r3, [r7, #23]
 80007ae:	f107 020c 	add.w	r2, r7, #12
 80007b2:	18d1      	adds	r1, r2, r3
 80007b4:	230a      	movs	r3, #10
 80007b6:	2201      	movs	r2, #1
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f005 fb09 	bl	8005dd0 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOF, LCD_CS_Pin, GPIO_PIN_SET);
 80007be:	2201      	movs	r2, #1
 80007c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c4:	4809      	ldr	r0, [pc, #36]	; (80007ec <LCD_Init+0x64>)
 80007c6:	f000 fe75 	bl	80014b4 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80007ca:	200a      	movs	r0, #10
 80007cc:	f000 fb92 	bl	8000ef4 <HAL_Delay>
  for (uint8_t i; i < sizeof(initFrequence); i++)
 80007d0:	7dfb      	ldrb	r3, [r7, #23]
 80007d2:	3301      	adds	r3, #1
 80007d4:	75fb      	strb	r3, [r7, #23]
 80007d6:	7dfb      	ldrb	r3, [r7, #23]
 80007d8:	2b07      	cmp	r3, #7
 80007da:	d9e1      	bls.n	80007a0 <LCD_Init+0x18>
  }
}
 80007dc:	bf00      	nop
 80007de:	bf00      	nop
 80007e0:	3718      	adds	r7, #24
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	08007020 	.word	0x08007020
 80007ec:	42021400 	.word	0x42021400

080007f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b087      	sub	sp, #28
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t aTxBuffer[] = "jan ";
 80007f6:	4a2d      	ldr	r2, [pc, #180]	; (80008ac <main+0xbc>)
 80007f8:	f107 0310 	add.w	r3, r7, #16
 80007fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000800:	6018      	str	r0, [r3, #0]
 8000802:	3304      	adds	r3, #4
 8000804:	7019      	strb	r1, [r3, #0]
  uint8_t RX_Data[] = "UARTJANUARTJAN";
 8000806:	4b2a      	ldr	r3, [pc, #168]	; (80008b0 <main+0xc0>)
 8000808:	463c      	mov	r4, r7
 800080a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800080c:	c407      	stmia	r4!, {r0, r1, r2}
 800080e:	8023      	strh	r3, [r4, #0]
 8000810:	3402      	adds	r4, #2
 8000812:	0c1b      	lsrs	r3, r3, #16
 8000814:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000816:	f000 fae9 	bl	8000dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081a:	f000 f855 	bl	80008c8 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 800081e:	f000 f89c 	bl	800095a <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000822:	f7ff fec5 	bl	80005b0 <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000826:	f7ff ff9b 	bl	8000760 <MX_ICACHE_Init>
  MX_SPI1_Init();
 800082a:	f000 f8ab 	bl	8000984 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800082e:	f000 f9fd 	bl	8000c2c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init(&hspi1);
 8000832:	4820      	ldr	r0, [pc, #128]	; (80008b4 <main+0xc4>)
 8000834:	f7ff ffa8 	bl	8000788 <LCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_UART_Transmit(&huart1, RX_Data, sizeof(RX_Data), 5000);
 8000838:	4639      	mov	r1, r7
 800083a:	f241 3388 	movw	r3, #5000	; 0x1388
 800083e:	220f      	movs	r2, #15
 8000840:	481d      	ldr	r0, [pc, #116]	; (80008b8 <main+0xc8>)
 8000842:	f005 fe5d 	bl	8006500 <HAL_UART_Transmit>

	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2180      	movs	r1, #128	; 0x80
 800084a:	481c      	ldr	r0, [pc, #112]	; (80008bc <main+0xcc>)
 800084c:	f000 fe32 	bl	80014b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LCD_RS_Pin, GPIO_PIN_SET);
 8000850:	2201      	movs	r2, #1
 8000852:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000856:	481a      	ldr	r0, [pc, #104]	; (80008c0 <main+0xd0>)
 8000858:	f000 fe2c 	bl	80014b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, LCD_CS_Pin, GPIO_PIN_RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000862:	4818      	ldr	r0, [pc, #96]	; (80008c4 <main+0xd4>)
 8000864:	f000 fe26 	bl	80014b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)aTxBuffer, BUFFERSIZE, 500);
 8000868:	f107 0110 	add.w	r1, r7, #16
 800086c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000870:	2204      	movs	r2, #4
 8000872:	4810      	ldr	r0, [pc, #64]	; (80008b4 <main+0xc4>)
 8000874:	f005 faac 	bl	8005dd0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, LCD_CS_Pin, GPIO_PIN_SET);
 8000878:	2201      	movs	r2, #1
 800087a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800087e:	4811      	ldr	r0, [pc, #68]	; (80008c4 <main+0xd4>)
 8000880:	f000 fe18 	bl	80014b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LCD_RS_Pin, GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800088a:	480d      	ldr	r0, [pc, #52]	; (80008c0 <main+0xd0>)
 800088c:	f000 fe12 	bl	80014b4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000890:	20c8      	movs	r0, #200	; 0xc8
 8000892:	f000 fb2f 	bl	8000ef4 <HAL_Delay>
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 8000896:	2201      	movs	r2, #1
 8000898:	2180      	movs	r1, #128	; 0x80
 800089a:	4808      	ldr	r0, [pc, #32]	; (80008bc <main+0xcc>)
 800089c:	f000 fe0a 	bl	80014b4 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 80008a0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008a4:	f000 fb26 	bl	8000ef4 <HAL_Delay>
	HAL_UART_Transmit(&huart1, RX_Data, sizeof(RX_Data), 5000);
 80008a8:	e7c6      	b.n	8000838 <main+0x48>
 80008aa:	bf00      	nop
 80008ac:	08007028 	.word	0x08007028
 80008b0:	08007030 	.word	0x08007030
 80008b4:	20000028 	.word	0x20000028
 80008b8:	200000b8 	.word	0x200000b8
 80008bc:	42020400 	.word	0x42020400
 80008c0:	42020c00 	.word	0x42020c00
 80008c4:	42021400 	.word	0x42021400

080008c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b09e      	sub	sp, #120	; 0x78
 80008cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ce:	f107 0318 	add.w	r3, r7, #24
 80008d2:	2260      	movs	r2, #96	; 0x60
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f006 fb6a 	bl	8006fb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008dc:	463b      	mov	r3, r7
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]
 80008ea:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE3) != HAL_OK)
 80008ec:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80008f0:	f000 fe28 	bl	8001544 <HAL_PWREx_ControlVoltageScaling>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <SystemClock_Config+0x36>
  {
    Error_Handler();
 80008fa:	f000 f83e 	bl	800097a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80008fe:	2310      	movs	r3, #16
 8000900:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000902:	2301      	movs	r3, #1
 8000904:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000906:	2310      	movs	r3, #16
 8000908:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 800090a:	2300      	movs	r3, #0
 800090c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800090e:	2300      	movs	r3, #0
 8000910:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000912:	f107 0318 	add.w	r3, r7, #24
 8000916:	4618      	mov	r0, r3
 8000918:	f000 ff10 	bl	800173c <HAL_RCC_OscConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000922:	f000 f82a 	bl	800097a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000926:	231f      	movs	r3, #31
 8000928:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800092e:	2300      	movs	r3, #0
 8000930:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8000936:	2360      	movs	r3, #96	; 0x60
 8000938:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800093e:	463b      	mov	r3, r7
 8000940:	2101      	movs	r1, #1
 8000942:	4618      	mov	r0, r3
 8000944:	f001 fdd6 	bl	80024f4 <HAL_RCC_ClockConfig>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800094e:	f000 f814 	bl	800097a <Error_Handler>
  }
}
 8000952:	bf00      	nop
 8000954:	3778      	adds	r7, #120	; 0x78
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 800095e:	f000 fecd 	bl	80016fc <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000962:	f000 fedb 	bl	800171c <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000966:	2002      	movs	r0, #2
 8000968:	f000 fe78 	bl	800165c <HAL_PWREx_ConfigSupply>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <SystemPower_Config+0x1c>
  {
    Error_Handler();
 8000972:	f000 f802 	bl	800097a <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}

0800097a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800097e:	b672      	cpsid	i
}
 8000980:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000982:	e7fe      	b.n	8000982 <Error_Handler+0x8>

08000984 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000994:	4b30      	ldr	r3, [pc, #192]	; (8000a58 <MX_SPI1_Init+0xd4>)
 8000996:	4a31      	ldr	r2, [pc, #196]	; (8000a5c <MX_SPI1_Init+0xd8>)
 8000998:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800099a:	4b2f      	ldr	r3, [pc, #188]	; (8000a58 <MX_SPI1_Init+0xd4>)
 800099c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80009a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009a2:	4b2d      	ldr	r3, [pc, #180]	; (8000a58 <MX_SPI1_Init+0xd4>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009a8:	4b2b      	ldr	r3, [pc, #172]	; (8000a58 <MX_SPI1_Init+0xd4>)
 80009aa:	2207      	movs	r2, #7
 80009ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ae:	4b2a      	ldr	r3, [pc, #168]	; (8000a58 <MX_SPI1_Init+0xd4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009b4:	4b28      	ldr	r3, [pc, #160]	; (8000a58 <MX_SPI1_Init+0xd4>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009ba:	4b27      	ldr	r3, [pc, #156]	; (8000a58 <MX_SPI1_Init+0xd4>)
 80009bc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80009c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80009c2:	4b25      	ldr	r3, [pc, #148]	; (8000a58 <MX_SPI1_Init+0xd4>)
 80009c4:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80009c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ca:	4b23      	ldr	r3, [pc, #140]	; (8000a58 <MX_SPI1_Init+0xd4>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009d0:	4b21      	ldr	r3, [pc, #132]	; (8000a58 <MX_SPI1_Init+0xd4>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009d6:	4b20      	ldr	r3, [pc, #128]	; (8000a58 <MX_SPI1_Init+0xd4>)
 80009d8:	2200      	movs	r2, #0
 80009da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 80009dc:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <MX_SPI1_Init+0xd4>)
 80009de:	2207      	movs	r2, #7
 80009e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009e2:	4b1d      	ldr	r3, [pc, #116]	; (8000a58 <MX_SPI1_Init+0xd4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009e8:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <MX_SPI1_Init+0xd4>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009ee:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <MX_SPI1_Init+0xd4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009f4:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <MX_SPI1_Init+0xd4>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009fa:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <MX_SPI1_Init+0xd4>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a00:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <MX_SPI1_Init+0xd4>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a06:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <MX_SPI1_Init+0xd4>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a0c:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <MX_SPI1_Init+0xd4>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_SPI1_Init+0xd4>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <MX_SPI1_Init+0xd4>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a1e:	480e      	ldr	r0, [pc, #56]	; (8000a58 <MX_SPI1_Init+0xd4>)
 8000a20:	f005 f8c0 	bl	8005ba4 <HAL_SPI_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 8000a2a:	f7ff ffa6 	bl	800097a <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000a32:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a36:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_SPI1_Init+0xd4>)
 8000a42:	f005 fccc 	bl	80063de <HAL_SPIEx_SetConfigAutonomousMode>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 8000a4c:	f7ff ff95 	bl	800097a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a50:	bf00      	nop
 8000a52:	3710      	adds	r7, #16
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000028 	.word	0x20000028
 8000a5c:	40013000 	.word	0x40013000

08000a60 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b0c0      	sub	sp, #256	; 0x100
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a78:	f107 0310 	add.w	r3, r7, #16
 8000a7c:	22d8      	movs	r2, #216	; 0xd8
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f006 fa95 	bl	8006fb0 <memset>
  if(spiHandle->Instance==SPI1)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a27      	ldr	r2, [pc, #156]	; (8000b28 <HAL_SPI_MspInit+0xc8>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d145      	bne.n	8000b1c <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000a90:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a94:	f04f 0300 	mov.w	r3, #0
 8000a98:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PCLK2;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa2:	f107 0310 	add.w	r3, r7, #16
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f002 f8fa 	bl	8002ca0 <HAL_RCCEx_PeriphCLKConfig>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8000ab2:	f7ff ff62 	bl	800097a <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ab6:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <HAL_SPI_MspInit+0xcc>)
 8000ab8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000abc:	4a1b      	ldr	r2, [pc, #108]	; (8000b2c <HAL_SPI_MspInit+0xcc>)
 8000abe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ac2:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000ac6:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <HAL_SPI_MspInit+0xcc>)
 8000ac8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000acc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad4:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <HAL_SPI_MspInit+0xcc>)
 8000ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ada:	4a14      	ldr	r2, [pc, #80]	; (8000b2c <HAL_SPI_MspInit+0xcc>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ae4:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <HAL_SPI_MspInit+0xcc>)
 8000ae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000af2:	23e0      	movs	r3, #224	; 0xe0
 8000af4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af8:	2302      	movs	r3, #2
 8000afa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b0a:	2305      	movs	r3, #5
 8000b0c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000b14:	4619      	mov	r1, r3
 8000b16:	4806      	ldr	r0, [pc, #24]	; (8000b30 <HAL_SPI_MspInit+0xd0>)
 8000b18:	f000 faf4 	bl	8001104 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b1c:	bf00      	nop
 8000b1e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40013000 	.word	0x40013000
 8000b2c:	46020c00 	.word	0x46020c00
 8000b30:	42020000 	.word	0x42020000

08000b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <HAL_MspInit+0x30>)
 8000b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b40:	4a08      	ldr	r2, [pc, #32]	; (8000b64 <HAL_MspInit+0x30>)
 8000b42:	f043 0304 	orr.w	r3, r3, #4
 8000b46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_MspInit+0x30>)
 8000b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b50:	f003 0304 	and.w	r3, r3, #4
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	46020c00 	.word	0x46020c00

08000b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <NMI_Handler+0x4>

08000b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <HardFault_Handler+0x4>

08000b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <MemManage_Handler+0x4>

08000b7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <BusFault_Handler+0x4>

08000b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <UsageFault_Handler+0x4>

08000b86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb4:	f000 f97e 	bl	8000eb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bc0:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <SystemInit+0x68>)
 8000bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bc6:	4a17      	ldr	r2, [pc, #92]	; (8000c24 <SystemInit+0x68>)
 8000bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000bd0:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <SystemInit+0x6c>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000bd6:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <SystemInit+0x6c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <SystemInit+0x6c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <SystemInit+0x6c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <SystemInit+0x6c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a0e      	ldr	r2, [pc, #56]	; (8000c28 <SystemInit+0x6c>)
 8000bee:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000bf2:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000bf6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <SystemInit+0x6c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <SystemInit+0x6c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a09      	ldr	r2, [pc, #36]	; (8000c28 <SystemInit+0x6c>)
 8000c04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c08:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000c0a:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <SystemInit+0x6c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <SystemInit+0x68>)
 8000c12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c16:	609a      	str	r2, [r3, #8]
  #endif
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000ed00 	.word	0xe000ed00
 8000c28:	46020c00 	.word	0x46020c00

08000c2c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c30:	4b22      	ldr	r3, [pc, #136]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c32:	4a23      	ldr	r2, [pc, #140]	; (8000cc0 <MX_USART1_UART_Init+0x94>)
 8000c34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c36:	4b21      	ldr	r3, [pc, #132]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3e:	4b1f      	ldr	r3, [pc, #124]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c44:	4b1d      	ldr	r3, [pc, #116]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c4a:	4b1c      	ldr	r3, [pc, #112]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c50:	4b1a      	ldr	r3, [pc, #104]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c52:	220c      	movs	r2, #12
 8000c54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c56:	4b19      	ldr	r3, [pc, #100]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c5c:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c62:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c68:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c74:	4811      	ldr	r0, [pc, #68]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c76:	f005 fbf3 	bl	8006460 <HAL_UART_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c80:	f7ff fe7b 	bl	800097a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c84:	2100      	movs	r1, #0
 8000c86:	480d      	ldr	r0, [pc, #52]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c88:	f006 f8c8 	bl	8006e1c <HAL_UARTEx_SetTxFifoThreshold>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c92:	f7ff fe72 	bl	800097a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c96:	2100      	movs	r1, #0
 8000c98:	4808      	ldr	r0, [pc, #32]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c9a:	f006 f8fd 	bl	8006e98 <HAL_UARTEx_SetRxFifoThreshold>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ca4:	f7ff fe69 	bl	800097a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ca8:	4804      	ldr	r0, [pc, #16]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000caa:	f006 f87e 	bl	8006daa <HAL_UARTEx_DisableFifoMode>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000cb4:	f7ff fe61 	bl	800097a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	200000b8 	.word	0x200000b8
 8000cc0:	40013800 	.word	0x40013800

08000cc4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b0c0      	sub	sp, #256	; 0x100
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cdc:	f107 0310 	add.w	r3, r7, #16
 8000ce0:	22d8      	movs	r2, #216	; 0xd8
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f006 f963 	bl	8006fb0 <memset>
  if(uartHandle->Instance==USART1)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a27      	ldr	r2, [pc, #156]	; (8000d8c <HAL_UART_MspInit+0xc8>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d145      	bne.n	8000d80 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000cf4:	f04f 0201 	mov.w	r2, #1
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d00:	2300      	movs	r3, #0
 8000d02:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d04:	f107 0310 	add.w	r3, r7, #16
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f001 ffc9 	bl	8002ca0 <HAL_RCCEx_PeriphCLKConfig>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000d14:	f7ff fe31 	bl	800097a <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d18:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <HAL_UART_MspInit+0xcc>)
 8000d1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000d1e:	4a1c      	ldr	r2, [pc, #112]	; (8000d90 <HAL_UART_MspInit+0xcc>)
 8000d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d24:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000d28:	4b19      	ldr	r3, [pc, #100]	; (8000d90 <HAL_UART_MspInit+0xcc>)
 8000d2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <HAL_UART_MspInit+0xcc>)
 8000d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d3c:	4a14      	ldr	r2, [pc, #80]	; (8000d90 <HAL_UART_MspInit+0xcc>)
 8000d3e:	f043 0301 	orr.w	r3, r3, #1
 8000d42:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d46:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_UART_MspInit+0xcc>)
 8000d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d54:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d6e:	2307      	movs	r3, #7
 8000d70:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d74:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4806      	ldr	r0, [pc, #24]	; (8000d94 <HAL_UART_MspInit+0xd0>)
 8000d7c:	f000 f9c2 	bl	8001104 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d80:	bf00      	nop
 8000d82:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40013800 	.word	0x40013800
 8000d90:	46020c00 	.word	0x46020c00
 8000d94:	42020000 	.word	0x42020000

08000d98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000d98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd0 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d9c:	f7ff ff0e 	bl	8000bbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000da0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000da2:	e003      	b.n	8000dac <LoopCopyDataInit>

08000da4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000da4:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000da6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000da8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000daa:	3104      	adds	r1, #4

08000dac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000dac:	480a      	ldr	r0, [pc, #40]	; (8000dd8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000db0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000db2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000db4:	d3f6      	bcc.n	8000da4 <CopyDataInit>
	ldr	r2, =_sbss
 8000db6:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000db8:	e002      	b.n	8000dc0 <LoopFillZerobss>

08000dba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000dba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000dbc:	f842 3b04 	str.w	r3, [r2], #4

08000dc0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000dc0:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <LoopForever+0x16>)
	cmp	r2, r3
 8000dc2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000dc4:	d3f9      	bcc.n	8000dba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dc6:	f006 f8fb 	bl	8006fc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dca:	f7ff fd11 	bl	80007f0 <main>

08000dce <LoopForever>:

LoopForever:
    b LoopForever
 8000dce:	e7fe      	b.n	8000dce <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000dd0:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8000dd4:	08007150 	.word	0x08007150
	ldr	r0, =_sdata
 8000dd8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ddc:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8000de0:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000de4:	20000150 	.word	0x20000150

08000de8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000de8:	e7fe      	b.n	8000de8 <ADC1_2_IRQHandler>
	...

08000dec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_Init+0x4c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a10      	ldr	r2, [pc, #64]	; (8000e38 <HAL_Init+0x4c>)
 8000df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dfc:	2003      	movs	r0, #3
 8000dfe:	f000 f94f 	bl	80010a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000e02:	f001 fd69 	bl	80028d8 <HAL_RCC_GetSysClockFreq>
 8000e06:	4602      	mov	r2, r0
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <HAL_Init+0x50>)
 8000e0a:	6a1b      	ldr	r3, [r3, #32]
 8000e0c:	f003 030f 	and.w	r3, r3, #15
 8000e10:	490b      	ldr	r1, [pc, #44]	; (8000e40 <HAL_Init+0x54>)
 8000e12:	5ccb      	ldrb	r3, [r1, r3]
 8000e14:	fa22 f303 	lsr.w	r3, r2, r3
 8000e18:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <HAL_Init+0x58>)
 8000e1a:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e1c:	200f      	movs	r0, #15
 8000e1e:	f000 f813 	bl	8000e48 <HAL_InitTick>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e002      	b.n	8000e32 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e2c:	f7ff fe82 	bl	8000b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40022000 	.word	0x40022000
 8000e3c:	46020c00 	.word	0x46020c00
 8000e40:	08007040 	.word	0x08007040
 8000e44:	20000000 	.word	0x20000000

08000e48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000e50:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <HAL_InitTick+0x60>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d101      	bne.n	8000e5c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e021      	b.n	8000ea0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e5c:	4b13      	ldr	r3, [pc, #76]	; (8000eac <HAL_InitTick+0x64>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <HAL_InitTick+0x60>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	4619      	mov	r1, r3
 8000e66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 f939 	bl	80010ea <HAL_SYSTICK_Config>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e00e      	b.n	8000ea0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2b0f      	cmp	r3, #15
 8000e86:	d80a      	bhi.n	8000e9e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	6879      	ldr	r1, [r7, #4]
 8000e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e90:	f000 f911 	bl	80010b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e94:	4a06      	ldr	r2, [pc, #24]	; (8000eb0 <HAL_InitTick+0x68>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	e000      	b.n	8000ea0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000008 	.word	0x20000008
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	20000004 	.word	0x20000004

08000eb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_IncTick+0x20>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_IncTick+0x24>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <HAL_IncTick+0x24>)
 8000ec6:	6013      	str	r3, [r2, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	20000008 	.word	0x20000008
 8000ed8:	2000014c 	.word	0x2000014c

08000edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <HAL_GetTick+0x14>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	2000014c 	.word	0x2000014c

08000ef4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000efc:	f7ff ffee 	bl	8000edc <HAL_GetTick>
 8000f00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f0c:	d005      	beq.n	8000f1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <HAL_Delay+0x44>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4413      	add	r3, r2
 8000f18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f1a:	bf00      	nop
 8000f1c:	f7ff ffde 	bl	8000edc <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d8f7      	bhi.n	8000f1c <HAL_Delay+0x28>
  {
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000008 	.word	0x20000008

08000f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6e:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	60d3      	str	r3, [r2, #12]
}
 8000f74:	bf00      	nop
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <__NVIC_GetPriorityGrouping+0x18>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	f003 0307 	and.w	r3, r3, #7
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	db0a      	blt.n	8000fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	490c      	ldr	r1, [pc, #48]	; (8000fec <__NVIC_SetPriority+0x4c>)
 8000fba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fbe:	0112      	lsls	r2, r2, #4
 8000fc0:	b2d2      	uxtb	r2, r2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc8:	e00a      	b.n	8000fe0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4908      	ldr	r1, [pc, #32]	; (8000ff0 <__NVIC_SetPriority+0x50>)
 8000fd0:	88fb      	ldrh	r3, [r7, #6]
 8000fd2:	f003 030f 	and.w	r3, r3, #15
 8000fd6:	3b04      	subs	r3, #4
 8000fd8:	0112      	lsls	r2, r2, #4
 8000fda:	b2d2      	uxtb	r2, r2
 8000fdc:	440b      	add	r3, r1
 8000fde:	761a      	strb	r2, [r3, #24]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000e100 	.word	0xe000e100
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b089      	sub	sp, #36	; 0x24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f1c3 0307 	rsb	r3, r3, #7
 800100e:	2b04      	cmp	r3, #4
 8001010:	bf28      	it	cs
 8001012:	2304      	movcs	r3, #4
 8001014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3304      	adds	r3, #4
 800101a:	2b06      	cmp	r3, #6
 800101c:	d902      	bls.n	8001024 <NVIC_EncodePriority+0x30>
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3b03      	subs	r3, #3
 8001022:	e000      	b.n	8001026 <NVIC_EncodePriority+0x32>
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	f04f 32ff 	mov.w	r2, #4294967295
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43da      	mvns	r2, r3
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	401a      	ands	r2, r3
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800103c:	f04f 31ff 	mov.w	r1, #4294967295
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	fa01 f303 	lsl.w	r3, r1, r3
 8001046:	43d9      	mvns	r1, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	4313      	orrs	r3, r2
         );
}
 800104e:	4618      	mov	r0, r3
 8001050:	3724      	adds	r7, #36	; 0x24
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800106c:	d301      	bcc.n	8001072 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800106e:	2301      	movs	r3, #1
 8001070:	e00f      	b.n	8001092 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001072:	4a0a      	ldr	r2, [pc, #40]	; (800109c <SysTick_Config+0x40>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3b01      	subs	r3, #1
 8001078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107a:	210f      	movs	r1, #15
 800107c:	f04f 30ff 	mov.w	r0, #4294967295
 8001080:	f7ff ff8e 	bl	8000fa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001084:	4b05      	ldr	r3, [pc, #20]	; (800109c <SysTick_Config+0x40>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108a:	4b04      	ldr	r3, [pc, #16]	; (800109c <SysTick_Config+0x40>)
 800108c:	2207      	movs	r2, #7
 800108e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	e000e010 	.word	0xe000e010

080010a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff47 	bl	8000f3c <__NVIC_SetPriorityGrouping>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b086      	sub	sp, #24
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4603      	mov	r3, r0
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
 80010c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010c4:	f7ff ff5e 	bl	8000f84 <__NVIC_GetPriorityGrouping>
 80010c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	68b9      	ldr	r1, [r7, #8]
 80010ce:	6978      	ldr	r0, [r7, #20]
 80010d0:	f7ff ff90 	bl	8000ff4 <NVIC_EncodePriority>
 80010d4:	4602      	mov	r2, r0
 80010d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010da:	4611      	mov	r1, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff5f 	bl	8000fa0 <__NVIC_SetPriority>
}
 80010e2:	bf00      	nop
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ffb2 	bl	800105c <SysTick_Config>
 80010f8:	4603      	mov	r3, r0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001104:	b480      	push	{r7}
 8001106:	b089      	sub	sp, #36	; 0x24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001116:	e1ba      	b.n	800148e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	2101      	movs	r1, #1
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	fa01 f303 	lsl.w	r3, r1, r3
 8001124:	4013      	ands	r3, r2
 8001126:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b00      	cmp	r3, #0
 8001130:	f000 81aa 	beq.w	8001488 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a55      	ldr	r2, [pc, #340]	; (800128c <HAL_GPIO_Init+0x188>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d15d      	bne.n	80011f8 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001142:	2201      	movs	r2, #1
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	69fa      	ldr	r2, [r7, #28]
 800114e:	4013      	ands	r3, r2
 8001150:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 0201 	and.w	r2, r3, #1
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69fa      	ldr	r2, [r7, #28]
 8001162:	4313      	orrs	r3, r2
 8001164:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	69fa      	ldr	r2, [r7, #28]
 800116a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800116c:	4a48      	ldr	r2, [pc, #288]	; (8001290 <HAL_GPIO_Init+0x18c>)
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001174:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001176:	4a46      	ldr	r2, [pc, #280]	; (8001290 <HAL_GPIO_Init+0x18c>)
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	4413      	add	r3, r2
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	08da      	lsrs	r2, r3, #3
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	3208      	adds	r2, #8
 800118a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800118e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	220f      	movs	r2, #15
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	69fa      	ldr	r2, [r7, #28]
 80011a2:	4013      	ands	r3, r2
 80011a4:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	f003 0307 	and.w	r3, r3, #7
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	220b      	movs	r2, #11
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69fa      	ldr	r2, [r7, #28]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	08da      	lsrs	r2, r3, #3
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	3208      	adds	r2, #8
 80011c2:	69f9      	ldr	r1, [r7, #28]
 80011c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	2203      	movs	r2, #3
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	69fa      	ldr	r2, [r7, #28]
 80011dc:	4013      	ands	r3, r2
 80011de:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	2202      	movs	r2, #2
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	69fa      	ldr	r2, [r7, #28]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	69fa      	ldr	r2, [r7, #28]
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	e067      	b.n	80012c8 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d003      	beq.n	8001208 <HAL_GPIO_Init+0x104>
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	2b12      	cmp	r3, #18
 8001206:	d145      	bne.n	8001294 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	08da      	lsrs	r2, r3, #3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3208      	adds	r2, #8
 8001210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001214:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	f003 0307 	and.w	r3, r3, #7
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	220f      	movs	r2, #15
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69fa      	ldr	r2, [r7, #28]
 8001228:	4013      	ands	r3, r2
 800122a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	f003 020f 	and.w	r2, r3, #15
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	69fa      	ldr	r2, [r7, #28]
 8001242:	4313      	orrs	r3, r2
 8001244:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	08da      	lsrs	r2, r3, #3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3208      	adds	r2, #8
 800124e:	69f9      	ldr	r1, [r7, #28]
 8001250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	2203      	movs	r2, #3
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69fa      	ldr	r2, [r7, #28]
 8001268:	4013      	ands	r3, r2
 800126a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 0203 	and.w	r2, r3, #3
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	69fa      	ldr	r2, [r7, #28]
 800127e:	4313      	orrs	r3, r2
 8001280:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	69fa      	ldr	r2, [r7, #28]
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	e01e      	b.n	80012c8 <HAL_GPIO_Init+0x1c4>
 800128a:	bf00      	nop
 800128c:	46020000 	.word	0x46020000
 8001290:	08007098 	.word	0x08007098
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	2203      	movs	r2, #3
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69fa      	ldr	r2, [r7, #28]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0203 	and.w	r2, r3, #3
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69fa      	ldr	r2, [r7, #28]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	69fa      	ldr	r2, [r7, #28]
 80012c6:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d00b      	beq.n	80012e8 <HAL_GPIO_Init+0x1e4>
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d007      	beq.n	80012e8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012dc:	2b11      	cmp	r3, #17
 80012de:	d003      	beq.n	80012e8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b12      	cmp	r3, #18
 80012e6:	d130      	bne.n	800134a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	2203      	movs	r2, #3
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69fa      	ldr	r2, [r7, #28]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	68da      	ldr	r2, [r3, #12]
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	69fa      	ldr	r2, [r7, #28]
 800130e:	4313      	orrs	r3, r2
 8001310:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	69fa      	ldr	r2, [r7, #28]
 8001316:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800131e:	2201      	movs	r2, #1
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	69fa      	ldr	r2, [r7, #28]
 800132a:	4013      	ands	r3, r2
 800132c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	091b      	lsrs	r3, r3, #4
 8001334:	f003 0201 	and.w	r2, r3, #1
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	69fa      	ldr	r2, [r7, #28]
 8001340:	4313      	orrs	r3, r2
 8001342:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	69fa      	ldr	r2, [r7, #28]
 8001348:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	2b03      	cmp	r3, #3
 8001350:	d017      	beq.n	8001382 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	2203      	movs	r2, #3
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43db      	mvns	r3, r3
 8001364:	69fa      	ldr	r2, [r7, #28]
 8001366:	4013      	ands	r3, r2
 8001368:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	689a      	ldr	r2, [r3, #8]
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	69fa      	ldr	r2, [r7, #28]
 8001378:	4313      	orrs	r3, r2
 800137a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	69fa      	ldr	r2, [r7, #28]
 8001380:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d07c      	beq.n	8001488 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800138e:	4a47      	ldr	r2, [pc, #284]	; (80014ac <HAL_GPIO_Init+0x3a8>)
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	089b      	lsrs	r3, r3, #2
 8001394:	3318      	adds	r3, #24
 8001396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	f003 0303 	and.w	r3, r3, #3
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	220f      	movs	r2, #15
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	69fa      	ldr	r2, [r7, #28]
 80013ae:	4013      	ands	r3, r2
 80013b0:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	0a9a      	lsrs	r2, r3, #10
 80013b6:	4b3e      	ldr	r3, [pc, #248]	; (80014b0 <HAL_GPIO_Init+0x3ac>)
 80013b8:	4013      	ands	r3, r2
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	f002 0203 	and.w	r2, r2, #3
 80013c0:	00d2      	lsls	r2, r2, #3
 80013c2:	4093      	lsls	r3, r2
 80013c4:	69fa      	ldr	r2, [r7, #28]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80013ca:	4938      	ldr	r1, [pc, #224]	; (80014ac <HAL_GPIO_Init+0x3a8>)
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	089b      	lsrs	r3, r3, #2
 80013d0:	3318      	adds	r3, #24
 80013d2:	69fa      	ldr	r2, [r7, #28]
 80013d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80013d8:	4b34      	ldr	r3, [pc, #208]	; (80014ac <HAL_GPIO_Init+0x3a8>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69fa      	ldr	r2, [r7, #28]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80013f4:	69fa      	ldr	r2, [r7, #28]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80013fc:	4a2b      	ldr	r2, [pc, #172]	; (80014ac <HAL_GPIO_Init+0x3a8>)
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001402:	4b2a      	ldr	r3, [pc, #168]	; (80014ac <HAL_GPIO_Init+0x3a8>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	43db      	mvns	r3, r3
 800140c:	69fa      	ldr	r2, [r7, #28]
 800140e:	4013      	ands	r3, r2
 8001410:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800141e:	69fa      	ldr	r2, [r7, #28]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	4313      	orrs	r3, r2
 8001424:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8001426:	4a21      	ldr	r2, [pc, #132]	; (80014ac <HAL_GPIO_Init+0x3a8>)
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800142c:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <HAL_GPIO_Init+0x3a8>)
 800142e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001432:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	43db      	mvns	r3, r3
 8001438:	69fa      	ldr	r2, [r7, #28]
 800143a:	4013      	ands	r3, r2
 800143c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800144a:	69fa      	ldr	r2, [r7, #28]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4313      	orrs	r3, r2
 8001450:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8001452:	4a16      	ldr	r2, [pc, #88]	; (80014ac <HAL_GPIO_Init+0x3a8>)
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800145a:	4b14      	ldr	r3, [pc, #80]	; (80014ac <HAL_GPIO_Init+0x3a8>)
 800145c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001460:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	43db      	mvns	r3, r3
 8001466:	69fa      	ldr	r2, [r7, #28]
 8001468:	4013      	ands	r3, r2
 800146a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d003      	beq.n	8001480 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8001478:	69fa      	ldr	r2, [r7, #28]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	4313      	orrs	r3, r2
 800147e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001480:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <HAL_GPIO_Init+0x3a8>)
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	3301      	adds	r3, #1
 800148c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	fa22 f303 	lsr.w	r3, r2, r3
 8001498:	2b00      	cmp	r3, #0
 800149a:	f47f ae3d 	bne.w	8001118 <HAL_GPIO_Init+0x14>
  }
}
 800149e:	bf00      	nop
 80014a0:	bf00      	nop
 80014a2:	3724      	adds	r7, #36	; 0x24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	46022000 	.word	0x46022000
 80014b0:	002f7f7f 	.word	0x002f7f7f

080014b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	807b      	strh	r3, [r7, #2]
 80014c0:	4613      	mov	r3, r2
 80014c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014c4:	787b      	ldrb	r3, [r7, #1]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d003      	beq.n	80014d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014ca:	887a      	ldrh	r2, [r7, #2]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80014d0:	e002      	b.n	80014d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80014d2:	887a      	ldrh	r2, [r7, #2]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014ec:	2300      	movs	r3, #0
 80014ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d002      	beq.n	8001502 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	73fb      	strb	r3, [r7, #15]
 8001500:	e007      	b.n	8001512 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8001502:	4b07      	ldr	r3, [pc, #28]	; (8001520 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f023 0204 	bic.w	r2, r3, #4
 800150a:	4905      	ldr	r1, [pc, #20]	; (8001520 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4313      	orrs	r3, r2
 8001510:	600b      	str	r3, [r1, #0]
  }

  return status;
 8001512:	7bfb      	ldrb	r3, [r7, #15]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	40030400 	.word	0x40030400

08001524 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <HAL_ICACHE_Enable+0x1c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a04      	ldr	r2, [pc, #16]	; (8001540 <HAL_ICACHE_Enable+0x1c>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	40030400 	.word	0x40030400

08001544 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800154c:	4b39      	ldr	r3, [pc, #228]	; (8001634 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800154e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001550:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001554:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	429a      	cmp	r2, r3
 800155c:	d10b      	bne.n	8001576 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001564:	d905      	bls.n	8001572 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001566:	4b33      	ldr	r3, [pc, #204]	; (8001634 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	4a32      	ldr	r2, [pc, #200]	; (8001634 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800156c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001570:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8001572:	2300      	movs	r3, #0
 8001574:	e057      	b.n	8001626 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800157c:	d90a      	bls.n	8001594 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800157e:	4b2d      	ldr	r3, [pc, #180]	; (8001634 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4313      	orrs	r3, r2
 800158a:	4a2a      	ldr	r2, [pc, #168]	; (8001634 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800158c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001590:	60d3      	str	r3, [r2, #12]
 8001592:	e007      	b.n	80015a4 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8001594:	4b27      	ldr	r3, [pc, #156]	; (8001634 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800159c:	4925      	ldr	r1, [pc, #148]	; (8001634 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80015a4:	4b24      	ldr	r3, [pc, #144]	; (8001638 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a24      	ldr	r2, [pc, #144]	; (800163c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80015aa:	fba2 2303 	umull	r2, r3, r2, r3
 80015ae:	099b      	lsrs	r3, r3, #6
 80015b0:	2232      	movs	r2, #50	; 0x32
 80015b2:	fb02 f303 	mul.w	r3, r2, r3
 80015b6:	4a21      	ldr	r2, [pc, #132]	; (800163c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80015b8:	fba2 2303 	umull	r2, r3, r2, r3
 80015bc:	099b      	lsrs	r3, r3, #6
 80015be:	3301      	adds	r3, #1
 80015c0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80015c2:	e002      	b.n	80015ca <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80015ca:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d102      	bne.n	80015dc <HAL_PWREx_ControlVoltageScaling+0x98>
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1f3      	bne.n	80015c4 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d01b      	beq.n	800161a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80015e2:	4b15      	ldr	r3, [pc, #84]	; (8001638 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a15      	ldr	r2, [pc, #84]	; (800163c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80015e8:	fba2 2303 	umull	r2, r3, r2, r3
 80015ec:	099b      	lsrs	r3, r3, #6
 80015ee:	2232      	movs	r2, #50	; 0x32
 80015f0:	fb02 f303 	mul.w	r3, r2, r3
 80015f4:	4a11      	ldr	r2, [pc, #68]	; (800163c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80015f6:	fba2 2303 	umull	r2, r3, r2, r3
 80015fa:	099b      	lsrs	r3, r3, #6
 80015fc:	3301      	adds	r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001600:	e002      	b.n	8001608 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	3b01      	subs	r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001608:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800160a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800160c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d102      	bne.n	800161a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f3      	bne.n	8001602 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e000      	b.n	8001626 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	46020800 	.word	0x46020800
 8001638:	20000000 	.word	0x20000000
 800163c:	10624dd3 	.word	0x10624dd3

08001640 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8001644:	4b04      	ldr	r3, [pc, #16]	; (8001658 <HAL_PWREx_GetVoltageRange+0x18>)
 8001646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001648:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800164c:	4618      	mov	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	46020800 	.word	0x46020800

0800165c <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001664:	4b22      	ldr	r3, [pc, #136]	; (80016f0 <HAL_PWREx_ConfigSupply+0x94>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a22      	ldr	r2, [pc, #136]	; (80016f4 <HAL_PWREx_ConfigSupply+0x98>)
 800166a:	fba2 2303 	umull	r2, r3, r2, r3
 800166e:	099b      	lsrs	r3, r3, #6
 8001670:	2232      	movs	r2, #50	; 0x32
 8001672:	fb02 f303 	mul.w	r3, r2, r3
 8001676:	4a1f      	ldr	r2, [pc, #124]	; (80016f4 <HAL_PWREx_ConfigSupply+0x98>)
 8001678:	fba2 2303 	umull	r2, r3, r2, r3
 800167c:	099b      	lsrs	r3, r3, #6
 800167e:	3301      	adds	r3, #1
 8001680:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d113      	bne.n	80016b0 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8001688:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <HAL_PWREx_ConfigSupply+0x9c>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	4a1a      	ldr	r2, [pc, #104]	; (80016f8 <HAL_PWREx_ConfigSupply+0x9c>)
 800168e:	f023 0302 	bic.w	r3, r3, #2
 8001692:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001694:	e002      	b.n	800169c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	3b01      	subs	r3, #1
 800169a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800169c:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <HAL_PWREx_ConfigSupply+0x9c>)
 800169e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d116      	bne.n	80016d6 <HAL_PWREx_ConfigSupply+0x7a>
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f3      	bne.n	8001696 <HAL_PWREx_ConfigSupply+0x3a>
 80016ae:	e012      	b.n	80016d6 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80016b0:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <HAL_PWREx_ConfigSupply+0x9c>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	4a10      	ldr	r2, [pc, #64]	; (80016f8 <HAL_PWREx_ConfigSupply+0x9c>)
 80016b6:	f043 0302 	orr.w	r3, r3, #2
 80016ba:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80016bc:	e002      	b.n	80016c4 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	3b01      	subs	r3, #1
 80016c2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <HAL_PWREx_ConfigSupply+0x9c>)
 80016c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d102      	bne.n	80016d6 <HAL_PWREx_ConfigSupply+0x7a>
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1f3      	bne.n	80016be <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d101      	bne.n	80016e0 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e000      	b.n	80016e2 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	20000000 	.word	0x20000000
 80016f4:	10624dd3 	.word	0x10624dd3
 80016f8:	46020800 	.word	0x46020800

080016fc <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	4a04      	ldr	r2, [pc, #16]	; (8001718 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001706:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800170a:	6113      	str	r3, [r2, #16]
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	46020800 	.word	0x46020800

0800171c <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8001720:	4b05      	ldr	r3, [pc, #20]	; (8001738 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001724:	4a04      	ldr	r2, [pc, #16]	; (8001738 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	46020800 	.word	0x46020800

0800173c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08e      	sub	sp, #56	; 0x38
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8001744:	2300      	movs	r3, #0
 8001746:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d102      	bne.n	8001756 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	f000 bec8 	b.w	80024e6 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001756:	4b99      	ldr	r3, [pc, #612]	; (80019bc <HAL_RCC_OscConfig+0x280>)
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	f003 030c 	and.w	r3, r3, #12
 800175e:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001760:	4b96      	ldr	r3, [pc, #600]	; (80019bc <HAL_RCC_OscConfig+0x280>)
 8001762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001764:	f003 0303 	and.w	r3, r3, #3
 8001768:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0310 	and.w	r3, r3, #16
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 816c 	beq.w	8001a50 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800177a:	2b00      	cmp	r3, #0
 800177c:	d007      	beq.n	800178e <HAL_RCC_OscConfig+0x52>
 800177e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001780:	2b0c      	cmp	r3, #12
 8001782:	f040 80de 	bne.w	8001942 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001788:	2b01      	cmp	r3, #1
 800178a:	f040 80da 	bne.w	8001942 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d102      	bne.n	800179c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	f000 bea5 	b.w	80024e6 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017a0:	4b86      	ldr	r3, [pc, #536]	; (80019bc <HAL_RCC_OscConfig+0x280>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d004      	beq.n	80017b6 <HAL_RCC_OscConfig+0x7a>
 80017ac:	4b83      	ldr	r3, [pc, #524]	; (80019bc <HAL_RCC_OscConfig+0x280>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80017b4:	e005      	b.n	80017c2 <HAL_RCC_OscConfig+0x86>
 80017b6:	4b81      	ldr	r3, [pc, #516]	; (80019bc <HAL_RCC_OscConfig+0x280>)
 80017b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017bc:	041b      	lsls	r3, r3, #16
 80017be:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d255      	bcs.n	8001872 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80017c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d10a      	bne.n	80017e2 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d0:	4618      	mov	r0, r3
 80017d2:	f001 f9df 	bl	8002b94 <RCC_SetFlashLatencyFromMSIRange>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d002      	beq.n	80017e2 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	f000 be82 	b.w	80024e6 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80017e2:	4b76      	ldr	r3, [pc, #472]	; (80019bc <HAL_RCC_OscConfig+0x280>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	4a75      	ldr	r2, [pc, #468]	; (80019bc <HAL_RCC_OscConfig+0x280>)
 80017e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80017ec:	6093      	str	r3, [r2, #8]
 80017ee:	4b73      	ldr	r3, [pc, #460]	; (80019bc <HAL_RCC_OscConfig+0x280>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fa:	4970      	ldr	r1, [pc, #448]	; (80019bc <HAL_RCC_OscConfig+0x280>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001804:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001808:	d309      	bcc.n	800181e <HAL_RCC_OscConfig+0xe2>
 800180a:	4b6c      	ldr	r3, [pc, #432]	; (80019bc <HAL_RCC_OscConfig+0x280>)
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	f023 021f 	bic.w	r2, r3, #31
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	4969      	ldr	r1, [pc, #420]	; (80019bc <HAL_RCC_OscConfig+0x280>)
 8001818:	4313      	orrs	r3, r2
 800181a:	60cb      	str	r3, [r1, #12]
 800181c:	e07e      	b.n	800191c <HAL_RCC_OscConfig+0x1e0>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001822:	2b00      	cmp	r3, #0
 8001824:	da0a      	bge.n	800183c <HAL_RCC_OscConfig+0x100>
 8001826:	4b65      	ldr	r3, [pc, #404]	; (80019bc <HAL_RCC_OscConfig+0x280>)
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a1b      	ldr	r3, [r3, #32]
 8001832:	015b      	lsls	r3, r3, #5
 8001834:	4961      	ldr	r1, [pc, #388]	; (80019bc <HAL_RCC_OscConfig+0x280>)
 8001836:	4313      	orrs	r3, r2
 8001838:	60cb      	str	r3, [r1, #12]
 800183a:	e06f      	b.n	800191c <HAL_RCC_OscConfig+0x1e0>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001844:	d30a      	bcc.n	800185c <HAL_RCC_OscConfig+0x120>
 8001846:	4b5d      	ldr	r3, [pc, #372]	; (80019bc <HAL_RCC_OscConfig+0x280>)
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a1b      	ldr	r3, [r3, #32]
 8001852:	029b      	lsls	r3, r3, #10
 8001854:	4959      	ldr	r1, [pc, #356]	; (80019bc <HAL_RCC_OscConfig+0x280>)
 8001856:	4313      	orrs	r3, r2
 8001858:	60cb      	str	r3, [r1, #12]
 800185a:	e05f      	b.n	800191c <HAL_RCC_OscConfig+0x1e0>
 800185c:	4b57      	ldr	r3, [pc, #348]	; (80019bc <HAL_RCC_OscConfig+0x280>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	03db      	lsls	r3, r3, #15
 800186a:	4954      	ldr	r1, [pc, #336]	; (80019bc <HAL_RCC_OscConfig+0x280>)
 800186c:	4313      	orrs	r3, r2
 800186e:	60cb      	str	r3, [r1, #12]
 8001870:	e054      	b.n	800191c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001872:	4b52      	ldr	r3, [pc, #328]	; (80019bc <HAL_RCC_OscConfig+0x280>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	4a51      	ldr	r2, [pc, #324]	; (80019bc <HAL_RCC_OscConfig+0x280>)
 8001878:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800187c:	6093      	str	r3, [r2, #8]
 800187e:	4b4f      	ldr	r3, [pc, #316]	; (80019bc <HAL_RCC_OscConfig+0x280>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188a:	494c      	ldr	r1, [pc, #304]	; (80019bc <HAL_RCC_OscConfig+0x280>)
 800188c:	4313      	orrs	r3, r2
 800188e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001894:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001898:	d309      	bcc.n	80018ae <HAL_RCC_OscConfig+0x172>
 800189a:	4b48      	ldr	r3, [pc, #288]	; (80019bc <HAL_RCC_OscConfig+0x280>)
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	f023 021f 	bic.w	r2, r3, #31
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a1b      	ldr	r3, [r3, #32]
 80018a6:	4945      	ldr	r1, [pc, #276]	; (80019bc <HAL_RCC_OscConfig+0x280>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	60cb      	str	r3, [r1, #12]
 80018ac:	e028      	b.n	8001900 <HAL_RCC_OscConfig+0x1c4>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	da0a      	bge.n	80018cc <HAL_RCC_OscConfig+0x190>
 80018b6:	4b41      	ldr	r3, [pc, #260]	; (80019bc <HAL_RCC_OscConfig+0x280>)
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a1b      	ldr	r3, [r3, #32]
 80018c2:	015b      	lsls	r3, r3, #5
 80018c4:	493d      	ldr	r1, [pc, #244]	; (80019bc <HAL_RCC_OscConfig+0x280>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	60cb      	str	r3, [r1, #12]
 80018ca:	e019      	b.n	8001900 <HAL_RCC_OscConfig+0x1c4>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018d4:	d30a      	bcc.n	80018ec <HAL_RCC_OscConfig+0x1b0>
 80018d6:	4b39      	ldr	r3, [pc, #228]	; (80019bc <HAL_RCC_OscConfig+0x280>)
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a1b      	ldr	r3, [r3, #32]
 80018e2:	029b      	lsls	r3, r3, #10
 80018e4:	4935      	ldr	r1, [pc, #212]	; (80019bc <HAL_RCC_OscConfig+0x280>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	60cb      	str	r3, [r1, #12]
 80018ea:	e009      	b.n	8001900 <HAL_RCC_OscConfig+0x1c4>
 80018ec:	4b33      	ldr	r3, [pc, #204]	; (80019bc <HAL_RCC_OscConfig+0x280>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	03db      	lsls	r3, r3, #15
 80018fa:	4930      	ldr	r1, [pc, #192]	; (80019bc <HAL_RCC_OscConfig+0x280>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10a      	bne.n	800191c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190a:	4618      	mov	r0, r3
 800190c:	f001 f942 	bl	8002b94 <RCC_SetFlashLatencyFromMSIRange>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d002      	beq.n	800191c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	f000 bde5 	b.w	80024e6 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800191c:	f001 f8e4 	bl	8002ae8 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001920:	4b27      	ldr	r3, [pc, #156]	; (80019c0 <HAL_RCC_OscConfig+0x284>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fa8f 	bl	8000e48 <HAL_InitTick>
 800192a:	4603      	mov	r3, r0
 800192c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8001930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001934:	2b00      	cmp	r3, #0
 8001936:	f000 808a 	beq.w	8001a4e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800193a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800193e:	f000 bdd2 	b.w	80024e6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d066      	beq.n	8001a18 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800194a:	4b1c      	ldr	r3, [pc, #112]	; (80019bc <HAL_RCC_OscConfig+0x280>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a1b      	ldr	r2, [pc, #108]	; (80019bc <HAL_RCC_OscConfig+0x280>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001956:	f7ff fac1 	bl	8000edc <HAL_GetTick>
 800195a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800195c:	e009      	b.n	8001972 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800195e:	f7ff fabd 	bl	8000edc <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d902      	bls.n	8001972 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	f000 bdba 	b.w	80024e6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001972:	4b12      	ldr	r3, [pc, #72]	; (80019bc <HAL_RCC_OscConfig+0x280>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0304 	and.w	r3, r3, #4
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0ef      	beq.n	800195e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800197e:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <HAL_RCC_OscConfig+0x280>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	4a0e      	ldr	r2, [pc, #56]	; (80019bc <HAL_RCC_OscConfig+0x280>)
 8001984:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001988:	6093      	str	r3, [r2, #8]
 800198a:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <HAL_RCC_OscConfig+0x280>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001996:	4909      	ldr	r1, [pc, #36]	; (80019bc <HAL_RCC_OscConfig+0x280>)
 8001998:	4313      	orrs	r3, r2
 800199a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80019a4:	d30e      	bcc.n	80019c4 <HAL_RCC_OscConfig+0x288>
 80019a6:	4b05      	ldr	r3, [pc, #20]	; (80019bc <HAL_RCC_OscConfig+0x280>)
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	f023 021f 	bic.w	r2, r3, #31
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	4902      	ldr	r1, [pc, #8]	; (80019bc <HAL_RCC_OscConfig+0x280>)
 80019b4:	4313      	orrs	r3, r2
 80019b6:	60cb      	str	r3, [r1, #12]
 80019b8:	e04a      	b.n	8001a50 <HAL_RCC_OscConfig+0x314>
 80019ba:	bf00      	nop
 80019bc:	46020c00 	.word	0x46020c00
 80019c0:	20000004 	.word	0x20000004
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	da0a      	bge.n	80019e2 <HAL_RCC_OscConfig+0x2a6>
 80019cc:	4b98      	ldr	r3, [pc, #608]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	015b      	lsls	r3, r3, #5
 80019da:	4995      	ldr	r1, [pc, #596]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	60cb      	str	r3, [r1, #12]
 80019e0:	e036      	b.n	8001a50 <HAL_RCC_OscConfig+0x314>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019ea:	d30a      	bcc.n	8001a02 <HAL_RCC_OscConfig+0x2c6>
 80019ec:	4b90      	ldr	r3, [pc, #576]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	029b      	lsls	r3, r3, #10
 80019fa:	498d      	ldr	r1, [pc, #564]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	60cb      	str	r3, [r1, #12]
 8001a00:	e026      	b.n	8001a50 <HAL_RCC_OscConfig+0x314>
 8001a02:	4b8b      	ldr	r3, [pc, #556]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	03db      	lsls	r3, r3, #15
 8001a10:	4987      	ldr	r1, [pc, #540]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	60cb      	str	r3, [r1, #12]
 8001a16:	e01b      	b.n	8001a50 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8001a18:	4b85      	ldr	r3, [pc, #532]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a84      	ldr	r2, [pc, #528]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001a1e:	f023 0301 	bic.w	r3, r3, #1
 8001a22:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001a24:	f7ff fa5a 	bl	8000edc <HAL_GetTick>
 8001a28:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001a2a:	e009      	b.n	8001a40 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a2c:	f7ff fa56 	bl	8000edc <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d902      	bls.n	8001a40 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	f000 bd53 	b.w	80024e6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001a40:	4b7b      	ldr	r3, [pc, #492]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1ef      	bne.n	8001a2c <HAL_RCC_OscConfig+0x2f0>
 8001a4c:	e000      	b.n	8001a50 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001a4e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 808b 	beq.w	8001b74 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d005      	beq.n	8001a70 <HAL_RCC_OscConfig+0x334>
 8001a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a66:	2b0c      	cmp	r3, #12
 8001a68:	d109      	bne.n	8001a7e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a6c:	2b03      	cmp	r3, #3
 8001a6e:	d106      	bne.n	8001a7e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d17d      	bne.n	8001b74 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	f000 bd34 	b.w	80024e6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a86:	d106      	bne.n	8001a96 <HAL_RCC_OscConfig+0x35a>
 8001a88:	4b69      	ldr	r3, [pc, #420]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a68      	ldr	r2, [pc, #416]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001a8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a92:	6013      	str	r3, [r2, #0]
 8001a94:	e041      	b.n	8001b1a <HAL_RCC_OscConfig+0x3de>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a9e:	d112      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x38a>
 8001aa0:	4b63      	ldr	r3, [pc, #396]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a62      	ldr	r2, [pc, #392]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001aa6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aaa:	6013      	str	r3, [r2, #0]
 8001aac:	4b60      	ldr	r3, [pc, #384]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a5f      	ldr	r2, [pc, #380]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001ab2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001ab6:	6013      	str	r3, [r2, #0]
 8001ab8:	4b5d      	ldr	r3, [pc, #372]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a5c      	ldr	r2, [pc, #368]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	e029      	b.n	8001b1a <HAL_RCC_OscConfig+0x3de>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001ace:	d112      	bne.n	8001af6 <HAL_RCC_OscConfig+0x3ba>
 8001ad0:	4b57      	ldr	r3, [pc, #348]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a56      	ldr	r2, [pc, #344]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001ad6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ada:	6013      	str	r3, [r2, #0]
 8001adc:	4b54      	ldr	r3, [pc, #336]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a53      	ldr	r2, [pc, #332]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001ae2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	4b51      	ldr	r3, [pc, #324]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a50      	ldr	r2, [pc, #320]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af2:	6013      	str	r3, [r2, #0]
 8001af4:	e011      	b.n	8001b1a <HAL_RCC_OscConfig+0x3de>
 8001af6:	4b4e      	ldr	r3, [pc, #312]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a4d      	ldr	r2, [pc, #308]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001afc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	4b4b      	ldr	r3, [pc, #300]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a4a      	ldr	r2, [pc, #296]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001b08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	4b48      	ldr	r3, [pc, #288]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a47      	ldr	r2, [pc, #284]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001b14:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001b18:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d014      	beq.n	8001b4c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8001b22:	f7ff f9db 	bl	8000edc <HAL_GetTick>
 8001b26:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b28:	e009      	b.n	8001b3e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b2a:	f7ff f9d7 	bl	8000edc <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b64      	cmp	r3, #100	; 0x64
 8001b36:	d902      	bls.n	8001b3e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	f000 bcd4 	b.w	80024e6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b3e:	4b3c      	ldr	r3, [pc, #240]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0ef      	beq.n	8001b2a <HAL_RCC_OscConfig+0x3ee>
 8001b4a:	e013      	b.n	8001b74 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8001b4c:	f7ff f9c6 	bl	8000edc <HAL_GetTick>
 8001b50:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b52:	e009      	b.n	8001b68 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b54:	f7ff f9c2 	bl	8000edc <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b64      	cmp	r3, #100	; 0x64
 8001b60:	d902      	bls.n	8001b68 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	f000 bcbf 	b.w	80024e6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b68:	4b31      	ldr	r3, [pc, #196]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1ef      	bne.n	8001b54 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0302 	and.w	r3, r3, #2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d05f      	beq.n	8001c40 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d005      	beq.n	8001b92 <HAL_RCC_OscConfig+0x456>
 8001b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b88:	2b0c      	cmp	r3, #12
 8001b8a:	d114      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d111      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d102      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	f000 bca3 	b.w	80024e6 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001ba0:	4b23      	ldr	r3, [pc, #140]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	041b      	lsls	r3, r3, #16
 8001bae:	4920      	ldr	r1, [pc, #128]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001bb4:	e044      	b.n	8001c40 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d024      	beq.n	8001c08 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8001bbe:	4b1c      	ldr	r3, [pc, #112]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a1b      	ldr	r2, [pc, #108]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001bca:	f7ff f987 	bl	8000edc <HAL_GetTick>
 8001bce:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bd0:	e009      	b.n	8001be6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bd2:	f7ff f983 	bl	8000edc <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d902      	bls.n	8001be6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	f000 bc80 	b.w	80024e6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001be6:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d0ef      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001bf2:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	041b      	lsls	r3, r3, #16
 8001c00:	490b      	ldr	r1, [pc, #44]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	610b      	str	r3, [r1, #16]
 8001c06:	e01b      	b.n	8001c40 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8001c08:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a08      	ldr	r2, [pc, #32]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001c0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c12:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001c14:	f7ff f962 	bl	8000edc <HAL_GetTick>
 8001c18:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c1a:	e00b      	b.n	8001c34 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c1c:	f7ff f95e 	bl	8000edc <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d904      	bls.n	8001c34 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	f000 bc5b 	b.w	80024e6 <HAL_RCC_OscConfig+0xdaa>
 8001c30:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c34:	4baf      	ldr	r3, [pc, #700]	; (8001ef4 <HAL_RCC_OscConfig+0x7b8>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1ed      	bne.n	8001c1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0308 	and.w	r3, r3, #8
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 80c8 	beq.w	8001dde <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c54:	4ba7      	ldr	r3, [pc, #668]	; (8001ef4 <HAL_RCC_OscConfig+0x7b8>)
 8001c56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d111      	bne.n	8001c86 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c62:	4ba4      	ldr	r3, [pc, #656]	; (8001ef4 <HAL_RCC_OscConfig+0x7b8>)
 8001c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c68:	4aa2      	ldr	r2, [pc, #648]	; (8001ef4 <HAL_RCC_OscConfig+0x7b8>)
 8001c6a:	f043 0304 	orr.w	r3, r3, #4
 8001c6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001c72:	4ba0      	ldr	r3, [pc, #640]	; (8001ef4 <HAL_RCC_OscConfig+0x7b8>)
 8001c74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8001c80:	2301      	movs	r3, #1
 8001c82:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001c86:	4b9c      	ldr	r3, [pc, #624]	; (8001ef8 <HAL_RCC_OscConfig+0x7bc>)
 8001c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d119      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001c92:	4b99      	ldr	r3, [pc, #612]	; (8001ef8 <HAL_RCC_OscConfig+0x7bc>)
 8001c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c96:	4a98      	ldr	r2, [pc, #608]	; (8001ef8 <HAL_RCC_OscConfig+0x7bc>)
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c9e:	f7ff f91d 	bl	8000edc <HAL_GetTick>
 8001ca2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001ca4:	e009      	b.n	8001cba <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ca6:	f7ff f919 	bl	8000edc <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d902      	bls.n	8001cba <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	f000 bc16 	b.w	80024e6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001cba:	4b8f      	ldr	r3, [pc, #572]	; (8001ef8 <HAL_RCC_OscConfig+0x7bc>)
 8001cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0ef      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d05f      	beq.n	8001d8e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8001cce:	4b89      	ldr	r3, [pc, #548]	; (8001ef4 <HAL_RCC_OscConfig+0x7b8>)
 8001cd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cd4:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	699a      	ldr	r2, [r3, #24]
 8001cda:	6a3b      	ldr	r3, [r7, #32]
 8001cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d037      	beq.n	8001d54 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001ce4:	6a3b      	ldr	r3, [r7, #32]
 8001ce6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d006      	beq.n	8001cfc <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8001cee:	6a3b      	ldr	r3, [r7, #32]
 8001cf0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e3f4      	b.n	80024e6 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8001cfc:	6a3b      	ldr	r3, [r7, #32]
 8001cfe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d01b      	beq.n	8001d3e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8001d06:	4b7b      	ldr	r3, [pc, #492]	; (8001ef4 <HAL_RCC_OscConfig+0x7b8>)
 8001d08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d0c:	4a79      	ldr	r2, [pc, #484]	; (8001ef4 <HAL_RCC_OscConfig+0x7b8>)
 8001d0e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001d12:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8001d16:	f7ff f8e1 	bl	8000edc <HAL_GetTick>
 8001d1a:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d1e:	f7ff f8dd 	bl	8000edc <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b05      	cmp	r3, #5
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e3da      	b.n	80024e6 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001d30:	4b70      	ldr	r3, [pc, #448]	; (8001ef4 <HAL_RCC_OscConfig+0x7b8>)
 8001d32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1ef      	bne.n	8001d1e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8001d3e:	4b6d      	ldr	r3, [pc, #436]	; (8001ef4 <HAL_RCC_OscConfig+0x7b8>)
 8001d40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d44:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	4969      	ldr	r1, [pc, #420]	; (8001ef4 <HAL_RCC_OscConfig+0x7b8>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8001d54:	4b67      	ldr	r3, [pc, #412]	; (8001ef4 <HAL_RCC_OscConfig+0x7b8>)
 8001d56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d5a:	4a66      	ldr	r2, [pc, #408]	; (8001ef4 <HAL_RCC_OscConfig+0x7b8>)
 8001d5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d60:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001d64:	f7ff f8ba 	bl	8000edc <HAL_GetTick>
 8001d68:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d6c:	f7ff f8b6 	bl	8000edc <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b05      	cmp	r3, #5
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e3b3      	b.n	80024e6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001d7e:	4b5d      	ldr	r3, [pc, #372]	; (8001ef4 <HAL_RCC_OscConfig+0x7b8>)
 8001d80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0ef      	beq.n	8001d6c <HAL_RCC_OscConfig+0x630>
 8001d8c:	e01b      	b.n	8001dc6 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8001d8e:	4b59      	ldr	r3, [pc, #356]	; (8001ef4 <HAL_RCC_OscConfig+0x7b8>)
 8001d90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d94:	4a57      	ldr	r2, [pc, #348]	; (8001ef4 <HAL_RCC_OscConfig+0x7b8>)
 8001d96:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001d9a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001d9e:	f7ff f89d 	bl	8000edc <HAL_GetTick>
 8001da2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001da6:	f7ff f899 	bl	8000edc <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b05      	cmp	r3, #5
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e396      	b.n	80024e6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001db8:	4b4e      	ldr	r3, [pc, #312]	; (8001ef4 <HAL_RCC_OscConfig+0x7b8>)
 8001dba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1ef      	bne.n	8001da6 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001dc6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d107      	bne.n	8001dde <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dce:	4b49      	ldr	r3, [pc, #292]	; (8001ef4 <HAL_RCC_OscConfig+0x7b8>)
 8001dd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dd4:	4a47      	ldr	r2, [pc, #284]	; (8001ef4 <HAL_RCC_OscConfig+0x7b8>)
 8001dd6:	f023 0304 	bic.w	r3, r3, #4
 8001dda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0304 	and.w	r3, r3, #4
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 8111 	beq.w	800200e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8001dec:	2300      	movs	r3, #0
 8001dee:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001df2:	4b40      	ldr	r3, [pc, #256]	; (8001ef4 <HAL_RCC_OscConfig+0x7b8>)
 8001df4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d111      	bne.n	8001e24 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e00:	4b3c      	ldr	r3, [pc, #240]	; (8001ef4 <HAL_RCC_OscConfig+0x7b8>)
 8001e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e06:	4a3b      	ldr	r2, [pc, #236]	; (8001ef4 <HAL_RCC_OscConfig+0x7b8>)
 8001e08:	f043 0304 	orr.w	r3, r3, #4
 8001e0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001e10:	4b38      	ldr	r3, [pc, #224]	; (8001ef4 <HAL_RCC_OscConfig+0x7b8>)
 8001e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001e24:	4b34      	ldr	r3, [pc, #208]	; (8001ef8 <HAL_RCC_OscConfig+0x7bc>)
 8001e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d118      	bne.n	8001e62 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001e30:	4b31      	ldr	r3, [pc, #196]	; (8001ef8 <HAL_RCC_OscConfig+0x7bc>)
 8001e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e34:	4a30      	ldr	r2, [pc, #192]	; (8001ef8 <HAL_RCC_OscConfig+0x7bc>)
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e3c:	f7ff f84e 	bl	8000edc <HAL_GetTick>
 8001e40:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e44:	f7ff f84a 	bl	8000edc <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e347      	b.n	80024e6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001e56:	4b28      	ldr	r3, [pc, #160]	; (8001ef8 <HAL_RCC_OscConfig+0x7bc>)
 8001e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d01f      	beq.n	8001eae <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d010      	beq.n	8001e9c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001e7a:	4b1e      	ldr	r3, [pc, #120]	; (8001ef4 <HAL_RCC_OscConfig+0x7b8>)
 8001e7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e80:	4a1c      	ldr	r2, [pc, #112]	; (8001ef4 <HAL_RCC_OscConfig+0x7b8>)
 8001e82:	f043 0304 	orr.w	r3, r3, #4
 8001e86:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e8a:	4b1a      	ldr	r3, [pc, #104]	; (8001ef4 <HAL_RCC_OscConfig+0x7b8>)
 8001e8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e90:	4a18      	ldr	r2, [pc, #96]	; (8001ef4 <HAL_RCC_OscConfig+0x7b8>)
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e9a:	e018      	b.n	8001ece <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e9c:	4b15      	ldr	r3, [pc, #84]	; (8001ef4 <HAL_RCC_OscConfig+0x7b8>)
 8001e9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ea2:	4a14      	ldr	r2, [pc, #80]	; (8001ef4 <HAL_RCC_OscConfig+0x7b8>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001eac:	e00f      	b.n	8001ece <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001eae:	4b11      	ldr	r3, [pc, #68]	; (8001ef4 <HAL_RCC_OscConfig+0x7b8>)
 8001eb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001eb4:	4a0f      	ldr	r2, [pc, #60]	; (8001ef4 <HAL_RCC_OscConfig+0x7b8>)
 8001eb6:	f023 0301 	bic.w	r3, r3, #1
 8001eba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001ebe:	4b0d      	ldr	r3, [pc, #52]	; (8001ef4 <HAL_RCC_OscConfig+0x7b8>)
 8001ec0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ec4:	4a0b      	ldr	r2, [pc, #44]	; (8001ef4 <HAL_RCC_OscConfig+0x7b8>)
 8001ec6:	f023 0304 	bic.w	r3, r3, #4
 8001eca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d057      	beq.n	8001f86 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8001ed6:	f7ff f801 	bl	8000edc <HAL_GetTick>
 8001eda:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001edc:	e00e      	b.n	8001efc <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ede:	f7fe fffd 	bl	8000edc <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d905      	bls.n	8001efc <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e2f8      	b.n	80024e6 <HAL_RCC_OscConfig+0xdaa>
 8001ef4:	46020c00 	.word	0x46020c00
 8001ef8:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001efc:	4b9c      	ldr	r3, [pc, #624]	; (8002170 <HAL_RCC_OscConfig+0xa34>)
 8001efe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0e9      	beq.n	8001ede <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d01b      	beq.n	8001f4e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001f16:	4b96      	ldr	r3, [pc, #600]	; (8002170 <HAL_RCC_OscConfig+0xa34>)
 8001f18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f1c:	4a94      	ldr	r2, [pc, #592]	; (8002170 <HAL_RCC_OscConfig+0xa34>)
 8001f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f22:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001f26:	e00a      	b.n	8001f3e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f28:	f7fe ffd8 	bl	8000edc <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e2d3      	b.n	80024e6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001f3e:	4b8c      	ldr	r3, [pc, #560]	; (8002170 <HAL_RCC_OscConfig+0xa34>)
 8001f40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0ed      	beq.n	8001f28 <HAL_RCC_OscConfig+0x7ec>
 8001f4c:	e053      	b.n	8001ff6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001f4e:	4b88      	ldr	r3, [pc, #544]	; (8002170 <HAL_RCC_OscConfig+0xa34>)
 8001f50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f54:	4a86      	ldr	r2, [pc, #536]	; (8002170 <HAL_RCC_OscConfig+0xa34>)
 8001f56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f5a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f5e:	e00a      	b.n	8001f76 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f60:	f7fe ffbc 	bl	8000edc <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e2b7      	b.n	80024e6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f76:	4b7e      	ldr	r3, [pc, #504]	; (8002170 <HAL_RCC_OscConfig+0xa34>)
 8001f78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1ed      	bne.n	8001f60 <HAL_RCC_OscConfig+0x824>
 8001f84:	e037      	b.n	8001ff6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8001f86:	f7fe ffa9 	bl	8000edc <HAL_GetTick>
 8001f8a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f8c:	e00a      	b.n	8001fa4 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8e:	f7fe ffa5 	bl	8000edc <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e2a0      	b.n	80024e6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fa4:	4b72      	ldr	r3, [pc, #456]	; (8002170 <HAL_RCC_OscConfig+0xa34>)
 8001fa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1ed      	bne.n	8001f8e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001fb2:	4b6f      	ldr	r3, [pc, #444]	; (8002170 <HAL_RCC_OscConfig+0xa34>)
 8001fb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d01a      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001fc0:	4b6b      	ldr	r3, [pc, #428]	; (8002170 <HAL_RCC_OscConfig+0xa34>)
 8001fc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fc6:	4a6a      	ldr	r2, [pc, #424]	; (8002170 <HAL_RCC_OscConfig+0xa34>)
 8001fc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fcc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001fd0:	e00a      	b.n	8001fe8 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd2:	f7fe ff83 	bl	8000edc <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e27e      	b.n	80024e6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001fe8:	4b61      	ldr	r3, [pc, #388]	; (8002170 <HAL_RCC_OscConfig+0xa34>)
 8001fea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1ed      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ff6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d107      	bne.n	800200e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ffe:	4b5c      	ldr	r3, [pc, #368]	; (8002170 <HAL_RCC_OscConfig+0xa34>)
 8002000:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002004:	4a5a      	ldr	r2, [pc, #360]	; (8002170 <HAL_RCC_OscConfig+0xa34>)
 8002006:	f023 0304 	bic.w	r3, r3, #4
 800200a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0320 	and.w	r3, r3, #32
 8002016:	2b00      	cmp	r3, #0
 8002018:	d036      	beq.n	8002088 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201e:	2b00      	cmp	r3, #0
 8002020:	d019      	beq.n	8002056 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8002022:	4b53      	ldr	r3, [pc, #332]	; (8002170 <HAL_RCC_OscConfig+0xa34>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a52      	ldr	r2, [pc, #328]	; (8002170 <HAL_RCC_OscConfig+0xa34>)
 8002028:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800202c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800202e:	f7fe ff55 	bl	8000edc <HAL_GetTick>
 8002032:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002036:	f7fe ff51 	bl	8000edc <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e24e      	b.n	80024e6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002048:	4b49      	ldr	r3, [pc, #292]	; (8002170 <HAL_RCC_OscConfig+0xa34>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0f0      	beq.n	8002036 <HAL_RCC_OscConfig+0x8fa>
 8002054:	e018      	b.n	8002088 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8002056:	4b46      	ldr	r3, [pc, #280]	; (8002170 <HAL_RCC_OscConfig+0xa34>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a45      	ldr	r2, [pc, #276]	; (8002170 <HAL_RCC_OscConfig+0xa34>)
 800205c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002060:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002062:	f7fe ff3b 	bl	8000edc <HAL_GetTick>
 8002066:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800206a:	f7fe ff37 	bl	8000edc <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e234      	b.n	80024e6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800207c:	4b3c      	ldr	r3, [pc, #240]	; (8002170 <HAL_RCC_OscConfig+0xa34>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1f0      	bne.n	800206a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002090:	2b00      	cmp	r3, #0
 8002092:	d036      	beq.n	8002102 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002098:	2b00      	cmp	r3, #0
 800209a:	d019      	beq.n	80020d0 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800209c:	4b34      	ldr	r3, [pc, #208]	; (8002170 <HAL_RCC_OscConfig+0xa34>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a33      	ldr	r2, [pc, #204]	; (8002170 <HAL_RCC_OscConfig+0xa34>)
 80020a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020a6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80020a8:	f7fe ff18 	bl	8000edc <HAL_GetTick>
 80020ac:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80020b0:	f7fe ff14 	bl	8000edc <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e211      	b.n	80024e6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80020c2:	4b2b      	ldr	r3, [pc, #172]	; (8002170 <HAL_RCC_OscConfig+0xa34>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0f0      	beq.n	80020b0 <HAL_RCC_OscConfig+0x974>
 80020ce:	e018      	b.n	8002102 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80020d0:	4b27      	ldr	r3, [pc, #156]	; (8002170 <HAL_RCC_OscConfig+0xa34>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a26      	ldr	r2, [pc, #152]	; (8002170 <HAL_RCC_OscConfig+0xa34>)
 80020d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020da:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80020dc:	f7fe fefe 	bl	8000edc <HAL_GetTick>
 80020e0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80020e4:	f7fe fefa 	bl	8000edc <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e1f7      	b.n	80024e6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80020f6:	4b1e      	ldr	r3, [pc, #120]	; (8002170 <HAL_RCC_OscConfig+0xa34>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f0      	bne.n	80020e4 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800210a:	2b00      	cmp	r3, #0
 800210c:	d07f      	beq.n	800220e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002112:	2b00      	cmp	r3, #0
 8002114:	d062      	beq.n	80021dc <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002116:	4b16      	ldr	r3, [pc, #88]	; (8002170 <HAL_RCC_OscConfig+0xa34>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	4a15      	ldr	r2, [pc, #84]	; (8002170 <HAL_RCC_OscConfig+0xa34>)
 800211c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002120:	6093      	str	r3, [r2, #8]
 8002122:	4b13      	ldr	r3, [pc, #76]	; (8002170 <HAL_RCC_OscConfig+0xa34>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212e:	4910      	ldr	r1, [pc, #64]	; (8002170 <HAL_RCC_OscConfig+0xa34>)
 8002130:	4313      	orrs	r3, r2
 8002132:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800213c:	d309      	bcc.n	8002152 <HAL_RCC_OscConfig+0xa16>
 800213e:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <HAL_RCC_OscConfig+0xa34>)
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	f023 021f 	bic.w	r2, r3, #31
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	4909      	ldr	r1, [pc, #36]	; (8002170 <HAL_RCC_OscConfig+0xa34>)
 800214c:	4313      	orrs	r3, r2
 800214e:	60cb      	str	r3, [r1, #12]
 8002150:	e02a      	b.n	80021a8 <HAL_RCC_OscConfig+0xa6c>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002156:	2b00      	cmp	r3, #0
 8002158:	da0c      	bge.n	8002174 <HAL_RCC_OscConfig+0xa38>
 800215a:	4b05      	ldr	r3, [pc, #20]	; (8002170 <HAL_RCC_OscConfig+0xa34>)
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	015b      	lsls	r3, r3, #5
 8002168:	4901      	ldr	r1, [pc, #4]	; (8002170 <HAL_RCC_OscConfig+0xa34>)
 800216a:	4313      	orrs	r3, r2
 800216c:	60cb      	str	r3, [r1, #12]
 800216e:	e01b      	b.n	80021a8 <HAL_RCC_OscConfig+0xa6c>
 8002170:	46020c00 	.word	0x46020c00
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800217c:	d30a      	bcc.n	8002194 <HAL_RCC_OscConfig+0xa58>
 800217e:	4ba1      	ldr	r3, [pc, #644]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	029b      	lsls	r3, r3, #10
 800218c:	499d      	ldr	r1, [pc, #628]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 800218e:	4313      	orrs	r3, r2
 8002190:	60cb      	str	r3, [r1, #12]
 8002192:	e009      	b.n	80021a8 <HAL_RCC_OscConfig+0xa6c>
 8002194:	4b9b      	ldr	r3, [pc, #620]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	03db      	lsls	r3, r3, #15
 80021a2:	4998      	ldr	r1, [pc, #608]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80021a8:	4b96      	ldr	r3, [pc, #600]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a95      	ldr	r2, [pc, #596]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 80021ae:	f043 0310 	orr.w	r3, r3, #16
 80021b2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80021b4:	f7fe fe92 	bl	8000edc <HAL_GetTick>
 80021b8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80021bc:	f7fe fe8e 	bl	8000edc <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e18b      	b.n	80024e6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80021ce:	4b8d      	ldr	r3, [pc, #564]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0320 	and.w	r3, r3, #32
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0xa80>
 80021da:	e018      	b.n	800220e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80021dc:	4b89      	ldr	r3, [pc, #548]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a88      	ldr	r2, [pc, #544]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 80021e2:	f023 0310 	bic.w	r3, r3, #16
 80021e6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80021e8:	f7fe fe78 	bl	8000edc <HAL_GetTick>
 80021ec:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80021f0:	f7fe fe74 	bl	8000edc <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e171      	b.n	80024e6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002202:	4b80      	ldr	r3, [pc, #512]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0320 	and.w	r3, r3, #32
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 8166 	beq.w	80024e4 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002218:	2300      	movs	r3, #0
 800221a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800221e:	4b79      	ldr	r3, [pc, #484]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b0c      	cmp	r3, #12
 8002228:	f000 80f2 	beq.w	8002410 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002230:	2b02      	cmp	r3, #2
 8002232:	f040 80c5 	bne.w	80023c0 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002236:	4b73      	ldr	r3, [pc, #460]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a72      	ldr	r2, [pc, #456]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 800223c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002240:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002242:	f7fe fe4b 	bl	8000edc <HAL_GetTick>
 8002246:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224a:	f7fe fe47 	bl	8000edc <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e144      	b.n	80024e6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800225c:	4b69      	ldr	r3, [pc, #420]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1f0      	bne.n	800224a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002268:	4b66      	ldr	r3, [pc, #408]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 800226a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800226e:	f003 0304 	and.w	r3, r3, #4
 8002272:	2b00      	cmp	r3, #0
 8002274:	d111      	bne.n	800229a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8002276:	4b63      	ldr	r3, [pc, #396]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 8002278:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800227c:	4a61      	ldr	r2, [pc, #388]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 800227e:	f043 0304 	orr.w	r3, r3, #4
 8002282:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002286:	4b5f      	ldr	r3, [pc, #380]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 8002288:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8002294:	2301      	movs	r3, #1
 8002296:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800229a:	4b5b      	ldr	r3, [pc, #364]	; (8002408 <HAL_RCC_OscConfig+0xccc>)
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80022a6:	d102      	bne.n	80022ae <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80022a8:	2301      	movs	r3, #1
 80022aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80022ae:	4b56      	ldr	r3, [pc, #344]	; (8002408 <HAL_RCC_OscConfig+0xccc>)
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	4a55      	ldr	r2, [pc, #340]	; (8002408 <HAL_RCC_OscConfig+0xccc>)
 80022b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022b8:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80022ba:	4b52      	ldr	r3, [pc, #328]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 80022bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022c2:	f023 0303 	bic.w	r3, r3, #3
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022ce:	3a01      	subs	r2, #1
 80022d0:	0212      	lsls	r2, r2, #8
 80022d2:	4311      	orrs	r1, r2
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80022d8:	430a      	orrs	r2, r1
 80022da:	494a      	ldr	r1, [pc, #296]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	628b      	str	r3, [r1, #40]	; 0x28
 80022e0:	4b48      	ldr	r3, [pc, #288]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 80022e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022e4:	4b49      	ldr	r3, [pc, #292]	; (800240c <HAL_RCC_OscConfig+0xcd0>)
 80022e6:	4013      	ands	r3, r2
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80022ec:	3a01      	subs	r2, #1
 80022ee:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80022f6:	3a01      	subs	r2, #1
 80022f8:	0252      	lsls	r2, r2, #9
 80022fa:	b292      	uxth	r2, r2
 80022fc:	4311      	orrs	r1, r2
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002302:	3a01      	subs	r2, #1
 8002304:	0412      	lsls	r2, r2, #16
 8002306:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800230a:	4311      	orrs	r1, r2
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002310:	3a01      	subs	r2, #1
 8002312:	0612      	lsls	r2, r2, #24
 8002314:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8002318:	430a      	orrs	r2, r1
 800231a:	493a      	ldr	r1, [pc, #232]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 800231c:	4313      	orrs	r3, r2
 800231e:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002320:	4b38      	ldr	r3, [pc, #224]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 8002322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002324:	4a37      	ldr	r2, [pc, #220]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 8002326:	f023 0310 	bic.w	r3, r3, #16
 800232a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002330:	4a34      	ldr	r2, [pc, #208]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002336:	4b33      	ldr	r3, [pc, #204]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 8002338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233a:	4a32      	ldr	r2, [pc, #200]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 800233c:	f043 0310 	orr.w	r3, r3, #16
 8002340:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8002342:	4b30      	ldr	r3, [pc, #192]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 8002344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002346:	f023 020c 	bic.w	r2, r3, #12
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234e:	492d      	ldr	r1, [pc, #180]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 8002350:	4313      	orrs	r3, r2
 8002352:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8002354:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002358:	2b01      	cmp	r3, #1
 800235a:	d105      	bne.n	8002368 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800235c:	4b2a      	ldr	r3, [pc, #168]	; (8002408 <HAL_RCC_OscConfig+0xccc>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	4a29      	ldr	r2, [pc, #164]	; (8002408 <HAL_RCC_OscConfig+0xccc>)
 8002362:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002366:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8002368:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800236c:	2b01      	cmp	r3, #1
 800236e:	d107      	bne.n	8002380 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8002370:	4b24      	ldr	r3, [pc, #144]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 8002372:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002376:	4a23      	ldr	r2, [pc, #140]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 8002378:	f023 0304 	bic.w	r3, r3, #4
 800237c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002380:	4b20      	ldr	r3, [pc, #128]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 8002382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002384:	4a1f      	ldr	r2, [pc, #124]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 8002386:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800238a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800238c:	4b1d      	ldr	r3, [pc, #116]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a1c      	ldr	r2, [pc, #112]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 8002392:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002396:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002398:	f7fe fda0 	bl	8000edc <HAL_GetTick>
 800239c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a0:	f7fe fd9c 	bl	8000edc <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e099      	b.n	80024e6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80023b2:	4b14      	ldr	r3, [pc, #80]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f0      	beq.n	80023a0 <HAL_RCC_OscConfig+0xc64>
 80023be:	e091      	b.n	80024e4 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80023c0:	4b10      	ldr	r3, [pc, #64]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a0f      	ldr	r2, [pc, #60]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 80023c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023ca:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80023cc:	f7fe fd86 	bl	8000edc <HAL_GetTick>
 80023d0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d4:	f7fe fd82 	bl	8000edc <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e07f      	b.n	80024e6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80023e6:	4b07      	ldr	r3, [pc, #28]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f0      	bne.n	80023d4 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80023f2:	4b04      	ldr	r3, [pc, #16]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 80023f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f6:	4a03      	ldr	r2, [pc, #12]	; (8002404 <HAL_RCC_OscConfig+0xcc8>)
 80023f8:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80023fc:	f023 0303 	bic.w	r3, r3, #3
 8002400:	6293      	str	r3, [r2, #40]	; 0x28
 8002402:	e06f      	b.n	80024e4 <HAL_RCC_OscConfig+0xda8>
 8002404:	46020c00 	.word	0x46020c00
 8002408:	46020800 	.word	0x46020800
 800240c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002410:	4b37      	ldr	r3, [pc, #220]	; (80024f0 <HAL_RCC_OscConfig+0xdb4>)
 8002412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002414:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002416:	4b36      	ldr	r3, [pc, #216]	; (80024f0 <HAL_RCC_OscConfig+0xdb4>)
 8002418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800241a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002420:	2b01      	cmp	r3, #1
 8002422:	d039      	beq.n	8002498 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f003 0203 	and.w	r2, r3, #3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800242e:	429a      	cmp	r2, r3
 8002430:	d132      	bne.n	8002498 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	0a1b      	lsrs	r3, r3, #8
 8002436:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002440:	429a      	cmp	r2, r3
 8002442:	d129      	bne.n	8002498 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800244e:	429a      	cmp	r2, r3
 8002450:	d122      	bne.n	8002498 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800245c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800245e:	429a      	cmp	r2, r3
 8002460:	d11a      	bne.n	8002498 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	0a5b      	lsrs	r3, r3, #9
 8002466:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002470:	429a      	cmp	r2, r3
 8002472:	d111      	bne.n	8002498 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	0c1b      	lsrs	r3, r3, #16
 8002478:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002480:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002482:	429a      	cmp	r2, r3
 8002484:	d108      	bne.n	8002498 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	0e1b      	lsrs	r3, r3, #24
 800248a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002492:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002494:	429a      	cmp	r2, r3
 8002496:	d001      	beq.n	800249c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e024      	b.n	80024e6 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800249c:	4b14      	ldr	r3, [pc, #80]	; (80024f0 <HAL_RCC_OscConfig+0xdb4>)
 800249e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a0:	08db      	lsrs	r3, r3, #3
 80024a2:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d01a      	beq.n	80024e4 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80024ae:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <HAL_RCC_OscConfig+0xdb4>)
 80024b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b2:	4a0f      	ldr	r2, [pc, #60]	; (80024f0 <HAL_RCC_OscConfig+0xdb4>)
 80024b4:	f023 0310 	bic.w	r3, r3, #16
 80024b8:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ba:	f7fe fd0f 	bl	8000edc <HAL_GetTick>
 80024be:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80024c0:	bf00      	nop
 80024c2:	f7fe fd0b 	bl	8000edc <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d0f9      	beq.n	80024c2 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d2:	4a07      	ldr	r2, [pc, #28]	; (80024f0 <HAL_RCC_OscConfig+0xdb4>)
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80024d8:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <HAL_RCC_OscConfig+0xdb4>)
 80024da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024dc:	4a04      	ldr	r2, [pc, #16]	; (80024f0 <HAL_RCC_OscConfig+0xdb4>)
 80024de:	f043 0310 	orr.w	r3, r3, #16
 80024e2:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3738      	adds	r7, #56	; 0x38
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	46020c00 	.word	0x46020c00

080024f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e1d9      	b.n	80028bc <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002508:	4b9b      	ldr	r3, [pc, #620]	; (8002778 <HAL_RCC_ClockConfig+0x284>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 030f 	and.w	r3, r3, #15
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	429a      	cmp	r2, r3
 8002514:	d910      	bls.n	8002538 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002516:	4b98      	ldr	r3, [pc, #608]	; (8002778 <HAL_RCC_ClockConfig+0x284>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f023 020f 	bic.w	r2, r3, #15
 800251e:	4996      	ldr	r1, [pc, #600]	; (8002778 <HAL_RCC_ClockConfig+0x284>)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	4313      	orrs	r3, r2
 8002524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002526:	4b94      	ldr	r3, [pc, #592]	; (8002778 <HAL_RCC_ClockConfig+0x284>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d001      	beq.n	8002538 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e1c1      	b.n	80028bc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0310 	and.w	r3, r3, #16
 8002540:	2b00      	cmp	r3, #0
 8002542:	d010      	beq.n	8002566 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	695a      	ldr	r2, [r3, #20]
 8002548:	4b8c      	ldr	r3, [pc, #560]	; (800277c <HAL_RCC_ClockConfig+0x288>)
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002550:	429a      	cmp	r2, r3
 8002552:	d908      	bls.n	8002566 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8002554:	4b89      	ldr	r3, [pc, #548]	; (800277c <HAL_RCC_ClockConfig+0x288>)
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	4986      	ldr	r1, [pc, #536]	; (800277c <HAL_RCC_ClockConfig+0x288>)
 8002562:	4313      	orrs	r3, r2
 8002564:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	2b00      	cmp	r3, #0
 8002570:	d012      	beq.n	8002598 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691a      	ldr	r2, [r3, #16]
 8002576:	4b81      	ldr	r3, [pc, #516]	; (800277c <HAL_RCC_ClockConfig+0x288>)
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	091b      	lsrs	r3, r3, #4
 800257c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002580:	429a      	cmp	r2, r3
 8002582:	d909      	bls.n	8002598 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002584:	4b7d      	ldr	r3, [pc, #500]	; (800277c <HAL_RCC_ClockConfig+0x288>)
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	011b      	lsls	r3, r3, #4
 8002592:	497a      	ldr	r1, [pc, #488]	; (800277c <HAL_RCC_ClockConfig+0x288>)
 8002594:	4313      	orrs	r3, r2
 8002596:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d010      	beq.n	80025c6 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68da      	ldr	r2, [r3, #12]
 80025a8:	4b74      	ldr	r3, [pc, #464]	; (800277c <HAL_RCC_ClockConfig+0x288>)
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d908      	bls.n	80025c6 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80025b4:	4b71      	ldr	r3, [pc, #452]	; (800277c <HAL_RCC_ClockConfig+0x288>)
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	496e      	ldr	r1, [pc, #440]	; (800277c <HAL_RCC_ClockConfig+0x288>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d010      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	4b69      	ldr	r3, [pc, #420]	; (800277c <HAL_RCC_ClockConfig+0x288>)
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	429a      	cmp	r2, r3
 80025e0:	d908      	bls.n	80025f4 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80025e2:	4b66      	ldr	r3, [pc, #408]	; (800277c <HAL_RCC_ClockConfig+0x288>)
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	f023 020f 	bic.w	r2, r3, #15
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	4963      	ldr	r1, [pc, #396]	; (800277c <HAL_RCC_ClockConfig+0x288>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 80d2 	beq.w	80027a6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8002602:	2300      	movs	r3, #0
 8002604:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b03      	cmp	r3, #3
 800260c:	d143      	bne.n	8002696 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800260e:	4b5b      	ldr	r3, [pc, #364]	; (800277c <HAL_RCC_ClockConfig+0x288>)
 8002610:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	d110      	bne.n	800263e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800261c:	4b57      	ldr	r3, [pc, #348]	; (800277c <HAL_RCC_ClockConfig+0x288>)
 800261e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002622:	4a56      	ldr	r2, [pc, #344]	; (800277c <HAL_RCC_ClockConfig+0x288>)
 8002624:	f043 0304 	orr.w	r3, r3, #4
 8002628:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800262c:	4b53      	ldr	r3, [pc, #332]	; (800277c <HAL_RCC_ClockConfig+0x288>)
 800262e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002632:	f003 0304 	and.w	r3, r3, #4
 8002636:	60bb      	str	r3, [r7, #8]
 8002638:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800263a:	2301      	movs	r3, #1
 800263c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800263e:	f7fe fc4d 	bl	8000edc <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002644:	4b4e      	ldr	r3, [pc, #312]	; (8002780 <HAL_RCC_ClockConfig+0x28c>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00f      	beq.n	8002670 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002650:	e008      	b.n	8002664 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8002652:	f7fe fc43 	bl	8000edc <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e12b      	b.n	80028bc <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002664:	4b46      	ldr	r3, [pc, #280]	; (8002780 <HAL_RCC_ClockConfig+0x28c>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0f0      	beq.n	8002652 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002670:	7dfb      	ldrb	r3, [r7, #23]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d107      	bne.n	8002686 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002676:	4b41      	ldr	r3, [pc, #260]	; (800277c <HAL_RCC_ClockConfig+0x288>)
 8002678:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800267c:	4a3f      	ldr	r2, [pc, #252]	; (800277c <HAL_RCC_ClockConfig+0x288>)
 800267e:	f023 0304 	bic.w	r3, r3, #4
 8002682:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002686:	4b3d      	ldr	r3, [pc, #244]	; (800277c <HAL_RCC_ClockConfig+0x288>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d121      	bne.n	80026d6 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e112      	b.n	80028bc <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d107      	bne.n	80026ae <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800269e:	4b37      	ldr	r3, [pc, #220]	; (800277c <HAL_RCC_ClockConfig+0x288>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d115      	bne.n	80026d6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e106      	b.n	80028bc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d107      	bne.n	80026c6 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80026b6:	4b31      	ldr	r3, [pc, #196]	; (800277c <HAL_RCC_ClockConfig+0x288>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0304 	and.w	r3, r3, #4
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d109      	bne.n	80026d6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e0fa      	b.n	80028bc <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026c6:	4b2d      	ldr	r3, [pc, #180]	; (800277c <HAL_RCC_ClockConfig+0x288>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e0f2      	b.n	80028bc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80026d6:	4b29      	ldr	r3, [pc, #164]	; (800277c <HAL_RCC_ClockConfig+0x288>)
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	f023 0203 	bic.w	r2, r3, #3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	4926      	ldr	r1, [pc, #152]	; (800277c <HAL_RCC_ClockConfig+0x288>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80026e8:	f7fe fbf8 	bl	8000edc <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b03      	cmp	r3, #3
 80026f4:	d112      	bne.n	800271c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026f6:	e00a      	b.n	800270e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f8:	f7fe fbf0 	bl	8000edc <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	f241 3288 	movw	r2, #5000	; 0x1388
 8002706:	4293      	cmp	r3, r2
 8002708:	d901      	bls.n	800270e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e0d6      	b.n	80028bc <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800270e:	4b1b      	ldr	r3, [pc, #108]	; (800277c <HAL_RCC_ClockConfig+0x288>)
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	f003 030c 	and.w	r3, r3, #12
 8002716:	2b0c      	cmp	r3, #12
 8002718:	d1ee      	bne.n	80026f8 <HAL_RCC_ClockConfig+0x204>
 800271a:	e044      	b.n	80027a6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b02      	cmp	r3, #2
 8002722:	d112      	bne.n	800274a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002724:	e00a      	b.n	800273c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002726:	f7fe fbd9 	bl	8000edc <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	f241 3288 	movw	r2, #5000	; 0x1388
 8002734:	4293      	cmp	r3, r2
 8002736:	d901      	bls.n	800273c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e0bf      	b.n	80028bc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800273c:	4b0f      	ldr	r3, [pc, #60]	; (800277c <HAL_RCC_ClockConfig+0x288>)
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	f003 030c 	and.w	r3, r3, #12
 8002744:	2b08      	cmp	r3, #8
 8002746:	d1ee      	bne.n	8002726 <HAL_RCC_ClockConfig+0x232>
 8002748:	e02d      	b.n	80027a6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d123      	bne.n	800279a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002752:	e00a      	b.n	800276a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002754:	f7fe fbc2 	bl	8000edc <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002762:	4293      	cmp	r3, r2
 8002764:	d901      	bls.n	800276a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e0a8      	b.n	80028bc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800276a:	4b04      	ldr	r3, [pc, #16]	; (800277c <HAL_RCC_ClockConfig+0x288>)
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	f003 030c 	and.w	r3, r3, #12
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1ee      	bne.n	8002754 <HAL_RCC_ClockConfig+0x260>
 8002776:	e016      	b.n	80027a6 <HAL_RCC_ClockConfig+0x2b2>
 8002778:	40022000 	.word	0x40022000
 800277c:	46020c00 	.word	0x46020c00
 8002780:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002784:	f7fe fbaa 	bl	8000edc <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002792:	4293      	cmp	r3, r2
 8002794:	d901      	bls.n	800279a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e090      	b.n	80028bc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800279a:	4b4a      	ldr	r3, [pc, #296]	; (80028c4 <HAL_RCC_ClockConfig+0x3d0>)
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	f003 030c 	and.w	r3, r3, #12
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	d1ee      	bne.n	8002784 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d010      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	4b43      	ldr	r3, [pc, #268]	; (80028c4 <HAL_RCC_ClockConfig+0x3d0>)
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	429a      	cmp	r2, r3
 80027c0:	d208      	bcs.n	80027d4 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80027c2:	4b40      	ldr	r3, [pc, #256]	; (80028c4 <HAL_RCC_ClockConfig+0x3d0>)
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	f023 020f 	bic.w	r2, r3, #15
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	493d      	ldr	r1, [pc, #244]	; (80028c4 <HAL_RCC_ClockConfig+0x3d0>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027d4:	4b3c      	ldr	r3, [pc, #240]	; (80028c8 <HAL_RCC_ClockConfig+0x3d4>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 030f 	and.w	r3, r3, #15
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d210      	bcs.n	8002804 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e2:	4b39      	ldr	r3, [pc, #228]	; (80028c8 <HAL_RCC_ClockConfig+0x3d4>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f023 020f 	bic.w	r2, r3, #15
 80027ea:	4937      	ldr	r1, [pc, #220]	; (80028c8 <HAL_RCC_ClockConfig+0x3d4>)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f2:	4b35      	ldr	r3, [pc, #212]	; (80028c8 <HAL_RCC_ClockConfig+0x3d4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e05b      	b.n	80028bc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d010      	beq.n	8002832 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68da      	ldr	r2, [r3, #12]
 8002814:	4b2b      	ldr	r3, [pc, #172]	; (80028c4 <HAL_RCC_ClockConfig+0x3d0>)
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800281c:	429a      	cmp	r2, r3
 800281e:	d208      	bcs.n	8002832 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002820:	4b28      	ldr	r3, [pc, #160]	; (80028c4 <HAL_RCC_ClockConfig+0x3d0>)
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	4925      	ldr	r1, [pc, #148]	; (80028c4 <HAL_RCC_ClockConfig+0x3d0>)
 800282e:	4313      	orrs	r3, r2
 8002830:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b00      	cmp	r3, #0
 800283c:	d012      	beq.n	8002864 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691a      	ldr	r2, [r3, #16]
 8002842:	4b20      	ldr	r3, [pc, #128]	; (80028c4 <HAL_RCC_ClockConfig+0x3d0>)
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	091b      	lsrs	r3, r3, #4
 8002848:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800284c:	429a      	cmp	r2, r3
 800284e:	d209      	bcs.n	8002864 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002850:	4b1c      	ldr	r3, [pc, #112]	; (80028c4 <HAL_RCC_ClockConfig+0x3d0>)
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	4919      	ldr	r1, [pc, #100]	; (80028c4 <HAL_RCC_ClockConfig+0x3d0>)
 8002860:	4313      	orrs	r3, r2
 8002862:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0310 	and.w	r3, r3, #16
 800286c:	2b00      	cmp	r3, #0
 800286e:	d010      	beq.n	8002892 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	695a      	ldr	r2, [r3, #20]
 8002874:	4b13      	ldr	r3, [pc, #76]	; (80028c4 <HAL_RCC_ClockConfig+0x3d0>)
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800287c:	429a      	cmp	r2, r3
 800287e:	d208      	bcs.n	8002892 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8002880:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <HAL_RCC_ClockConfig+0x3d0>)
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	490d      	ldr	r1, [pc, #52]	; (80028c4 <HAL_RCC_ClockConfig+0x3d0>)
 800288e:	4313      	orrs	r3, r2
 8002890:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002892:	f000 f821 	bl	80028d8 <HAL_RCC_GetSysClockFreq>
 8002896:	4602      	mov	r2, r0
 8002898:	4b0a      	ldr	r3, [pc, #40]	; (80028c4 <HAL_RCC_ClockConfig+0x3d0>)
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	f003 030f 	and.w	r3, r3, #15
 80028a0:	490a      	ldr	r1, [pc, #40]	; (80028cc <HAL_RCC_ClockConfig+0x3d8>)
 80028a2:	5ccb      	ldrb	r3, [r1, r3]
 80028a4:	fa22 f303 	lsr.w	r3, r2, r3
 80028a8:	4a09      	ldr	r2, [pc, #36]	; (80028d0 <HAL_RCC_ClockConfig+0x3dc>)
 80028aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028ac:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <HAL_RCC_ClockConfig+0x3e0>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7fe fac9 	bl	8000e48 <HAL_InitTick>
 80028b6:	4603      	mov	r3, r0
 80028b8:	73fb      	strb	r3, [r7, #15]

  return status;
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	46020c00 	.word	0x46020c00
 80028c8:	40022000 	.word	0x40022000
 80028cc:	08007040 	.word	0x08007040
 80028d0:	20000000 	.word	0x20000000
 80028d4:	20000004 	.word	0x20000004

080028d8 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	b08b      	sub	sp, #44	; 0x2c
 80028dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80028de:	2300      	movs	r3, #0
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028e6:	4b7b      	ldr	r3, [pc, #492]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	f003 030c 	and.w	r3, r3, #12
 80028ee:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028f0:	4b78      	ldr	r3, [pc, #480]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80028f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f4:	f003 0303 	and.w	r3, r3, #3
 80028f8:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d005      	beq.n	800290c <HAL_RCC_GetSysClockFreq+0x34>
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	2b0c      	cmp	r3, #12
 8002904:	d121      	bne.n	800294a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d11e      	bne.n	800294a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800290c:	4b71      	ldr	r3, [pc, #452]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d107      	bne.n	8002928 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002918:	4b6e      	ldr	r3, [pc, #440]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800291a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800291e:	0b1b      	lsrs	r3, r3, #12
 8002920:	f003 030f 	and.w	r3, r3, #15
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
 8002926:	e005      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002928:	4b6a      	ldr	r3, [pc, #424]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	0f1b      	lsrs	r3, r3, #28
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002934:	4a68      	ldr	r2, [pc, #416]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800293c:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d110      	bne.n	8002966 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002948:	e00d      	b.n	8002966 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800294a:	4b62      	ldr	r3, [pc, #392]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	f003 030c 	and.w	r3, r3, #12
 8002952:	2b04      	cmp	r3, #4
 8002954:	d102      	bne.n	800295c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002956:	4b61      	ldr	r3, [pc, #388]	; (8002adc <HAL_RCC_GetSysClockFreq+0x204>)
 8002958:	623b      	str	r3, [r7, #32]
 800295a:	e004      	b.n	8002966 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	2b08      	cmp	r3, #8
 8002960:	d101      	bne.n	8002966 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002962:	4b5e      	ldr	r3, [pc, #376]	; (8002adc <HAL_RCC_GetSysClockFreq+0x204>)
 8002964:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	2b0c      	cmp	r3, #12
 800296a:	f040 80ac 	bne.w	8002ac6 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800296e:	4b59      	ldr	r3, [pc, #356]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002978:	4b56      	ldr	r3, [pc, #344]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800297a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297c:	0a1b      	lsrs	r3, r3, #8
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	3301      	adds	r3, #1
 8002984:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002986:	4b53      	ldr	r3, [pc, #332]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298a:	091b      	lsrs	r3, r3, #4
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002992:	4b50      	ldr	r3, [pc, #320]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002996:	08db      	lsrs	r3, r3, #3
 8002998:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800299c:	68ba      	ldr	r2, [r7, #8]
 800299e:	fb02 f303 	mul.w	r3, r2, r3
 80029a2:	ee07 3a90 	vmov	s15, r3
 80029a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029aa:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 8086 	beq.w	8002ac2 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d003      	beq.n	80029c4 <HAL_RCC_GetSysClockFreq+0xec>
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d022      	beq.n	8002a08 <HAL_RCC_GetSysClockFreq+0x130>
 80029c2:	e043      	b.n	8002a4c <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	ee07 3a90 	vmov	s15, r3
 80029ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ce:	eddf 6a44 	vldr	s13, [pc, #272]	; 8002ae0 <HAL_RCC_GetSysClockFreq+0x208>
 80029d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029d6:	4b3f      	ldr	r3, [pc, #252]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80029d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029de:	ee07 3a90 	vmov	s15, r3
 80029e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80029e6:	ed97 6a01 	vldr	s12, [r7, #4]
 80029ea:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002ae4 <HAL_RCC_GetSysClockFreq+0x20c>
 80029ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80029f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80029f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80029fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a02:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002a06:	e046      	b.n	8002a96 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	ee07 3a90 	vmov	s15, r3
 8002a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a12:	eddf 6a33 	vldr	s13, [pc, #204]	; 8002ae0 <HAL_RCC_GetSysClockFreq+0x208>
 8002a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a1a:	4b2e      	ldr	r3, [pc, #184]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a22:	ee07 3a90 	vmov	s15, r3
 8002a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002a2a:	ed97 6a01 	vldr	s12, [r7, #4]
 8002a2e:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002ae4 <HAL_RCC_GetSysClockFreq+0x20c>
 8002a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002a3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a46:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002a4a:	e024      	b.n	8002a96 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	ee07 3a90 	vmov	s15, r3
 8002a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	ee07 3a90 	vmov	s15, r3
 8002a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a64:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a6c:	ee07 3a90 	vmov	s15, r3
 8002a70:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002a74:	ed97 6a01 	vldr	s12, [r7, #4]
 8002a78:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8002ae4 <HAL_RCC_GetSysClockFreq+0x20c>
 8002a7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a80:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002a84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a88:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a90:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002a94:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002a96:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9a:	0e1b      	lsrs	r3, r3, #24
 8002a9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	ee07 3a90 	vmov	s15, r3
 8002aaa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002aae:	edd7 6a07 	vldr	s13, [r7, #28]
 8002ab2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ab6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002aba:	ee17 3a90 	vmov	r3, s15
 8002abe:	623b      	str	r3, [r7, #32]
 8002ac0:	e001      	b.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8002ac6:	6a3b      	ldr	r3, [r7, #32]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	372c      	adds	r7, #44	; 0x2c
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	46020c00 	.word	0x46020c00
 8002ad8:	08007058 	.word	0x08007058
 8002adc:	00f42400 	.word	0x00f42400
 8002ae0:	4b742400 	.word	0x4b742400
 8002ae4:	46000000 	.word	0x46000000

08002ae8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002aec:	f7ff fef4 	bl	80028d8 <HAL_RCC_GetSysClockFreq>
 8002af0:	4602      	mov	r2, r0
 8002af2:	4b07      	ldr	r3, [pc, #28]	; (8002b10 <HAL_RCC_GetHCLKFreq+0x28>)
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	4906      	ldr	r1, [pc, #24]	; (8002b14 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002afc:	5ccb      	ldrb	r3, [r1, r3]
 8002afe:	fa22 f303 	lsr.w	r3, r2, r3
 8002b02:	4a05      	ldr	r2, [pc, #20]	; (8002b18 <HAL_RCC_GetHCLKFreq+0x30>)
 8002b04:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8002b06:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <HAL_RCC_GetHCLKFreq+0x30>)
 8002b08:	681b      	ldr	r3, [r3, #0]
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	46020c00 	.word	0x46020c00
 8002b14:	08007040 	.word	0x08007040
 8002b18:	20000000 	.word	0x20000000

08002b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8002b20:	f7ff ffe2 	bl	8002ae8 <HAL_RCC_GetHCLKFreq>
 8002b24:	4602      	mov	r2, r0
 8002b26:	4b05      	ldr	r3, [pc, #20]	; (8002b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	091b      	lsrs	r3, r3, #4
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	4903      	ldr	r1, [pc, #12]	; (8002b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b32:	5ccb      	ldrb	r3, [r1, r3]
 8002b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	46020c00 	.word	0x46020c00
 8002b40:	08007050 	.word	0x08007050

08002b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8002b48:	f7ff ffce 	bl	8002ae8 <HAL_RCC_GetHCLKFreq>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	0a1b      	lsrs	r3, r3, #8
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	4903      	ldr	r1, [pc, #12]	; (8002b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b5a:	5ccb      	ldrb	r3, [r1, r3]
 8002b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	46020c00 	.word	0x46020c00
 8002b68:	08007050 	.word	0x08007050

08002b6c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8002b70:	f7ff ffba 	bl	8002ae8 <HAL_RCC_GetHCLKFreq>
 8002b74:	4602      	mov	r2, r0
 8002b76:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <HAL_RCC_GetPCLK3Freq+0x20>)
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	091b      	lsrs	r3, r3, #4
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	4903      	ldr	r1, [pc, #12]	; (8002b90 <HAL_RCC_GetPCLK3Freq+0x24>)
 8002b82:	5ccb      	ldrb	r3, [r1, r3]
 8002b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	46020c00 	.word	0x46020c00
 8002b90:	08007050 	.word	0x08007050

08002b94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b9c:	4b3e      	ldr	r3, [pc, #248]	; (8002c98 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ba2:	f003 0304 	and.w	r3, r3, #4
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002baa:	f7fe fd49 	bl	8001640 <HAL_PWREx_GetVoltageRange>
 8002bae:	6178      	str	r0, [r7, #20]
 8002bb0:	e019      	b.n	8002be6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bb2:	4b39      	ldr	r3, [pc, #228]	; (8002c98 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bb8:	4a37      	ldr	r2, [pc, #220]	; (8002c98 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002bba:	f043 0304 	orr.w	r3, r3, #4
 8002bbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002bc2:	4b35      	ldr	r3, [pc, #212]	; (8002c98 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002bd0:	f7fe fd36 	bl	8001640 <HAL_PWREx_GetVoltageRange>
 8002bd4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002bd6:	4b30      	ldr	r3, [pc, #192]	; (8002c98 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002bd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bdc:	4a2e      	ldr	r2, [pc, #184]	; (8002c98 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002bde:	f023 0304 	bic.w	r3, r3, #4
 8002be2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002bec:	d003      	beq.n	8002bf6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bf4:	d109      	bne.n	8002c0a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bfc:	d202      	bcs.n	8002c04 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8002bfe:	2301      	movs	r3, #1
 8002c00:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002c02:	e033      	b.n	8002c6c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8002c04:	2300      	movs	r3, #0
 8002c06:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002c08:	e030      	b.n	8002c6c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c10:	d208      	bcs.n	8002c24 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c18:	d102      	bne.n	8002c20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	e025      	b.n	8002c6c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e035      	b.n	8002c90 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c2a:	d90f      	bls.n	8002c4c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d109      	bne.n	8002c46 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002c38:	d902      	bls.n	8002c40 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	613b      	str	r3, [r7, #16]
 8002c3e:	e015      	b.n	8002c6c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8002c40:	2301      	movs	r3, #1
 8002c42:	613b      	str	r3, [r7, #16]
 8002c44:	e012      	b.n	8002c6c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8002c46:	2300      	movs	r3, #0
 8002c48:	613b      	str	r3, [r7, #16]
 8002c4a:	e00f      	b.n	8002c6c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c52:	d109      	bne.n	8002c68 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c5a:	d102      	bne.n	8002c62 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	613b      	str	r3, [r7, #16]
 8002c60:	e004      	b.n	8002c6c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8002c62:	2302      	movs	r3, #2
 8002c64:	613b      	str	r3, [r7, #16]
 8002c66:	e001      	b.n	8002c6c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8002c68:	2301      	movs	r3, #1
 8002c6a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f023 020f 	bic.w	r2, r3, #15
 8002c74:	4909      	ldr	r1, [pc, #36]	; (8002c9c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002c7c:	4b07      	ldr	r3, [pc, #28]	; (8002c9c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 030f 	and.w	r3, r3, #15
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d001      	beq.n	8002c8e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e000      	b.n	8002c90 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	46020c00 	.word	0x46020c00
 8002c9c:	40022000 	.word	0x40022000

08002ca0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ca4:	b0c4      	sub	sp, #272	; 0x110
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cac:	2300      	movs	r3, #0
 8002cae:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc0:	f002 0401 	and.w	r4, r2, #1
 8002cc4:	2500      	movs	r5, #0
 8002cc6:	ea54 0305 	orrs.w	r3, r4, r5
 8002cca:	d00b      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002ccc:	4bd5      	ldr	r3, [pc, #852]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cd2:	f023 0103 	bic.w	r1, r3, #3
 8002cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cdc:	4ad1      	ldr	r2, [pc, #836]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002cde:	430b      	orrs	r3, r1
 8002ce0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ce4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cec:	f002 0802 	and.w	r8, r2, #2
 8002cf0:	f04f 0900 	mov.w	r9, #0
 8002cf4:	ea58 0309 	orrs.w	r3, r8, r9
 8002cf8:	d00b      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002cfa:	4bca      	ldr	r3, [pc, #808]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d00:	f023 010c 	bic.w	r1, r3, #12
 8002d04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0a:	4ac6      	ldr	r2, [pc, #792]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002d0c:	430b      	orrs	r3, r1
 8002d0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1a:	f002 0a04 	and.w	sl, r2, #4
 8002d1e:	f04f 0b00 	mov.w	fp, #0
 8002d22:	ea5a 030b 	orrs.w	r3, sl, fp
 8002d26:	d00b      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002d28:	4bbe      	ldr	r3, [pc, #760]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d2e:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d38:	4aba      	ldr	r2, [pc, #744]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002d3a:	430b      	orrs	r3, r1
 8002d3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d48:	f002 0308 	and.w	r3, r2, #8
 8002d4c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002d50:	2300      	movs	r3, #0
 8002d52:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002d56:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	d00b      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002d60:	4bb0      	ldr	r3, [pc, #704]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d70:	4aac      	ldr	r2, [pc, #688]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002d72:	430b      	orrs	r3, r1
 8002d74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d80:	f002 0310 	and.w	r3, r2, #16
 8002d84:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002d88:	2300      	movs	r3, #0
 8002d8a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002d8e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002d92:	460b      	mov	r3, r1
 8002d94:	4313      	orrs	r3, r2
 8002d96:	d00b      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002d98:	4ba2      	ldr	r3, [pc, #648]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002da6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002da8:	4a9e      	ldr	r2, [pc, #632]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002daa:	430b      	orrs	r3, r1
 8002dac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002db0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8002dbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002dc6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	d00b      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8002dd0:	4b94      	ldr	r3, [pc, #592]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002dd2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002dd6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002dda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002de0:	4a90      	ldr	r2, [pc, #576]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002de2:	430b      	orrs	r3, r1
 8002de4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002de8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df0:	f002 0320 	and.w	r3, r2, #32
 8002df4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002df8:	2300      	movs	r3, #0
 8002dfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002dfe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002e02:	460b      	mov	r3, r1
 8002e04:	4313      	orrs	r3, r2
 8002e06:	d00b      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002e08:	4b86      	ldr	r3, [pc, #536]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e0e:	f023 0107 	bic.w	r1, r3, #7
 8002e12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e18:	4a82      	ldr	r2, [pc, #520]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e1a:	430b      	orrs	r3, r1
 8002e1c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e28:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002e2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e30:	2300      	movs	r3, #0
 8002e32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002e36:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	d00b      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002e40:	4b78      	ldr	r3, [pc, #480]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e46:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8002e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e50:	4a74      	ldr	r2, [pc, #464]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e52:	430b      	orrs	r3, r1
 8002e54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e60:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8002e64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e68:	2300      	movs	r3, #0
 8002e6a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002e6e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002e72:	460b      	mov	r3, r1
 8002e74:	4313      	orrs	r3, r2
 8002e76:	d00b      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002e78:	4b6a      	ldr	r3, [pc, #424]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e88:	4a66      	ldr	r2, [pc, #408]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e8a:	430b      	orrs	r3, r1
 8002e8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e98:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8002e9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002ea6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4313      	orrs	r3, r2
 8002eae:	d00b      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8002eb0:	4b5c      	ldr	r3, [pc, #368]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002eb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002eb6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ebe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec0:	4a58      	ldr	r2, [pc, #352]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002ec2:	430b      	orrs	r3, r1
 8002ec4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ec8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002ed4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ed8:	2300      	movs	r3, #0
 8002eda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002ede:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	d00b      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8002ee8:	4b4e      	ldr	r3, [pc, #312]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eee:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8002ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ef6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ef8:	4a4a      	ldr	r2, [pc, #296]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002efa:	430b      	orrs	r3, r1
 8002efc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8002f00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f08:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8002f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f10:	2300      	movs	r3, #0
 8002f12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f16:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	d00b      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8002f20:	4b40      	ldr	r3, [pc, #256]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f22:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002f26:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8002f2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f30:	4a3c      	ldr	r2, [pc, #240]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f32:	430b      	orrs	r3, r1
 8002f34:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8002f38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f40:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8002f44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f48:	2300      	movs	r3, #0
 8002f4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f4e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002f52:	460b      	mov	r3, r1
 8002f54:	4313      	orrs	r3, r2
 8002f56:	d00c      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8002f58:	4b32      	ldr	r3, [pc, #200]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002f5e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f6a:	4a2e      	ldr	r2, [pc, #184]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f6c:	430b      	orrs	r3, r1
 8002f6e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7a:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8002f7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f82:	2300      	movs	r3, #0
 8002f84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002f88:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	d00c      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8002f92:	4b24      	ldr	r3, [pc, #144]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f98:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8002f9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fa4:	4a1f      	ldr	r2, [pc, #124]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002fa6:	430b      	orrs	r3, r1
 8002fa8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002fac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb4:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002fb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002fc2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	d00c      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8002fcc:	4b15      	ldr	r3, [pc, #84]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fd2:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8002fd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fde:	4a11      	ldr	r2, [pc, #68]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002fe0:	430b      	orrs	r3, r1
 8002fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8002fe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fee:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002ff2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002ffc:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003000:	460b      	mov	r3, r1
 8003002:	4313      	orrs	r3, r2
 8003004:	d010      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8003006:	4b07      	ldr	r3, [pc, #28]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003008:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800300c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003018:	4a02      	ldr	r2, [pc, #8]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800301a:	430b      	orrs	r3, r1
 800301c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003020:	e002      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8003022:	bf00      	nop
 8003024:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003028:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800302c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003030:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003034:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003038:	2300      	movs	r3, #0
 800303a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800303e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003042:	460b      	mov	r3, r1
 8003044:	4313      	orrs	r3, r2
 8003046:	d04c      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003048:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800304c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003050:	2b80      	cmp	r3, #128	; 0x80
 8003052:	d02d      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003054:	2b80      	cmp	r3, #128	; 0x80
 8003056:	d827      	bhi.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003058:	2b60      	cmp	r3, #96	; 0x60
 800305a:	d02b      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800305c:	2b60      	cmp	r3, #96	; 0x60
 800305e:	d823      	bhi.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003060:	2b40      	cmp	r3, #64	; 0x40
 8003062:	d006      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8003064:	2b40      	cmp	r3, #64	; 0x40
 8003066:	d81f      	bhi.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003068:	2b00      	cmp	r3, #0
 800306a:	d009      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800306c:	2b20      	cmp	r3, #32
 800306e:	d011      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8003070:	e01a      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003072:	4bbe      	ldr	r3, [pc, #760]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003076:	4abd      	ldr	r2, [pc, #756]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800307c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800307e:	e01a      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003080:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003084:	3308      	adds	r3, #8
 8003086:	4618      	mov	r0, r3
 8003088:	f002 fc5c 	bl	8005944 <RCCEx_PLL2_Config>
 800308c:	4603      	mov	r3, r0
 800308e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003092:	e010      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003094:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003098:	332c      	adds	r3, #44	; 0x2c
 800309a:	4618      	mov	r0, r3
 800309c:	f002 fcea 	bl	8005a74 <RCCEx_PLL3_Config>
 80030a0:	4603      	mov	r3, r0
 80030a2:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80030a6:	e006      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80030ae:	e002      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80030b0:	bf00      	nop
 80030b2:	e000      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80030b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030b6:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10d      	bne.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80030be:	4bab      	ldr	r3, [pc, #684]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80030c4:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 80030c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030d0:	4aa6      	ldr	r2, [pc, #664]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030d2:	430b      	orrs	r3, r1
 80030d4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80030d8:	e003      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030da:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80030de:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80030e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ea:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80030ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030f2:	2300      	movs	r3, #0
 80030f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80030f8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80030fc:	460b      	mov	r3, r1
 80030fe:	4313      	orrs	r3, r2
 8003100:	d053      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8003102:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003106:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800310a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800310e:	d033      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8003110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003114:	d82c      	bhi.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003116:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800311a:	d02f      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800311c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003120:	d826      	bhi.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003122:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003126:	d008      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8003128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800312c:	d820      	bhi.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00a      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003136:	d011      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003138:	e01a      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800313a:	4b8c      	ldr	r3, [pc, #560]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800313c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313e:	4a8b      	ldr	r2, [pc, #556]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003144:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003146:	e01a      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003148:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800314c:	3308      	adds	r3, #8
 800314e:	4618      	mov	r0, r3
 8003150:	f002 fbf8 	bl	8005944 <RCCEx_PLL2_Config>
 8003154:	4603      	mov	r3, r0
 8003156:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800315a:	e010      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800315c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003160:	332c      	adds	r3, #44	; 0x2c
 8003162:	4618      	mov	r0, r3
 8003164:	f002 fc86 	bl	8005a74 <RCCEx_PLL3_Config>
 8003168:	4603      	mov	r3, r0
 800316a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800316e:	e006      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003176:	e002      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8003178:	bf00      	nop
 800317a:	e000      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800317c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800317e:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10d      	bne.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8003186:	4b79      	ldr	r3, [pc, #484]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003188:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800318c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003190:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003194:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003198:	4a74      	ldr	r2, [pc, #464]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800319a:	430b      	orrs	r3, r1
 800319c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80031a0:	e003      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a2:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80031a6:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80031aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b2:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80031b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80031b8:	2300      	movs	r3, #0
 80031ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 80031bc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80031c0:	460b      	mov	r3, r1
 80031c2:	4313      	orrs	r3, r2
 80031c4:	d046      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80031c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80031ce:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80031d2:	d028      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80031d4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80031d8:	d821      	bhi.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80031da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031de:	d022      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80031e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031e4:	d81b      	bhi.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80031e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80031ea:	d01c      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80031ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80031f0:	d815      	bhi.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80031f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031f6:	d008      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x56a>
 80031f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031fc:	d80f      	bhi.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d011      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003206:	d00e      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003208:	e009      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x57e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800320a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800320e:	3308      	adds	r3, #8
 8003210:	4618      	mov	r0, r3
 8003212:	f002 fb97 	bl	8005944 <RCCEx_PLL2_Config>
 8003216:	4603      	mov	r3, r0
 8003218:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 800321c:	e004      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x588>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003224:	e000      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x588>
        break;
 8003226:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003228:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10d      	bne.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003230:	4b4e      	ldr	r3, [pc, #312]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003232:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003236:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800323a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800323e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003242:	4a4a      	ldr	r2, [pc, #296]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003244:	430b      	orrs	r3, r1
 8003246:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800324a:	e003      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800324c:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003250:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003254:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003260:	673b      	str	r3, [r7, #112]	; 0x70
 8003262:	2300      	movs	r3, #0
 8003264:	677b      	str	r3, [r7, #116]	; 0x74
 8003266:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800326a:	460b      	mov	r3, r1
 800326c:	4313      	orrs	r3, r2
 800326e:	d03f      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8003270:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003274:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003278:	2b04      	cmp	r3, #4
 800327a:	d81e      	bhi.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x61a>
 800327c:	a201      	add	r2, pc, #4	; (adr r2, 8003284 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800327e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003282:	bf00      	nop
 8003284:	080032c3 	.word	0x080032c3
 8003288:	08003299 	.word	0x08003299
 800328c:	080032a7 	.word	0x080032a7
 8003290:	080032c3 	.word	0x080032c3
 8003294:	080032c3 	.word	0x080032c3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003298:	4b34      	ldr	r3, [pc, #208]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800329a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329c:	4a33      	ldr	r2, [pc, #204]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800329e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a2:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80032a4:	e00e      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80032a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032aa:	332c      	adds	r3, #44	; 0x2c
 80032ac:	4618      	mov	r0, r3
 80032ae:	f002 fbe1 	bl	8005a74 <RCCEx_PLL3_Config>
 80032b2:	4603      	mov	r3, r0
 80032b4:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80032b8:	e004      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80032c0:	e000      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x624>
        break;
 80032c2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80032c4:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d10d      	bne.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80032cc:	4b27      	ldr	r3, [pc, #156]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80032d2:	f023 0107 	bic.w	r1, r3, #7
 80032d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032de:	4a23      	ldr	r2, [pc, #140]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032e0:	430b      	orrs	r3, r1
 80032e2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80032e6:	e003      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e8:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80032ec:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80032f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f8:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80032fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80032fe:	2300      	movs	r3, #0
 8003300:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003302:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003306:	460b      	mov	r3, r1
 8003308:	4313      	orrs	r3, r2
 800330a:	d04c      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x706>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800330c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003310:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003314:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003318:	d02a      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 800331a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800331e:	d821      	bhi.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8003320:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003324:	d026      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 8003326:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800332a:	d81b      	bhi.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 800332c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003330:	d00e      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8003332:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003336:	d815      	bhi.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8003338:	2b00      	cmp	r3, #0
 800333a:	d01d      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800333c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003340:	d110      	bne.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003342:	4b0a      	ldr	r3, [pc, #40]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003346:	4a09      	ldr	r2, [pc, #36]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800334c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800334e:	e014      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003350:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003354:	332c      	adds	r3, #44	; 0x2c
 8003356:	4618      	mov	r0, r3
 8003358:	f002 fb8c 	bl	8005a74 <RCCEx_PLL3_Config>
 800335c:	4603      	mov	r3, r0
 800335e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003362:	e00a      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 800336a:	e006      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x6da>
 800336c:	46020c00 	.word	0x46020c00
        break;
 8003370:	bf00      	nop
 8003372:	e002      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8003374:	bf00      	nop
 8003376:	e000      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8003378:	bf00      	nop
    }
    if (ret == HAL_OK)
 800337a:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10d      	bne.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8003382:	4baf      	ldr	r3, [pc, #700]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003384:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003388:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800338c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003390:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003394:	4aaa      	ldr	r2, [pc, #680]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003396:	430b      	orrs	r3, r1
 8003398:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800339c:	e003      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x706>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800339e:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80033a2:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ae:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80033b2:	663b      	str	r3, [r7, #96]	; 0x60
 80033b4:	2300      	movs	r3, #0
 80033b6:	667b      	str	r3, [r7, #100]	; 0x64
 80033b8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80033bc:	460b      	mov	r3, r1
 80033be:	4313      	orrs	r3, r2
 80033c0:	f000 80b5 	beq.w	800352e <HAL_RCCEx_PeriphCLKConfig+0x88e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033c4:	2300      	movs	r3, #0
 80033c6:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ca:	4b9d      	ldr	r3, [pc, #628]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80033cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d113      	bne.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x760>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033d8:	4b99      	ldr	r3, [pc, #612]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80033da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033de:	4a98      	ldr	r2, [pc, #608]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80033e0:	f043 0304 	orr.w	r3, r3, #4
 80033e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80033e8:	4b95      	ldr	r3, [pc, #596]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80033ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ee:	f003 0304 	and.w	r3, r3, #4
 80033f2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80033f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
      pwrclkchanged = SET;
 80033fa:	2301      	movs	r3, #1
 80033fc:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003400:	4b90      	ldr	r3, [pc, #576]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8003402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003404:	4a8f      	ldr	r2, [pc, #572]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8003406:	f043 0301 	orr.w	r3, r3, #1
 800340a:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800340c:	f7fd fd66 	bl	8000edc <HAL_GetTick>
 8003410:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003414:	e00b      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x78e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003416:	f7fd fd61 	bl	8000edc <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d903      	bls.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        ret = HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 800342c:	e005      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x79a>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800342e:	4b85      	ldr	r3, [pc, #532]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8003430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0ed      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x776>
      }
    }

    if (ret == HAL_OK)
 800343a:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800343e:	2b00      	cmp	r3, #0
 8003440:	d165      	bne.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003442:	4b7f      	ldr	r3, [pc, #508]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003444:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003448:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800344c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003450:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003454:	2b00      	cmp	r3, #0
 8003456:	d023      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x800>
 8003458:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800345c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8003460:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003464:	4293      	cmp	r3, r2
 8003466:	d01b      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x800>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003468:	4b75      	ldr	r3, [pc, #468]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800346a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800346e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003472:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003476:	4b72      	ldr	r3, [pc, #456]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003478:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800347c:	4a70      	ldr	r2, [pc, #448]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800347e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003482:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003486:	4b6e      	ldr	r3, [pc, #440]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003488:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800348c:	4a6c      	ldr	r2, [pc, #432]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800348e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003492:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003496:	4a6a      	ldr	r2, [pc, #424]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003498:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800349c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d019      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x840>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ac:	f7fd fd16 	bl	8000edc <HAL_GetTick>
 80034b0:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034b4:	e00d      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x832>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b6:	f7fd fd11 	bl	8000edc <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034c0:	1ad2      	subs	r2, r2, r3
 80034c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d903      	bls.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x832>
          {
            ret = HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
            break;
 80034d0:	e006      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x840>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034d2:	4b5b      	ldr	r3, [pc, #364]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80034d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0ea      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x816>
          }
        }
      }

      if (ret == HAL_OK)
 80034e0:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10d      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x864>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80034e8:	4b55      	ldr	r3, [pc, #340]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80034ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034f6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80034fa:	4a51      	ldr	r2, [pc, #324]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80034fc:	430b      	orrs	r3, r1
 80034fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003502:	e008      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003504:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003508:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
 800350c:	e003      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800350e:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003512:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003516:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 800351a:	2b01      	cmp	r3, #1
 800351c:	d107      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x88e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800351e:	4b48      	ldr	r3, [pc, #288]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003520:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003524:	4a46      	ldr	r2, [pc, #280]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003526:	f023 0304 	bic.w	r3, r3, #4
 800352a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800352e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003536:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800353a:	65bb      	str	r3, [r7, #88]	; 0x58
 800353c:	2300      	movs	r3, #0
 800353e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003540:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003544:	460b      	mov	r3, r1
 8003546:	4313      	orrs	r3, r2
 8003548:	d042      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800354a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800354e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003552:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003556:	d022      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8003558:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800355c:	d81b      	bhi.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 800355e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003562:	d011      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 8003564:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003568:	d815      	bhi.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 800356a:	2b00      	cmp	r3, #0
 800356c:	d019      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x902>
 800356e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003572:	d110      	bne.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003574:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003578:	3308      	adds	r3, #8
 800357a:	4618      	mov	r0, r3
 800357c:	f002 f9e2 	bl	8005944 <RCCEx_PLL2_Config>
 8003580:	4603      	mov	r3, r0
 8003582:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003586:	e00d      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003588:	4b2d      	ldr	r3, [pc, #180]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800358a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358c:	4a2c      	ldr	r2, [pc, #176]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800358e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003592:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003594:	e006      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 800359c:	e002      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 800359e:	bf00      	nop
 80035a0:	e000      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 80035a2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80035a4:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10d      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x928>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80035ac:	4b24      	ldr	r3, [pc, #144]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80035ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035b2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80035b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80035be:	4a20      	ldr	r2, [pc, #128]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80035c0:	430b      	orrs	r3, r1
 80035c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035c6:	e003      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c8:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80035cc:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80035d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80035dc:	653b      	str	r3, [r7, #80]	; 0x50
 80035de:	2300      	movs	r3, #0
 80035e0:	657b      	str	r3, [r7, #84]	; 0x54
 80035e2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80035e6:	460b      	mov	r3, r1
 80035e8:	4313      	orrs	r3, r2
 80035ea:	d031      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80035ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80035f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035f8:	d00b      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x972>
 80035fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035fe:	d804      	bhi.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003600:	2b00      	cmp	r3, #0
 8003602:	d008      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003608:	d007      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x97a>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003610:	e004      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8003612:	bf00      	nop
 8003614:	e002      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8003616:	bf00      	nop
 8003618:	e000      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 800361a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800361c:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003620:	2b00      	cmp	r3, #0
 8003622:	d111      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003624:	4b06      	ldr	r3, [pc, #24]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003626:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800362a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800362e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003632:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003636:	4a02      	ldr	r2, [pc, #8]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003638:	430b      	orrs	r3, r1
 800363a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800363e:	e007      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 8003640:	46020c00 	.word	0x46020c00
 8003644:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003648:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800364c:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8003650:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003658:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800365c:	64bb      	str	r3, [r7, #72]	; 0x48
 800365e:	2300      	movs	r3, #0
 8003660:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003662:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003666:	460b      	mov	r3, r1
 8003668:	4313      	orrs	r3, r2
 800366a:	d00c      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800366c:	4bb2      	ldr	r3, [pc, #712]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800366e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003672:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8003676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800367a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800367e:	4aae      	ldr	r2, [pc, #696]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003680:	430b      	orrs	r3, r1
 8003682:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8003686:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800368a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003692:	643b      	str	r3, [r7, #64]	; 0x40
 8003694:	2300      	movs	r3, #0
 8003696:	647b      	str	r3, [r7, #68]	; 0x44
 8003698:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800369c:	460b      	mov	r3, r1
 800369e:	4313      	orrs	r3, r2
 80036a0:	d019      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80036a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80036aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036ae:	d105      	bne.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80036b0:	4ba1      	ldr	r3, [pc, #644]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80036b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b4:	4aa0      	ldr	r2, [pc, #640]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80036b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ba:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80036bc:	4b9e      	ldr	r3, [pc, #632]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80036be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80036c2:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80036c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80036ce:	4a9a      	ldr	r2, [pc, #616]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80036d0:	430b      	orrs	r3, r1
 80036d2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80036d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036de:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80036e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80036e4:	2300      	movs	r3, #0
 80036e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036e8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80036ec:	460b      	mov	r3, r1
 80036ee:	4313      	orrs	r3, r2
 80036f0:	d00c      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80036f2:	4b91      	ldr	r3, [pc, #580]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80036f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036f8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80036fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003700:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003704:	4a8c      	ldr	r2, [pc, #560]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003706:	430b      	orrs	r3, r1
 8003708:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800370c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003714:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003718:	633b      	str	r3, [r7, #48]	; 0x30
 800371a:	2300      	movs	r3, #0
 800371c:	637b      	str	r3, [r7, #52]	; 0x34
 800371e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003722:	460b      	mov	r3, r1
 8003724:	4313      	orrs	r3, r2
 8003726:	d00c      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003728:	4b83      	ldr	r3, [pc, #524]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800372a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800372e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003736:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800373a:	4a7f      	ldr	r2, [pc, #508]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800373c:	430b      	orrs	r3, r1
 800373e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374a:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800374e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003750:	2300      	movs	r3, #0
 8003752:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003754:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003758:	460b      	mov	r3, r1
 800375a:	4313      	orrs	r3, r2
 800375c:	d00c      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xad8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800375e:	4b76      	ldr	r3, [pc, #472]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003760:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003764:	f023 0218 	bic.w	r2, r3, #24
 8003768:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800376c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003770:	4971      	ldr	r1, [pc, #452]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003772:	4313      	orrs	r3, r2
 8003774:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003778:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800377c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003780:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8003784:	623b      	str	r3, [r7, #32]
 8003786:	2300      	movs	r3, #0
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
 800378a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800378e:	460b      	mov	r3, r1
 8003790:	4313      	orrs	r3, r2
 8003792:	d032      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8003794:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003798:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800379c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037a0:	d105      	bne.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037a2:	4b65      	ldr	r3, [pc, #404]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80037a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a6:	4a64      	ldr	r2, [pc, #400]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80037a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ac:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80037ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80037b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80037ba:	d108      	bne.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xb2e>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80037bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037c0:	3308      	adds	r3, #8
 80037c2:	4618      	mov	r0, r3
 80037c4:	f002 f8be 	bl	8005944 <RCCEx_PLL2_Config>
 80037c8:	4603      	mov	r3, r0
 80037ca:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    }
    if (ret == HAL_OK)
 80037ce:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10d      	bne.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0xb52>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80037d6:	4b58      	ldr	r3, [pc, #352]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80037d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80037dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037e4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80037e8:	4953      	ldr	r1, [pc, #332]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80037f0:	e003      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f2:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80037f6:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 80037fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003802:	2100      	movs	r1, #0
 8003804:	61b9      	str	r1, [r7, #24]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	61fb      	str	r3, [r7, #28]
 800380c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003810:	460b      	mov	r3, r1
 8003812:	4313      	orrs	r3, r2
 8003814:	d04a      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 8003816:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800381a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800381e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003822:	d01e      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 8003824:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003828:	d825      	bhi.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 800382a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800382e:	d00e      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8003830:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003834:	d81f      	bhi.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 8003836:	2b00      	cmp	r3, #0
 8003838:	d021      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800383a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800383e:	d11a      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003840:	4b3d      	ldr	r3, [pc, #244]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003844:	4a3c      	ldr	r2, [pc, #240]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003846:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800384a:	6293      	str	r3, [r2, #40]	; 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800384c:	e018      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800384e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003852:	3308      	adds	r3, #8
 8003854:	4618      	mov	r0, r3
 8003856:	f002 f875 	bl	8005944 <RCCEx_PLL2_Config>
 800385a:	4603      	mov	r3, r0
 800385c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8003860:	e00e      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003862:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003866:	332c      	adds	r3, #44	; 0x2c
 8003868:	4618      	mov	r0, r3
 800386a:	f002 f903 	bl	8005a74 <RCCEx_PLL3_Config>
 800386e:	4603      	mov	r3, r0
 8003870:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8003874:	e004      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      default:
        ret = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 800387c:	e000      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        break;
 800387e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003880:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10d      	bne.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xc04>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 8003888:	4b2b      	ldr	r3, [pc, #172]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800388a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800388e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003892:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003896:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800389a:	4927      	ldr	r1, [pc, #156]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80038a2:	e003      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a4:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80038a8:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80038ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b4:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	2300      	movs	r3, #0
 80038bc:	617b      	str	r3, [r7, #20]
 80038be:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80038c2:	460b      	mov	r3, r1
 80038c4:	4313      	orrs	r3, r2
 80038c6:	d03d      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0xca4>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80038c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038d4:	d00e      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80038d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038da:	d815      	bhi.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d017      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80038e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038e4:	d110      	bne.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xc68>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038e6:	4b14      	ldr	r3, [pc, #80]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80038e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ea:	4a13      	ldr	r2, [pc, #76]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80038ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038f0:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80038f2:	e00e      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80038f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038f8:	3308      	adds	r3, #8
 80038fa:	4618      	mov	r0, r3
 80038fc:	f002 f822 	bl	8005944 <RCCEx_PLL2_Config>
 8003900:	4603      	mov	r3, r0
 8003902:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8003906:	e004      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      default:
        ret = HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 800390e:	e000      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0xc72>
        break;
 8003910:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003912:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003916:	2b00      	cmp	r3, #0
 8003918:	d110      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800391a:	4b07      	ldr	r3, [pc, #28]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800391c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003920:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003924:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392c:	4902      	ldr	r1, [pc, #8]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800392e:	4313      	orrs	r3, r2
 8003930:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8003934:	e006      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0xca4>
 8003936:	bf00      	nop
 8003938:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800393c:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003940:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8003944:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003950:	60bb      	str	r3, [r7, #8]
 8003952:	2300      	movs	r3, #0
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800395a:	460b      	mov	r3, r1
 800395c:	4313      	orrs	r3, r2
 800395e:	d00c      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xcda>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8003960:	4b2c      	ldr	r3, [pc, #176]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8003962:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003966:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800396a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800396e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003972:	4928      	ldr	r1, [pc, #160]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800397a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800397e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003982:	2100      	movs	r1, #0
 8003984:	6039      	str	r1, [r7, #0]
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	607b      	str	r3, [r7, #4]
 800398c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003990:	460b      	mov	r3, r1
 8003992:	4313      	orrs	r3, r2
 8003994:	d036      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 8003996:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800399a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800399e:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80039a2:	d00d      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80039a4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80039a8:	d811      	bhi.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 80039aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039ae:	d012      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80039b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039b4:	d80b      	bhi.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00d      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80039ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039be:	d106      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xd2e>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80039c0:	4b14      	ldr	r3, [pc, #80]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80039c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c4:	4a13      	ldr	r2, [pc, #76]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80039c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ca:	6293      	str	r3, [r2, #40]	; 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 80039cc:	e004      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>

      default:
        ret = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80039d4:	e000      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>
        break;
 80039d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039d8:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10d      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xd5c>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 80039e0:	4b0c      	ldr	r3, [pc, #48]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80039e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80039e6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80039ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80039f2:	4908      	ldr	r1, [pc, #32]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80039fa:	e003      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039fc:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003a00:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8003a04:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a14:	46020c00 	.word	0x46020c00

08003a18 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b089      	sub	sp, #36	; 0x24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003a20:	4bad      	ldr	r3, [pc, #692]	; (8003cd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a28:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003a2a:	4bab      	ldr	r3, [pc, #684]	; (8003cd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003a34:	4ba8      	ldr	r3, [pc, #672]	; (8003cd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a38:	0a1b      	lsrs	r3, r3, #8
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	3301      	adds	r3, #1
 8003a40:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003a42:	4ba5      	ldr	r3, [pc, #660]	; (8003cd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a46:	091b      	lsrs	r3, r3, #4
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003a4e:	4ba2      	ldr	r3, [pc, #648]	; (8003cd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a52:	08db      	lsrs	r3, r3, #3
 8003a54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	fb02 f303 	mul.w	r3, r2, r3
 8003a5e:	ee07 3a90 	vmov	s15, r3
 8003a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a66:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 8123 	beq.w	8003cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	2b03      	cmp	r3, #3
 8003a76:	d062      	beq.n	8003b3e <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	2b03      	cmp	r3, #3
 8003a7c:	f200 8081 	bhi.w	8003b82 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d024      	beq.n	8003ad0 <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d17a      	bne.n	8003b82 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	ee07 3a90 	vmov	s15, r3
 8003a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a96:	eddf 6a91 	vldr	s13, [pc, #580]	; 8003cdc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8003a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a9e:	4b8e      	ldr	r3, [pc, #568]	; (8003cd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aa6:	ee07 3a90 	vmov	s15, r3
 8003aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003aae:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ab2:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8003ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003ab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003abe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ace:	e08f      	b.n	8003bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003ad0:	4b81      	ldr	r3, [pc, #516]	; (8003cd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d005      	beq.n	8003ae8 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 8003adc:	4b7e      	ldr	r3, [pc, #504]	; (8003cd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	0f1b      	lsrs	r3, r3, #28
 8003ae2:	f003 030f 	and.w	r3, r3, #15
 8003ae6:	e006      	b.n	8003af6 <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 8003ae8:	4b7b      	ldr	r3, [pc, #492]	; (8003cd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003aea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003aee:	041b      	lsls	r3, r3, #16
 8003af0:	0f1b      	lsrs	r3, r3, #28
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	4a7b      	ldr	r2, [pc, #492]	; (8003ce4 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8003af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003afc:	ee07 3a90 	vmov	s15, r3
 8003b00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	ee07 3a90 	vmov	s15, r3
 8003b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	ee07 3a90 	vmov	s15, r3
 8003b18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b1c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b20:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8003ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003b24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b30:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003b34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b38:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b3c:	e058      	b.n	8003bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	ee07 3a90 	vmov	s15, r3
 8003b44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b48:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003cdc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8003b4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b50:	4b61      	ldr	r3, [pc, #388]	; (8003cd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b58:	ee07 3a90 	vmov	s15, r3
 8003b5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b60:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b64:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8003ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003b68:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003b6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b74:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003b78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b7c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b80:	e036      	b.n	8003bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003b82:	4b55      	ldr	r3, [pc, #340]	; (8003cd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d005      	beq.n	8003b9a <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 8003b8e:	4b52      	ldr	r3, [pc, #328]	; (8003cd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	0f1b      	lsrs	r3, r3, #28
 8003b94:	f003 030f 	and.w	r3, r3, #15
 8003b98:	e006      	b.n	8003ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 8003b9a:	4b4f      	ldr	r3, [pc, #316]	; (8003cd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003b9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ba0:	041b      	lsls	r3, r3, #16
 8003ba2:	0f1b      	lsrs	r3, r3, #28
 8003ba4:	f003 030f 	and.w	r3, r3, #15
 8003ba8:	4a4e      	ldr	r2, [pc, #312]	; (8003ce4 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8003baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bae:	ee07 3a90 	vmov	s15, r3
 8003bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	ee07 3a90 	vmov	s15, r3
 8003bbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	ee07 3a90 	vmov	s15, r3
 8003bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bce:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bd2:	eddf 5a43 	vldr	s11, [pc, #268]	; 8003ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bee:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003bf0:	4b39      	ldr	r3, [pc, #228]	; (8003cd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d017      	beq.n	8003c2c <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003bfc:	4b36      	ldr	r3, [pc, #216]	; (8003cd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c00:	0a5b      	lsrs	r3, r3, #9
 8003c02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c06:	ee07 3a90 	vmov	s15, r3
 8003c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8003c0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c12:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003c16:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c22:	ee17 2a90 	vmov	r2, s15
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	e002      	b.n	8003c32 <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8003c32:	4b29      	ldr	r3, [pc, #164]	; (8003cd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d017      	beq.n	8003c6e <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003c3e:	4b26      	ldr	r3, [pc, #152]	; (8003cd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c42:	0c1b      	lsrs	r3, r3, #16
 8003c44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c48:	ee07 3a90 	vmov	s15, r3
 8003c4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003c50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c54:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003c58:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c64:	ee17 2a90 	vmov	r2, s15
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	605a      	str	r2, [r3, #4]
 8003c6c:	e002      	b.n	8003c74 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8003c74:	4b18      	ldr	r3, [pc, #96]	; (8003cd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d017      	beq.n	8003cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003c80:	4b15      	ldr	r3, [pc, #84]	; (8003cd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c84:	0e1b      	lsrs	r3, r3, #24
 8003c86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c8a:	ee07 3a90 	vmov	s15, r3
 8003c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8003c92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c96:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003c9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ca2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ca6:	ee17 2a90 	vmov	r2, s15
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003cae:	e00c      	b.n	8003cca <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	609a      	str	r2, [r3, #8]
}
 8003cb6:	e008      	b.n	8003cca <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	609a      	str	r2, [r3, #8]
}
 8003cca:	bf00      	nop
 8003ccc:	3724      	adds	r7, #36	; 0x24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	46020c00 	.word	0x46020c00
 8003cdc:	4b742400 	.word	0x4b742400
 8003ce0:	46000000 	.word	0x46000000
 8003ce4:	08007058 	.word	0x08007058

08003ce8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b089      	sub	sp, #36	; 0x24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003cf0:	4bad      	ldr	r3, [pc, #692]	; (8003fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cf8:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003cfa:	4bab      	ldr	r3, [pc, #684]	; (8003fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8003d04:	4ba8      	ldr	r3, [pc, #672]	; (8003fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d08:	0a1b      	lsrs	r3, r3, #8
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	3301      	adds	r3, #1
 8003d10:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8003d12:	4ba5      	ldr	r3, [pc, #660]	; (8003fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d16:	091b      	lsrs	r3, r3, #4
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003d1e:	4ba2      	ldr	r3, [pc, #648]	; (8003fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	08db      	lsrs	r3, r3, #3
 8003d24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	fb02 f303 	mul.w	r3, r2, r3
 8003d2e:	ee07 3a90 	vmov	s15, r3
 8003d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d36:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 8123 	beq.w	8003f88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2b03      	cmp	r3, #3
 8003d46:	d062      	beq.n	8003e0e <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	2b03      	cmp	r3, #3
 8003d4c:	f200 8081 	bhi.w	8003e52 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d024      	beq.n	8003da0 <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d17a      	bne.n	8003e52 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	ee07 3a90 	vmov	s15, r3
 8003d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d66:	eddf 6a91 	vldr	s13, [pc, #580]	; 8003fac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d6e:	4b8e      	ldr	r3, [pc, #568]	; (8003fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d76:	ee07 3a90 	vmov	s15, r3
 8003d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d82:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8003fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d9e:	e08f      	b.n	8003ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003da0:	4b81      	ldr	r3, [pc, #516]	; (8003fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d005      	beq.n	8003db8 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 8003dac:	4b7e      	ldr	r3, [pc, #504]	; (8003fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	0f1b      	lsrs	r3, r3, #28
 8003db2:	f003 030f 	and.w	r3, r3, #15
 8003db6:	e006      	b.n	8003dc6 <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 8003db8:	4b7b      	ldr	r3, [pc, #492]	; (8003fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003dba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003dbe:	041b      	lsls	r3, r3, #16
 8003dc0:	0f1b      	lsrs	r3, r3, #28
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	4a7b      	ldr	r2, [pc, #492]	; (8003fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8003dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dcc:	ee07 3a90 	vmov	s15, r3
 8003dd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	ee07 3a90 	vmov	s15, r3
 8003dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	ee07 3a90 	vmov	s15, r3
 8003de8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dec:	ed97 6a02 	vldr	s12, [r7, #8]
 8003df0:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8003fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003df4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003df8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e00:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003e04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e08:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e0c:	e058      	b.n	8003ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	ee07 3a90 	vmov	s15, r3
 8003e14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e18:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003fac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003e1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e20:	4b61      	ldr	r3, [pc, #388]	; (8003fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e28:	ee07 3a90 	vmov	s15, r3
 8003e2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e30:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e34:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8003fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003e38:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003e3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e44:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003e48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e4c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e50:	e036      	b.n	8003ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003e52:	4b55      	ldr	r3, [pc, #340]	; (8003fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d005      	beq.n	8003e6a <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 8003e5e:	4b52      	ldr	r3, [pc, #328]	; (8003fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	0f1b      	lsrs	r3, r3, #28
 8003e64:	f003 030f 	and.w	r3, r3, #15
 8003e68:	e006      	b.n	8003e78 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 8003e6a:	4b4f      	ldr	r3, [pc, #316]	; (8003fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003e6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e70:	041b      	lsls	r3, r3, #16
 8003e72:	0f1b      	lsrs	r3, r3, #28
 8003e74:	f003 030f 	and.w	r3, r3, #15
 8003e78:	4a4e      	ldr	r2, [pc, #312]	; (8003fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8003e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e7e:	ee07 3a90 	vmov	s15, r3
 8003e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	ee07 3a90 	vmov	s15, r3
 8003e8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	ee07 3a90 	vmov	s15, r3
 8003e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ea2:	eddf 5a43 	vldr	s11, [pc, #268]	; 8003fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ebe:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8003ec0:	4b39      	ldr	r3, [pc, #228]	; (8003fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d017      	beq.n	8003efc <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003ecc:	4b36      	ldr	r3, [pc, #216]	; (8003fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed0:	0a5b      	lsrs	r3, r3, #9
 8003ed2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ed6:	ee07 3a90 	vmov	s15, r3
 8003eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8003ede:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ee2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003ee6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003eea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003eee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ef2:	ee17 2a90 	vmov	r2, s15
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	e002      	b.n	8003f02 <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8003f02:	4b29      	ldr	r3, [pc, #164]	; (8003fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d017      	beq.n	8003f3e <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003f0e:	4b26      	ldr	r3, [pc, #152]	; (8003fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f12:	0c1b      	lsrs	r3, r3, #16
 8003f14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f18:	ee07 3a90 	vmov	s15, r3
 8003f1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8003f20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f24:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003f28:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f34:	ee17 2a90 	vmov	r2, s15
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	605a      	str	r2, [r3, #4]
 8003f3c:	e002      	b.n	8003f44 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8003f44:	4b18      	ldr	r3, [pc, #96]	; (8003fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d017      	beq.n	8003f80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003f50:	4b15      	ldr	r3, [pc, #84]	; (8003fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f54:	0e1b      	lsrs	r3, r3, #24
 8003f56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f5a:	ee07 3a90 	vmov	s15, r3
 8003f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8003f62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f66:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003f6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f76:	ee17 2a90 	vmov	r2, s15
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003f7e:	e00c      	b.n	8003f9a <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	609a      	str	r2, [r3, #8]
}
 8003f86:	e008      	b.n	8003f9a <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	609a      	str	r2, [r3, #8]
}
 8003f9a:	bf00      	nop
 8003f9c:	3724      	adds	r7, #36	; 0x24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	46020c00 	.word	0x46020c00
 8003fac:	4b742400 	.word	0x4b742400
 8003fb0:	46000000 	.word	0x46000000
 8003fb4:	08007058 	.word	0x08007058

08003fb8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b089      	sub	sp, #36	; 0x24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8003fc0:	4bad      	ldr	r3, [pc, #692]	; (8004278 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fc8:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8003fca:	4bab      	ldr	r3, [pc, #684]	; (8004278 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fce:	f003 0303 	and.w	r3, r3, #3
 8003fd2:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8003fd4:	4ba8      	ldr	r3, [pc, #672]	; (8004278 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd8:	0a1b      	lsrs	r3, r3, #8
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	3301      	adds	r3, #1
 8003fe0:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8003fe2:	4ba5      	ldr	r3, [pc, #660]	; (8004278 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe6:	091b      	lsrs	r3, r3, #4
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8003fee:	4ba2      	ldr	r3, [pc, #648]	; (8004278 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ff2:	08db      	lsrs	r3, r3, #3
 8003ff4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	fb02 f303 	mul.w	r3, r2, r3
 8003ffe:	ee07 3a90 	vmov	s15, r3
 8004002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004006:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 8123 	beq.w	8004258 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2b03      	cmp	r3, #3
 8004016:	d062      	beq.n	80040de <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	2b03      	cmp	r3, #3
 800401c:	f200 8081 	bhi.w	8004122 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d024      	beq.n	8004070 <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	2b02      	cmp	r3, #2
 800402a:	d17a      	bne.n	8004122 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	ee07 3a90 	vmov	s15, r3
 8004032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004036:	eddf 6a91 	vldr	s13, [pc, #580]	; 800427c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800403a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800403e:	4b8e      	ldr	r3, [pc, #568]	; (8004278 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004046:	ee07 3a90 	vmov	s15, r3
 800404a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800404e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004052:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8004280 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004056:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800405a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800405e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004062:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800406a:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 800406e:	e08f      	b.n	8004190 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004070:	4b81      	ldr	r3, [pc, #516]	; (8004278 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d005      	beq.n	8004088 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 800407c:	4b7e      	ldr	r3, [pc, #504]	; (8004278 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	0f1b      	lsrs	r3, r3, #28
 8004082:	f003 030f 	and.w	r3, r3, #15
 8004086:	e006      	b.n	8004096 <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 8004088:	4b7b      	ldr	r3, [pc, #492]	; (8004278 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800408a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800408e:	041b      	lsls	r3, r3, #16
 8004090:	0f1b      	lsrs	r3, r3, #28
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	4a7b      	ldr	r2, [pc, #492]	; (8004284 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8004098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800409c:	ee07 3a90 	vmov	s15, r3
 80040a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	ee07 3a90 	vmov	s15, r3
 80040aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	ee07 3a90 	vmov	s15, r3
 80040b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040bc:	ed97 6a02 	vldr	s12, [r7, #8]
 80040c0:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8004280 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80040c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80040d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040dc:	e058      	b.n	8004190 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	ee07 3a90 	vmov	s15, r3
 80040e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040e8:	eddf 6a64 	vldr	s13, [pc, #400]	; 800427c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80040ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040f0:	4b61      	ldr	r3, [pc, #388]	; (8004278 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80040f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040f8:	ee07 3a90 	vmov	s15, r3
 80040fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004100:	ed97 6a02 	vldr	s12, [r7, #8]
 8004104:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8004280 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004108:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800410c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004110:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004114:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800411c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004120:	e036      	b.n	8004190 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004122:	4b55      	ldr	r3, [pc, #340]	; (8004278 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d005      	beq.n	800413a <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 800412e:	4b52      	ldr	r3, [pc, #328]	; (8004278 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	0f1b      	lsrs	r3, r3, #28
 8004134:	f003 030f 	and.w	r3, r3, #15
 8004138:	e006      	b.n	8004148 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 800413a:	4b4f      	ldr	r3, [pc, #316]	; (8004278 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800413c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004140:	041b      	lsls	r3, r3, #16
 8004142:	0f1b      	lsrs	r3, r3, #28
 8004144:	f003 030f 	and.w	r3, r3, #15
 8004148:	4a4e      	ldr	r2, [pc, #312]	; (8004284 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 800414a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800414e:	ee07 3a90 	vmov	s15, r3
 8004152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	ee07 3a90 	vmov	s15, r3
 800415c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004160:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	ee07 3a90 	vmov	s15, r3
 800416a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800416e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004172:	eddf 5a43 	vldr	s11, [pc, #268]	; 8004280 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800417a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800417e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004182:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800418a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800418e:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8004190:	4b39      	ldr	r3, [pc, #228]	; (8004278 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d017      	beq.n	80041cc <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800419c:	4b36      	ldr	r3, [pc, #216]	; (8004278 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800419e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a0:	0a5b      	lsrs	r3, r3, #9
 80041a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041a6:	ee07 3a90 	vmov	s15, r3
 80041aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80041ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041b2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80041b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80041ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041c2:	ee17 2a90 	vmov	r2, s15
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	e002      	b.n	80041d2 <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80041d2:	4b29      	ldr	r3, [pc, #164]	; (8004278 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80041d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d017      	beq.n	800420e <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80041de:	4b26      	ldr	r3, [pc, #152]	; (8004278 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80041e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e2:	0c1b      	lsrs	r3, r3, #16
 80041e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041e8:	ee07 3a90 	vmov	s15, r3
 80041ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80041f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041f4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80041f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80041fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004204:	ee17 2a90 	vmov	r2, s15
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	605a      	str	r2, [r3, #4]
 800420c:	e002      	b.n	8004214 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8004214:	4b18      	ldr	r3, [pc, #96]	; (8004278 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004218:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d017      	beq.n	8004250 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004220:	4b15      	ldr	r3, [pc, #84]	; (8004278 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004224:	0e1b      	lsrs	r3, r3, #24
 8004226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800422a:	ee07 3a90 	vmov	s15, r3
 800422e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8004232:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004236:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800423a:	edd7 6a07 	vldr	s13, [r7, #28]
 800423e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004246:	ee17 2a90 	vmov	r2, s15
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800424e:	e00c      	b.n	800426a <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	609a      	str	r2, [r3, #8]
}
 8004256:	e008      	b.n	800426a <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	609a      	str	r2, [r3, #8]
}
 800426a:	bf00      	nop
 800426c:	3724      	adds	r7, #36	; 0x24
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	46020c00 	.word	0x46020c00
 800427c:	4b742400 	.word	0x4b742400
 8004280:	46000000 	.word	0x46000000
 8004284:	08007058 	.word	0x08007058

08004288 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b08e      	sub	sp, #56	; 0x38
 800428c:	af00      	add	r7, sp, #0
 800428e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8004292:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004296:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800429a:	430b      	orrs	r3, r1
 800429c:	d145      	bne.n	800432a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800429e:	4ba7      	ldr	r3, [pc, #668]	; (800453c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80042a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042a8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80042aa:	4ba4      	ldr	r3, [pc, #656]	; (800453c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80042ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d108      	bne.n	80042ca <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80042b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042be:	d104      	bne.n	80042ca <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80042c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042c4:	637b      	str	r3, [r7, #52]	; 0x34
 80042c6:	f001 bb31 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80042ca:	4b9c      	ldr	r3, [pc, #624]	; (800453c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80042cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042d8:	d114      	bne.n	8004304 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80042da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042e0:	d110      	bne.n	8004304 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80042e2:	4b96      	ldr	r3, [pc, #600]	; (800453c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80042e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042f0:	d103      	bne.n	80042fa <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80042f2:	23fa      	movs	r3, #250	; 0xfa
 80042f4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80042f6:	f001 bb19 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 80042fa:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80042fe:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004300:	f001 bb14 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8004304:	4b8d      	ldr	r3, [pc, #564]	; (800453c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004310:	d107      	bne.n	8004322 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8004312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004314:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004318:	d103      	bne.n	8004322 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800431a:	4b89      	ldr	r3, [pc, #548]	; (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800431c:	637b      	str	r3, [r7, #52]	; 0x34
 800431e:	f001 bb05 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004322:	2300      	movs	r3, #0
 8004324:	637b      	str	r3, [r7, #52]	; 0x34
 8004326:	f001 bb01 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800432a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800432e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8004332:	430b      	orrs	r3, r1
 8004334:	d151      	bne.n	80043da <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004336:	4b81      	ldr	r3, [pc, #516]	; (800453c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004338:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800433c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8004340:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004344:	2b80      	cmp	r3, #128	; 0x80
 8004346:	d035      	beq.n	80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8004348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434a:	2b80      	cmp	r3, #128	; 0x80
 800434c:	d841      	bhi.n	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800434e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004350:	2b60      	cmp	r3, #96	; 0x60
 8004352:	d02a      	beq.n	80043aa <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8004354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004356:	2b60      	cmp	r3, #96	; 0x60
 8004358:	d83b      	bhi.n	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800435a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435c:	2b40      	cmp	r3, #64	; 0x40
 800435e:	d009      	beq.n	8004374 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004362:	2b40      	cmp	r3, #64	; 0x40
 8004364:	d835      	bhi.n	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00c      	beq.n	8004386 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800436c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436e:	2b20      	cmp	r3, #32
 8004370:	d012      	beq.n	8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004372:	e02e      	b.n	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004378:	4618      	mov	r0, r3
 800437a:	f7ff fb4d 	bl	8003a18 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004382:	f001 bad3 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004386:	f107 0318 	add.w	r3, r7, #24
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff fcac 	bl	8003ce8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004394:	f001 baca 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004398:	f107 030c 	add.w	r3, r7, #12
 800439c:	4618      	mov	r0, r3
 800439e:	f7ff fe0b 	bl	8003fb8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80043a6:	f001 bac1 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80043aa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80043ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80043b0:	f001 babc 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80043b4:	4b61      	ldr	r3, [pc, #388]	; (800453c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043c0:	d103      	bne.n	80043ca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80043c2:	4b60      	ldr	r3, [pc, #384]	; (8004544 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80043c4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80043c6:	f001 bab1 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80043ca:	2300      	movs	r3, #0
 80043cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80043ce:	f001 baad 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :
      {
        frequency = 0U;
 80043d2:	2300      	movs	r3, #0
 80043d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80043d6:	f001 baa9 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80043da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043de:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80043e2:	430b      	orrs	r3, r1
 80043e4:	d158      	bne.n	8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80043e6:	4b55      	ldr	r3, [pc, #340]	; (800453c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80043e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80043ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043f0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80043f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043f8:	d03b      	beq.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80043fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004400:	d846      	bhi.n	8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004404:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004408:	d02e      	beq.n	8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800440a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004410:	d83e      	bhi.n	8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004418:	d00b      	beq.n	8004432 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800441a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004420:	d836      	bhi.n	8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00d      	beq.n	8004444 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8004428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800442e:	d012      	beq.n	8004456 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8004430:	e02e      	b.n	8004490 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004436:	4618      	mov	r0, r3
 8004438:	f7ff faee 	bl	8003a18 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004440:	f001 ba74 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004444:	f107 0318 	add.w	r3, r7, #24
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff fc4d 	bl	8003ce8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004452:	f001 ba6b 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004456:	f107 030c 	add.w	r3, r7, #12
 800445a:	4618      	mov	r0, r3
 800445c:	f7ff fdac 	bl	8003fb8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004464:	f001 ba62 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004468:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800446c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800446e:	f001 ba5d 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004472:	4b32      	ldr	r3, [pc, #200]	; (800453c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800447a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800447e:	d103      	bne.n	8004488 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8004480:	4b30      	ldr	r3, [pc, #192]	; (8004544 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004482:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004484:	f001 ba52 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800448c:	f001 ba4e 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 8004490:	2300      	movs	r3, #0
 8004492:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004494:	f001 ba4a 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8004498:	e9d7 2300 	ldrd	r2, r3, [r7]
 800449c:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80044a0:	430b      	orrs	r3, r1
 80044a2:	d126      	bne.n	80044f2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80044a4:	4b25      	ldr	r3, [pc, #148]	; (800453c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80044a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80044aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044ae:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 80044b0:	4b22      	ldr	r3, [pc, #136]	; (800453c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044bc:	d106      	bne.n	80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80044be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d103      	bne.n	80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 80044c4:	4b1f      	ldr	r3, [pc, #124]	; (8004544 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80044c6:	637b      	str	r3, [r7, #52]	; 0x34
 80044c8:	f001 ba30 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 80044cc:	4b1b      	ldr	r3, [pc, #108]	; (800453c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044d8:	d107      	bne.n	80044ea <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 80044da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044e0:	d103      	bne.n	80044ea <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 80044e2:	4b19      	ldr	r3, [pc, #100]	; (8004548 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80044e4:	637b      	str	r3, [r7, #52]	; 0x34
 80044e6:	f001 ba21 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 80044ea:	2300      	movs	r3, #0
 80044ec:	637b      	str	r3, [r7, #52]	; 0x34
 80044ee:	f001 ba1d 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80044f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044f6:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 80044fa:	430b      	orrs	r3, r1
 80044fc:	d16e      	bne.n	80045dc <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80044fe:	4b0f      	ldr	r3, [pc, #60]	; (800453c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004504:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004508:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800450a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004510:	d03d      	beq.n	800458e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8004512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004514:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004518:	d85c      	bhi.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800451a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004520:	d014      	beq.n	800454c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8004522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004524:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004528:	d854      	bhi.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800452a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452c:	2b00      	cmp	r3, #0
 800452e:	d01f      	beq.n	8004570 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8004530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004532:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004536:	d012      	beq.n	800455e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8004538:	e04c      	b.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800453a:	bf00      	nop
 800453c:	46020c00 	.word	0x46020c00
 8004540:	0007a120 	.word	0x0007a120
 8004544:	00f42400 	.word	0x00f42400
 8004548:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800454c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004550:	4618      	mov	r0, r3
 8004552:	f7ff fa61 	bl	8003a18 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8004556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004558:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800455a:	f001 b9e7 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800455e:	f107 0318 	add.w	r3, r7, #24
 8004562:	4618      	mov	r0, r3
 8004564:	f7ff fbc0 	bl	8003ce8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800456c:	f001 b9de 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004570:	4ba7      	ldr	r3, [pc, #668]	; (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004578:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800457c:	d103      	bne.n	8004586 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800457e:	4ba5      	ldr	r3, [pc, #660]	; (8004814 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004580:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004582:	f001 b9d3 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004586:	2300      	movs	r3, #0
 8004588:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800458a:	f001 b9cf 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800458e:	4ba0      	ldr	r3, [pc, #640]	; (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0320 	and.w	r3, r3, #32
 8004596:	2b20      	cmp	r3, #32
 8004598:	d118      	bne.n	80045cc <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800459a:	4b9d      	ldr	r3, [pc, #628]	; (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d005      	beq.n	80045b2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80045a6:	4b9a      	ldr	r3, [pc, #616]	; (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	0e1b      	lsrs	r3, r3, #24
 80045ac:	f003 030f 	and.w	r3, r3, #15
 80045b0:	e006      	b.n	80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80045b2:	4b97      	ldr	r3, [pc, #604]	; (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80045b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80045b8:	041b      	lsls	r3, r3, #16
 80045ba:	0e1b      	lsrs	r3, r3, #24
 80045bc:	f003 030f 	and.w	r3, r3, #15
 80045c0:	4a95      	ldr	r2, [pc, #596]	; (8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80045c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045c6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80045c8:	f001 b9b0 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80045d0:	f001 b9ac 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 80045d4:	2300      	movs	r3, #0
 80045d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80045d8:	f001 b9a8 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80045dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045e0:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 80045e4:	430b      	orrs	r3, r1
 80045e6:	d17f      	bne.n	80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80045e8:	4b89      	ldr	r3, [pc, #548]	; (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80045ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80045ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045f2:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80045f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d165      	bne.n	80046c6 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80045fa:	4b85      	ldr	r3, [pc, #532]	; (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80045fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004600:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004604:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8004606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004608:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800460c:	d034      	beq.n	8004678 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800460e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004610:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004614:	d853      	bhi.n	80046be <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8004616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004618:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800461c:	d00b      	beq.n	8004636 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800461e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004620:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004624:	d84b      	bhi.n	80046be <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8004626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004628:	2b00      	cmp	r3, #0
 800462a:	d016      	beq.n	800465a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800462c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004632:	d009      	beq.n	8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8004634:	e043      	b.n	80046be <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800463a:	4618      	mov	r0, r3
 800463c:	f7ff f9ec 	bl	8003a18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004642:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004644:	f001 b972 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004648:	f107 0318 	add.w	r3, r7, #24
 800464c:	4618      	mov	r0, r3
 800464e:	f7ff fb4b 	bl	8003ce8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004656:	f001 b969 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800465a:	4b6d      	ldr	r3, [pc, #436]	; (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004666:	d103      	bne.n	8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8004668:	4b6a      	ldr	r3, [pc, #424]	; (8004814 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800466a:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800466c:	f001 b95e 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 8004670:	2300      	movs	r3, #0
 8004672:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004674:	f001 b95a 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004678:	4b65      	ldr	r3, [pc, #404]	; (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0320 	and.w	r3, r3, #32
 8004680:	2b20      	cmp	r3, #32
 8004682:	d118      	bne.n	80046b6 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004684:	4b62      	ldr	r3, [pc, #392]	; (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d005      	beq.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8004690:	4b5f      	ldr	r3, [pc, #380]	; (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	0e1b      	lsrs	r3, r3, #24
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	e006      	b.n	80046aa <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800469c:	4b5c      	ldr	r3, [pc, #368]	; (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800469e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80046a2:	041b      	lsls	r3, r3, #16
 80046a4:	0e1b      	lsrs	r3, r3, #24
 80046a6:	f003 030f 	and.w	r3, r3, #15
 80046aa:	4a5b      	ldr	r2, [pc, #364]	; (8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80046ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b0:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80046b2:	f001 b93b 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80046ba:	f001 b937 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        default :
        {
          frequency = 0U;
 80046be:	2300      	movs	r3, #0
 80046c0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80046c2:	f001 b933 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80046c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046cc:	d108      	bne.n	80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80046ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff f9a0 	bl	8003a18 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	637b      	str	r3, [r7, #52]	; 0x34
 80046dc:	f001 b926 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else
    {
      frequency = 0U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	637b      	str	r3, [r7, #52]	; 0x34
 80046e4:	f001 b922 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80046e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046ec:	1e51      	subs	r1, r2, #1
 80046ee:	430b      	orrs	r3, r1
 80046f0:	d136      	bne.n	8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80046f2:	4b47      	ldr	r3, [pc, #284]	; (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80046f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046f8:	f003 0303 	and.w	r3, r3, #3
 80046fc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80046fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004700:	2b00      	cmp	r3, #0
 8004702:	d104      	bne.n	800470e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8004704:	f7fe fa1e 	bl	8002b44 <HAL_RCC_GetPCLK2Freq>
 8004708:	6378      	str	r0, [r7, #52]	; 0x34
 800470a:	f001 b90f 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800470e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004710:	2b01      	cmp	r3, #1
 8004712:	d104      	bne.n	800471e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004714:	f7fe f8e0 	bl	80028d8 <HAL_RCC_GetSysClockFreq>
 8004718:	6378      	str	r0, [r7, #52]	; 0x34
 800471a:	f001 b907 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800471e:	4b3c      	ldr	r3, [pc, #240]	; (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800472a:	d106      	bne.n	800473a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800472c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472e:	2b02      	cmp	r3, #2
 8004730:	d103      	bne.n	800473a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8004732:	4b3a      	ldr	r3, [pc, #232]	; (800481c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004734:	637b      	str	r3, [r7, #52]	; 0x34
 8004736:	f001 b8f9 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800473a:	4b35      	ldr	r3, [pc, #212]	; (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800473c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b02      	cmp	r3, #2
 8004746:	d107      	bne.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8004748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474a:	2b03      	cmp	r3, #3
 800474c:	d104      	bne.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800474e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004752:	637b      	str	r3, [r7, #52]	; 0x34
 8004754:	f001 b8ea 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8004758:	2300      	movs	r3, #0
 800475a:	637b      	str	r3, [r7, #52]	; 0x34
 800475c:	f001 b8e6 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8004760:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004764:	1e91      	subs	r1, r2, #2
 8004766:	430b      	orrs	r3, r1
 8004768:	d136      	bne.n	80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800476a:	4b29      	ldr	r3, [pc, #164]	; (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800476c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004770:	f003 030c 	and.w	r3, r3, #12
 8004774:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8004776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004778:	2b00      	cmp	r3, #0
 800477a:	d104      	bne.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800477c:	f7fe f9ce 	bl	8002b1c <HAL_RCC_GetPCLK1Freq>
 8004780:	6378      	str	r0, [r7, #52]	; 0x34
 8004782:	f001 b8d3 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8004786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004788:	2b04      	cmp	r3, #4
 800478a:	d104      	bne.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800478c:	f7fe f8a4 	bl	80028d8 <HAL_RCC_GetSysClockFreq>
 8004790:	6378      	str	r0, [r7, #52]	; 0x34
 8004792:	f001 b8cb 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8004796:	4b1e      	ldr	r3, [pc, #120]	; (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800479e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047a2:	d106      	bne.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80047a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a6:	2b08      	cmp	r3, #8
 80047a8:	d103      	bne.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 80047aa:	4b1c      	ldr	r3, [pc, #112]	; (800481c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80047ac:	637b      	str	r3, [r7, #52]	; 0x34
 80047ae:	f001 b8bd 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80047b2:	4b17      	ldr	r3, [pc, #92]	; (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80047b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d107      	bne.n	80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80047c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c2:	2b0c      	cmp	r3, #12
 80047c4:	d104      	bne.n	80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 80047c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047ca:	637b      	str	r3, [r7, #52]	; 0x34
 80047cc:	f001 b8ae 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 80047d0:	2300      	movs	r3, #0
 80047d2:	637b      	str	r3, [r7, #52]	; 0x34
 80047d4:	f001 b8aa 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80047d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047dc:	1f11      	subs	r1, r2, #4
 80047de:	430b      	orrs	r3, r1
 80047e0:	d13f      	bne.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80047e2:	4b0b      	ldr	r3, [pc, #44]	; (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80047e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80047ec:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80047ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d104      	bne.n	80047fe <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80047f4:	f7fe f992 	bl	8002b1c <HAL_RCC_GetPCLK1Freq>
 80047f8:	6378      	str	r0, [r7, #52]	; 0x34
 80047fa:	f001 b897 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80047fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004800:	2b10      	cmp	r3, #16
 8004802:	d10d      	bne.n	8004820 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004804:	f7fe f868 	bl	80028d8 <HAL_RCC_GetSysClockFreq>
 8004808:	6378      	str	r0, [r7, #52]	; 0x34
 800480a:	f001 b88f 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800480e:	bf00      	nop
 8004810:	46020c00 	.word	0x46020c00
 8004814:	02dc6c00 	.word	0x02dc6c00
 8004818:	08007058 	.word	0x08007058
 800481c:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8004820:	4ba8      	ldr	r3, [pc, #672]	; (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800482c:	d106      	bne.n	800483c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800482e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004830:	2b20      	cmp	r3, #32
 8004832:	d103      	bne.n	800483c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8004834:	4ba4      	ldr	r3, [pc, #656]	; (8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004836:	637b      	str	r3, [r7, #52]	; 0x34
 8004838:	f001 b878 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800483c:	4ba1      	ldr	r3, [pc, #644]	; (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800483e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b02      	cmp	r3, #2
 8004848:	d107      	bne.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800484a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484c:	2b30      	cmp	r3, #48	; 0x30
 800484e:	d104      	bne.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8004850:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004854:	637b      	str	r3, [r7, #52]	; 0x34
 8004856:	f001 b869 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800485a:	2300      	movs	r3, #0
 800485c:	637b      	str	r3, [r7, #52]	; 0x34
 800485e:	f001 b865 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8004862:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004866:	f1a2 0108 	sub.w	r1, r2, #8
 800486a:	430b      	orrs	r3, r1
 800486c:	d136      	bne.n	80048dc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800486e:	4b95      	ldr	r3, [pc, #596]	; (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004874:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004878:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800487a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487c:	2b00      	cmp	r3, #0
 800487e:	d104      	bne.n	800488a <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004880:	f7fe f94c 	bl	8002b1c <HAL_RCC_GetPCLK1Freq>
 8004884:	6378      	str	r0, [r7, #52]	; 0x34
 8004886:	f001 b851 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800488a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488c:	2b40      	cmp	r3, #64	; 0x40
 800488e:	d104      	bne.n	800489a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004890:	f7fe f822 	bl	80028d8 <HAL_RCC_GetSysClockFreq>
 8004894:	6378      	str	r0, [r7, #52]	; 0x34
 8004896:	f001 b849 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800489a:	4b8a      	ldr	r3, [pc, #552]	; (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048a6:	d106      	bne.n	80048b6 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 80048a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048aa:	2b80      	cmp	r3, #128	; 0x80
 80048ac:	d103      	bne.n	80048b6 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 80048ae:	4b86      	ldr	r3, [pc, #536]	; (8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80048b0:	637b      	str	r3, [r7, #52]	; 0x34
 80048b2:	f001 b83b 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80048b6:	4b83      	ldr	r3, [pc, #524]	; (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80048b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d107      	bne.n	80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80048c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c6:	2bc0      	cmp	r3, #192	; 0xc0
 80048c8:	d104      	bne.n	80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 80048ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ce:	637b      	str	r3, [r7, #52]	; 0x34
 80048d0:	f001 b82c 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80048d4:	2300      	movs	r3, #0
 80048d6:	637b      	str	r3, [r7, #52]	; 0x34
 80048d8:	f001 b828 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80048dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048e0:	f1a2 0110 	sub.w	r1, r2, #16
 80048e4:	430b      	orrs	r3, r1
 80048e6:	d139      	bne.n	800495c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80048e8:	4b76      	ldr	r3, [pc, #472]	; (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80048ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048f2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80048f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d104      	bne.n	8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80048fa:	f7fe f90f 	bl	8002b1c <HAL_RCC_GetPCLK1Freq>
 80048fe:	6378      	str	r0, [r7, #52]	; 0x34
 8004900:	f001 b814 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8004904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800490a:	d104      	bne.n	8004916 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800490c:	f7fd ffe4 	bl	80028d8 <HAL_RCC_GetSysClockFreq>
 8004910:	6378      	str	r0, [r7, #52]	; 0x34
 8004912:	f001 b80b 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8004916:	4b6b      	ldr	r3, [pc, #428]	; (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800491e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004922:	d107      	bne.n	8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8004924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004926:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800492a:	d103      	bne.n	8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800492c:	4b66      	ldr	r3, [pc, #408]	; (8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800492e:	637b      	str	r3, [r7, #52]	; 0x34
 8004930:	f000 bffc 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8004934:	4b63      	ldr	r3, [pc, #396]	; (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004936:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b02      	cmp	r3, #2
 8004940:	d108      	bne.n	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8004942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004944:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004948:	d104      	bne.n	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800494a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800494e:	637b      	str	r3, [r7, #52]	; 0x34
 8004950:	f000 bfec 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8004954:	2300      	movs	r3, #0
 8004956:	637b      	str	r3, [r7, #52]	; 0x34
 8004958:	f000 bfe8 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800495c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004960:	f102 4160 	add.w	r1, r2, #3758096384	; 0xe0000000
 8004964:	430b      	orrs	r3, r1
 8004966:	d139      	bne.n	80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8004968:	4b56      	ldr	r3, [pc, #344]	; (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800496a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800496e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004972:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8004974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004976:	2b00      	cmp	r3, #0
 8004978:	d104      	bne.n	8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800497a:	f7fe f8cf 	bl	8002b1c <HAL_RCC_GetPCLK1Freq>
 800497e:	6378      	str	r0, [r7, #52]	; 0x34
 8004980:	f000 bfd4 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 8004984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004986:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800498a:	d104      	bne.n	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800498c:	f7fd ffa4 	bl	80028d8 <HAL_RCC_GetSysClockFreq>
 8004990:	6378      	str	r0, [r7, #52]	; 0x34
 8004992:	f000 bfcb 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8004996:	4b4b      	ldr	r3, [pc, #300]	; (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800499e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049a2:	d107      	bne.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 80049a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049aa:	d103      	bne.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 80049ac:	4b46      	ldr	r3, [pc, #280]	; (8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80049ae:	637b      	str	r3, [r7, #52]	; 0x34
 80049b0:	f000 bfbc 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 80049b4:	4b43      	ldr	r3, [pc, #268]	; (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80049b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d108      	bne.n	80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 80049c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80049c8:	d104      	bne.n	80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 80049ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ce:	637b      	str	r3, [r7, #52]	; 0x34
 80049d0:	f000 bfac 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80049d4:	2300      	movs	r3, #0
 80049d6:	637b      	str	r3, [r7, #52]	; 0x34
 80049d8:	f000 bfa8 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80049dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049e0:	f1a2 0120 	sub.w	r1, r2, #32
 80049e4:	430b      	orrs	r3, r1
 80049e6:	d158      	bne.n	8004a9a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80049e8:	4b36      	ldr	r3, [pc, #216]	; (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80049ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80049ee:	f003 0307 	and.w	r3, r3, #7
 80049f2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80049f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d104      	bne.n	8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80049fa:	f7fe f8b7 	bl	8002b6c <HAL_RCC_GetPCLK3Freq>
 80049fe:	6378      	str	r0, [r7, #52]	; 0x34
 8004a00:	f000 bf94 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8004a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d104      	bne.n	8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004a0a:	f7fd ff65 	bl	80028d8 <HAL_RCC_GetSysClockFreq>
 8004a0e:	6378      	str	r0, [r7, #52]	; 0x34
 8004a10:	f000 bf8c 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004a14:	4b2b      	ldr	r3, [pc, #172]	; (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a20:	d106      	bne.n	8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8004a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d103      	bne.n	8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 8004a28:	4b27      	ldr	r3, [pc, #156]	; (8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004a2a:	637b      	str	r3, [r7, #52]	; 0x34
 8004a2c:	f000 bf7e 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004a30:	4b24      	ldr	r3, [pc, #144]	; (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d107      	bne.n	8004a4e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8004a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a40:	2b03      	cmp	r3, #3
 8004a42:	d104      	bne.n	8004a4e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 8004a44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a48:	637b      	str	r3, [r7, #52]	; 0x34
 8004a4a:	f000 bf6f 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8004a4e:	4b1d      	ldr	r3, [pc, #116]	; (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0320 	and.w	r3, r3, #32
 8004a56:	2b20      	cmp	r3, #32
 8004a58:	d11b      	bne.n	8004a92 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8004a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5c:	2b04      	cmp	r3, #4
 8004a5e:	d118      	bne.n	8004a92 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004a60:	4b18      	ldr	r3, [pc, #96]	; (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d005      	beq.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 8004a6c:	4b15      	ldr	r3, [pc, #84]	; (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	0e1b      	lsrs	r3, r3, #24
 8004a72:	f003 030f 	and.w	r3, r3, #15
 8004a76:	e006      	b.n	8004a86 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8004a78:	4b12      	ldr	r3, [pc, #72]	; (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a7e:	041b      	lsls	r3, r3, #16
 8004a80:	0e1b      	lsrs	r3, r3, #24
 8004a82:	f003 030f 	and.w	r3, r3, #15
 8004a86:	4a11      	ldr	r2, [pc, #68]	; (8004acc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a8c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a8e:	f000 bf4d 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	637b      	str	r3, [r7, #52]	; 0x34
 8004a96:	f000 bf49 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8004a9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a9e:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8004aa2:	430b      	orrs	r3, r1
 8004aa4:	d172      	bne.n	8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004aa6:	4b07      	ldr	r3, [pc, #28]	; (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004aa8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004aac:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004ab0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ab8:	d10a      	bne.n	8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004aba:	f7fd ff0d 	bl	80028d8 <HAL_RCC_GetSysClockFreq>
 8004abe:	6378      	str	r0, [r7, #52]	; 0x34
 8004ac0:	f000 bf34 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8004ac4:	46020c00 	.word	0x46020c00
 8004ac8:	00f42400 	.word	0x00f42400
 8004acc:	08007058 	.word	0x08007058
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8004ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ad6:	d108      	bne.n	8004aea <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ad8:	f107 0318 	add.w	r3, r7, #24
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7ff f903 	bl	8003ce8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8004ae2:	6a3b      	ldr	r3, [r7, #32]
 8004ae4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ae6:	f000 bf21 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d104      	bne.n	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8004af0:	f7fd fffa 	bl	8002ae8 <HAL_RCC_GetHCLKFreq>
 8004af4:	6378      	str	r0, [r7, #52]	; 0x34
 8004af6:	f000 bf19 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8004afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afc:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004b00:	d122      	bne.n	8004b48 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004b02:	4bb0      	ldr	r3, [pc, #704]	; (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0320 	and.w	r3, r3, #32
 8004b0a:	2b20      	cmp	r3, #32
 8004b0c:	d118      	bne.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004b0e:	4bad      	ldr	r3, [pc, #692]	; (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d005      	beq.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 8004b1a:	4baa      	ldr	r3, [pc, #680]	; (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	0e1b      	lsrs	r3, r3, #24
 8004b20:	f003 030f 	and.w	r3, r3, #15
 8004b24:	e006      	b.n	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8004b26:	4ba7      	ldr	r3, [pc, #668]	; (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004b28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b2c:	041b      	lsls	r3, r3, #16
 8004b2e:	0e1b      	lsrs	r3, r3, #24
 8004b30:	f003 030f 	and.w	r3, r3, #15
 8004b34:	4aa4      	ldr	r2, [pc, #656]	; (8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8004b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b3a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b3c:	f000 bef6 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 8004b40:	2300      	movs	r3, #0
 8004b42:	637b      	str	r3, [r7, #52]	; 0x34
 8004b44:	f000 bef2 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004b48:	4b9e      	ldr	r3, [pc, #632]	; (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b54:	d107      	bne.n	8004b66 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8004b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b58:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b5c:	d103      	bne.n	8004b66 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 8004b5e:	4b9b      	ldr	r3, [pc, #620]	; (8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8004b60:	637b      	str	r3, [r7, #52]	; 0x34
 8004b62:	f000 bee3 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004b66:	4b97      	ldr	r3, [pc, #604]	; (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b72:	d107      	bne.n	8004b84 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8004b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b7a:	d103      	bne.n	8004b84 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 8004b7c:	4b93      	ldr	r3, [pc, #588]	; (8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8004b7e:	637b      	str	r3, [r7, #52]	; 0x34
 8004b80:	f000 bed4 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8004b84:	2300      	movs	r3, #0
 8004b86:	637b      	str	r3, [r7, #52]	; 0x34
 8004b88:	f000 bed0 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8004b8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b90:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8004b94:	430b      	orrs	r3, r1
 8004b96:	d158      	bne.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8004b98:	4b8a      	ldr	r3, [pc, #552]	; (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004b9a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004b9e:	f003 0307 	and.w	r3, r3, #7
 8004ba2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba6:	2b04      	cmp	r3, #4
 8004ba8:	d84b      	bhi.n	8004c42 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 8004baa:	a201      	add	r2, pc, #4	; (adr r2, 8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 8004bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb0:	08004be9 	.word	0x08004be9
 8004bb4:	08004bc5 	.word	0x08004bc5
 8004bb8:	08004bd7 	.word	0x08004bd7
 8004bbc:	08004bf3 	.word	0x08004bf3
 8004bc0:	08004bfd 	.word	0x08004bfd
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004bc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7fe ff25 	bl	8003a18 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004bd2:	f000 beab 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004bd6:	f107 030c 	add.w	r3, r7, #12
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7ff f9ec 	bl	8003fb8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004be4:	f000 bea2 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004be8:	f7fd ff7e 	bl	8002ae8 <HAL_RCC_GetHCLKFreq>
 8004bec:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004bee:	f000 be9d 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004bf2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004bf6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004bf8:	f000 be98 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004bfc:	4b71      	ldr	r3, [pc, #452]	; (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0320 	and.w	r3, r3, #32
 8004c04:	2b20      	cmp	r3, #32
 8004c06:	d118      	bne.n	8004c3a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004c08:	4b6e      	ldr	r3, [pc, #440]	; (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d005      	beq.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8004c14:	4b6b      	ldr	r3, [pc, #428]	; (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	0e1b      	lsrs	r3, r3, #24
 8004c1a:	f003 030f 	and.w	r3, r3, #15
 8004c1e:	e006      	b.n	8004c2e <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8004c20:	4b68      	ldr	r3, [pc, #416]	; (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004c22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c26:	041b      	lsls	r3, r3, #16
 8004c28:	0e1b      	lsrs	r3, r3, #24
 8004c2a:	f003 030f 	and.w	r3, r3, #15
 8004c2e:	4a66      	ldr	r2, [pc, #408]	; (8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8004c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c34:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004c36:	f000 be79 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c3e:	f000 be75 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8004c42:	2300      	movs	r3, #0
 8004c44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c46:	f000 be71 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8004c4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c4e:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8004c52:	430b      	orrs	r3, r1
 8004c54:	d167      	bne.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8004c56:	4b5b      	ldr	r3, [pc, #364]	; (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004c58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c5c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8004c60:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c68:	d036      	beq.n	8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8004c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c70:	d855      	bhi.n	8004d1e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8004c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c74:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c78:	d029      	beq.n	8004cce <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8004c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c80:	d84d      	bhi.n	8004d1e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8004c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c88:	d013      	beq.n	8004cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8004c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c90:	d845      	bhi.n	8004d1e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8004c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d015      	beq.n	8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 8004c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c9e:	d13e      	bne.n	8004d1e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7fe feb7 	bl	8003a18 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004cae:	f000 be3d 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004cb2:	f107 030c 	add.w	r3, r7, #12
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7ff f97e 	bl	8003fb8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004cc0:	f000 be34 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004cc4:	f7fd ff10 	bl	8002ae8 <HAL_RCC_GetHCLKFreq>
 8004cc8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004cca:	f000 be2f 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004cce:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004cd2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004cd4:	f000 be2a 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004cd8:	4b3a      	ldr	r3, [pc, #232]	; (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0320 	and.w	r3, r3, #32
 8004ce0:	2b20      	cmp	r3, #32
 8004ce2:	d118      	bne.n	8004d16 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004ce4:	4b37      	ldr	r3, [pc, #220]	; (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d005      	beq.n	8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8004cf0:	4b34      	ldr	r3, [pc, #208]	; (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	0e1b      	lsrs	r3, r3, #24
 8004cf6:	f003 030f 	and.w	r3, r3, #15
 8004cfa:	e006      	b.n	8004d0a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8004cfc:	4b31      	ldr	r3, [pc, #196]	; (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004cfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d02:	041b      	lsls	r3, r3, #16
 8004d04:	0e1b      	lsrs	r3, r3, #24
 8004d06:	f003 030f 	and.w	r3, r3, #15
 8004d0a:	4a2f      	ldr	r2, [pc, #188]	; (8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8004d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d10:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004d12:	f000 be0b 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004d1a:	f000 be07 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004d22:	f000 be03 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8004d26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d2a:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8004d2e:	430b      	orrs	r3, r1
 8004d30:	d152      	bne.n	8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004d32:	4b24      	ldr	r3, [pc, #144]	; (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d3c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d104      	bne.n	8004d4e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004d44:	f7fd feea 	bl	8002b1c <HAL_RCC_GetPCLK1Freq>
 8004d48:	6378      	str	r0, [r7, #52]	; 0x34
 8004d4a:	f000 bdef 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d54:	d104      	bne.n	8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004d56:	f7fd fdbf 	bl	80028d8 <HAL_RCC_GetSysClockFreq>
 8004d5a:	6378      	str	r0, [r7, #52]	; 0x34
 8004d5c:	f000 bde6 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004d60:	4b18      	ldr	r3, [pc, #96]	; (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d6c:	d107      	bne.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 8004d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d74:	d103      	bne.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 8004d76:	4b15      	ldr	r3, [pc, #84]	; (8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8004d78:	637b      	str	r3, [r7, #52]	; 0x34
 8004d7a:	f000 bdd7 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8004d7e:	4b11      	ldr	r3, [pc, #68]	; (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0320 	and.w	r3, r3, #32
 8004d86:	2b20      	cmp	r3, #32
 8004d88:	d122      	bne.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d90:	d11e      	bne.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004d92:	4b0c      	ldr	r3, [pc, #48]	; (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d005      	beq.n	8004daa <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 8004d9e:	4b09      	ldr	r3, [pc, #36]	; (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	0e1b      	lsrs	r3, r3, #24
 8004da4:	f003 030f 	and.w	r3, r3, #15
 8004da8:	e006      	b.n	8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 8004daa:	4b06      	ldr	r3, [pc, #24]	; (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004dac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004db0:	041b      	lsls	r3, r3, #16
 8004db2:	0e1b      	lsrs	r3, r3, #24
 8004db4:	f003 030f 	and.w	r3, r3, #15
 8004db8:	4a03      	ldr	r2, [pc, #12]	; (8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8004dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dbe:	637b      	str	r3, [r7, #52]	; 0x34
 8004dc0:	f000 bdb4 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8004dc4:	46020c00 	.word	0x46020c00
 8004dc8:	08007058 	.word	0x08007058
 8004dcc:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	637b      	str	r3, [r7, #52]	; 0x34
 8004dd4:	f000 bdaa 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8004dd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ddc:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8004de0:	430b      	orrs	r3, r1
 8004de2:	d14c      	bne.n	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004de4:	4ba8      	ldr	r3, [pc, #672]	; (8005088 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004dea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004dee:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d104      	bne.n	8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004df6:	f7fd fe91 	bl	8002b1c <HAL_RCC_GetPCLK1Freq>
 8004dfa:	6378      	str	r0, [r7, #52]	; 0x34
 8004dfc:	f000 bd96 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8004e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e06:	d104      	bne.n	8004e12 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004e08:	f7fd fd66 	bl	80028d8 <HAL_RCC_GetSysClockFreq>
 8004e0c:	6378      	str	r0, [r7, #52]	; 0x34
 8004e0e:	f000 bd8d 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004e12:	4b9d      	ldr	r3, [pc, #628]	; (8005088 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e1e:	d107      	bne.n	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8004e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e26:	d103      	bne.n	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 8004e28:	4b98      	ldr	r3, [pc, #608]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8004e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8004e2c:	f000 bd7e 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8004e30:	4b95      	ldr	r3, [pc, #596]	; (8005088 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0320 	and.w	r3, r3, #32
 8004e38:	2b20      	cmp	r3, #32
 8004e3a:	d11c      	bne.n	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 8004e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e42:	d118      	bne.n	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004e44:	4b90      	ldr	r3, [pc, #576]	; (8005088 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d005      	beq.n	8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8004e50:	4b8d      	ldr	r3, [pc, #564]	; (8005088 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	0e1b      	lsrs	r3, r3, #24
 8004e56:	f003 030f 	and.w	r3, r3, #15
 8004e5a:	e006      	b.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 8004e5c:	4b8a      	ldr	r3, [pc, #552]	; (8005088 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004e5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e62:	041b      	lsls	r3, r3, #16
 8004e64:	0e1b      	lsrs	r3, r3, #24
 8004e66:	f003 030f 	and.w	r3, r3, #15
 8004e6a:	4a89      	ldr	r2, [pc, #548]	; (8005090 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8004e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e70:	637b      	str	r3, [r7, #52]	; 0x34
 8004e72:	f000 bd5b 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8004e76:	2300      	movs	r3, #0
 8004e78:	637b      	str	r3, [r7, #52]	; 0x34
 8004e7a:	f000 bd57 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8004e7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e82:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8004e86:	430b      	orrs	r3, r1
 8004e88:	d158      	bne.n	8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004e8a:	4b7f      	ldr	r3, [pc, #508]	; (8005088 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004e8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e90:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e94:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e98:	2bc0      	cmp	r3, #192	; 0xc0
 8004e9a:	d028      	beq.n	8004eee <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 8004e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9e:	2bc0      	cmp	r3, #192	; 0xc0
 8004ea0:	d848      	bhi.n	8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8004ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea4:	2b80      	cmp	r3, #128	; 0x80
 8004ea6:	d00e      	beq.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8004ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eaa:	2b80      	cmp	r3, #128	; 0x80
 8004eac:	d842      	bhi.n	8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8004eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d003      	beq.n	8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 8004eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb6:	2b40      	cmp	r3, #64	; 0x40
 8004eb8:	d014      	beq.n	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8004eba:	e03b      	b.n	8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8004ebc:	f7fd fe56 	bl	8002b6c <HAL_RCC_GetPCLK3Freq>
 8004ec0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004ec2:	f000 bd33 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ec6:	4b70      	ldr	r3, [pc, #448]	; (8005088 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ed2:	d103      	bne.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 8004ed4:	4b6d      	ldr	r3, [pc, #436]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8004ed6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004ed8:	f000 bd28 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ee0:	f000 bd24 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8004ee4:	f7fd fcf8 	bl	80028d8 <HAL_RCC_GetSysClockFreq>
 8004ee8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004eea:	f000 bd1f 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004eee:	4b66      	ldr	r3, [pc, #408]	; (8005088 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0320 	and.w	r3, r3, #32
 8004ef6:	2b20      	cmp	r3, #32
 8004ef8:	d118      	bne.n	8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004efa:	4b63      	ldr	r3, [pc, #396]	; (8005088 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d005      	beq.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 8004f06:	4b60      	ldr	r3, [pc, #384]	; (8005088 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	0e1b      	lsrs	r3, r3, #24
 8004f0c:	f003 030f 	and.w	r3, r3, #15
 8004f10:	e006      	b.n	8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 8004f12:	4b5d      	ldr	r3, [pc, #372]	; (8005088 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004f14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f18:	041b      	lsls	r3, r3, #16
 8004f1a:	0e1b      	lsrs	r3, r3, #24
 8004f1c:	f003 030f 	and.w	r3, r3, #15
 8004f20:	4a5b      	ldr	r2, [pc, #364]	; (8005090 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8004f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f26:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004f28:	f000 bd00 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f30:	f000 bcfc 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      default:
      {
        frequency = 0U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f38:	f000 bcf8 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8004f3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f40:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8004f44:	430b      	orrs	r3, r1
 8004f46:	d14c      	bne.n	8004fe2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004f48:	4b4f      	ldr	r3, [pc, #316]	; (8005088 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f4e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f52:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8004f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d104      	bne.n	8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004f5a:	f7fd fddf 	bl	8002b1c <HAL_RCC_GetPCLK1Freq>
 8004f5e:	6378      	str	r0, [r7, #52]	; 0x34
 8004f60:	f000 bce4 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8004f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f6a:	d104      	bne.n	8004f76 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004f6c:	f7fd fcb4 	bl	80028d8 <HAL_RCC_GetSysClockFreq>
 8004f70:	6378      	str	r0, [r7, #52]	; 0x34
 8004f72:	f000 bcdb 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8004f76:	4b44      	ldr	r3, [pc, #272]	; (8005088 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f82:	d107      	bne.n	8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 8004f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f8a:	d103      	bne.n	8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 8004f8c:	4b3f      	ldr	r3, [pc, #252]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8004f8e:	637b      	str	r3, [r7, #52]	; 0x34
 8004f90:	f000 bccc 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8004f94:	4b3c      	ldr	r3, [pc, #240]	; (8005088 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0320 	and.w	r3, r3, #32
 8004f9c:	2b20      	cmp	r3, #32
 8004f9e:	d11c      	bne.n	8004fda <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8004fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004fa6:	d118      	bne.n	8004fda <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004fa8:	4b37      	ldr	r3, [pc, #220]	; (8005088 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d005      	beq.n	8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8004fb4:	4b34      	ldr	r3, [pc, #208]	; (8005088 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	0e1b      	lsrs	r3, r3, #24
 8004fba:	f003 030f 	and.w	r3, r3, #15
 8004fbe:	e006      	b.n	8004fce <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8004fc0:	4b31      	ldr	r3, [pc, #196]	; (8005088 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004fc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004fc6:	041b      	lsls	r3, r3, #16
 8004fc8:	0e1b      	lsrs	r3, r3, #24
 8004fca:	f003 030f 	and.w	r3, r3, #15
 8004fce:	4a30      	ldr	r2, [pc, #192]	; (8005090 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8004fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fd4:	637b      	str	r3, [r7, #52]	; 0x34
 8004fd6:	f000 bca9 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	637b      	str	r3, [r7, #52]	; 0x34
 8004fde:	f000 bca5 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 8004fe2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fe6:	f102 4140 	add.w	r1, r2, #3221225472	; 0xc0000000
 8004fea:	430b      	orrs	r3, r1
 8004fec:	d152      	bne.n	8005094 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 8004fee:	4b26      	ldr	r3, [pc, #152]	; (8005088 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004ff0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004ff4:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8004ff8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d104      	bne.n	800500a <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005000:	f7fd fd8c 	bl	8002b1c <HAL_RCC_GetPCLK1Freq>
 8005004:	6378      	str	r0, [r7, #52]	; 0x34
 8005006:	f000 bc91 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800500a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005010:	d104      	bne.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005012:	f7fd fc61 	bl	80028d8 <HAL_RCC_GetSysClockFreq>
 8005016:	6378      	str	r0, [r7, #52]	; 0x34
 8005018:	f000 bc88 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800501c:	4b1a      	ldr	r3, [pc, #104]	; (8005088 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005028:	d107      	bne.n	800503a <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800502a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005030:	d103      	bne.n	800503a <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 8005032:	4b16      	ldr	r3, [pc, #88]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8005034:	637b      	str	r3, [r7, #52]	; 0x34
 8005036:	f000 bc79 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800503a:	4b13      	ldr	r3, [pc, #76]	; (8005088 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0320 	and.w	r3, r3, #32
 8005042:	2b20      	cmp	r3, #32
 8005044:	d11c      	bne.n	8005080 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8005046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005048:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800504c:	d118      	bne.n	8005080 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800504e:	4b0e      	ldr	r3, [pc, #56]	; (8005088 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d005      	beq.n	8005066 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800505a:	4b0b      	ldr	r3, [pc, #44]	; (8005088 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	0e1b      	lsrs	r3, r3, #24
 8005060:	f003 030f 	and.w	r3, r3, #15
 8005064:	e006      	b.n	8005074 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 8005066:	4b08      	ldr	r3, [pc, #32]	; (8005088 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005068:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800506c:	041b      	lsls	r3, r3, #16
 800506e:	0e1b      	lsrs	r3, r3, #24
 8005070:	f003 030f 	and.w	r3, r3, #15
 8005074:	4a06      	ldr	r2, [pc, #24]	; (8005090 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8005076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800507a:	637b      	str	r3, [r7, #52]	; 0x34
 800507c:	f000 bc56 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 8005080:	2300      	movs	r3, #0
 8005082:	637b      	str	r3, [r7, #52]	; 0x34
 8005084:	f000 bc52 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8005088:	46020c00 	.word	0x46020c00
 800508c:	00f42400 	.word	0x00f42400
 8005090:	08007058 	.word	0x08007058
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 8005094:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005098:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 800509c:	430b      	orrs	r3, r1
 800509e:	d14a      	bne.n	8005136 <HAL_RCCEx_GetPeriphCLKFreq+0xeae>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 80050a0:	4ba5      	ldr	r3, [pc, #660]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80050a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80050a6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80050aa:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 80050ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d104      	bne.n	80050bc <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80050b2:	f7fd fd33 	bl	8002b1c <HAL_RCC_GetPCLK1Freq>
 80050b6:	6378      	str	r0, [r7, #52]	; 0x34
 80050b8:	f000 bc38 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 80050bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050c2:	d104      	bne.n	80050ce <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80050c4:	f7fd fc08 	bl	80028d8 <HAL_RCC_GetSysClockFreq>
 80050c8:	6378      	str	r0, [r7, #52]	; 0x34
 80050ca:	f000 bc2f 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 80050ce:	4b9a      	ldr	r3, [pc, #616]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050da:	d107      	bne.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80050dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050e2:	d103      	bne.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 80050e4:	4b95      	ldr	r3, [pc, #596]	; (800533c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80050e6:	637b      	str	r3, [r7, #52]	; 0x34
 80050e8:	f000 bc20 	b.w	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 80050ec:	4b92      	ldr	r3, [pc, #584]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0320 	and.w	r3, r3, #32
 80050f4:	2b20      	cmp	r3, #32
 80050f6:	d11b      	bne.n	8005130 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 80050f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80050fe:	d117      	bne.n	8005130 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005100:	4b8d      	ldr	r3, [pc, #564]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d005      	beq.n	8005118 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800510c:	4b8a      	ldr	r3, [pc, #552]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	0e1b      	lsrs	r3, r3, #24
 8005112:	f003 030f 	and.w	r3, r3, #15
 8005116:	e006      	b.n	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 8005118:	4b87      	ldr	r3, [pc, #540]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800511a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800511e:	041b      	lsls	r3, r3, #16
 8005120:	0e1b      	lsrs	r3, r3, #24
 8005122:	f003 030f 	and.w	r3, r3, #15
 8005126:	4a86      	ldr	r2, [pc, #536]	; (8005340 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8005128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800512c:	637b      	str	r3, [r7, #52]	; 0x34
 800512e:	e3fd      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 8005130:	2300      	movs	r3, #0
 8005132:	637b      	str	r3, [r7, #52]	; 0x34
 8005134:	e3fa      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8005136:	e9d7 2300 	ldrd	r2, r3, [r7]
 800513a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800513e:	430b      	orrs	r3, r1
 8005140:	d164      	bne.n	800520c <HAL_RCCEx_GetPeriphCLKFreq+0xf84>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8005142:	4b7d      	ldr	r3, [pc, #500]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005144:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005148:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800514c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800514e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005150:	2b00      	cmp	r3, #0
 8005152:	d120      	bne.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0xf0e>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005154:	4b78      	ldr	r3, [pc, #480]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0320 	and.w	r3, r3, #32
 800515c:	2b20      	cmp	r3, #32
 800515e:	d117      	bne.n	8005190 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005160:	4b75      	ldr	r3, [pc, #468]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d005      	beq.n	8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xef0>
 800516c:	4b72      	ldr	r3, [pc, #456]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	0e1b      	lsrs	r3, r3, #24
 8005172:	f003 030f 	and.w	r3, r3, #15
 8005176:	e006      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
 8005178:	4b6f      	ldr	r3, [pc, #444]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800517a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800517e:	041b      	lsls	r3, r3, #16
 8005180:	0e1b      	lsrs	r3, r3, #24
 8005182:	f003 030f 	and.w	r3, r3, #15
 8005186:	4a6e      	ldr	r2, [pc, #440]	; (8005340 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8005188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800518c:	637b      	str	r3, [r7, #52]	; 0x34
 800518e:	e3cd      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 8005190:	2300      	movs	r3, #0
 8005192:	637b      	str	r3, [r7, #52]	; 0x34
 8005194:	e3ca      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8005196:	4b68      	ldr	r3, [pc, #416]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005198:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800519c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051a4:	d112      	bne.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
 80051a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ac:	d10e      	bne.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80051ae:	4b62      	ldr	r3, [pc, #392]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80051b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051bc:	d102      	bne.n	80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
      {
        frequency = LSI_VALUE / 128U;
 80051be:	23fa      	movs	r3, #250	; 0xfa
 80051c0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80051c2:	e3b3      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 80051c4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80051c8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80051ca:	e3af      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80051cc:	4b5a      	ldr	r3, [pc, #360]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051d8:	d106      	bne.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 80051da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051e0:	d102      	bne.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
    {
      frequency = HSI_VALUE;
 80051e2:	4b56      	ldr	r3, [pc, #344]	; (800533c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80051e4:	637b      	str	r3, [r7, #52]	; 0x34
 80051e6:	e3a1      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80051e8:	4b53      	ldr	r3, [pc, #332]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80051ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d107      	bne.n	8005206 <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
 80051f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051fc:	d103      	bne.n	8005206 <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
    {
      frequency = LSE_VALUE;
 80051fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005202:	637b      	str	r3, [r7, #52]	; 0x34
 8005204:	e392      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8005206:	2300      	movs	r3, #0
 8005208:	637b      	str	r3, [r7, #52]	; 0x34
 800520a:	e38f      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800520c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005210:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8005214:	430b      	orrs	r3, r1
 8005216:	d164      	bne.n	80052e2 <HAL_RCCEx_GetPeriphCLKFreq+0x105a>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005218:	4b47      	ldr	r3, [pc, #284]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800521a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800521e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005222:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8005224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005226:	2b00      	cmp	r3, #0
 8005228:	d120      	bne.n	800526c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800522a:	4b43      	ldr	r3, [pc, #268]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0320 	and.w	r3, r3, #32
 8005232:	2b20      	cmp	r3, #32
 8005234:	d117      	bne.n	8005266 <HAL_RCCEx_GetPeriphCLKFreq+0xfde>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005236:	4b40      	ldr	r3, [pc, #256]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d005      	beq.n	800524e <HAL_RCCEx_GetPeriphCLKFreq+0xfc6>
 8005242:	4b3d      	ldr	r3, [pc, #244]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	0e1b      	lsrs	r3, r3, #24
 8005248:	f003 030f 	and.w	r3, r3, #15
 800524c:	e006      	b.n	800525c <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 800524e:	4b3a      	ldr	r3, [pc, #232]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005250:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005254:	041b      	lsls	r3, r3, #16
 8005256:	0e1b      	lsrs	r3, r3, #24
 8005258:	f003 030f 	and.w	r3, r3, #15
 800525c:	4a38      	ldr	r2, [pc, #224]	; (8005340 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800525e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005262:	637b      	str	r3, [r7, #52]	; 0x34
 8005264:	e362      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 8005266:	2300      	movs	r3, #0
 8005268:	637b      	str	r3, [r7, #52]	; 0x34
 800526a:	e35f      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800526c:	4b32      	ldr	r3, [pc, #200]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800526e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005272:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005276:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800527a:	d112      	bne.n	80052a2 <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
 800527c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005282:	d10e      	bne.n	80052a2 <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005284:	4b2c      	ldr	r3, [pc, #176]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005286:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800528a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800528e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005292:	d102      	bne.n	800529a <HAL_RCCEx_GetPeriphCLKFreq+0x1012>
      {
        frequency = LSI_VALUE / 128U;
 8005294:	23fa      	movs	r3, #250	; 0xfa
 8005296:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005298:	e348      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 800529a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800529e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80052a0:	e344      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80052a2:	4b25      	ldr	r3, [pc, #148]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ae:	d106      	bne.n	80052be <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
 80052b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052b6:	d102      	bne.n	80052be <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
    {
      frequency = HSI_VALUE;
 80052b8:	4b20      	ldr	r3, [pc, #128]	; (800533c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80052ba:	637b      	str	r3, [r7, #52]	; 0x34
 80052bc:	e336      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80052be:	4b1e      	ldr	r3, [pc, #120]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80052c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052c4:	f003 0302 	and.w	r3, r3, #2
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d107      	bne.n	80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
 80052cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052d2:	d103      	bne.n	80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
    {
      frequency = LSE_VALUE;
 80052d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052d8:	637b      	str	r3, [r7, #52]	; 0x34
 80052da:	e327      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80052dc:	2300      	movs	r3, #0
 80052de:	637b      	str	r3, [r7, #52]	; 0x34
 80052e0:	e324      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80052e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052e6:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80052ea:	430b      	orrs	r3, r1
 80052ec:	d14e      	bne.n	800538c <HAL_RCCEx_GetPeriphCLKFreq+0x1104>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80052ee:	4b12      	ldr	r3, [pc, #72]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80052f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052f4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80052f8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80052fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d103      	bne.n	8005308 <HAL_RCCEx_GetPeriphCLKFreq+0x1080>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005300:	f7fd fc0c 	bl	8002b1c <HAL_RCC_GetPCLK1Freq>
 8005304:	6378      	str	r0, [r7, #52]	; 0x34
 8005306:	e311      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8005308:	4b0b      	ldr	r3, [pc, #44]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800530a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800530e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005312:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005316:	d119      	bne.n	800534c <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 8005318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800531e:	d115      	bne.n	800534c <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005320:	4b05      	ldr	r3, [pc, #20]	; (8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005322:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800532a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800532e:	d109      	bne.n	8005344 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>
      {
        frequency = LSI_VALUE / 128U;
 8005330:	23fa      	movs	r3, #250	; 0xfa
 8005332:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005334:	e2fa      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8005336:	bf00      	nop
 8005338:	46020c00 	.word	0x46020c00
 800533c:	00f42400 	.word	0x00f42400
 8005340:	08007058 	.word	0x08007058
      }
      else
      {
        frequency = LSI_VALUE;
 8005344:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005348:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800534a:	e2ef      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800534c:	4ba8      	ldr	r3, [pc, #672]	; (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005358:	d106      	bne.n	8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
 800535a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005360:	d102      	bne.n	8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
    {
      frequency = HSI_VALUE;
 8005362:	4ba4      	ldr	r3, [pc, #656]	; (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8005364:	637b      	str	r3, [r7, #52]	; 0x34
 8005366:	e2e1      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8005368:	4ba1      	ldr	r3, [pc, #644]	; (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800536a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b02      	cmp	r3, #2
 8005374:	d107      	bne.n	8005386 <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
 8005376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005378:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800537c:	d103      	bne.n	8005386 <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
    {
      frequency = LSE_VALUE;
 800537e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005382:	637b      	str	r3, [r7, #52]	; 0x34
 8005384:	e2d2      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8005386:	2300      	movs	r3, #0
 8005388:	637b      	str	r3, [r7, #52]	; 0x34
 800538a:	e2cf      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800538c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005390:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8005394:	430b      	orrs	r3, r1
 8005396:	d12d      	bne.n	80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8005398:	4b95      	ldr	r3, [pc, #596]	; (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800539a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800539e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80053a2:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80053a4:	4b92      	ldr	r3, [pc, #584]	; (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053b0:	d105      	bne.n	80053be <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
 80053b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d102      	bne.n	80053be <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
    {
      frequency = HSE_VALUE;
 80053b8:	4b8e      	ldr	r3, [pc, #568]	; (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80053ba:	637b      	str	r3, [r7, #52]	; 0x34
 80053bc:	e2b6      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80053be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053c4:	d107      	bne.n	80053d6 <HAL_RCCEx_GetPeriphCLKFreq+0x114e>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80053c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7fe fb24 	bl	8003a18 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80053d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d2:	637b      	str	r3, [r7, #52]	; 0x34
 80053d4:	e2aa      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80053d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053dc:	d107      	bne.n	80053ee <HAL_RCCEx_GetPeriphCLKFreq+0x1166>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053de:	f107 0318 	add.w	r3, r7, #24
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fe fc80 	bl	8003ce8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	637b      	str	r3, [r7, #52]	; 0x34
 80053ec:	e29e      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80053ee:	2300      	movs	r3, #0
 80053f0:	637b      	str	r3, [r7, #52]	; 0x34
 80053f2:	e29b      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80053f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053f8:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 80053fc:	430b      	orrs	r3, r1
 80053fe:	d156      	bne.n	80054ae <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8005400:	4b7b      	ldr	r3, [pc, #492]	; (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005406:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800540a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800540c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005412:	d028      	beq.n	8005466 <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
 8005414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005416:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800541a:	d845      	bhi.n	80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 800541c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005422:	d013      	beq.n	800544c <HAL_RCCEx_GetPeriphCLKFreq+0x11c4>
 8005424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005426:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800542a:	d83d      	bhi.n	80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 800542c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542e:	2b00      	cmp	r3, #0
 8005430:	d004      	beq.n	800543c <HAL_RCCEx_GetPeriphCLKFreq+0x11b4>
 8005432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005434:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005438:	d004      	beq.n	8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x11bc>
 800543a:	e035      	b.n	80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800543c:	f7fd fb82 	bl	8002b44 <HAL_RCC_GetPCLK2Freq>
 8005440:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005442:	e273      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005444:	f7fd fa48 	bl	80028d8 <HAL_RCC_GetSysClockFreq>
 8005448:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800544a:	e26f      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800544c:	4b68      	ldr	r3, [pc, #416]	; (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005458:	d102      	bne.n	8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        {
          frequency = HSI_VALUE;
 800545a:	4b66      	ldr	r3, [pc, #408]	; (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800545c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800545e:	e265      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8005460:	2300      	movs	r3, #0
 8005462:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005464:	e262      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005466:	4b62      	ldr	r3, [pc, #392]	; (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0320 	and.w	r3, r3, #32
 800546e:	2b20      	cmp	r3, #32
 8005470:	d117      	bne.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x121a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005472:	4b5f      	ldr	r3, [pc, #380]	; (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d005      	beq.n	800548a <HAL_RCCEx_GetPeriphCLKFreq+0x1202>
 800547e:	4b5c      	ldr	r3, [pc, #368]	; (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	0e1b      	lsrs	r3, r3, #24
 8005484:	f003 030f 	and.w	r3, r3, #15
 8005488:	e006      	b.n	8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x1210>
 800548a:	4b59      	ldr	r3, [pc, #356]	; (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800548c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005490:	041b      	lsls	r3, r3, #16
 8005492:	0e1b      	lsrs	r3, r3, #24
 8005494:	f003 030f 	and.w	r3, r3, #15
 8005498:	4a57      	ldr	r2, [pc, #348]	; (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800549a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800549e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80054a0:	e244      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80054a2:	2300      	movs	r3, #0
 80054a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054a6:	e241      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80054a8:	2300      	movs	r3, #0
 80054aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054ac:	e23e      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80054ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054b2:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 80054b6:	430b      	orrs	r3, r1
 80054b8:	d156      	bne.n	8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80054ba:	4b4d      	ldr	r3, [pc, #308]	; (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80054bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80054c4:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80054c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80054cc:	d028      	beq.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>
 80054ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80054d4:	d845      	bhi.n	8005562 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 80054d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054dc:	d013      	beq.n	8005506 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 80054de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054e4:	d83d      	bhi.n	8005562 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 80054e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d004      	beq.n	80054f6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 80054ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054f2:	d004      	beq.n	80054fe <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 80054f4:	e035      	b.n	8005562 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80054f6:	f7fd fb11 	bl	8002b1c <HAL_RCC_GetPCLK1Freq>
 80054fa:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80054fc:	e216      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80054fe:	f7fd f9eb 	bl	80028d8 <HAL_RCC_GetSysClockFreq>
 8005502:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005504:	e212      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005506:	4b3a      	ldr	r3, [pc, #232]	; (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800550e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005512:	d102      	bne.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
        {
          frequency = HSI_VALUE;
 8005514:	4b37      	ldr	r3, [pc, #220]	; (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8005516:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005518:	e208      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800551a:	2300      	movs	r3, #0
 800551c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800551e:	e205      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005520:	4b33      	ldr	r3, [pc, #204]	; (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0320 	and.w	r3, r3, #32
 8005528:	2b20      	cmp	r3, #32
 800552a:	d117      	bne.n	800555c <HAL_RCCEx_GetPeriphCLKFreq+0x12d4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800552c:	4b30      	ldr	r3, [pc, #192]	; (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d005      	beq.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x12bc>
 8005538:	4b2d      	ldr	r3, [pc, #180]	; (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	0e1b      	lsrs	r3, r3, #24
 800553e:	f003 030f 	and.w	r3, r3, #15
 8005542:	e006      	b.n	8005552 <HAL_RCCEx_GetPeriphCLKFreq+0x12ca>
 8005544:	4b2a      	ldr	r3, [pc, #168]	; (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005546:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800554a:	041b      	lsls	r3, r3, #16
 800554c:	0e1b      	lsrs	r3, r3, #24
 800554e:	f003 030f 	and.w	r3, r3, #15
 8005552:	4a29      	ldr	r2, [pc, #164]	; (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8005554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005558:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800555a:	e1e7      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800555c:	2300      	movs	r3, #0
 800555e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005560:	e1e4      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8005562:	2300      	movs	r3, #0
 8005564:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005566:	e1e1      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8005568:	e9d7 2300 	ldrd	r2, r3, [r7]
 800556c:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8005570:	430b      	orrs	r3, r1
 8005572:	d17c      	bne.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8005574:	4b1e      	ldr	r3, [pc, #120]	; (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005576:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800557a:	f003 0318 	and.w	r3, r3, #24
 800557e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005582:	2b18      	cmp	r3, #24
 8005584:	d870      	bhi.n	8005668 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>
 8005586:	a201      	add	r2, pc, #4	; (adr r2, 800558c <HAL_RCCEx_GetPeriphCLKFreq+0x1304>)
 8005588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558c:	080055fd 	.word	0x080055fd
 8005590:	08005669 	.word	0x08005669
 8005594:	08005669 	.word	0x08005669
 8005598:	08005669 	.word	0x08005669
 800559c:	08005669 	.word	0x08005669
 80055a0:	08005669 	.word	0x08005669
 80055a4:	08005669 	.word	0x08005669
 80055a8:	08005669 	.word	0x08005669
 80055ac:	08005605 	.word	0x08005605
 80055b0:	08005669 	.word	0x08005669
 80055b4:	08005669 	.word	0x08005669
 80055b8:	08005669 	.word	0x08005669
 80055bc:	08005669 	.word	0x08005669
 80055c0:	08005669 	.word	0x08005669
 80055c4:	08005669 	.word	0x08005669
 80055c8:	08005669 	.word	0x08005669
 80055cc:	0800560d 	.word	0x0800560d
 80055d0:	08005669 	.word	0x08005669
 80055d4:	08005669 	.word	0x08005669
 80055d8:	08005669 	.word	0x08005669
 80055dc:	08005669 	.word	0x08005669
 80055e0:	08005669 	.word	0x08005669
 80055e4:	08005669 	.word	0x08005669
 80055e8:	08005669 	.word	0x08005669
 80055ec:	08005627 	.word	0x08005627
 80055f0:	46020c00 	.word	0x46020c00
 80055f4:	00f42400 	.word	0x00f42400
 80055f8:	08007058 	.word	0x08007058
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80055fc:	f7fd fab6 	bl	8002b6c <HAL_RCC_GetPCLK3Freq>
 8005600:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005602:	e193      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005604:	f7fd f968 	bl	80028d8 <HAL_RCC_GetSysClockFreq>
 8005608:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800560a:	e18f      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800560c:	4b9f      	ldr	r3, [pc, #636]	; (800588c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005618:	d102      	bne.n	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
        {
          frequency = HSI_VALUE;
 800561a:	4b9d      	ldr	r3, [pc, #628]	; (8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800561c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800561e:	e185      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8005620:	2300      	movs	r3, #0
 8005622:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005624:	e182      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005626:	4b99      	ldr	r3, [pc, #612]	; (800588c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0320 	and.w	r3, r3, #32
 800562e:	2b20      	cmp	r3, #32
 8005630:	d117      	bne.n	8005662 <HAL_RCCEx_GetPeriphCLKFreq+0x13da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005632:	4b96      	ldr	r3, [pc, #600]	; (800588c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d005      	beq.n	800564a <HAL_RCCEx_GetPeriphCLKFreq+0x13c2>
 800563e:	4b93      	ldr	r3, [pc, #588]	; (800588c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	0e1b      	lsrs	r3, r3, #24
 8005644:	f003 030f 	and.w	r3, r3, #15
 8005648:	e006      	b.n	8005658 <HAL_RCCEx_GetPeriphCLKFreq+0x13d0>
 800564a:	4b90      	ldr	r3, [pc, #576]	; (800588c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800564c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005650:	041b      	lsls	r3, r3, #16
 8005652:	0e1b      	lsrs	r3, r3, #24
 8005654:	f003 030f 	and.w	r3, r3, #15
 8005658:	4a8e      	ldr	r2, [pc, #568]	; (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800565a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800565e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005660:	e164      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8005662:	2300      	movs	r3, #0
 8005664:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005666:	e161      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8005668:	2300      	movs	r3, #0
 800566a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800566c:	e15e      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800566e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005672:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8005676:	430b      	orrs	r3, r1
 8005678:	d155      	bne.n	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0x149e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800567a:	4b84      	ldr	r3, [pc, #528]	; (800588c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800567c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005680:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005684:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005688:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800568c:	d013      	beq.n	80056b6 <HAL_RCCEx_GetPeriphCLKFreq+0x142e>
 800568e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005690:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005694:	d844      	bhi.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 8005696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005698:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800569c:	d013      	beq.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
 800569e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056a4:	d83c      	bhi.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 80056a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d014      	beq.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x144e>
 80056ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056b2:	d014      	beq.n	80056de <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 80056b4:	e034      	b.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056b6:	f107 0318 	add.w	r3, r7, #24
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7fe fb14 	bl	8003ce8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056c4:	e132      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80056c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7fe f9a4 	bl	8003a18 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80056d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056d4:	e12a      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80056d6:	f7fd f8ff 	bl	80028d8 <HAL_RCC_GetSysClockFreq>
 80056da:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80056dc:	e126      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80056de:	4b6b      	ldr	r3, [pc, #428]	; (800588c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0320 	and.w	r3, r3, #32
 80056e6:	2b20      	cmp	r3, #32
 80056e8:	d117      	bne.n	800571a <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80056ea:	4b68      	ldr	r3, [pc, #416]	; (800588c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d005      	beq.n	8005702 <HAL_RCCEx_GetPeriphCLKFreq+0x147a>
 80056f6:	4b65      	ldr	r3, [pc, #404]	; (800588c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	0e1b      	lsrs	r3, r3, #24
 80056fc:	f003 030f 	and.w	r3, r3, #15
 8005700:	e006      	b.n	8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x1488>
 8005702:	4b62      	ldr	r3, [pc, #392]	; (800588c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005704:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005708:	041b      	lsls	r3, r3, #16
 800570a:	0e1b      	lsrs	r3, r3, #24
 800570c:	f003 030f 	and.w	r3, r3, #15
 8005710:	4a60      	ldr	r2, [pc, #384]	; (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8005712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005716:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005718:	e108      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800571a:	2300      	movs	r3, #0
 800571c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800571e:	e105      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8005720:	2300      	movs	r3, #0
 8005722:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005724:	e102      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 8005726:	e9d7 2300 	ldrd	r2, r3, [r7]
 800572a:	1e59      	subs	r1, r3, #1
 800572c:	ea52 0301 	orrs.w	r3, r2, r1
 8005730:	d13c      	bne.n	80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 8005732:	4b56      	ldr	r3, [pc, #344]	; (800588c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005734:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005738:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800573c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800573e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005740:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005744:	d027      	beq.n	8005796 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 8005746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005748:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800574c:	d82b      	bhi.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 800574e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005750:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005754:	d017      	beq.n	8005786 <HAL_RCCEx_GetPeriphCLKFreq+0x14fe>
 8005756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005758:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800575c:	d823      	bhi.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 800575e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005760:	2b00      	cmp	r3, #0
 8005762:	d004      	beq.n	800576e <HAL_RCCEx_GetPeriphCLKFreq+0x14e6>
 8005764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005766:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800576a:	d004      	beq.n	8005776 <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 800576c:	e01b      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800576e:	f7fd f8b3 	bl	80028d8 <HAL_RCC_GetSysClockFreq>
 8005772:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005774:	e0da      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800577a:	4618      	mov	r0, r3
 800577c:	f7fe f94c 	bl	8003a18 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005782:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005784:	e0d2      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005786:	f107 0318 	add.w	r3, r7, #24
 800578a:	4618      	mov	r0, r3
 800578c:	f7fe faac 	bl	8003ce8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005794:	e0ca      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005796:	f107 030c 	add.w	r3, r7, #12
 800579a:	4618      	mov	r0, r3
 800579c:	f7fe fc0c 	bl	8003fb8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80057a4:	e0c2      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80057a6:	2300      	movs	r3, #0
 80057a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80057aa:	e0bf      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80057ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057b0:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 80057b4:	430b      	orrs	r3, r1
 80057b6:	d131      	bne.n	800581c <HAL_RCCEx_GetPeriphCLKFreq+0x1594>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80057b8:	4b34      	ldr	r3, [pc, #208]	; (800588c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80057ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80057be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057c2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80057c4:	4b31      	ldr	r3, [pc, #196]	; (800588c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80057c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d106      	bne.n	80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
 80057d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d103      	bne.n	80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
    {
      frequency = LSE_VALUE;
 80057d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057dc:	637b      	str	r3, [r7, #52]	; 0x34
 80057de:	e0a5      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80057e0:	4b2a      	ldr	r3, [pc, #168]	; (800588c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80057e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80057e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057ee:	d112      	bne.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
 80057f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057f6:	d10e      	bne.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80057f8:	4b24      	ldr	r3, [pc, #144]	; (800588c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80057fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80057fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005802:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005806:	d102      	bne.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
      {
        frequency = LSI_VALUE / 128U;
 8005808:	23fa      	movs	r3, #250	; 0xfa
 800580a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800580c:	e08e      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 800580e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005812:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005814:	e08a      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8005816:	2300      	movs	r3, #0
 8005818:	637b      	str	r3, [r7, #52]	; 0x34
 800581a:	e087      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800581c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005820:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8005824:	430b      	orrs	r3, r1
 8005826:	d13b      	bne.n	80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005828:	4b18      	ldr	r3, [pc, #96]	; (800588c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800582a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800582e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005832:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8005834:	4b15      	ldr	r3, [pc, #84]	; (800588c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800583c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005840:	d105      	bne.n	800584e <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
 8005842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005844:	2b00      	cmp	r3, #0
 8005846:	d102      	bne.n	800584e <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
    {
      frequency = HSI48_VALUE;
 8005848:	4b13      	ldr	r3, [pc, #76]	; (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800584a:	637b      	str	r3, [r7, #52]	; 0x34
 800584c:	e06e      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800584e:	4b0f      	ldr	r3, [pc, #60]	; (800588c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800585a:	d106      	bne.n	800586a <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
 800585c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005862:	d102      	bne.n	800586a <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
    {
      frequency = HSI48_VALUE >> 1U ;
 8005864:	4b0d      	ldr	r3, [pc, #52]	; (800589c <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 8005866:	637b      	str	r3, [r7, #52]	; 0x34
 8005868:	e060      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800586a:	4b08      	ldr	r3, [pc, #32]	; (800588c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005876:	d106      	bne.n	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
 8005878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800587e:	d102      	bne.n	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
    {
      frequency = HSI_VALUE;
 8005880:	4b03      	ldr	r3, [pc, #12]	; (8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8005882:	637b      	str	r3, [r7, #52]	; 0x34
 8005884:	e052      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8005886:	2300      	movs	r3, #0
 8005888:	637b      	str	r3, [r7, #52]	; 0x34
 800588a:	e04f      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800588c:	46020c00 	.word	0x46020c00
 8005890:	00f42400 	.word	0x00f42400
 8005894:	08007058 	.word	0x08007058
 8005898:	02dc6c00 	.word	0x02dc6c00
 800589c:	016e3600 	.word	0x016e3600
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 80058a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058a4:	f1a3 0108 	sub.w	r1, r3, #8
 80058a8:	ea52 0301 	orrs.w	r3, r2, r1
 80058ac:	d13c      	bne.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 80058ae:	4b22      	ldr	r3, [pc, #136]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 80058b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80058b4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80058b8:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 80058ba:	4b1f      	ldr	r3, [pc, #124]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058c6:	d105      	bne.n	80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
 80058c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d102      	bne.n	80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    {
      frequency = HSE_VALUE;
 80058ce:	4b1b      	ldr	r3, [pc, #108]	; (800593c <HAL_RCCEx_GetPeriphCLKFreq+0x16b4>)
 80058d0:	637b      	str	r3, [r7, #52]	; 0x34
 80058d2:	e02b      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 80058d4:	4b18      	ldr	r3, [pc, #96]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058e0:	d106      	bne.n	80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
 80058e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058e8:	d102      	bne.n	80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
    {
      frequency = HSE_VALUE >> 1U ;
 80058ea:	4b15      	ldr	r3, [pc, #84]	; (8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 80058ec:	637b      	str	r3, [r7, #52]	; 0x34
 80058ee:	e01d      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 80058f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058f6:	d107      	bne.n	8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x1680>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80058f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7fe f88b 	bl	8003a18 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8005902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005904:	637b      	str	r3, [r7, #52]	; 0x34
 8005906:	e011      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 8005908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590a:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800590e:	d108      	bne.n	8005922 <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005914:	4618      	mov	r0, r3
 8005916:	f7fe f87f 	bl	8003a18 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591c:	085b      	lsrs	r3, r3, #1
 800591e:	637b      	str	r3, [r7, #52]	; 0x34
 8005920:	e004      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 8005922:	2300      	movs	r3, #0
 8005924:	637b      	str	r3, [r7, #52]	; 0x34
 8005926:	e001      	b.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8005928:	2300      	movs	r3, #0
 800592a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800592c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800592e:	4618      	mov	r0, r3
 8005930:	3738      	adds	r7, #56	; 0x38
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	46020c00 	.word	0x46020c00
 800593c:	00f42400 	.word	0x00f42400
 8005940:	007a1200 	.word	0x007a1200

08005944 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800594c:	4b47      	ldr	r3, [pc, #284]	; (8005a6c <RCCEx_PLL2_Config+0x128>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a46      	ldr	r2, [pc, #280]	; (8005a6c <RCCEx_PLL2_Config+0x128>)
 8005952:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005956:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005958:	f7fb fac0 	bl	8000edc <HAL_GetTick>
 800595c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800595e:	e008      	b.n	8005972 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005960:	f7fb fabc 	bl	8000edc <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	2b02      	cmp	r3, #2
 800596c:	d901      	bls.n	8005972 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e077      	b.n	8005a62 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005972:	4b3e      	ldr	r3, [pc, #248]	; (8005a6c <RCCEx_PLL2_Config+0x128>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1f0      	bne.n	8005960 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800597e:	4b3b      	ldr	r3, [pc, #236]	; (8005a6c <RCCEx_PLL2_Config+0x128>)
 8005980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005982:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005986:	f023 0303 	bic.w	r3, r3, #3
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	6811      	ldr	r1, [r2, #0]
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	6852      	ldr	r2, [r2, #4]
 8005992:	3a01      	subs	r2, #1
 8005994:	0212      	lsls	r2, r2, #8
 8005996:	430a      	orrs	r2, r1
 8005998:	4934      	ldr	r1, [pc, #208]	; (8005a6c <RCCEx_PLL2_Config+0x128>)
 800599a:	4313      	orrs	r3, r2
 800599c:	62cb      	str	r3, [r1, #44]	; 0x2c
 800599e:	4b33      	ldr	r3, [pc, #204]	; (8005a6c <RCCEx_PLL2_Config+0x128>)
 80059a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059a2:	4b33      	ldr	r3, [pc, #204]	; (8005a70 <RCCEx_PLL2_Config+0x12c>)
 80059a4:	4013      	ands	r3, r2
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	6892      	ldr	r2, [r2, #8]
 80059aa:	3a01      	subs	r2, #1
 80059ac:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	68d2      	ldr	r2, [r2, #12]
 80059b4:	3a01      	subs	r2, #1
 80059b6:	0252      	lsls	r2, r2, #9
 80059b8:	b292      	uxth	r2, r2
 80059ba:	4311      	orrs	r1, r2
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6912      	ldr	r2, [r2, #16]
 80059c0:	3a01      	subs	r2, #1
 80059c2:	0412      	lsls	r2, r2, #16
 80059c4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80059c8:	4311      	orrs	r1, r2
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	6952      	ldr	r2, [r2, #20]
 80059ce:	3a01      	subs	r2, #1
 80059d0:	0612      	lsls	r2, r2, #24
 80059d2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80059d6:	430a      	orrs	r2, r1
 80059d8:	4924      	ldr	r1, [pc, #144]	; (8005a6c <RCCEx_PLL2_Config+0x128>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80059de:	4b23      	ldr	r3, [pc, #140]	; (8005a6c <RCCEx_PLL2_Config+0x128>)
 80059e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e2:	f023 020c 	bic.w	r2, r3, #12
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	4920      	ldr	r1, [pc, #128]	; (8005a6c <RCCEx_PLL2_Config+0x128>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80059f0:	4b1e      	ldr	r3, [pc, #120]	; (8005a6c <RCCEx_PLL2_Config+0x128>)
 80059f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	491c      	ldr	r1, [pc, #112]	; (8005a6c <RCCEx_PLL2_Config+0x128>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80059fe:	4b1b      	ldr	r3, [pc, #108]	; (8005a6c <RCCEx_PLL2_Config+0x128>)
 8005a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a02:	4a1a      	ldr	r2, [pc, #104]	; (8005a6c <RCCEx_PLL2_Config+0x128>)
 8005a04:	f023 0310 	bic.w	r3, r3, #16
 8005a08:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005a0a:	4b18      	ldr	r3, [pc, #96]	; (8005a6c <RCCEx_PLL2_Config+0x128>)
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a12:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	69d2      	ldr	r2, [r2, #28]
 8005a1a:	00d2      	lsls	r2, r2, #3
 8005a1c:	4913      	ldr	r1, [pc, #76]	; (8005a6c <RCCEx_PLL2_Config+0x128>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8005a22:	4b12      	ldr	r3, [pc, #72]	; (8005a6c <RCCEx_PLL2_Config+0x128>)
 8005a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a26:	4a11      	ldr	r2, [pc, #68]	; (8005a6c <RCCEx_PLL2_Config+0x128>)
 8005a28:	f043 0310 	orr.w	r3, r3, #16
 8005a2c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8005a2e:	4b0f      	ldr	r3, [pc, #60]	; (8005a6c <RCCEx_PLL2_Config+0x128>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a0e      	ldr	r2, [pc, #56]	; (8005a6c <RCCEx_PLL2_Config+0x128>)
 8005a34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a38:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005a3a:	f7fb fa4f 	bl	8000edc <HAL_GetTick>
 8005a3e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a40:	e008      	b.n	8005a54 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005a42:	f7fb fa4b 	bl	8000edc <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d901      	bls.n	8005a54 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e006      	b.n	8005a62 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a54:	4b05      	ldr	r3, [pc, #20]	; (8005a6c <RCCEx_PLL2_Config+0x128>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d0f0      	beq.n	8005a42 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8005a60:	2300      	movs	r3, #0

}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	46020c00 	.word	0x46020c00
 8005a70:	80800000 	.word	0x80800000

08005a74 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8005a7c:	4b47      	ldr	r3, [pc, #284]	; (8005b9c <RCCEx_PLL3_Config+0x128>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a46      	ldr	r2, [pc, #280]	; (8005b9c <RCCEx_PLL3_Config+0x128>)
 8005a82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a86:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005a88:	f7fb fa28 	bl	8000edc <HAL_GetTick>
 8005a8c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a8e:	e008      	b.n	8005aa2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005a90:	f7fb fa24 	bl	8000edc <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d901      	bls.n	8005aa2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e077      	b.n	8005b92 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005aa2:	4b3e      	ldr	r3, [pc, #248]	; (8005b9c <RCCEx_PLL3_Config+0x128>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1f0      	bne.n	8005a90 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8005aae:	4b3b      	ldr	r3, [pc, #236]	; (8005b9c <RCCEx_PLL3_Config+0x128>)
 8005ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005ab6:	f023 0303 	bic.w	r3, r3, #3
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	6811      	ldr	r1, [r2, #0]
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	6852      	ldr	r2, [r2, #4]
 8005ac2:	3a01      	subs	r2, #1
 8005ac4:	0212      	lsls	r2, r2, #8
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	4934      	ldr	r1, [pc, #208]	; (8005b9c <RCCEx_PLL3_Config+0x128>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	630b      	str	r3, [r1, #48]	; 0x30
 8005ace:	4b33      	ldr	r3, [pc, #204]	; (8005b9c <RCCEx_PLL3_Config+0x128>)
 8005ad0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ad2:	4b33      	ldr	r3, [pc, #204]	; (8005ba0 <RCCEx_PLL3_Config+0x12c>)
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	6892      	ldr	r2, [r2, #8]
 8005ada:	3a01      	subs	r2, #1
 8005adc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	68d2      	ldr	r2, [r2, #12]
 8005ae4:	3a01      	subs	r2, #1
 8005ae6:	0252      	lsls	r2, r2, #9
 8005ae8:	b292      	uxth	r2, r2
 8005aea:	4311      	orrs	r1, r2
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	6912      	ldr	r2, [r2, #16]
 8005af0:	3a01      	subs	r2, #1
 8005af2:	0412      	lsls	r2, r2, #16
 8005af4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005af8:	4311      	orrs	r1, r2
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	6952      	ldr	r2, [r2, #20]
 8005afe:	3a01      	subs	r2, #1
 8005b00:	0612      	lsls	r2, r2, #24
 8005b02:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005b06:	430a      	orrs	r2, r1
 8005b08:	4924      	ldr	r1, [pc, #144]	; (8005b9c <RCCEx_PLL3_Config+0x128>)
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8005b0e:	4b23      	ldr	r3, [pc, #140]	; (8005b9c <RCCEx_PLL3_Config+0x128>)
 8005b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b12:	f023 020c 	bic.w	r2, r3, #12
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	4920      	ldr	r1, [pc, #128]	; (8005b9c <RCCEx_PLL3_Config+0x128>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005b20:	4b1e      	ldr	r3, [pc, #120]	; (8005b9c <RCCEx_PLL3_Config+0x128>)
 8005b22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	491c      	ldr	r1, [pc, #112]	; (8005b9c <RCCEx_PLL3_Config+0x128>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8005b2e:	4b1b      	ldr	r3, [pc, #108]	; (8005b9c <RCCEx_PLL3_Config+0x128>)
 8005b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b32:	4a1a      	ldr	r2, [pc, #104]	; (8005b9c <RCCEx_PLL3_Config+0x128>)
 8005b34:	f023 0310 	bic.w	r3, r3, #16
 8005b38:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005b3a:	4b18      	ldr	r3, [pc, #96]	; (8005b9c <RCCEx_PLL3_Config+0x128>)
 8005b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b42:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	69d2      	ldr	r2, [r2, #28]
 8005b4a:	00d2      	lsls	r2, r2, #3
 8005b4c:	4913      	ldr	r1, [pc, #76]	; (8005b9c <RCCEx_PLL3_Config+0x128>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8005b52:	4b12      	ldr	r3, [pc, #72]	; (8005b9c <RCCEx_PLL3_Config+0x128>)
 8005b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b56:	4a11      	ldr	r2, [pc, #68]	; (8005b9c <RCCEx_PLL3_Config+0x128>)
 8005b58:	f043 0310 	orr.w	r3, r3, #16
 8005b5c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8005b5e:	4b0f      	ldr	r3, [pc, #60]	; (8005b9c <RCCEx_PLL3_Config+0x128>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a0e      	ldr	r2, [pc, #56]	; (8005b9c <RCCEx_PLL3_Config+0x128>)
 8005b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b68:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005b6a:	f7fb f9b7 	bl	8000edc <HAL_GetTick>
 8005b6e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b70:	e008      	b.n	8005b84 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005b72:	f7fb f9b3 	bl	8000edc <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d901      	bls.n	8005b84 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e006      	b.n	8005b92 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b84:	4b05      	ldr	r3, [pc, #20]	; (8005b9c <RCCEx_PLL3_Config+0x128>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d0f0      	beq.n	8005b72 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	46020c00 	.word	0x46020c00
 8005ba0:	80800000 	.word	0x80800000

08005ba4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e0fb      	b.n	8005dae <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a7f      	ldr	r2, [pc, #508]	; (8005db8 <HAL_SPI_Init+0x214>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d004      	beq.n	8005bca <HAL_SPI_Init+0x26>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a7d      	ldr	r2, [pc, #500]	; (8005dbc <HAL_SPI_Init+0x218>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	e000      	b.n	8005bcc <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8005bca:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a78      	ldr	r2, [pc, #480]	; (8005db8 <HAL_SPI_Init+0x214>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d004      	beq.n	8005be6 <HAL_SPI_Init+0x42>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a76      	ldr	r2, [pc, #472]	; (8005dbc <HAL_SPI_Init+0x218>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d105      	bne.n	8005bf2 <HAL_SPI_Init+0x4e>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	2b0f      	cmp	r3, #15
 8005bec:	d901      	bls.n	8005bf2 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e0dd      	b.n	8005dae <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 fbd8 	bl	80063a8 <SPI_GetPacketSize>
 8005bf8:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a6e      	ldr	r2, [pc, #440]	; (8005db8 <HAL_SPI_Init+0x214>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d004      	beq.n	8005c0e <HAL_SPI_Init+0x6a>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a6c      	ldr	r2, [pc, #432]	; (8005dbc <HAL_SPI_Init+0x218>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d102      	bne.n	8005c14 <HAL_SPI_Init+0x70>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2b08      	cmp	r3, #8
 8005c12:	d816      	bhi.n	8005c42 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005c18:	4a69      	ldr	r2, [pc, #420]	; (8005dc0 <HAL_SPI_Init+0x21c>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d00e      	beq.n	8005c3c <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a68      	ldr	r2, [pc, #416]	; (8005dc4 <HAL_SPI_Init+0x220>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d009      	beq.n	8005c3c <HAL_SPI_Init+0x98>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a66      	ldr	r2, [pc, #408]	; (8005dc8 <HAL_SPI_Init+0x224>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d004      	beq.n	8005c3c <HAL_SPI_Init+0x98>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a65      	ldr	r2, [pc, #404]	; (8005dcc <HAL_SPI_Init+0x228>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d104      	bne.n	8005c46 <HAL_SPI_Init+0xa2>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2b10      	cmp	r3, #16
 8005c40:	d901      	bls.n	8005c46 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e0b3      	b.n	8005dae <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d106      	bne.n	8005c60 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f7fa ff00 	bl	8000a60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2202      	movs	r2, #2
 8005c64:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 0201 	bic.w	r2, r2, #1
 8005c76:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8005c82:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c8c:	d119      	bne.n	8005cc2 <HAL_SPI_Init+0x11e>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c96:	d103      	bne.n	8005ca0 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d008      	beq.n	8005cb2 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10c      	bne.n	8005cc2 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005cac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cb0:	d107      	bne.n	8005cc2 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005cc0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00f      	beq.n	8005cee <HAL_SPI_Init+0x14a>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	2b06      	cmp	r3, #6
 8005cd4:	d90b      	bls.n	8005cee <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	601a      	str	r2, [r3, #0]
 8005cec:	e007      	b.n	8005cfe <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005cfc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	69da      	ldr	r2, [r3, #28]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d06:	431a      	orrs	r2, r3
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	431a      	orrs	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d10:	ea42 0103 	orr.w	r1, r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	68da      	ldr	r2, [r3, #12]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d28:	431a      	orrs	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	431a      	orrs	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	431a      	orrs	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	695b      	ldr	r3, [r3, #20]
 8005d40:	431a      	orrs	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	431a      	orrs	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	431a      	orrs	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d52:	431a      	orrs	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d5e:	431a      	orrs	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d64:	431a      	orrs	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d6a:	ea42 0103 	orr.w	r1, r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	430a      	orrs	r2, r1
 8005d78:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00a      	beq.n	8005d9c <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	46002000 	.word	0x46002000
 8005dbc:	56002000 	.word	0x56002000
 8005dc0:	40013000 	.word	0x40013000
 8005dc4:	50013000 	.word	0x50013000
 8005dc8:	40003800 	.word	0x40003800
 8005dcc:	50003800 	.word	0x50003800

08005dd0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b08a      	sub	sp, #40	; 0x28
 8005dd4:	af02      	add	r7, sp, #8
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	603b      	str	r3, [r7, #0]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	3320      	adds	r3, #32
 8005de6:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005de8:	2300      	movs	r3, #0
 8005dea:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d101      	bne.n	8005dfa <HAL_SPI_Transmit+0x2a>
 8005df6:	2302      	movs	r3, #2
 8005df8:	e203      	b.n	8006202 <HAL_SPI_Transmit+0x432>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e02:	f7fb f86b 	bl	8000edc <HAL_GetTick>
 8005e06:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d007      	beq.n	8005e24 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8005e14:	2302      	movs	r3, #2
 8005e16:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8005e20:	7efb      	ldrb	r3, [r7, #27]
 8005e22:	e1ee      	b.n	8006202 <HAL_SPI_Transmit+0x432>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d002      	beq.n	8005e30 <HAL_SPI_Transmit+0x60>
 8005e2a:	88fb      	ldrh	r3, [r7, #6]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d107      	bne.n	8005e40 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8005e3c:	7efb      	ldrb	r3, [r7, #27]
 8005e3e:	e1e0      	b.n	8006202 <HAL_SPI_Transmit+0x432>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2203      	movs	r2, #3
 8005e44:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	68ba      	ldr	r2, [r7, #8]
 8005e54:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	88fa      	ldrh	r2, [r7, #6]
 8005e5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	88fa      	ldrh	r2, [r7, #6]
 8005e62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005e90:	d108      	bne.n	8005ea4 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	e009      	b.n	8005eb8 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005eb6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	0c1b      	lsrs	r3, r3, #16
 8005ec0:	041b      	lsls	r3, r3, #16
 8005ec2:	88f9      	ldrh	r1, [r7, #6]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	6812      	ldr	r2, [r2, #0]
 8005ec8:	430b      	orrs	r3, r1
 8005eca:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f042 0201 	orr.w	r2, r2, #1
 8005eda:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	69db      	ldr	r3, [r3, #28]
 8005ee2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d10c      	bne.n	8005f04 <HAL_SPI_Transmit+0x134>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ef2:	d107      	bne.n	8005f04 <HAL_SPI_Transmit+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	2b0f      	cmp	r3, #15
 8005f0a:	d95b      	bls.n	8005fc4 <HAL_SPI_Transmit+0x1f4>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a8f      	ldr	r2, [pc, #572]	; (8006150 <HAL_SPI_Transmit+0x380>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d04f      	beq.n	8005fb6 <HAL_SPI_Transmit+0x1e6>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a8e      	ldr	r2, [pc, #568]	; (8006154 <HAL_SPI_Transmit+0x384>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d04a      	beq.n	8005fb6 <HAL_SPI_Transmit+0x1e6>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a8c      	ldr	r2, [pc, #560]	; (8006158 <HAL_SPI_Transmit+0x388>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d045      	beq.n	8005fb6 <HAL_SPI_Transmit+0x1e6>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a8b      	ldr	r2, [pc, #556]	; (800615c <HAL_SPI_Transmit+0x38c>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d147      	bne.n	8005fc4 <HAL_SPI_Transmit+0x1f4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005f34:	e03f      	b.n	8005fb6 <HAL_SPI_Transmit+0x1e6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	695b      	ldr	r3, [r3, #20]
 8005f3c:	f003 0302 	and.w	r3, r3, #2
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d114      	bne.n	8005f6e <HAL_SPI_Transmit+0x19e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6812      	ldr	r2, [r2, #0]
 8005f4e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f54:	1d1a      	adds	r2, r3, #4
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	3b01      	subs	r3, #1
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005f6c:	e023      	b.n	8005fb6 <HAL_SPI_Transmit+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f6e:	f7fa ffb5 	bl	8000edc <HAL_GetTick>
 8005f72:	4602      	mov	r2, r0
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	683a      	ldr	r2, [r7, #0]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d803      	bhi.n	8005f86 <HAL_SPI_Transmit+0x1b6>
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f84:	d102      	bne.n	8005f8c <HAL_SPI_Transmit+0x1bc>
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d114      	bne.n	8005fb6 <HAL_SPI_Transmit+0x1e6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f000 f93d 	bl	800620c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fa0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e125      	b.n	8006202 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1b9      	bne.n	8005f36 <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8005fc2:	e0f8      	b.n	80061b6 <HAL_SPI_Transmit+0x3e6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	2b07      	cmp	r3, #7
 8005fca:	f240 80ed 	bls.w	80061a8 <HAL_SPI_Transmit+0x3d8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005fce:	e05d      	b.n	800608c <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	f003 0302 	and.w	r3, r3, #2
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d132      	bne.n	8006044 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d918      	bls.n	800601c <HAL_SPI_Transmit+0x24c>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d014      	beq.n	800601c <HAL_SPI_Transmit+0x24c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	6812      	ldr	r2, [r2, #0]
 8005ffc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006002:	1d1a      	adds	r2, r3, #4
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800600e:	b29b      	uxth	r3, r3
 8006010:	3b02      	subs	r3, #2
 8006012:	b29a      	uxth	r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800601a:	e037      	b.n	800608c <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006020:	881a      	ldrh	r2, [r3, #0]
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800602a:	1c9a      	adds	r2, r3, #2
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006036:	b29b      	uxth	r3, r3
 8006038:	3b01      	subs	r3, #1
 800603a:	b29a      	uxth	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006042:	e023      	b.n	800608c <HAL_SPI_Transmit+0x2bc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006044:	f7fa ff4a 	bl	8000edc <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	429a      	cmp	r2, r3
 8006052:	d803      	bhi.n	800605c <HAL_SPI_Transmit+0x28c>
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800605a:	d102      	bne.n	8006062 <HAL_SPI_Transmit+0x292>
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d114      	bne.n	800608c <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f000 f8d2 	bl	800620c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006076:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8006088:	2303      	movs	r3, #3
 800608a:	e0ba      	b.n	8006202 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006092:	b29b      	uxth	r3, r3
 8006094:	2b00      	cmp	r3, #0
 8006096:	d19b      	bne.n	8005fd0 <HAL_SPI_Transmit+0x200>
 8006098:	e08d      	b.n	80061b6 <HAL_SPI_Transmit+0x3e6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	695b      	ldr	r3, [r3, #20]
 80060a0:	f003 0302 	and.w	r3, r3, #2
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d15b      	bne.n	8006160 <HAL_SPI_Transmit+0x390>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	2b03      	cmp	r3, #3
 80060b2:	d918      	bls.n	80060e6 <HAL_SPI_Transmit+0x316>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b8:	2b40      	cmp	r3, #64	; 0x40
 80060ba:	d914      	bls.n	80060e6 <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6812      	ldr	r2, [r2, #0]
 80060c6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060cc:	1d1a      	adds	r2, r3, #4
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80060d8:	b29b      	uxth	r3, r3
 80060da:	3b04      	subs	r3, #4
 80060dc:	b29a      	uxth	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80060e4:	e060      	b.n	80061a8 <HAL_SPI_Transmit+0x3d8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d917      	bls.n	8006122 <HAL_SPI_Transmit+0x352>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d013      	beq.n	8006122 <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060fe:	881a      	ldrh	r2, [r3, #0]
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006108:	1c9a      	adds	r2, r3, #2
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006114:	b29b      	uxth	r3, r3
 8006116:	3b02      	subs	r3, #2
 8006118:	b29a      	uxth	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006120:	e042      	b.n	80061a8 <HAL_SPI_Transmit+0x3d8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	3320      	adds	r3, #32
 800612c:	7812      	ldrb	r2, [r2, #0]
 800612e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006134:	1c5a      	adds	r2, r3, #1
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006140:	b29b      	uxth	r3, r3
 8006142:	3b01      	subs	r3, #1
 8006144:	b29a      	uxth	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800614c:	e02c      	b.n	80061a8 <HAL_SPI_Transmit+0x3d8>
 800614e:	bf00      	nop
 8006150:	40013000 	.word	0x40013000
 8006154:	50013000 	.word	0x50013000
 8006158:	40003800 	.word	0x40003800
 800615c:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006160:	f7fa febc 	bl	8000edc <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	683a      	ldr	r2, [r7, #0]
 800616c:	429a      	cmp	r2, r3
 800616e:	d803      	bhi.n	8006178 <HAL_SPI_Transmit+0x3a8>
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006176:	d102      	bne.n	800617e <HAL_SPI_Transmit+0x3ae>
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d114      	bne.n	80061a8 <HAL_SPI_Transmit+0x3d8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f000 f844 	bl	800620c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006192:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e02c      	b.n	8006202 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f47f af72 	bne.w	800609a <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	9300      	str	r3, [sp, #0]
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	2200      	movs	r2, #0
 80061be:	2108      	movs	r1, #8
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f000 f8c3 	bl	800634c <SPI_WaitOnFlagUntilTimeout>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d007      	beq.n	80061dc <HAL_SPI_Transmit+0x40c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061d2:	f043 0220 	orr.w	r2, r3, #32
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 f815 	bl	800620c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d001      	beq.n	8006200 <HAL_SPI_Transmit+0x430>
  {
    return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e000      	b.n	8006202 <HAL_SPI_Transmit+0x432>
  }
  return errorcode;
 8006200:	7efb      	ldrb	r3, [r7, #27]
}
 8006202:	4618      	mov	r0, r3
 8006204:	3720      	adds	r7, #32
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop

0800620c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	699a      	ldr	r2, [r3, #24]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f042 0208 	orr.w	r2, r2, #8
 800622a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	699a      	ldr	r2, [r3, #24]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f042 0210 	orr.w	r2, r2, #16
 800623a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f022 0201 	bic.w	r2, r2, #1
 800624a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	6812      	ldr	r2, [r2, #0]
 8006256:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 800625a:	f023 0303 	bic.w	r3, r3, #3
 800625e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689a      	ldr	r2, [r3, #8]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800626e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8006276:	b2db      	uxtb	r3, r3
 8006278:	2b04      	cmp	r3, #4
 800627a:	d014      	beq.n	80062a6 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f003 0320 	and.w	r3, r3, #32
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00f      	beq.n	80062a6 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800628c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	699a      	ldr	r2, [r3, #24]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f042 0220 	orr.w	r2, r2, #32
 80062a4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2b03      	cmp	r3, #3
 80062b0:	d014      	beq.n	80062dc <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00f      	beq.n	80062dc <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062c2:	f043 0204 	orr.w	r2, r3, #4
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	699a      	ldr	r2, [r3, #24]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062da:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00f      	beq.n	8006306 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062ec:	f043 0201 	orr.w	r2, r3, #1
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	699a      	ldr	r2, [r3, #24]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006304:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00f      	beq.n	8006330 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006316:	f043 0208 	orr.w	r2, r3, #8
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	699a      	ldr	r2, [r3, #24]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800632e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 8006340:	bf00      	nop
 8006342:	3714      	adds	r7, #20
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	603b      	str	r3, [r7, #0]
 8006358:	4613      	mov	r3, r2
 800635a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800635c:	e010      	b.n	8006380 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800635e:	f7fa fdbd 	bl	8000edc <HAL_GetTick>
 8006362:	4602      	mov	r2, r0
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	683a      	ldr	r2, [r7, #0]
 800636a:	429a      	cmp	r2, r3
 800636c:	d803      	bhi.n	8006376 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006374:	d102      	bne.n	800637c <SPI_WaitOnFlagUntilTimeout+0x30>
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d101      	bne.n	8006380 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e00f      	b.n	80063a0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	695a      	ldr	r2, [r3, #20]
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	4013      	ands	r3, r2
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	429a      	cmp	r2, r3
 800638e:	bf0c      	ite	eq
 8006390:	2301      	moveq	r3, #1
 8006392:	2300      	movne	r3, #0
 8006394:	b2db      	uxtb	r3, r3
 8006396:	461a      	mov	r2, r3
 8006398:	79fb      	ldrb	r3, [r7, #7]
 800639a:	429a      	cmp	r2, r3
 800639c:	d0df      	beq.n	800635e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3710      	adds	r7, #16
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b4:	095b      	lsrs	r3, r3, #5
 80063b6:	3301      	adds	r3, #1
 80063b8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	3301      	adds	r3, #1
 80063c0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	3307      	adds	r3, #7
 80063c6:	08db      	lsrs	r3, r3, #3
 80063c8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	fb02 f303 	mul.w	r3, r2, r3
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3714      	adds	r7, #20
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 80063de:	b480      	push	{r7}
 80063e0:	b083      	sub	sp, #12
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
 80063e6:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d12e      	bne.n	8006452 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d101      	bne.n	8006402 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 80063fe:	2302      	movs	r3, #2
 8006400:	e028      	b.n	8006454 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2202      	movs	r2, #2
 800640e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f022 0201 	bic.w	r2, r2, #1
 8006420:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800642e:	ea42 0103 	orr.w	r1, r2, r3
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	689a      	ldr	r2, [r3, #8]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	430a      	orrs	r2, r1
 800643c:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2201      	movs	r2, #1
 8006442:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800644e:	2300      	movs	r3, #0
 8006450:	e000      	b.n	8006454 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
  }
}
 8006454:	4618      	mov	r0, r3
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e042      	b.n	80064f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006478:	2b00      	cmp	r3, #0
 800647a:	d106      	bne.n	800648a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f7fa fc1d 	bl	8000cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2224      	movs	r2, #36	; 0x24
 800648e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f022 0201 	bic.w	r2, r2, #1
 80064a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f8ba 	bl	800661c <UART_SetConfig>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d101      	bne.n	80064b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e022      	b.n	80064f8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d002      	beq.n	80064c0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fa5c 	bl	8006978 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	685a      	ldr	r2, [r3, #4]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689a      	ldr	r2, [r3, #8]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f042 0201 	orr.w	r2, r2, #1
 80064ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 fae3 	bl	8006abc <UART_CheckIdleState>
 80064f6:	4603      	mov	r3, r0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3708      	adds	r7, #8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b08a      	sub	sp, #40	; 0x28
 8006504:	af02      	add	r7, sp, #8
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	603b      	str	r3, [r7, #0]
 800650c:	4613      	mov	r3, r2
 800650e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006516:	2b20      	cmp	r3, #32
 8006518:	d17b      	bne.n	8006612 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d002      	beq.n	8006526 <HAL_UART_Transmit+0x26>
 8006520:	88fb      	ldrh	r3, [r7, #6]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e074      	b.n	8006614 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2221      	movs	r2, #33	; 0x21
 8006536:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800653a:	f7fa fccf 	bl	8000edc <HAL_GetTick>
 800653e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	88fa      	ldrh	r2, [r7, #6]
 8006544:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	88fa      	ldrh	r2, [r7, #6]
 800654c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006558:	d108      	bne.n	800656c <HAL_UART_Transmit+0x6c>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d104      	bne.n	800656c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006562:	2300      	movs	r3, #0
 8006564:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	61bb      	str	r3, [r7, #24]
 800656a:	e003      	b.n	8006574 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006570:	2300      	movs	r3, #0
 8006572:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006574:	e030      	b.n	80065d8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	9300      	str	r3, [sp, #0]
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	2200      	movs	r2, #0
 800657e:	2180      	movs	r1, #128	; 0x80
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f000 fb45 	bl	8006c10 <UART_WaitOnFlagUntilTimeout>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d005      	beq.n	8006598 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2220      	movs	r2, #32
 8006590:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006594:	2303      	movs	r3, #3
 8006596:	e03d      	b.n	8006614 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10b      	bne.n	80065b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	881b      	ldrh	r3, [r3, #0]
 80065a2:	461a      	mov	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	3302      	adds	r3, #2
 80065b2:	61bb      	str	r3, [r7, #24]
 80065b4:	e007      	b.n	80065c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	781a      	ldrb	r2, [r3, #0]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	3301      	adds	r3, #1
 80065c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	3b01      	subs	r3, #1
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80065de:	b29b      	uxth	r3, r3
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1c8      	bne.n	8006576 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	9300      	str	r3, [sp, #0]
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	2200      	movs	r2, #0
 80065ec:	2140      	movs	r1, #64	; 0x40
 80065ee:	68f8      	ldr	r0, [r7, #12]
 80065f0:	f000 fb0e 	bl	8006c10 <UART_WaitOnFlagUntilTimeout>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d005      	beq.n	8006606 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2220      	movs	r2, #32
 80065fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e006      	b.n	8006614 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2220      	movs	r2, #32
 800660a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800660e:	2300      	movs	r3, #0
 8006610:	e000      	b.n	8006614 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006612:	2302      	movs	r3, #2
  }
}
 8006614:	4618      	mov	r0, r3
 8006616:	3720      	adds	r7, #32
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800661c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006620:	b094      	sub	sp, #80	; 0x50
 8006622:	af00      	add	r7, sp, #0
 8006624:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006626:	2300      	movs	r3, #0
 8006628:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800662c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	4b83      	ldr	r3, [pc, #524]	; (8006840 <UART_SetConfig+0x224>)
 8006632:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006636:	689a      	ldr	r2, [r3, #8]
 8006638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	431a      	orrs	r2, r3
 800663e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006640:	695b      	ldr	r3, [r3, #20]
 8006642:	431a      	orrs	r2, r3
 8006644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006646:	69db      	ldr	r3, [r3, #28]
 8006648:	4313      	orrs	r3, r2
 800664a:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800664c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	497c      	ldr	r1, [pc, #496]	; (8006844 <UART_SetConfig+0x228>)
 8006654:	4019      	ands	r1, r3
 8006656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800665c:	430b      	orrs	r3, r1
 800665e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800666a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666c:	68d9      	ldr	r1, [r3, #12]
 800666e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	ea40 0301 	orr.w	r3, r0, r1
 8006676:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667a:	699b      	ldr	r3, [r3, #24]
 800667c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800667e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	4b6f      	ldr	r3, [pc, #444]	; (8006840 <UART_SetConfig+0x224>)
 8006684:	429a      	cmp	r2, r3
 8006686:	d009      	beq.n	800669c <UART_SetConfig+0x80>
 8006688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	4b6e      	ldr	r3, [pc, #440]	; (8006848 <UART_SetConfig+0x22c>)
 800668e:	429a      	cmp	r2, r3
 8006690:	d004      	beq.n	800669c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006694:	6a1a      	ldr	r2, [r3, #32]
 8006696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006698:	4313      	orrs	r3, r2
 800669a:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800669c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 80066a6:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80066aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066b0:	430b      	orrs	r3, r1
 80066b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80066b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ba:	f023 000f 	bic.w	r0, r3, #15
 80066be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80066c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	ea40 0301 	orr.w	r3, r0, r1
 80066ca:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	4b5e      	ldr	r3, [pc, #376]	; (800684c <UART_SetConfig+0x230>)
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d102      	bne.n	80066dc <UART_SetConfig+0xc0>
 80066d6:	2301      	movs	r3, #1
 80066d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80066da:	e032      	b.n	8006742 <UART_SetConfig+0x126>
 80066dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	4b5b      	ldr	r3, [pc, #364]	; (8006850 <UART_SetConfig+0x234>)
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d102      	bne.n	80066ec <UART_SetConfig+0xd0>
 80066e6:	2302      	movs	r3, #2
 80066e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80066ea:	e02a      	b.n	8006742 <UART_SetConfig+0x126>
 80066ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	4b58      	ldr	r3, [pc, #352]	; (8006854 <UART_SetConfig+0x238>)
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d102      	bne.n	80066fc <UART_SetConfig+0xe0>
 80066f6:	2304      	movs	r3, #4
 80066f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80066fa:	e022      	b.n	8006742 <UART_SetConfig+0x126>
 80066fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	4b55      	ldr	r3, [pc, #340]	; (8006858 <UART_SetConfig+0x23c>)
 8006702:	429a      	cmp	r2, r3
 8006704:	d102      	bne.n	800670c <UART_SetConfig+0xf0>
 8006706:	2308      	movs	r3, #8
 8006708:	64bb      	str	r3, [r7, #72]	; 0x48
 800670a:	e01a      	b.n	8006742 <UART_SetConfig+0x126>
 800670c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	4b52      	ldr	r3, [pc, #328]	; (800685c <UART_SetConfig+0x240>)
 8006712:	429a      	cmp	r2, r3
 8006714:	d102      	bne.n	800671c <UART_SetConfig+0x100>
 8006716:	2310      	movs	r3, #16
 8006718:	64bb      	str	r3, [r7, #72]	; 0x48
 800671a:	e012      	b.n	8006742 <UART_SetConfig+0x126>
 800671c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	4b4f      	ldr	r3, [pc, #316]	; (8006860 <UART_SetConfig+0x244>)
 8006722:	429a      	cmp	r2, r3
 8006724:	d103      	bne.n	800672e <UART_SetConfig+0x112>
 8006726:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800672a:	64bb      	str	r3, [r7, #72]	; 0x48
 800672c:	e009      	b.n	8006742 <UART_SetConfig+0x126>
 800672e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	4b43      	ldr	r3, [pc, #268]	; (8006840 <UART_SetConfig+0x224>)
 8006734:	429a      	cmp	r2, r3
 8006736:	d102      	bne.n	800673e <UART_SetConfig+0x122>
 8006738:	2320      	movs	r3, #32
 800673a:	64bb      	str	r3, [r7, #72]	; 0x48
 800673c:	e001      	b.n	8006742 <UART_SetConfig+0x126>
 800673e:	2300      	movs	r3, #0
 8006740:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	4b3e      	ldr	r3, [pc, #248]	; (8006840 <UART_SetConfig+0x224>)
 8006748:	429a      	cmp	r2, r3
 800674a:	d005      	beq.n	8006758 <UART_SetConfig+0x13c>
 800674c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	4b3d      	ldr	r3, [pc, #244]	; (8006848 <UART_SetConfig+0x22c>)
 8006752:	429a      	cmp	r2, r3
 8006754:	f040 8088 	bne.w	8006868 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800675a:	2200      	movs	r2, #0
 800675c:	623b      	str	r3, [r7, #32]
 800675e:	627a      	str	r2, [r7, #36]	; 0x24
 8006760:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006764:	f7fd fd90 	bl	8004288 <HAL_RCCEx_GetPeriphCLKFreq>
 8006768:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800676a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800676c:	2b00      	cmp	r3, #0
 800676e:	f000 80eb 	beq.w	8006948 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006776:	4a3b      	ldr	r2, [pc, #236]	; (8006864 <UART_SetConfig+0x248>)
 8006778:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800677c:	461a      	mov	r2, r3
 800677e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006780:	fbb3 f3f2 	udiv	r3, r3, r2
 8006784:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006788:	685a      	ldr	r2, [r3, #4]
 800678a:	4613      	mov	r3, r2
 800678c:	005b      	lsls	r3, r3, #1
 800678e:	4413      	add	r3, r2
 8006790:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006792:	429a      	cmp	r2, r3
 8006794:	d305      	bcc.n	80067a2 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800679c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800679e:	429a      	cmp	r2, r3
 80067a0:	d903      	bls.n	80067aa <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80067a8:	e048      	b.n	800683c <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067ac:	2200      	movs	r2, #0
 80067ae:	61bb      	str	r3, [r7, #24]
 80067b0:	61fa      	str	r2, [r7, #28]
 80067b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b6:	4a2b      	ldr	r2, [pc, #172]	; (8006864 <UART_SetConfig+0x248>)
 80067b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067bc:	b29b      	uxth	r3, r3
 80067be:	2200      	movs	r2, #0
 80067c0:	613b      	str	r3, [r7, #16]
 80067c2:	617a      	str	r2, [r7, #20]
 80067c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80067c8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80067cc:	f7f9 fd60 	bl	8000290 <__aeabi_uldivmod>
 80067d0:	4602      	mov	r2, r0
 80067d2:	460b      	mov	r3, r1
 80067d4:	4610      	mov	r0, r2
 80067d6:	4619      	mov	r1, r3
 80067d8:	f04f 0200 	mov.w	r2, #0
 80067dc:	f04f 0300 	mov.w	r3, #0
 80067e0:	020b      	lsls	r3, r1, #8
 80067e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80067e6:	0202      	lsls	r2, r0, #8
 80067e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067ea:	6849      	ldr	r1, [r1, #4]
 80067ec:	0849      	lsrs	r1, r1, #1
 80067ee:	2000      	movs	r0, #0
 80067f0:	460c      	mov	r4, r1
 80067f2:	4605      	mov	r5, r0
 80067f4:	eb12 0804 	adds.w	r8, r2, r4
 80067f8:	eb43 0905 	adc.w	r9, r3, r5
 80067fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	60bb      	str	r3, [r7, #8]
 8006804:	60fa      	str	r2, [r7, #12]
 8006806:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800680a:	4640      	mov	r0, r8
 800680c:	4649      	mov	r1, r9
 800680e:	f7f9 fd3f 	bl	8000290 <__aeabi_uldivmod>
 8006812:	4602      	mov	r2, r0
 8006814:	460b      	mov	r3, r1
 8006816:	4613      	mov	r3, r2
 8006818:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800681a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800681c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006820:	d308      	bcc.n	8006834 <UART_SetConfig+0x218>
 8006822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006824:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006828:	d204      	bcs.n	8006834 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800682a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006830:	60da      	str	r2, [r3, #12]
 8006832:	e003      	b.n	800683c <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800683a:	e085      	b.n	8006948 <UART_SetConfig+0x32c>
 800683c:	e084      	b.n	8006948 <UART_SetConfig+0x32c>
 800683e:	bf00      	nop
 8006840:	46002400 	.word	0x46002400
 8006844:	cfff69f3 	.word	0xcfff69f3
 8006848:	56002400 	.word	0x56002400
 800684c:	40013800 	.word	0x40013800
 8006850:	40004400 	.word	0x40004400
 8006854:	40004800 	.word	0x40004800
 8006858:	40004c00 	.word	0x40004c00
 800685c:	40005000 	.word	0x40005000
 8006860:	40006400 	.word	0x40006400
 8006864:	08007118 	.word	0x08007118
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686a:	69db      	ldr	r3, [r3, #28]
 800686c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006870:	d13c      	bne.n	80068ec <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006874:	2200      	movs	r2, #0
 8006876:	603b      	str	r3, [r7, #0]
 8006878:	607a      	str	r2, [r7, #4]
 800687a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800687e:	f7fd fd03 	bl	8004288 <HAL_RCCEx_GetPeriphCLKFreq>
 8006882:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006886:	2b00      	cmp	r3, #0
 8006888:	d05e      	beq.n	8006948 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800688a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688e:	4a39      	ldr	r2, [pc, #228]	; (8006974 <UART_SetConfig+0x358>)
 8006890:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006894:	461a      	mov	r2, r3
 8006896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006898:	fbb3 f3f2 	udiv	r3, r3, r2
 800689c:	005a      	lsls	r2, r3, #1
 800689e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	085b      	lsrs	r3, r3, #1
 80068a4:	441a      	add	r2, r3
 80068a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068b2:	2b0f      	cmp	r3, #15
 80068b4:	d916      	bls.n	80068e4 <UART_SetConfig+0x2c8>
 80068b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068bc:	d212      	bcs.n	80068e4 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	f023 030f 	bic.w	r3, r3, #15
 80068c6:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ca:	085b      	lsrs	r3, r3, #1
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	f003 0307 	and.w	r3, r3, #7
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80068d6:	4313      	orrs	r3, r2
 80068d8:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 80068da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80068e0:	60da      	str	r2, [r3, #12]
 80068e2:	e031      	b.n	8006948 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80068ea:	e02d      	b.n	8006948 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80068ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068ee:	2200      	movs	r2, #0
 80068f0:	469a      	mov	sl, r3
 80068f2:	4693      	mov	fp, r2
 80068f4:	4650      	mov	r0, sl
 80068f6:	4659      	mov	r1, fp
 80068f8:	f7fd fcc6 	bl	8004288 <HAL_RCCEx_GetPeriphCLKFreq>
 80068fc:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 80068fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006900:	2b00      	cmp	r3, #0
 8006902:	d021      	beq.n	8006948 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006908:	4a1a      	ldr	r2, [pc, #104]	; (8006974 <UART_SetConfig+0x358>)
 800690a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800690e:	461a      	mov	r2, r3
 8006910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006912:	fbb3 f2f2 	udiv	r2, r3, r2
 8006916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	085b      	lsrs	r3, r3, #1
 800691c:	441a      	add	r2, r3
 800691e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	fbb2 f3f3 	udiv	r3, r2, r3
 8006926:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800692a:	2b0f      	cmp	r3, #15
 800692c:	d909      	bls.n	8006942 <UART_SetConfig+0x326>
 800692e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006934:	d205      	bcs.n	8006942 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006938:	b29a      	uxth	r2, r3
 800693a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	60da      	str	r2, [r3, #12]
 8006940:	e002      	b.n	8006948 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694a:	2201      	movs	r2, #1
 800694c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006952:	2201      	movs	r2, #1
 8006954:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695a:	2200      	movs	r2, #0
 800695c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800695e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006960:	2200      	movs	r2, #0
 8006962:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006964:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006968:	4618      	mov	r0, r3
 800696a:	3750      	adds	r7, #80	; 0x50
 800696c:	46bd      	mov	sp, r7
 800696e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006972:	bf00      	nop
 8006974:	08007118 	.word	0x08007118

08006978 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00a      	beq.n	80069a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	430a      	orrs	r2, r1
 80069a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a6:	f003 0302 	and.w	r3, r3, #2
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00a      	beq.n	80069c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	430a      	orrs	r2, r1
 80069c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c8:	f003 0304 	and.w	r3, r3, #4
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00a      	beq.n	80069e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ea:	f003 0308 	and.w	r3, r3, #8
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00a      	beq.n	8006a08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	430a      	orrs	r2, r1
 8006a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a0c:	f003 0310 	and.w	r3, r3, #16
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00a      	beq.n	8006a2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2e:	f003 0320 	and.w	r3, r3, #32
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00a      	beq.n	8006a4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	430a      	orrs	r2, r1
 8006a4a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d01a      	beq.n	8006a8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a76:	d10a      	bne.n	8006a8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00a      	beq.n	8006ab0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	430a      	orrs	r2, r1
 8006aae:	605a      	str	r2, [r3, #4]
  }
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b098      	sub	sp, #96	; 0x60
 8006ac0:	af02      	add	r7, sp, #8
 8006ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006acc:	f7fa fa06 	bl	8000edc <HAL_GetTick>
 8006ad0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0308 	and.w	r3, r3, #8
 8006adc:	2b08      	cmp	r3, #8
 8006ade:	d12f      	bne.n	8006b40 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ae0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f88e 	bl	8006c10 <UART_WaitOnFlagUntilTimeout>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d022      	beq.n	8006b40 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b02:	e853 3f00 	ldrex	r3, [r3]
 8006b06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b0e:	653b      	str	r3, [r7, #80]	; 0x50
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	461a      	mov	r2, r3
 8006b16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b18:	647b      	str	r3, [r7, #68]	; 0x44
 8006b1a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b20:	e841 2300 	strex	r3, r2, [r1]
 8006b24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1e6      	bne.n	8006afa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2220      	movs	r2, #32
 8006b30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e063      	b.n	8006c08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0304 	and.w	r3, r3, #4
 8006b4a:	2b04      	cmp	r3, #4
 8006b4c:	d149      	bne.n	8006be2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b52:	9300      	str	r3, [sp, #0]
 8006b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b56:	2200      	movs	r2, #0
 8006b58:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 f857 	bl	8006c10 <UART_WaitOnFlagUntilTimeout>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d03c      	beq.n	8006be2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b70:	e853 3f00 	ldrex	r3, [r3]
 8006b74:	623b      	str	r3, [r7, #32]
   return(result);
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	461a      	mov	r2, r3
 8006b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b86:	633b      	str	r3, [r7, #48]	; 0x30
 8006b88:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b8e:	e841 2300 	strex	r3, r2, [r1]
 8006b92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1e6      	bne.n	8006b68 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	3308      	adds	r3, #8
 8006ba0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	e853 3f00 	ldrex	r3, [r3]
 8006ba8:	60fb      	str	r3, [r7, #12]
   return(result);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f023 0301 	bic.w	r3, r3, #1
 8006bb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	3308      	adds	r3, #8
 8006bb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bba:	61fa      	str	r2, [r7, #28]
 8006bbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbe:	69b9      	ldr	r1, [r7, #24]
 8006bc0:	69fa      	ldr	r2, [r7, #28]
 8006bc2:	e841 2300 	strex	r3, r2, [r1]
 8006bc6:	617b      	str	r3, [r7, #20]
   return(result);
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1e5      	bne.n	8006b9a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2220      	movs	r2, #32
 8006bd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e012      	b.n	8006c08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2220      	movs	r2, #32
 8006be6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2220      	movs	r2, #32
 8006bee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3758      	adds	r7, #88	; 0x58
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	603b      	str	r3, [r7, #0]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c20:	e049      	b.n	8006cb6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c28:	d045      	beq.n	8006cb6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c2a:	f7fa f957 	bl	8000edc <HAL_GetTick>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	69ba      	ldr	r2, [r7, #24]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d302      	bcc.n	8006c40 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d101      	bne.n	8006c44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	e048      	b.n	8006cd6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0304 	and.w	r3, r3, #4
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d031      	beq.n	8006cb6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	69db      	ldr	r3, [r3, #28]
 8006c58:	f003 0308 	and.w	r3, r3, #8
 8006c5c:	2b08      	cmp	r3, #8
 8006c5e:	d110      	bne.n	8006c82 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2208      	movs	r2, #8
 8006c66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f000 f838 	bl	8006cde <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2208      	movs	r2, #8
 8006c72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e029      	b.n	8006cd6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	69db      	ldr	r3, [r3, #28]
 8006c88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c90:	d111      	bne.n	8006cb6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f000 f81e 	bl	8006cde <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2220      	movs	r2, #32
 8006ca6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	e00f      	b.n	8006cd6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	69da      	ldr	r2, [r3, #28]
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	68ba      	ldr	r2, [r7, #8]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	bf0c      	ite	eq
 8006cc6:	2301      	moveq	r3, #1
 8006cc8:	2300      	movne	r3, #0
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	461a      	mov	r2, r3
 8006cce:	79fb      	ldrb	r3, [r7, #7]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d0a6      	beq.n	8006c22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3710      	adds	r7, #16
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}

08006cde <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cde:	b480      	push	{r7}
 8006ce0:	b095      	sub	sp, #84	; 0x54
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cee:	e853 3f00 	ldrex	r3, [r3]
 8006cf2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	461a      	mov	r2, r3
 8006d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d04:	643b      	str	r3, [r7, #64]	; 0x40
 8006d06:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d0c:	e841 2300 	strex	r3, r2, [r1]
 8006d10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d1e6      	bne.n	8006ce6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	3308      	adds	r3, #8
 8006d1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d20:	6a3b      	ldr	r3, [r7, #32]
 8006d22:	e853 3f00 	ldrex	r3, [r3]
 8006d26:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d2e:	f023 0301 	bic.w	r3, r3, #1
 8006d32:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	3308      	adds	r3, #8
 8006d3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d44:	e841 2300 	strex	r3, r2, [r1]
 8006d48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1e3      	bne.n	8006d18 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d118      	bne.n	8006d8a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	e853 3f00 	ldrex	r3, [r3]
 8006d64:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	f023 0310 	bic.w	r3, r3, #16
 8006d6c:	647b      	str	r3, [r7, #68]	; 0x44
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	461a      	mov	r2, r3
 8006d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d76:	61bb      	str	r3, [r7, #24]
 8006d78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7a:	6979      	ldr	r1, [r7, #20]
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	e841 2300 	strex	r3, r2, [r1]
 8006d82:	613b      	str	r3, [r7, #16]
   return(result);
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1e6      	bne.n	8006d58 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2220      	movs	r2, #32
 8006d8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006d9e:	bf00      	nop
 8006da0:	3754      	adds	r7, #84	; 0x54
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006daa:	b480      	push	{r7}
 8006dac:	b085      	sub	sp, #20
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d101      	bne.n	8006dc0 <HAL_UARTEx_DisableFifoMode+0x16>
 8006dbc:	2302      	movs	r3, #2
 8006dbe:	e027      	b.n	8006e10 <HAL_UARTEx_DisableFifoMode+0x66>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2224      	movs	r2, #36	; 0x24
 8006dcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f022 0201 	bic.w	r2, r2, #1
 8006de6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006dee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2220      	movs	r2, #32
 8006e02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3714      	adds	r7, #20
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d101      	bne.n	8006e34 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006e30:	2302      	movs	r3, #2
 8006e32:	e02d      	b.n	8006e90 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2224      	movs	r2, #36	; 0x24
 8006e40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f022 0201 	bic.w	r2, r2, #1
 8006e5a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	683a      	ldr	r2, [r7, #0]
 8006e6c:	430a      	orrs	r2, r1
 8006e6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 f84f 	bl	8006f14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2220      	movs	r2, #32
 8006e82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d101      	bne.n	8006eb0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006eac:	2302      	movs	r3, #2
 8006eae:	e02d      	b.n	8006f0c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2224      	movs	r2, #36	; 0x24
 8006ebc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f022 0201 	bic.w	r2, r2, #1
 8006ed6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	683a      	ldr	r2, [r7, #0]
 8006ee8:	430a      	orrs	r2, r1
 8006eea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 f811 	bl	8006f14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2220      	movs	r2, #32
 8006efe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3710      	adds	r7, #16
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d108      	bne.n	8006f36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006f34:	e031      	b.n	8006f9a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006f36:	2308      	movs	r3, #8
 8006f38:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006f3a:	2308      	movs	r3, #8
 8006f3c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	0e5b      	lsrs	r3, r3, #25
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	f003 0307 	and.w	r3, r3, #7
 8006f4c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	0f5b      	lsrs	r3, r3, #29
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	f003 0307 	and.w	r3, r3, #7
 8006f5c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f5e:	7bbb      	ldrb	r3, [r7, #14]
 8006f60:	7b3a      	ldrb	r2, [r7, #12]
 8006f62:	4911      	ldr	r1, [pc, #68]	; (8006fa8 <UARTEx_SetNbDataToProcess+0x94>)
 8006f64:	5c8a      	ldrb	r2, [r1, r2]
 8006f66:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006f6a:	7b3a      	ldrb	r2, [r7, #12]
 8006f6c:	490f      	ldr	r1, [pc, #60]	; (8006fac <UARTEx_SetNbDataToProcess+0x98>)
 8006f6e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f70:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f7c:	7bfb      	ldrb	r3, [r7, #15]
 8006f7e:	7b7a      	ldrb	r2, [r7, #13]
 8006f80:	4909      	ldr	r1, [pc, #36]	; (8006fa8 <UARTEx_SetNbDataToProcess+0x94>)
 8006f82:	5c8a      	ldrb	r2, [r1, r2]
 8006f84:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006f88:	7b7a      	ldrb	r2, [r7, #13]
 8006f8a:	4908      	ldr	r1, [pc, #32]	; (8006fac <UARTEx_SetNbDataToProcess+0x98>)
 8006f8c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f8e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f92:	b29a      	uxth	r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006f9a:	bf00      	nop
 8006f9c:	3714      	adds	r7, #20
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	08007130 	.word	0x08007130
 8006fac:	08007138 	.word	0x08007138

08006fb0 <memset>:
 8006fb0:	4402      	add	r2, r0
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d100      	bne.n	8006fba <memset+0xa>
 8006fb8:	4770      	bx	lr
 8006fba:	f803 1b01 	strb.w	r1, [r3], #1
 8006fbe:	e7f9      	b.n	8006fb4 <memset+0x4>

08006fc0 <__libc_init_array>:
 8006fc0:	b570      	push	{r4, r5, r6, lr}
 8006fc2:	4d0d      	ldr	r5, [pc, #52]	; (8006ff8 <__libc_init_array+0x38>)
 8006fc4:	2600      	movs	r6, #0
 8006fc6:	4c0d      	ldr	r4, [pc, #52]	; (8006ffc <__libc_init_array+0x3c>)
 8006fc8:	1b64      	subs	r4, r4, r5
 8006fca:	10a4      	asrs	r4, r4, #2
 8006fcc:	42a6      	cmp	r6, r4
 8006fce:	d109      	bne.n	8006fe4 <__libc_init_array+0x24>
 8006fd0:	4d0b      	ldr	r5, [pc, #44]	; (8007000 <__libc_init_array+0x40>)
 8006fd2:	2600      	movs	r6, #0
 8006fd4:	4c0b      	ldr	r4, [pc, #44]	; (8007004 <__libc_init_array+0x44>)
 8006fd6:	f000 f817 	bl	8007008 <_init>
 8006fda:	1b64      	subs	r4, r4, r5
 8006fdc:	10a4      	asrs	r4, r4, #2
 8006fde:	42a6      	cmp	r6, r4
 8006fe0:	d105      	bne.n	8006fee <__libc_init_array+0x2e>
 8006fe2:	bd70      	pop	{r4, r5, r6, pc}
 8006fe4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fe8:	3601      	adds	r6, #1
 8006fea:	4798      	blx	r3
 8006fec:	e7ee      	b.n	8006fcc <__libc_init_array+0xc>
 8006fee:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ff2:	3601      	adds	r6, #1
 8006ff4:	4798      	blx	r3
 8006ff6:	e7f2      	b.n	8006fde <__libc_init_array+0x1e>
 8006ff8:	08007148 	.word	0x08007148
 8006ffc:	08007148 	.word	0x08007148
 8007000:	08007148 	.word	0x08007148
 8007004:	0800714c 	.word	0x0800714c

08007008 <_init>:
 8007008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800700a:	bf00      	nop
 800700c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800700e:	bc08      	pop	{r3}
 8007010:	469e      	mov	lr, r3
 8007012:	4770      	bx	lr

08007014 <_fini>:
 8007014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007016:	bf00      	nop
 8007018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800701a:	bc08      	pop	{r3}
 800701c:	469e      	mov	lr, r3
 800701e:	4770      	bx	lr
