
STM32_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070c0  08000250  08000250  00010250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08007310  08007310  00017310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800741c  0800741c  0001741c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007424  08007424  00017424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007428  08007428  00017428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000009  20000000  0800742c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000144  2000000c  08007435  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000150  08007435  00020150  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020009  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003f  2**0
                  CONTENTS, READONLY
 11 .debug_info   00013b3b  00000000  00000000  00020082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000028c6  00000000  00000000  00033bbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000ec8  00000000  00000000  00036488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000b42  00000000  00000000  00037350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00035b8b  00000000  00000000  00037e92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00015192  00000000  00000000  0006da1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0014c60c  00000000  00000000  00082baf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00003bf0  00000000  00000000  001cf1bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000083  00000000  00000000  001d2dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	; (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	2000000c 	.word	0x2000000c
 800026c:	00000000 	.word	0x00000000
 8000270:	080072f8 	.word	0x080072f8

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	; (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000010 	.word	0x20000010
 800028c:	080072f8 	.word	0x080072f8

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b982 	b.w	80005ac <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d146      	bne.n	800035e <__udivmoddi4+0x9e>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d95e      	bls.n	8000394 <__udivmoddi4+0xd4>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	409c      	lsls	r4, r3
 80002e8:	fa20 f202 	lsr.w	r2, r0, r2
 80002ec:	4317      	orrs	r7, r2
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	0c22      	lsrs	r2, r4, #16
 80002f8:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	fb01 f005 	mul.w	r0, r1, r5
 8000304:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000308:	4290      	cmp	r0, r2
 800030a:	d908      	bls.n	800031e <__udivmoddi4+0x5e>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x5c>
 8000316:	4290      	cmp	r0, r2
 8000318:	f200 8134 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 800031c:	4639      	mov	r1, r7
 800031e:	1a12      	subs	r2, r2, r0
 8000320:	b2a4      	uxth	r4, r4
 8000322:	fbb2 f0fe 	udiv	r0, r2, lr
 8000326:	fb0e 2210 	mls	r2, lr, r0, r2
 800032a:	fb00 f505 	mul.w	r5, r0, r5
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	42a5      	cmp	r5, r4
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x88>
 8000336:	eb1c 0404 	adds.w	r4, ip, r4
 800033a:	f100 32ff 	add.w	r2, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x86>
 8000340:	42a5      	cmp	r5, r4
 8000342:	f200 8119 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 8000346:	4610      	mov	r0, r2
 8000348:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034c:	1b64      	subs	r4, r4, r5
 800034e:	2100      	movs	r1, #0
 8000350:	b11e      	cbz	r6, 800035a <__udivmoddi4+0x9a>
 8000352:	40dc      	lsrs	r4, r3
 8000354:	2300      	movs	r3, #0
 8000356:	e9c6 4300 	strd	r4, r3, [r6]
 800035a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0xb4>
 8000362:	2e00      	cmp	r6, #0
 8000364:	f000 80fc 	beq.w	8000560 <__udivmoddi4+0x2a0>
 8000368:	2100      	movs	r1, #0
 800036a:	e9c6 0500 	strd	r0, r5, [r6]
 800036e:	4608      	mov	r0, r1
 8000370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000374:	fab3 f183 	clz	r1, r3
 8000378:	2900      	cmp	r1, #0
 800037a:	d14c      	bne.n	8000416 <__udivmoddi4+0x156>
 800037c:	42ab      	cmp	r3, r5
 800037e:	f0c0 80f2 	bcc.w	8000566 <__udivmoddi4+0x2a6>
 8000382:	4282      	cmp	r2, r0
 8000384:	f240 80ef 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000388:	4608      	mov	r0, r1
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e5      	beq.n	800035a <__udivmoddi4+0x9a>
 800038e:	e9c6 4700 	strd	r4, r7, [r6]
 8000392:	e7e2      	b.n	800035a <__udivmoddi4+0x9a>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xd8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f382 	clz	r3, r2
 800039c:	2b00      	cmp	r3, #0
 800039e:	f040 809f 	bne.w	80004e0 <__udivmoddi4+0x220>
 80003a2:	1a8a      	subs	r2, r1, r2
 80003a4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a8:	fa1f f78c 	uxth.w	r7, ip
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb2 f5fe 	udiv	r5, r2, lr
 80003b2:	fb0e 2015 	mls	r0, lr, r5, r2
 80003b6:	0c22      	lsrs	r2, r4, #16
 80003b8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003bc:	fb07 f005 	mul.w	r0, r7, r5
 80003c0:	4290      	cmp	r0, r2
 80003c2:	d90f      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003c4:	eb1c 0202 	adds.w	r2, ip, r2
 80003c8:	f105 38ff 	add.w	r8, r5, #4294967295
 80003cc:	bf2c      	ite	cs
 80003ce:	f04f 0901 	movcs.w	r9, #1
 80003d2:	f04f 0900 	movcc.w	r9, #0
 80003d6:	4290      	cmp	r0, r2
 80003d8:	d903      	bls.n	80003e2 <__udivmoddi4+0x122>
 80003da:	f1b9 0f00 	cmp.w	r9, #0
 80003de:	f000 80ce 	beq.w	800057e <__udivmoddi4+0x2be>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ec:	fb0e 2210 	mls	r2, lr, r0, r2
 80003f0:	fb00 f707 	mul.w	r7, r0, r7
 80003f4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f8:	42a7      	cmp	r7, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	42a7      	cmp	r7, r4
 8000408:	f200 80b3 	bhi.w	8000572 <__udivmoddi4+0x2b2>
 800040c:	4610      	mov	r0, r2
 800040e:	1be4      	subs	r4, r4, r7
 8000410:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000414:	e79c      	b.n	8000350 <__udivmoddi4+0x90>
 8000416:	f1c1 0420 	rsb	r4, r1, #32
 800041a:	408b      	lsls	r3, r1
 800041c:	fa05 fc01 	lsl.w	ip, r5, r1
 8000420:	fa22 f704 	lsr.w	r7, r2, r4
 8000424:	40e5      	lsrs	r5, r4
 8000426:	408a      	lsls	r2, r1
 8000428:	431f      	orrs	r7, r3
 800042a:	fa20 f304 	lsr.w	r3, r0, r4
 800042e:	4088      	lsls	r0, r1
 8000430:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000440:	fbb5 fef8 	udiv	lr, r5, r8
 8000444:	fb08 551e 	mls	r5, r8, lr, r5
 8000448:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800044c:	fb0e f90c 	mul.w	r9, lr, ip
 8000450:	45a9      	cmp	r9, r5
 8000452:	d90e      	bls.n	8000472 <__udivmoddi4+0x1b2>
 8000454:	197d      	adds	r5, r7, r5
 8000456:	f10e 3aff 	add.w	sl, lr, #4294967295
 800045a:	bf2c      	ite	cs
 800045c:	f04f 0b01 	movcs.w	fp, #1
 8000460:	f04f 0b00 	movcc.w	fp, #0
 8000464:	45a9      	cmp	r9, r5
 8000466:	d903      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000468:	f1bb 0f00 	cmp.w	fp, #0
 800046c:	f000 808d 	beq.w	800058a <__udivmoddi4+0x2ca>
 8000470:	46d6      	mov	lr, sl
 8000472:	eba5 0509 	sub.w	r5, r5, r9
 8000476:	fa1f f983 	uxth.w	r9, r3
 800047a:	fbb5 f3f8 	udiv	r3, r5, r8
 800047e:	fb08 5513 	mls	r5, r8, r3, r5
 8000482:	fb03 fc0c 	mul.w	ip, r3, ip
 8000486:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800048a:	45ac      	cmp	ip, r5
 800048c:	d906      	bls.n	800049c <__udivmoddi4+0x1dc>
 800048e:	197d      	adds	r5, r7, r5
 8000490:	f103 38ff 	add.w	r8, r3, #4294967295
 8000494:	d201      	bcs.n	800049a <__udivmoddi4+0x1da>
 8000496:	45ac      	cmp	ip, r5
 8000498:	d87e      	bhi.n	8000598 <__udivmoddi4+0x2d8>
 800049a:	4643      	mov	r3, r8
 800049c:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80004a0:	eba5 050c 	sub.w	r5, r5, ip
 80004a4:	fba3 9802 	umull	r9, r8, r3, r2
 80004a8:	4545      	cmp	r5, r8
 80004aa:	46ce      	mov	lr, r9
 80004ac:	46c4      	mov	ip, r8
 80004ae:	d302      	bcc.n	80004b6 <__udivmoddi4+0x1f6>
 80004b0:	d106      	bne.n	80004c0 <__udivmoddi4+0x200>
 80004b2:	4548      	cmp	r0, r9
 80004b4:	d204      	bcs.n	80004c0 <__udivmoddi4+0x200>
 80004b6:	3b01      	subs	r3, #1
 80004b8:	ebb9 0e02 	subs.w	lr, r9, r2
 80004bc:	eb68 0c07 	sbc.w	ip, r8, r7
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d06f      	beq.n	80005a4 <__udivmoddi4+0x2e4>
 80004c4:	ebb0 020e 	subs.w	r2, r0, lr
 80004c8:	eb65 050c 	sbc.w	r5, r5, ip
 80004cc:	40ca      	lsrs	r2, r1
 80004ce:	fa05 f404 	lsl.w	r4, r5, r4
 80004d2:	40cd      	lsrs	r5, r1
 80004d4:	4618      	mov	r0, r3
 80004d6:	4314      	orrs	r4, r2
 80004d8:	2100      	movs	r1, #0
 80004da:	e9c6 4500 	strd	r4, r5, [r6]
 80004de:	e73c      	b.n	800035a <__udivmoddi4+0x9a>
 80004e0:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e4:	f1c3 0220 	rsb	r2, r3, #32
 80004e8:	4099      	lsls	r1, r3
 80004ea:	409c      	lsls	r4, r3
 80004ec:	40d5      	lsrs	r5, r2
 80004ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004f2:	fa20 f202 	lsr.w	r2, r0, r2
 80004f6:	fa1f f78c 	uxth.w	r7, ip
 80004fa:	fbb5 f0fe 	udiv	r0, r5, lr
 80004fe:	430a      	orrs	r2, r1
 8000500:	fb0e 5510 	mls	r5, lr, r0, r5
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f507 	mul.w	r5, r0, r7
 800050e:	428d      	cmp	r5, r1
 8000510:	d90e      	bls.n	8000530 <__udivmoddi4+0x270>
 8000512:	eb1c 0101 	adds.w	r1, ip, r1
 8000516:	f100 38ff 	add.w	r8, r0, #4294967295
 800051a:	bf2c      	ite	cs
 800051c:	f04f 0901 	movcs.w	r9, #1
 8000520:	f04f 0900 	movcc.w	r9, #0
 8000524:	428d      	cmp	r5, r1
 8000526:	d902      	bls.n	800052e <__udivmoddi4+0x26e>
 8000528:	f1b9 0f00 	cmp.w	r9, #0
 800052c:	d031      	beq.n	8000592 <__udivmoddi4+0x2d2>
 800052e:	4640      	mov	r0, r8
 8000530:	1b49      	subs	r1, r1, r5
 8000532:	b292      	uxth	r2, r2
 8000534:	fbb1 f5fe 	udiv	r5, r1, lr
 8000538:	fb0e 1115 	mls	r1, lr, r5, r1
 800053c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000540:	fb05 f107 	mul.w	r1, r5, r7
 8000544:	4291      	cmp	r1, r2
 8000546:	d907      	bls.n	8000558 <__udivmoddi4+0x298>
 8000548:	eb1c 0202 	adds.w	r2, ip, r2
 800054c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x296>
 8000552:	4291      	cmp	r1, r2
 8000554:	d823      	bhi.n	800059e <__udivmoddi4+0x2de>
 8000556:	4645      	mov	r5, r8
 8000558:	1a52      	subs	r2, r2, r1
 800055a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800055e:	e726      	b.n	80003ae <__udivmoddi4+0xee>
 8000560:	4631      	mov	r1, r6
 8000562:	4630      	mov	r0, r6
 8000564:	e6f9      	b.n	800035a <__udivmoddi4+0x9a>
 8000566:	1a84      	subs	r4, r0, r2
 8000568:	eb65 0203 	sbc.w	r2, r5, r3
 800056c:	2001      	movs	r0, #1
 800056e:	4617      	mov	r7, r2
 8000570:	e70b      	b.n	800038a <__udivmoddi4+0xca>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e74a      	b.n	800040e <__udivmoddi4+0x14e>
 8000578:	4464      	add	r4, ip
 800057a:	3802      	subs	r0, #2
 800057c:	e6e4      	b.n	8000348 <__udivmoddi4+0x88>
 800057e:	3d02      	subs	r5, #2
 8000580:	4462      	add	r2, ip
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	3902      	subs	r1, #2
 8000586:	4462      	add	r2, ip
 8000588:	e6c9      	b.n	800031e <__udivmoddi4+0x5e>
 800058a:	f1ae 0e02 	sub.w	lr, lr, #2
 800058e:	443d      	add	r5, r7
 8000590:	e76f      	b.n	8000472 <__udivmoddi4+0x1b2>
 8000592:	3802      	subs	r0, #2
 8000594:	4461      	add	r1, ip
 8000596:	e7cb      	b.n	8000530 <__udivmoddi4+0x270>
 8000598:	3b02      	subs	r3, #2
 800059a:	443d      	add	r5, r7
 800059c:	e77e      	b.n	800049c <__udivmoddi4+0x1dc>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	e7d9      	b.n	8000558 <__udivmoddi4+0x298>
 80005a4:	4618      	mov	r0, r3
 80005a6:	4631      	mov	r1, r6
 80005a8:	e6d7      	b.n	800035a <__udivmoddi4+0x9a>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08c      	sub	sp, #48	; 0x30
 80005b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	f107 031c 	add.w	r3, r7, #28
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	4b60      	ldr	r3, [pc, #384]	; (8000748 <MX_GPIO_Init+0x198>)
 80005c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005cc:	4a5e      	ldr	r2, [pc, #376]	; (8000748 <MX_GPIO_Init+0x198>)
 80005ce:	f043 0301 	orr.w	r3, r3, #1
 80005d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80005d6:	4b5c      	ldr	r3, [pc, #368]	; (8000748 <MX_GPIO_Init+0x198>)
 80005d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005dc:	f003 0301 	and.w	r3, r3, #1
 80005e0:	61bb      	str	r3, [r7, #24]
 80005e2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005e4:	4b58      	ldr	r3, [pc, #352]	; (8000748 <MX_GPIO_Init+0x198>)
 80005e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005ea:	4a57      	ldr	r2, [pc, #348]	; (8000748 <MX_GPIO_Init+0x198>)
 80005ec:	f043 0320 	orr.w	r3, r3, #32
 80005f0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80005f4:	4b54      	ldr	r3, [pc, #336]	; (8000748 <MX_GPIO_Init+0x198>)
 80005f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005fa:	f003 0320 	and.w	r3, r3, #32
 80005fe:	617b      	str	r3, [r7, #20]
 8000600:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000602:	4b51      	ldr	r3, [pc, #324]	; (8000748 <MX_GPIO_Init+0x198>)
 8000604:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000608:	4a4f      	ldr	r2, [pc, #316]	; (8000748 <MX_GPIO_Init+0x198>)
 800060a:	f043 0308 	orr.w	r3, r3, #8
 800060e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000612:	4b4d      	ldr	r3, [pc, #308]	; (8000748 <MX_GPIO_Init+0x198>)
 8000614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000618:	f003 0308 	and.w	r3, r3, #8
 800061c:	613b      	str	r3, [r7, #16]
 800061e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000620:	4b49      	ldr	r3, [pc, #292]	; (8000748 <MX_GPIO_Init+0x198>)
 8000622:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000626:	4a48      	ldr	r2, [pc, #288]	; (8000748 <MX_GPIO_Init+0x198>)
 8000628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800062c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000630:	4b45      	ldr	r3, [pc, #276]	; (8000748 <MX_GPIO_Init+0x198>)
 8000632:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063e:	4b42      	ldr	r3, [pc, #264]	; (8000748 <MX_GPIO_Init+0x198>)
 8000640:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000644:	4a40      	ldr	r2, [pc, #256]	; (8000748 <MX_GPIO_Init+0x198>)
 8000646:	f043 0304 	orr.w	r3, r3, #4
 800064a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800064e:	4b3e      	ldr	r3, [pc, #248]	; (8000748 <MX_GPIO_Init+0x198>)
 8000650:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000654:	f003 0304 	and.w	r3, r3, #4
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065c:	4b3a      	ldr	r3, [pc, #232]	; (8000748 <MX_GPIO_Init+0x198>)
 800065e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000662:	4a39      	ldr	r2, [pc, #228]	; (8000748 <MX_GPIO_Init+0x198>)
 8000664:	f043 0302 	orr.w	r3, r3, #2
 8000668:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800066c:	4b36      	ldr	r3, [pc, #216]	; (8000748 <MX_GPIO_Init+0x198>)
 800066e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000672:	f003 0302 	and.w	r3, r3, #2
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000680:	4832      	ldr	r0, [pc, #200]	; (800074c <MX_GPIO_Init+0x19c>)
 8000682:	f000 fedf 	bl	8001444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800068c:	4830      	ldr	r0, [pc, #192]	; (8000750 <MX_GPIO_Init+0x1a0>)
 800068e:	f000 fed9 	bl	8001444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000692:	2201      	movs	r2, #1
 8000694:	2104      	movs	r1, #4
 8000696:	482f      	ldr	r0, [pc, #188]	; (8000754 <MX_GPIO_Init+0x1a4>)
 8000698:	f000 fed4 	bl	8001444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800069c:	2201      	movs	r2, #1
 800069e:	2180      	movs	r1, #128	; 0x80
 80006a0:	482d      	ldr	r0, [pc, #180]	; (8000758 <MX_GPIO_Init+0x1a8>)
 80006a2:	f000 fecf 	bl	8001444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2180      	movs	r1, #128	; 0x80
 80006aa:	482c      	ldr	r0, [pc, #176]	; (800075c <MX_GPIO_Init+0x1ac>)
 80006ac:	f000 feca 	bl	8001444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 80006b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b6:	2301      	movs	r3, #1
 80006b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006be:	2300      	movs	r3, #0
 80006c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	4619      	mov	r1, r3
 80006c8:	4820      	ldr	r0, [pc, #128]	; (800074c <MX_GPIO_Init+0x19c>)
 80006ca:	f000 fce3 	bl	8001094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 80006ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	2301      	movs	r3, #1
 80006d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	2300      	movs	r3, #0
 80006de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	4619      	mov	r1, r3
 80006e6:	481a      	ldr	r0, [pc, #104]	; (8000750 <MX_GPIO_Init+0x1a0>)
 80006e8:	f000 fcd4 	bl	8001094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80006ec:	2304      	movs	r3, #4
 80006ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f0:	2301      	movs	r3, #1
 80006f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f8:	2300      	movs	r3, #0
 80006fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80006fc:	f107 031c 	add.w	r3, r7, #28
 8000700:	4619      	mov	r1, r3
 8000702:	4814      	ldr	r0, [pc, #80]	; (8000754 <MX_GPIO_Init+0x1a4>)
 8000704:	f000 fcc6 	bl	8001094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000708:	2380      	movs	r3, #128	; 0x80
 800070a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070c:	2301      	movs	r3, #1
 800070e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	2300      	movs	r3, #0
 8000716:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000718:	f107 031c 	add.w	r3, r7, #28
 800071c:	4619      	mov	r1, r3
 800071e:	480e      	ldr	r0, [pc, #56]	; (8000758 <MX_GPIO_Init+0x1a8>)
 8000720:	f000 fcb8 	bl	8001094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8000724:	2380      	movs	r3, #128	; 0x80
 8000726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	2300      	movs	r3, #0
 8000732:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000734:	f107 031c 	add.w	r3, r7, #28
 8000738:	4619      	mov	r1, r3
 800073a:	4808      	ldr	r0, [pc, #32]	; (800075c <MX_GPIO_Init+0x1ac>)
 800073c:	f000 fcaa 	bl	8001094 <HAL_GPIO_Init>

}
 8000740:	bf00      	nop
 8000742:	3730      	adds	r7, #48	; 0x30
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	46020c00 	.word	0x46020c00
 800074c:	42021400 	.word	0x42021400
 8000750:	42020c00 	.word	0x42020c00
 8000754:	42021800 	.word	0x42021800
 8000758:	42020800 	.word	0x42020800
 800075c:	42020400 	.word	0x42020400

08000760 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000764:	2000      	movs	r0, #0
 8000766:	f000 fe85 	bl	8001474 <HAL_ICACHE_ConfigAssociativityMode>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000770:	f000 f8cf 	bl	8000912 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000774:	f000 fe9e 	bl	80014b4 <HAL_ICACHE_Enable>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800077e:	f000 f8c8 	bl	8000912 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <LCD_Init>:

/* Includes ------------------------------------------------------------------*/
#include "main.h"

void LCD_Init(SPI_HandleTypeDef * spi_handler)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  //Start unlocking the EEProm
  uint8_t initFrequence[] = {0x38u, 0x38u, 0x38u, 0x38u, 0x08u, 0x01u, 0x06u, 0x0Fu};
 8000790:	4a15      	ldr	r2, [pc, #84]	; (80007e8 <LCD_Init+0x60>)
 8000792:	f107 030c 	add.w	r3, r7, #12
 8000796:	e892 0003 	ldmia.w	r2, {r0, r1}
 800079a:	e883 0003 	stmia.w	r3, {r0, r1}

  for (uint8_t i; i < sizeof(initFrequence); i++)
 800079e:	e01a      	b.n	80007d6 <LCD_Init+0x4e>
  {
    HAL_GPIO_WritePin(GPIOF, LCD_CS_Pin, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007a6:	4811      	ldr	r0, [pc, #68]	; (80007ec <LCD_Init+0x64>)
 80007a8:	f000 fe4c 	bl	8001444 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(spi_handler, &initFrequence[i], 1, 10);
 80007ac:	7dfb      	ldrb	r3, [r7, #23]
 80007ae:	f107 020c 	add.w	r2, r7, #12
 80007b2:	18d1      	adds	r1, r2, r3
 80007b4:	230a      	movs	r3, #10
 80007b6:	2201      	movs	r2, #1
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f005 fad1 	bl	8005d60 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOF, LCD_CS_Pin, GPIO_PIN_SET);
 80007be:	2201      	movs	r2, #1
 80007c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c4:	4809      	ldr	r0, [pc, #36]	; (80007ec <LCD_Init+0x64>)
 80007c6:	f000 fe3d 	bl	8001444 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80007ca:	200a      	movs	r0, #10
 80007cc:	f000 fb5a 	bl	8000e84 <HAL_Delay>
  for (uint8_t i; i < sizeof(initFrequence); i++)
 80007d0:	7dfb      	ldrb	r3, [r7, #23]
 80007d2:	3301      	adds	r3, #1
 80007d4:	75fb      	strb	r3, [r7, #23]
 80007d6:	7dfb      	ldrb	r3, [r7, #23]
 80007d8:	2b07      	cmp	r3, #7
 80007da:	d9e1      	bls.n	80007a0 <LCD_Init+0x18>
  }
}
 80007dc:	bf00      	nop
 80007de:	bf00      	nop
 80007e0:	3718      	adds	r7, #24
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	08007310 	.word	0x08007310
 80007ec:	42021400 	.word	0x42021400

080007f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t RX_Data[1] = {0};
 80007f6:	2300      	movs	r3, #0
 80007f8:	713b      	strb	r3, [r7, #4]
  uint8_t RX_Data_BREAK[] = "\r\n";
 80007fa:	4a16      	ldr	r2, [pc, #88]	; (8000854 <main+0x64>)
 80007fc:	463b      	mov	r3, r7
 80007fe:	6812      	ldr	r2, [r2, #0]
 8000800:	4611      	mov	r1, r2
 8000802:	8019      	strh	r1, [r3, #0]
 8000804:	3302      	adds	r3, #2
 8000806:	0c12      	lsrs	r2, r2, #16
 8000808:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080a:	f000 fab7 	bl	8000d7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080e:	f000 f827 	bl	8000860 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000812:	f000 f86e 	bl	80008f2 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000816:	f7ff fecb 	bl	80005b0 <MX_GPIO_Init>
  MX_ICACHE_Init();
 800081a:	f7ff ffa1 	bl	8000760 <MX_ICACHE_Init>
  MX_SPI1_Init();
 800081e:	f000 f87d 	bl	800091c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000822:	f000 f9cb 	bl	8000bbc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init(&hspi1);
 8000826:	480c      	ldr	r0, [pc, #48]	; (8000858 <main+0x68>)
 8000828:	f7ff ffae 	bl	8000788 <LCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_SPI_Receive(&hspi1, RX_Data, sizeof(RX_Data), 200);
 800082c:	1d39      	adds	r1, r7, #4
 800082e:	23c8      	movs	r3, #200	; 0xc8
 8000830:	2201      	movs	r2, #1
 8000832:	4809      	ldr	r0, [pc, #36]	; (8000858 <main+0x68>)
 8000834:	f005 fcb2 	bl	800619c <HAL_SPI_Receive>
	HAL_UART_Transmit(&huart1, RX_Data, sizeof(RX_Data), 200);
 8000838:	1d39      	adds	r1, r7, #4
 800083a:	23c8      	movs	r3, #200	; 0xc8
 800083c:	2201      	movs	r2, #1
 800083e:	4807      	ldr	r0, [pc, #28]	; (800085c <main+0x6c>)
 8000840:	f005 ffd6 	bl	80067f0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, RX_Data_BREAK, sizeof(RX_Data_BREAK), 200);
 8000844:	4639      	mov	r1, r7
 8000846:	23c8      	movs	r3, #200	; 0xc8
 8000848:	2203      	movs	r2, #3
 800084a:	4804      	ldr	r0, [pc, #16]	; (800085c <main+0x6c>)
 800084c:	f005 ffd0 	bl	80067f0 <HAL_UART_Transmit>
	HAL_SPI_Receive(&hspi1, RX_Data, sizeof(RX_Data), 200);
 8000850:	e7ec      	b.n	800082c <main+0x3c>
 8000852:	bf00      	nop
 8000854:	08007318 	.word	0x08007318
 8000858:	20000028 	.word	0x20000028
 800085c:	200000b8 	.word	0x200000b8

08000860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b09e      	sub	sp, #120	; 0x78
 8000864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000866:	f107 0318 	add.w	r3, r7, #24
 800086a:	2260      	movs	r2, #96	; 0x60
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f006 fd16 	bl	80072a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000874:	463b      	mov	r3, r7
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]
 8000882:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE3) != HAL_OK)
 8000884:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000888:	f000 fe24 	bl	80014d4 <HAL_PWREx_ControlVoltageScaling>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000892:	f000 f83e 	bl	8000912 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000896:	2310      	movs	r3, #16
 8000898:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800089a:	2301      	movs	r3, #1
 800089c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800089e:	2310      	movs	r3, #16
 80008a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008aa:	f107 0318 	add.w	r3, r7, #24
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 ff0c 	bl	80016cc <HAL_RCC_OscConfig>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80008ba:	f000 f82a 	bl	8000912 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008be:	231f      	movs	r3, #31
 80008c0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80008ce:	2360      	movs	r3, #96	; 0x60
 80008d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008d6:	463b      	mov	r3, r7
 80008d8:	2101      	movs	r1, #1
 80008da:	4618      	mov	r0, r3
 80008dc:	f001 fdd2 	bl	8002484 <HAL_RCC_ClockConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80008e6:	f000 f814 	bl	8000912 <Error_Handler>
  }
}
 80008ea:	bf00      	nop
 80008ec:	3778      	adds	r7, #120	; 0x78
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 80008f6:	f000 fec9 	bl	800168c <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008fa:	f000 fed7 	bl	80016ac <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80008fe:	2002      	movs	r0, #2
 8000900:	f000 fe74 	bl	80015ec <HAL_PWREx_ConfigSupply>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <SystemPower_Config+0x1c>
  {
    Error_Handler();
 800090a:	f000 f802 	bl	8000912 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}

08000912 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000916:	b672      	cpsid	i
}
 8000918:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800091a:	e7fe      	b.n	800091a <Error_Handler+0x8>

0800091c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800092c:	4b2e      	ldr	r3, [pc, #184]	; (80009e8 <MX_SPI1_Init+0xcc>)
 800092e:	4a2f      	ldr	r2, [pc, #188]	; (80009ec <MX_SPI1_Init+0xd0>)
 8000930:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000932:	4b2d      	ldr	r3, [pc, #180]	; (80009e8 <MX_SPI1_Init+0xcc>)
 8000934:	2200      	movs	r2, #0
 8000936:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000938:	4b2b      	ldr	r3, [pc, #172]	; (80009e8 <MX_SPI1_Init+0xcc>)
 800093a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800093e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000940:	4b29      	ldr	r3, [pc, #164]	; (80009e8 <MX_SPI1_Init+0xcc>)
 8000942:	2207      	movs	r2, #7
 8000944:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000946:	4b28      	ldr	r3, [pc, #160]	; (80009e8 <MX_SPI1_Init+0xcc>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800094c:	4b26      	ldr	r3, [pc, #152]	; (80009e8 <MX_SPI1_Init+0xcc>)
 800094e:	2200      	movs	r2, #0
 8000950:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000952:	4b25      	ldr	r3, [pc, #148]	; (80009e8 <MX_SPI1_Init+0xcc>)
 8000954:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000958:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800095a:	4b23      	ldr	r3, [pc, #140]	; (80009e8 <MX_SPI1_Init+0xcc>)
 800095c:	2200      	movs	r2, #0
 800095e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000960:	4b21      	ldr	r3, [pc, #132]	; (80009e8 <MX_SPI1_Init+0xcc>)
 8000962:	2200      	movs	r2, #0
 8000964:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000966:	4b20      	ldr	r3, [pc, #128]	; (80009e8 <MX_SPI1_Init+0xcc>)
 8000968:	2200      	movs	r2, #0
 800096a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800096c:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <MX_SPI1_Init+0xcc>)
 800096e:	2207      	movs	r2, #7
 8000970:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000972:	4b1d      	ldr	r3, [pc, #116]	; (80009e8 <MX_SPI1_Init+0xcc>)
 8000974:	2200      	movs	r2, #0
 8000976:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000978:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <MX_SPI1_Init+0xcc>)
 800097a:	2200      	movs	r2, #0
 800097c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800097e:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <MX_SPI1_Init+0xcc>)
 8000980:	2200      	movs	r2, #0
 8000982:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000984:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <MX_SPI1_Init+0xcc>)
 8000986:	2200      	movs	r2, #0
 8000988:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800098a:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <MX_SPI1_Init+0xcc>)
 800098c:	2200      	movs	r2, #0
 800098e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000990:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <MX_SPI1_Init+0xcc>)
 8000992:	2200      	movs	r2, #0
 8000994:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000996:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <MX_SPI1_Init+0xcc>)
 8000998:	2200      	movs	r2, #0
 800099a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <MX_SPI1_Init+0xcc>)
 800099e:	2200      	movs	r2, #0
 80009a0:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_SPI1_Init+0xcc>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <MX_SPI1_Init+0xcc>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009ae:	480e      	ldr	r0, [pc, #56]	; (80009e8 <MX_SPI1_Init+0xcc>)
 80009b0:	f005 f8c0 	bl	8005b34 <HAL_SPI_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80009ba:	f7ff ffaa 	bl	8000912 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 80009c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009c6:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	4619      	mov	r1, r3
 80009d0:	4805      	ldr	r0, [pc, #20]	; (80009e8 <MX_SPI1_Init+0xcc>)
 80009d2:	f005 fe7c 	bl	80066ce <HAL_SPIEx_SetConfigAutonomousMode>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_SPI1_Init+0xc4>
  {
    Error_Handler();
 80009dc:	f7ff ff99 	bl	8000912 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009e0:	bf00      	nop
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000028 	.word	0x20000028
 80009ec:	40013000 	.word	0x40013000

080009f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b0c0      	sub	sp, #256	; 0x100
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a08:	f107 0310 	add.w	r3, r7, #16
 8000a0c:	22d8      	movs	r2, #216	; 0xd8
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f006 fc45 	bl	80072a0 <memset>
  if(spiHandle->Instance==SPI1)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a27      	ldr	r2, [pc, #156]	; (8000ab8 <HAL_SPI_MspInit+0xc8>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d145      	bne.n	8000aac <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000a20:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a24:	f04f 0300 	mov.w	r3, #0
 8000a28:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PCLK2;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a32:	f107 0310 	add.w	r3, r7, #16
 8000a36:	4618      	mov	r0, r3
 8000a38:	f002 f8fa 	bl	8002c30 <HAL_RCCEx_PeriphCLKConfig>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8000a42:	f7ff ff66 	bl	8000912 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a46:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <HAL_SPI_MspInit+0xcc>)
 8000a48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000a4c:	4a1b      	ldr	r2, [pc, #108]	; (8000abc <HAL_SPI_MspInit+0xcc>)
 8000a4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a52:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000a56:	4b19      	ldr	r3, [pc, #100]	; (8000abc <HAL_SPI_MspInit+0xcc>)
 8000a58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000a5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a64:	4b15      	ldr	r3, [pc, #84]	; (8000abc <HAL_SPI_MspInit+0xcc>)
 8000a66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a6a:	4a14      	ldr	r2, [pc, #80]	; (8000abc <HAL_SPI_MspInit+0xcc>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <HAL_SPI_MspInit+0xcc>)
 8000a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000a82:	23a0      	movs	r3, #160	; 0xa0
 8000a84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a9a:	2305      	movs	r3, #5
 8000a9c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4806      	ldr	r0, [pc, #24]	; (8000ac0 <HAL_SPI_MspInit+0xd0>)
 8000aa8:	f000 faf4 	bl	8001094 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000aac:	bf00      	nop
 8000aae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40013000 	.word	0x40013000
 8000abc:	46020c00 	.word	0x46020c00
 8000ac0:	42020000 	.word	0x42020000

08000ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <HAL_MspInit+0x30>)
 8000acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ad0:	4a08      	ldr	r2, [pc, #32]	; (8000af4 <HAL_MspInit+0x30>)
 8000ad2:	f043 0304 	orr.w	r3, r3, #4
 8000ad6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_MspInit+0x30>)
 8000adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ae0:	f003 0304 	and.w	r3, r3, #4
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	46020c00 	.word	0x46020c00

08000af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <NMI_Handler+0x4>

08000afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <HardFault_Handler+0x4>

08000b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <MemManage_Handler+0x4>

08000b0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <BusFault_Handler+0x4>

08000b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <UsageFault_Handler+0x4>

08000b16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b44:	f000 f97e 	bl	8000e44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b50:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <SystemInit+0x68>)
 8000b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b56:	4a17      	ldr	r2, [pc, #92]	; (8000bb4 <SystemInit+0x68>)
 8000b58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000b60:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <SystemInit+0x6c>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000b66:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <SystemInit+0x6c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000b6c:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <SystemInit+0x6c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <SystemInit+0x6c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <SystemInit+0x6c>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a0e      	ldr	r2, [pc, #56]	; (8000bb8 <SystemInit+0x6c>)
 8000b7e:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b82:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b86:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000b88:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <SystemInit+0x6c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <SystemInit+0x6c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a09      	ldr	r2, [pc, #36]	; (8000bb8 <SystemInit+0x6c>)
 8000b94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b98:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000b9a:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <SystemInit+0x6c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ba0:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <SystemInit+0x68>)
 8000ba2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ba6:	609a      	str	r2, [r3, #8]
  #endif
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000ed00 	.word	0xe000ed00
 8000bb8:	46020c00 	.word	0x46020c00

08000bbc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bc0:	4b22      	ldr	r3, [pc, #136]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000bc2:	4a23      	ldr	r2, [pc, #140]	; (8000c50 <MX_USART1_UART_Init+0x94>)
 8000bc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bc6:	4b21      	ldr	r3, [pc, #132]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000bc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bcc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bce:	4b1f      	ldr	r3, [pc, #124]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bd4:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bda:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000be0:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000be2:	220c      	movs	r2, #12
 8000be4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be6:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bec:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bf2:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c04:	4811      	ldr	r0, [pc, #68]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000c06:	f005 fda3 	bl	8006750 <HAL_UART_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c10:	f7ff fe7f 	bl	8000912 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c14:	2100      	movs	r1, #0
 8000c16:	480d      	ldr	r0, [pc, #52]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000c18:	f006 fa78 	bl	800710c <HAL_UARTEx_SetTxFifoThreshold>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c22:	f7ff fe76 	bl	8000912 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c26:	2100      	movs	r1, #0
 8000c28:	4808      	ldr	r0, [pc, #32]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000c2a:	f006 faad 	bl	8007188 <HAL_UARTEx_SetRxFifoThreshold>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c34:	f7ff fe6d 	bl	8000912 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c38:	4804      	ldr	r0, [pc, #16]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000c3a:	f006 fa2e 	bl	800709a <HAL_UARTEx_DisableFifoMode>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c44:	f7ff fe65 	bl	8000912 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	200000b8 	.word	0x200000b8
 8000c50:	40013800 	.word	0x40013800

08000c54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b0c0      	sub	sp, #256	; 0x100
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c6c:	f107 0310 	add.w	r3, r7, #16
 8000c70:	22d8      	movs	r2, #216	; 0xd8
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f006 fb13 	bl	80072a0 <memset>
  if(uartHandle->Instance==USART1)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a27      	ldr	r2, [pc, #156]	; (8000d1c <HAL_UART_MspInit+0xc8>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d145      	bne.n	8000d10 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c84:	f04f 0201 	mov.w	r2, #1
 8000c88:	f04f 0300 	mov.w	r3, #0
 8000c8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c90:	2300      	movs	r3, #0
 8000c92:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c94:	f107 0310 	add.w	r3, r7, #16
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f001 ffc9 	bl	8002c30 <HAL_RCCEx_PeriphCLKConfig>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000ca4:	f7ff fe35 	bl	8000912 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ca8:	4b1d      	ldr	r3, [pc, #116]	; (8000d20 <HAL_UART_MspInit+0xcc>)
 8000caa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000cae:	4a1c      	ldr	r2, [pc, #112]	; (8000d20 <HAL_UART_MspInit+0xcc>)
 8000cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb4:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000cb8:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <HAL_UART_MspInit+0xcc>)
 8000cba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc6:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <HAL_UART_MspInit+0xcc>)
 8000cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ccc:	4a14      	ldr	r2, [pc, #80]	; (8000d20 <HAL_UART_MspInit+0xcc>)
 8000cce:	f043 0301 	orr.w	r3, r3, #1
 8000cd2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000cd6:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <HAL_UART_MspInit+0xcc>)
 8000cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ce4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ce8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cec:	2302      	movs	r3, #2
 8000cee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cfe:	2307      	movs	r3, #7
 8000d00:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d04:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4806      	ldr	r0, [pc, #24]	; (8000d24 <HAL_UART_MspInit+0xd0>)
 8000d0c:	f000 f9c2 	bl	8001094 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d10:	bf00      	nop
 8000d12:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40013800 	.word	0x40013800
 8000d20:	46020c00 	.word	0x46020c00
 8000d24:	42020000 	.word	0x42020000

08000d28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000d28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d60 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d2c:	f7ff ff0e 	bl	8000b4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d30:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d32:	e003      	b.n	8000d3c <LoopCopyDataInit>

08000d34 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d34:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d36:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d38:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d3a:	3104      	adds	r1, #4

08000d3c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d3c:	480a      	ldr	r0, [pc, #40]	; (8000d68 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000d40:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000d42:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d44:	d3f6      	bcc.n	8000d34 <CopyDataInit>
	ldr	r2, =_sbss
 8000d46:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d48:	e002      	b.n	8000d50 <LoopFillZerobss>

08000d4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d4a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d4c:	f842 3b04 	str.w	r3, [r2], #4

08000d50 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <LoopForever+0x16>)
	cmp	r2, r3
 8000d52:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d54:	d3f9      	bcc.n	8000d4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d56:	f006 faab 	bl	80072b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d5a:	f7ff fd49 	bl	80007f0 <main>

08000d5e <LoopForever>:

LoopForever:
    b LoopForever
 8000d5e:	e7fe      	b.n	8000d5e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000d60:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8000d64:	0800742c 	.word	0x0800742c
	ldr	r0, =_sdata
 8000d68:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d6c:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8000d70:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000d74:	20000150 	.word	0x20000150

08000d78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d78:	e7fe      	b.n	8000d78 <ADC1_2_IRQHandler>
	...

08000d7c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <HAL_Init+0x4c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a10      	ldr	r2, [pc, #64]	; (8000dc8 <HAL_Init+0x4c>)
 8000d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d8c:	2003      	movs	r0, #3
 8000d8e:	f000 f94f 	bl	8001030 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000d92:	f001 fd69 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 8000d96:	4602      	mov	r2, r0
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <HAL_Init+0x50>)
 8000d9a:	6a1b      	ldr	r3, [r3, #32]
 8000d9c:	f003 030f 	and.w	r3, r3, #15
 8000da0:	490b      	ldr	r1, [pc, #44]	; (8000dd0 <HAL_Init+0x54>)
 8000da2:	5ccb      	ldrb	r3, [r1, r3]
 8000da4:	fa22 f303 	lsr.w	r3, r2, r3
 8000da8:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <HAL_Init+0x58>)
 8000daa:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dac:	200f      	movs	r0, #15
 8000dae:	f000 f813 	bl	8000dd8 <HAL_InitTick>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	e002      	b.n	8000dc2 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000dbc:	f7ff fe82 	bl	8000ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40022000 	.word	0x40022000
 8000dcc:	46020c00 	.word	0x46020c00
 8000dd0:	0800731c 	.word	0x0800731c
 8000dd4:	20000000 	.word	0x20000000

08000dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000de0:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <HAL_InitTick+0x60>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d101      	bne.n	8000dec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	e021      	b.n	8000e30 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000dec:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <HAL_InitTick+0x64>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_InitTick+0x60>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	4619      	mov	r1, r3
 8000df6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 f939 	bl	800107a <HAL_SYSTICK_Config>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e00e      	b.n	8000e30 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2b0f      	cmp	r3, #15
 8000e16:	d80a      	bhi.n	8000e2e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	6879      	ldr	r1, [r7, #4]
 8000e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e20:	f000 f911 	bl	8001046 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e24:	4a06      	ldr	r2, [pc, #24]	; (8000e40 <HAL_InitTick+0x68>)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	e000      	b.n	8000e30 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000008 	.word	0x20000008
 8000e3c:	20000000 	.word	0x20000000
 8000e40:	20000004 	.word	0x20000004

08000e44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_IncTick+0x20>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_IncTick+0x24>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4413      	add	r3, r2
 8000e54:	4a04      	ldr	r2, [pc, #16]	; (8000e68 <HAL_IncTick+0x24>)
 8000e56:	6013      	str	r3, [r2, #0]
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	20000008 	.word	0x20000008
 8000e68:	2000014c 	.word	0x2000014c

08000e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e70:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <HAL_GetTick+0x14>)
 8000e72:	681b      	ldr	r3, [r3, #0]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	2000014c 	.word	0x2000014c

08000e84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e8c:	f7ff ffee 	bl	8000e6c <HAL_GetTick>
 8000e90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e9c:	d005      	beq.n	8000eaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <HAL_Delay+0x44>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eaa:	bf00      	nop
 8000eac:	f7ff ffde 	bl	8000e6c <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d8f7      	bhi.n	8000eac <HAL_Delay+0x28>
  {
  }
}
 8000ebc:	bf00      	nop
 8000ebe:	bf00      	nop
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000008 	.word	0x20000008

08000ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <__NVIC_SetPriorityGrouping+0x44>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee8:	4013      	ands	r3, r2
 8000eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efe:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <__NVIC_SetPriorityGrouping+0x44>)
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	60d3      	str	r3, [r2, #12]
}
 8000f04:	bf00      	nop
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f18:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <__NVIC_GetPriorityGrouping+0x18>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	0a1b      	lsrs	r3, r3, #8
 8000f1e:	f003 0307 	and.w	r3, r3, #7
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	6039      	str	r1, [r7, #0]
 8000f3a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	db0a      	blt.n	8000f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	490c      	ldr	r1, [pc, #48]	; (8000f7c <__NVIC_SetPriority+0x4c>)
 8000f4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f4e:	0112      	lsls	r2, r2, #4
 8000f50:	b2d2      	uxtb	r2, r2
 8000f52:	440b      	add	r3, r1
 8000f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f58:	e00a      	b.n	8000f70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4908      	ldr	r1, [pc, #32]	; (8000f80 <__NVIC_SetPriority+0x50>)
 8000f60:	88fb      	ldrh	r3, [r7, #6]
 8000f62:	f003 030f 	and.w	r3, r3, #15
 8000f66:	3b04      	subs	r3, #4
 8000f68:	0112      	lsls	r2, r2, #4
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	761a      	strb	r2, [r3, #24]
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000e100 	.word	0xe000e100
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b089      	sub	sp, #36	; 0x24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	f1c3 0307 	rsb	r3, r3, #7
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	bf28      	it	cs
 8000fa2:	2304      	movcs	r3, #4
 8000fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	2b06      	cmp	r3, #6
 8000fac:	d902      	bls.n	8000fb4 <NVIC_EncodePriority+0x30>
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3b03      	subs	r3, #3
 8000fb2:	e000      	b.n	8000fb6 <NVIC_EncodePriority+0x32>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43da      	mvns	r2, r3
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd6:	43d9      	mvns	r1, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	4313      	orrs	r3, r2
         );
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3724      	adds	r7, #36	; 0x24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
	...

08000fec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ffc:	d301      	bcc.n	8001002 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ffe:	2301      	movs	r3, #1
 8001000:	e00f      	b.n	8001022 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001002:	4a0a      	ldr	r2, [pc, #40]	; (800102c <SysTick_Config+0x40>)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3b01      	subs	r3, #1
 8001008:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800100a:	210f      	movs	r1, #15
 800100c:	f04f 30ff 	mov.w	r0, #4294967295
 8001010:	f7ff ff8e 	bl	8000f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <SysTick_Config+0x40>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800101a:	4b04      	ldr	r3, [pc, #16]	; (800102c <SysTick_Config+0x40>)
 800101c:	2207      	movs	r2, #7
 800101e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	e000e010 	.word	0xe000e010

08001030 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff ff47 	bl	8000ecc <__NVIC_SetPriorityGrouping>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b086      	sub	sp, #24
 800104a:	af00      	add	r7, sp, #0
 800104c:	4603      	mov	r3, r0
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]
 8001052:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001054:	f7ff ff5e 	bl	8000f14 <__NVIC_GetPriorityGrouping>
 8001058:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	68b9      	ldr	r1, [r7, #8]
 800105e:	6978      	ldr	r0, [r7, #20]
 8001060:	f7ff ff90 	bl	8000f84 <NVIC_EncodePriority>
 8001064:	4602      	mov	r2, r0
 8001066:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800106a:	4611      	mov	r1, r2
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ff5f 	bl	8000f30 <__NVIC_SetPriority>
}
 8001072:	bf00      	nop
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ffb2 	bl	8000fec <SysTick_Config>
 8001088:	4603      	mov	r3, r0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001094:	b480      	push	{r7}
 8001096:	b089      	sub	sp, #36	; 0x24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80010a6:	e1ba      	b.n	800141e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	2101      	movs	r1, #1
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	fa01 f303 	lsl.w	r3, r1, r3
 80010b4:	4013      	ands	r3, r2
 80010b6:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f000 81aa 	beq.w	8001418 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a55      	ldr	r2, [pc, #340]	; (800121c <HAL_GPIO_Init+0x188>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d15d      	bne.n	8001188 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80010d2:	2201      	movs	r2, #1
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	69fa      	ldr	r2, [r7, #28]
 80010de:	4013      	ands	r3, r2
 80010e0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 0201 	and.w	r2, r3, #1
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	69fa      	ldr	r2, [r7, #28]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	69fa      	ldr	r2, [r7, #28]
 80010fa:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80010fc:	4a48      	ldr	r2, [pc, #288]	; (8001220 <HAL_GPIO_Init+0x18c>)
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001104:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001106:	4a46      	ldr	r2, [pc, #280]	; (8001220 <HAL_GPIO_Init+0x18c>)
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	4413      	add	r3, r2
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	08da      	lsrs	r2, r3, #3
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	3208      	adds	r2, #8
 800111a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800111e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	220f      	movs	r2, #15
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	69fa      	ldr	r2, [r7, #28]
 8001132:	4013      	ands	r3, r2
 8001134:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	f003 0307 	and.w	r3, r3, #7
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	220b      	movs	r2, #11
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	69fa      	ldr	r2, [r7, #28]
 8001146:	4313      	orrs	r3, r2
 8001148:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	08da      	lsrs	r2, r3, #3
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	3208      	adds	r2, #8
 8001152:	69f9      	ldr	r1, [r7, #28]
 8001154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	2203      	movs	r2, #3
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	69fa      	ldr	r2, [r7, #28]
 800116c:	4013      	ands	r3, r2
 800116e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	2202      	movs	r2, #2
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	69fa      	ldr	r2, [r7, #28]
 800117c:	4313      	orrs	r3, r2
 800117e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	69fa      	ldr	r2, [r7, #28]
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	e067      	b.n	8001258 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	2b02      	cmp	r3, #2
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x104>
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	2b12      	cmp	r3, #18
 8001196:	d145      	bne.n	8001224 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	08da      	lsrs	r2, r3, #3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3208      	adds	r2, #8
 80011a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	f003 0307 	and.w	r3, r3, #7
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	220f      	movs	r2, #15
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69fa      	ldr	r2, [r7, #28]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	691b      	ldr	r3, [r3, #16]
 80011c0:	f003 020f 	and.w	r2, r3, #15
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	69fa      	ldr	r2, [r7, #28]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	08da      	lsrs	r2, r3, #3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3208      	adds	r2, #8
 80011de:	69f9      	ldr	r1, [r7, #28]
 80011e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	2203      	movs	r2, #3
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69fa      	ldr	r2, [r7, #28]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 0203 	and.w	r2, r3, #3
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	69fa      	ldr	r2, [r7, #28]
 800120e:	4313      	orrs	r3, r2
 8001210:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	69fa      	ldr	r2, [r7, #28]
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	e01e      	b.n	8001258 <HAL_GPIO_Init+0x1c4>
 800121a:	bf00      	nop
 800121c:	46020000 	.word	0x46020000
 8001220:	08007374 	.word	0x08007374
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	2203      	movs	r2, #3
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	69fa      	ldr	r2, [r7, #28]
 8001238:	4013      	ands	r3, r2
 800123a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 0203 	and.w	r2, r3, #3
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	69fa      	ldr	r2, [r7, #28]
 800124e:	4313      	orrs	r3, r2
 8001250:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	69fa      	ldr	r2, [r7, #28]
 8001256:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d00b      	beq.n	8001278 <HAL_GPIO_Init+0x1e4>
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b02      	cmp	r3, #2
 8001266:	d007      	beq.n	8001278 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800126c:	2b11      	cmp	r3, #17
 800126e:	d003      	beq.n	8001278 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	2b12      	cmp	r3, #18
 8001276:	d130      	bne.n	80012da <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	2203      	movs	r2, #3
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	69fa      	ldr	r2, [r7, #28]
 800128c:	4013      	ands	r3, r2
 800128e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	68da      	ldr	r2, [r3, #12]
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	69fa      	ldr	r2, [r7, #28]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	69fa      	ldr	r2, [r7, #28]
 80012a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80012ae:	2201      	movs	r2, #1
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69fa      	ldr	r2, [r7, #28]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	091b      	lsrs	r3, r3, #4
 80012c4:	f003 0201 	and.w	r2, r3, #1
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	69fa      	ldr	r2, [r7, #28]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	69fa      	ldr	r2, [r7, #28]
 80012d8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d017      	beq.n	8001312 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	2203      	movs	r2, #3
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	69fa      	ldr	r2, [r7, #28]
 80012f6:	4013      	ands	r3, r2
 80012f8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	689a      	ldr	r2, [r3, #8]
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	69fa      	ldr	r2, [r7, #28]
 8001308:	4313      	orrs	r3, r2
 800130a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	69fa      	ldr	r2, [r7, #28]
 8001310:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d07c      	beq.n	8001418 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800131e:	4a47      	ldr	r2, [pc, #284]	; (800143c <HAL_GPIO_Init+0x3a8>)
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	089b      	lsrs	r3, r3, #2
 8001324:	3318      	adds	r3, #24
 8001326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	220f      	movs	r2, #15
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	69fa      	ldr	r2, [r7, #28]
 800133e:	4013      	ands	r3, r2
 8001340:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	0a9a      	lsrs	r2, r3, #10
 8001346:	4b3e      	ldr	r3, [pc, #248]	; (8001440 <HAL_GPIO_Init+0x3ac>)
 8001348:	4013      	ands	r3, r2
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	f002 0203 	and.w	r2, r2, #3
 8001350:	00d2      	lsls	r2, r2, #3
 8001352:	4093      	lsls	r3, r2
 8001354:	69fa      	ldr	r2, [r7, #28]
 8001356:	4313      	orrs	r3, r2
 8001358:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800135a:	4938      	ldr	r1, [pc, #224]	; (800143c <HAL_GPIO_Init+0x3a8>)
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	089b      	lsrs	r3, r3, #2
 8001360:	3318      	adds	r3, #24
 8001362:	69fa      	ldr	r2, [r7, #28]
 8001364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001368:	4b34      	ldr	r3, [pc, #208]	; (800143c <HAL_GPIO_Init+0x3a8>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	43db      	mvns	r3, r3
 8001372:	69fa      	ldr	r2, [r7, #28]
 8001374:	4013      	ands	r3, r2
 8001376:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8001384:	69fa      	ldr	r2, [r7, #28]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	4313      	orrs	r3, r2
 800138a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800138c:	4a2b      	ldr	r2, [pc, #172]	; (800143c <HAL_GPIO_Init+0x3a8>)
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001392:	4b2a      	ldr	r3, [pc, #168]	; (800143c <HAL_GPIO_Init+0x3a8>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	43db      	mvns	r3, r3
 800139c:	69fa      	ldr	r2, [r7, #28]
 800139e:	4013      	ands	r3, r2
 80013a0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80013ae:	69fa      	ldr	r2, [r7, #28]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80013b6:	4a21      	ldr	r2, [pc, #132]	; (800143c <HAL_GPIO_Init+0x3a8>)
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80013bc:	4b1f      	ldr	r3, [pc, #124]	; (800143c <HAL_GPIO_Init+0x3a8>)
 80013be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013c2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69fa      	ldr	r2, [r7, #28]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80013da:	69fa      	ldr	r2, [r7, #28]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80013e2:	4a16      	ldr	r2, [pc, #88]	; (800143c <HAL_GPIO_Init+0x3a8>)
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80013ea:	4b14      	ldr	r3, [pc, #80]	; (800143c <HAL_GPIO_Init+0x3a8>)
 80013ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013f0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69fa      	ldr	r2, [r7, #28]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d003      	beq.n	8001410 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8001408:	69fa      	ldr	r2, [r7, #28]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	4313      	orrs	r3, r2
 800140e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001410:	4a0a      	ldr	r2, [pc, #40]	; (800143c <HAL_GPIO_Init+0x3a8>)
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	3301      	adds	r3, #1
 800141c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	fa22 f303 	lsr.w	r3, r2, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	f47f ae3d 	bne.w	80010a8 <HAL_GPIO_Init+0x14>
  }
}
 800142e:	bf00      	nop
 8001430:	bf00      	nop
 8001432:	3724      	adds	r7, #36	; 0x24
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	46022000 	.word	0x46022000
 8001440:	002f7f7f 	.word	0x002f7f7f

08001444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	807b      	strh	r3, [r7, #2]
 8001450:	4613      	mov	r3, r2
 8001452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001454:	787b      	ldrb	r3, [r7, #1]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800145a:	887a      	ldrh	r2, [r7, #2]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8001460:	e002      	b.n	8001468 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8001462:	887a      	ldrh	r2, [r7, #2]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800147c:	2300      	movs	r3, #0
 800147e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001480:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	2b00      	cmp	r3, #0
 800148a:	d002      	beq.n	8001492 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	73fb      	strb	r3, [r7, #15]
 8001490:	e007      	b.n	80014a2 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f023 0204 	bic.w	r2, r3, #4
 800149a:	4905      	ldr	r1, [pc, #20]	; (80014b0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4313      	orrs	r3, r2
 80014a0:	600b      	str	r3, [r1, #0]
  }

  return status;
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	40030400 	.word	0x40030400

080014b4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <HAL_ICACHE_Enable+0x1c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <HAL_ICACHE_Enable+0x1c>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	40030400 	.word	0x40030400

080014d4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80014dc:	4b39      	ldr	r3, [pc, #228]	; (80015c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80014de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014e4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d10b      	bne.n	8001506 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014f4:	d905      	bls.n	8001502 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80014f6:	4b33      	ldr	r3, [pc, #204]	; (80015c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	4a32      	ldr	r2, [pc, #200]	; (80015c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80014fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001500:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8001502:	2300      	movs	r3, #0
 8001504:	e057      	b.n	80015b6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800150c:	d90a      	bls.n	8001524 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800150e:	4b2d      	ldr	r3, [pc, #180]	; (80015c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4313      	orrs	r3, r2
 800151a:	4a2a      	ldr	r2, [pc, #168]	; (80015c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800151c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001520:	60d3      	str	r3, [r2, #12]
 8001522:	e007      	b.n	8001534 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8001524:	4b27      	ldr	r3, [pc, #156]	; (80015c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800152c:	4925      	ldr	r1, [pc, #148]	; (80015c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4313      	orrs	r3, r2
 8001532:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001534:	4b24      	ldr	r3, [pc, #144]	; (80015c8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a24      	ldr	r2, [pc, #144]	; (80015cc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800153a:	fba2 2303 	umull	r2, r3, r2, r3
 800153e:	099b      	lsrs	r3, r3, #6
 8001540:	2232      	movs	r2, #50	; 0x32
 8001542:	fb02 f303 	mul.w	r3, r2, r3
 8001546:	4a21      	ldr	r2, [pc, #132]	; (80015cc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001548:	fba2 2303 	umull	r2, r3, r2, r3
 800154c:	099b      	lsrs	r3, r3, #6
 800154e:	3301      	adds	r3, #1
 8001550:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001552:	e002      	b.n	800155a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	3b01      	subs	r3, #1
 8001558:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800155a:	4b1a      	ldr	r3, [pc, #104]	; (80015c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d102      	bne.n	800156c <HAL_PWREx_ControlVoltageScaling+0x98>
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1f3      	bne.n	8001554 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d01b      	beq.n	80015aa <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001572:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a15      	ldr	r2, [pc, #84]	; (80015cc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001578:	fba2 2303 	umull	r2, r3, r2, r3
 800157c:	099b      	lsrs	r3, r3, #6
 800157e:	2232      	movs	r2, #50	; 0x32
 8001580:	fb02 f303 	mul.w	r3, r2, r3
 8001584:	4a11      	ldr	r2, [pc, #68]	; (80015cc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001586:	fba2 2303 	umull	r2, r3, r2, r3
 800158a:	099b      	lsrs	r3, r3, #6
 800158c:	3301      	adds	r3, #1
 800158e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001590:	e002      	b.n	8001598 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	3b01      	subs	r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001598:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800159a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800159c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d102      	bne.n	80015aa <HAL_PWREx_ControlVoltageScaling+0xd6>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f3      	bne.n	8001592 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e000      	b.n	80015b6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3714      	adds	r7, #20
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	46020800 	.word	0x46020800
 80015c8:	20000000 	.word	0x20000000
 80015cc:	10624dd3 	.word	0x10624dd3

080015d0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80015d4:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80015d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80015dc:	4618      	mov	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	46020800 	.word	0x46020800

080015ec <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80015f4:	4b22      	ldr	r3, [pc, #136]	; (8001680 <HAL_PWREx_ConfigSupply+0x94>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a22      	ldr	r2, [pc, #136]	; (8001684 <HAL_PWREx_ConfigSupply+0x98>)
 80015fa:	fba2 2303 	umull	r2, r3, r2, r3
 80015fe:	099b      	lsrs	r3, r3, #6
 8001600:	2232      	movs	r2, #50	; 0x32
 8001602:	fb02 f303 	mul.w	r3, r2, r3
 8001606:	4a1f      	ldr	r2, [pc, #124]	; (8001684 <HAL_PWREx_ConfigSupply+0x98>)
 8001608:	fba2 2303 	umull	r2, r3, r2, r3
 800160c:	099b      	lsrs	r3, r3, #6
 800160e:	3301      	adds	r3, #1
 8001610:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d113      	bne.n	8001640 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8001618:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <HAL_PWREx_ConfigSupply+0x9c>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	4a1a      	ldr	r2, [pc, #104]	; (8001688 <HAL_PWREx_ConfigSupply+0x9c>)
 800161e:	f023 0302 	bic.w	r3, r3, #2
 8001622:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001624:	e002      	b.n	800162c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	3b01      	subs	r3, #1
 800162a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800162c:	4b16      	ldr	r3, [pc, #88]	; (8001688 <HAL_PWREx_ConfigSupply+0x9c>)
 800162e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b02      	cmp	r3, #2
 8001636:	d116      	bne.n	8001666 <HAL_PWREx_ConfigSupply+0x7a>
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f3      	bne.n	8001626 <HAL_PWREx_ConfigSupply+0x3a>
 800163e:	e012      	b.n	8001666 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <HAL_PWREx_ConfigSupply+0x9c>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	4a10      	ldr	r2, [pc, #64]	; (8001688 <HAL_PWREx_ConfigSupply+0x9c>)
 8001646:	f043 0302 	orr.w	r3, r3, #2
 800164a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800164c:	e002      	b.n	8001654 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	3b01      	subs	r3, #1
 8001652:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <HAL_PWREx_ConfigSupply+0x9c>)
 8001656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d102      	bne.n	8001666 <HAL_PWREx_ConfigSupply+0x7a>
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f3      	bne.n	800164e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d101      	bne.n	8001670 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e000      	b.n	8001672 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20000000 	.word	0x20000000
 8001684:	10624dd3 	.word	0x10624dd3
 8001688:	46020800 	.word	0x46020800

0800168c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8001690:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	4a04      	ldr	r2, [pc, #16]	; (80016a8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001696:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800169a:	6113      	str	r3, [r2, #16]
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	46020800 	.word	0x46020800

080016ac <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80016b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b4:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	46020800 	.word	0x46020800

080016cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08e      	sub	sp, #56	; 0x38
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80016d4:	2300      	movs	r3, #0
 80016d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d102      	bne.n	80016e6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	f000 bec8 	b.w	8002476 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016e6:	4b99      	ldr	r3, [pc, #612]	; (800194c <HAL_RCC_OscConfig+0x280>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	f003 030c 	and.w	r3, r3, #12
 80016ee:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016f0:	4b96      	ldr	r3, [pc, #600]	; (800194c <HAL_RCC_OscConfig+0x280>)
 80016f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0310 	and.w	r3, r3, #16
 8001702:	2b00      	cmp	r3, #0
 8001704:	f000 816c 	beq.w	80019e0 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800170a:	2b00      	cmp	r3, #0
 800170c:	d007      	beq.n	800171e <HAL_RCC_OscConfig+0x52>
 800170e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001710:	2b0c      	cmp	r3, #12
 8001712:	f040 80de 	bne.w	80018d2 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001718:	2b01      	cmp	r3, #1
 800171a:	f040 80da 	bne.w	80018d2 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d102      	bne.n	800172c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	f000 bea5 	b.w	8002476 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001730:	4b86      	ldr	r3, [pc, #536]	; (800194c <HAL_RCC_OscConfig+0x280>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d004      	beq.n	8001746 <HAL_RCC_OscConfig+0x7a>
 800173c:	4b83      	ldr	r3, [pc, #524]	; (800194c <HAL_RCC_OscConfig+0x280>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001744:	e005      	b.n	8001752 <HAL_RCC_OscConfig+0x86>
 8001746:	4b81      	ldr	r3, [pc, #516]	; (800194c <HAL_RCC_OscConfig+0x280>)
 8001748:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800174c:	041b      	lsls	r3, r3, #16
 800174e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001752:	4293      	cmp	r3, r2
 8001754:	d255      	bcs.n	8001802 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001758:	2b00      	cmp	r3, #0
 800175a:	d10a      	bne.n	8001772 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001760:	4618      	mov	r0, r3
 8001762:	f001 f9df 	bl	8002b24 <RCC_SetFlashLatencyFromMSIRange>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d002      	beq.n	8001772 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	f000 be82 	b.w	8002476 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001772:	4b76      	ldr	r3, [pc, #472]	; (800194c <HAL_RCC_OscConfig+0x280>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	4a75      	ldr	r2, [pc, #468]	; (800194c <HAL_RCC_OscConfig+0x280>)
 8001778:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800177c:	6093      	str	r3, [r2, #8]
 800177e:	4b73      	ldr	r3, [pc, #460]	; (800194c <HAL_RCC_OscConfig+0x280>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178a:	4970      	ldr	r1, [pc, #448]	; (800194c <HAL_RCC_OscConfig+0x280>)
 800178c:	4313      	orrs	r3, r2
 800178e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001794:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001798:	d309      	bcc.n	80017ae <HAL_RCC_OscConfig+0xe2>
 800179a:	4b6c      	ldr	r3, [pc, #432]	; (800194c <HAL_RCC_OscConfig+0x280>)
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	f023 021f 	bic.w	r2, r3, #31
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a1b      	ldr	r3, [r3, #32]
 80017a6:	4969      	ldr	r1, [pc, #420]	; (800194c <HAL_RCC_OscConfig+0x280>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	60cb      	str	r3, [r1, #12]
 80017ac:	e07e      	b.n	80018ac <HAL_RCC_OscConfig+0x1e0>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	da0a      	bge.n	80017cc <HAL_RCC_OscConfig+0x100>
 80017b6:	4b65      	ldr	r3, [pc, #404]	; (800194c <HAL_RCC_OscConfig+0x280>)
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	015b      	lsls	r3, r3, #5
 80017c4:	4961      	ldr	r1, [pc, #388]	; (800194c <HAL_RCC_OscConfig+0x280>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	60cb      	str	r3, [r1, #12]
 80017ca:	e06f      	b.n	80018ac <HAL_RCC_OscConfig+0x1e0>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017d4:	d30a      	bcc.n	80017ec <HAL_RCC_OscConfig+0x120>
 80017d6:	4b5d      	ldr	r3, [pc, #372]	; (800194c <HAL_RCC_OscConfig+0x280>)
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	029b      	lsls	r3, r3, #10
 80017e4:	4959      	ldr	r1, [pc, #356]	; (800194c <HAL_RCC_OscConfig+0x280>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	60cb      	str	r3, [r1, #12]
 80017ea:	e05f      	b.n	80018ac <HAL_RCC_OscConfig+0x1e0>
 80017ec:	4b57      	ldr	r3, [pc, #348]	; (800194c <HAL_RCC_OscConfig+0x280>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	03db      	lsls	r3, r3, #15
 80017fa:	4954      	ldr	r1, [pc, #336]	; (800194c <HAL_RCC_OscConfig+0x280>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	60cb      	str	r3, [r1, #12]
 8001800:	e054      	b.n	80018ac <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001802:	4b52      	ldr	r3, [pc, #328]	; (800194c <HAL_RCC_OscConfig+0x280>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	4a51      	ldr	r2, [pc, #324]	; (800194c <HAL_RCC_OscConfig+0x280>)
 8001808:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800180c:	6093      	str	r3, [r2, #8]
 800180e:	4b4f      	ldr	r3, [pc, #316]	; (800194c <HAL_RCC_OscConfig+0x280>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181a:	494c      	ldr	r1, [pc, #304]	; (800194c <HAL_RCC_OscConfig+0x280>)
 800181c:	4313      	orrs	r3, r2
 800181e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001828:	d309      	bcc.n	800183e <HAL_RCC_OscConfig+0x172>
 800182a:	4b48      	ldr	r3, [pc, #288]	; (800194c <HAL_RCC_OscConfig+0x280>)
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	f023 021f 	bic.w	r2, r3, #31
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a1b      	ldr	r3, [r3, #32]
 8001836:	4945      	ldr	r1, [pc, #276]	; (800194c <HAL_RCC_OscConfig+0x280>)
 8001838:	4313      	orrs	r3, r2
 800183a:	60cb      	str	r3, [r1, #12]
 800183c:	e028      	b.n	8001890 <HAL_RCC_OscConfig+0x1c4>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001842:	2b00      	cmp	r3, #0
 8001844:	da0a      	bge.n	800185c <HAL_RCC_OscConfig+0x190>
 8001846:	4b41      	ldr	r3, [pc, #260]	; (800194c <HAL_RCC_OscConfig+0x280>)
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a1b      	ldr	r3, [r3, #32]
 8001852:	015b      	lsls	r3, r3, #5
 8001854:	493d      	ldr	r1, [pc, #244]	; (800194c <HAL_RCC_OscConfig+0x280>)
 8001856:	4313      	orrs	r3, r2
 8001858:	60cb      	str	r3, [r1, #12]
 800185a:	e019      	b.n	8001890 <HAL_RCC_OscConfig+0x1c4>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001864:	d30a      	bcc.n	800187c <HAL_RCC_OscConfig+0x1b0>
 8001866:	4b39      	ldr	r3, [pc, #228]	; (800194c <HAL_RCC_OscConfig+0x280>)
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	029b      	lsls	r3, r3, #10
 8001874:	4935      	ldr	r1, [pc, #212]	; (800194c <HAL_RCC_OscConfig+0x280>)
 8001876:	4313      	orrs	r3, r2
 8001878:	60cb      	str	r3, [r1, #12]
 800187a:	e009      	b.n	8001890 <HAL_RCC_OscConfig+0x1c4>
 800187c:	4b33      	ldr	r3, [pc, #204]	; (800194c <HAL_RCC_OscConfig+0x280>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	03db      	lsls	r3, r3, #15
 800188a:	4930      	ldr	r1, [pc, #192]	; (800194c <HAL_RCC_OscConfig+0x280>)
 800188c:	4313      	orrs	r3, r2
 800188e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10a      	bne.n	80018ac <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189a:	4618      	mov	r0, r3
 800189c:	f001 f942 	bl	8002b24 <RCC_SetFlashLatencyFromMSIRange>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d002      	beq.n	80018ac <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	f000 bde5 	b.w	8002476 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80018ac:	f001 f8e4 	bl	8002a78 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018b0:	4b27      	ldr	r3, [pc, #156]	; (8001950 <HAL_RCC_OscConfig+0x284>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff fa8f 	bl	8000dd8 <HAL_InitTick>
 80018ba:	4603      	mov	r3, r0
 80018bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 80018c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 808a 	beq.w	80019de <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80018ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018ce:	f000 bdd2 	b.w	8002476 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d066      	beq.n	80019a8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80018da:	4b1c      	ldr	r3, [pc, #112]	; (800194c <HAL_RCC_OscConfig+0x280>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a1b      	ldr	r2, [pc, #108]	; (800194c <HAL_RCC_OscConfig+0x280>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80018e6:	f7ff fac1 	bl	8000e6c <HAL_GetTick>
 80018ea:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80018ec:	e009      	b.n	8001902 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018ee:	f7ff fabd 	bl	8000e6c <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d902      	bls.n	8001902 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	f000 bdba 	b.w	8002476 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001902:	4b12      	ldr	r3, [pc, #72]	; (800194c <HAL_RCC_OscConfig+0x280>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0304 	and.w	r3, r3, #4
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0ef      	beq.n	80018ee <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800190e:	4b0f      	ldr	r3, [pc, #60]	; (800194c <HAL_RCC_OscConfig+0x280>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	4a0e      	ldr	r2, [pc, #56]	; (800194c <HAL_RCC_OscConfig+0x280>)
 8001914:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001918:	6093      	str	r3, [r2, #8]
 800191a:	4b0c      	ldr	r3, [pc, #48]	; (800194c <HAL_RCC_OscConfig+0x280>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	4909      	ldr	r1, [pc, #36]	; (800194c <HAL_RCC_OscConfig+0x280>)
 8001928:	4313      	orrs	r3, r2
 800192a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001930:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001934:	d30e      	bcc.n	8001954 <HAL_RCC_OscConfig+0x288>
 8001936:	4b05      	ldr	r3, [pc, #20]	; (800194c <HAL_RCC_OscConfig+0x280>)
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	f023 021f 	bic.w	r2, r3, #31
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	4902      	ldr	r1, [pc, #8]	; (800194c <HAL_RCC_OscConfig+0x280>)
 8001944:	4313      	orrs	r3, r2
 8001946:	60cb      	str	r3, [r1, #12]
 8001948:	e04a      	b.n	80019e0 <HAL_RCC_OscConfig+0x314>
 800194a:	bf00      	nop
 800194c:	46020c00 	.word	0x46020c00
 8001950:	20000004 	.word	0x20000004
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	2b00      	cmp	r3, #0
 800195a:	da0a      	bge.n	8001972 <HAL_RCC_OscConfig+0x2a6>
 800195c:	4b98      	ldr	r3, [pc, #608]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	015b      	lsls	r3, r3, #5
 800196a:	4995      	ldr	r1, [pc, #596]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 800196c:	4313      	orrs	r3, r2
 800196e:	60cb      	str	r3, [r1, #12]
 8001970:	e036      	b.n	80019e0 <HAL_RCC_OscConfig+0x314>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800197a:	d30a      	bcc.n	8001992 <HAL_RCC_OscConfig+0x2c6>
 800197c:	4b90      	ldr	r3, [pc, #576]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	029b      	lsls	r3, r3, #10
 800198a:	498d      	ldr	r1, [pc, #564]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 800198c:	4313      	orrs	r3, r2
 800198e:	60cb      	str	r3, [r1, #12]
 8001990:	e026      	b.n	80019e0 <HAL_RCC_OscConfig+0x314>
 8001992:	4b8b      	ldr	r3, [pc, #556]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	03db      	lsls	r3, r3, #15
 80019a0:	4987      	ldr	r1, [pc, #540]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	60cb      	str	r3, [r1, #12]
 80019a6:	e01b      	b.n	80019e0 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80019a8:	4b85      	ldr	r3, [pc, #532]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a84      	ldr	r2, [pc, #528]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 80019ae:	f023 0301 	bic.w	r3, r3, #1
 80019b2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80019b4:	f7ff fa5a 	bl	8000e6c <HAL_GetTick>
 80019b8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80019ba:	e009      	b.n	80019d0 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019bc:	f7ff fa56 	bl	8000e6c <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d902      	bls.n	80019d0 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	f000 bd53 	b.w	8002476 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80019d0:	4b7b      	ldr	r3, [pc, #492]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1ef      	bne.n	80019bc <HAL_RCC_OscConfig+0x2f0>
 80019dc:	e000      	b.n	80019e0 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80019de:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f000 808b 	beq.w	8001b04 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80019ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f0:	2b08      	cmp	r3, #8
 80019f2:	d005      	beq.n	8001a00 <HAL_RCC_OscConfig+0x334>
 80019f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f6:	2b0c      	cmp	r3, #12
 80019f8:	d109      	bne.n	8001a0e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019fc:	2b03      	cmp	r3, #3
 80019fe:	d106      	bne.n	8001a0e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d17d      	bne.n	8001b04 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	f000 bd34 	b.w	8002476 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a16:	d106      	bne.n	8001a26 <HAL_RCC_OscConfig+0x35a>
 8001a18:	4b69      	ldr	r3, [pc, #420]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a68      	ldr	r2, [pc, #416]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	e041      	b.n	8001aaa <HAL_RCC_OscConfig+0x3de>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a2e:	d112      	bne.n	8001a56 <HAL_RCC_OscConfig+0x38a>
 8001a30:	4b63      	ldr	r3, [pc, #396]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a62      	ldr	r2, [pc, #392]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a3a:	6013      	str	r3, [r2, #0]
 8001a3c:	4b60      	ldr	r3, [pc, #384]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a5f      	ldr	r2, [pc, #380]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	4b5d      	ldr	r3, [pc, #372]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a5c      	ldr	r2, [pc, #368]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	e029      	b.n	8001aaa <HAL_RCC_OscConfig+0x3de>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001a5e:	d112      	bne.n	8001a86 <HAL_RCC_OscConfig+0x3ba>
 8001a60:	4b57      	ldr	r3, [pc, #348]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a56      	ldr	r2, [pc, #344]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	4b54      	ldr	r3, [pc, #336]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a53      	ldr	r2, [pc, #332]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a76:	6013      	str	r3, [r2, #0]
 8001a78:	4b51      	ldr	r3, [pc, #324]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a50      	ldr	r2, [pc, #320]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a82:	6013      	str	r3, [r2, #0]
 8001a84:	e011      	b.n	8001aaa <HAL_RCC_OscConfig+0x3de>
 8001a86:	4b4e      	ldr	r3, [pc, #312]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a4d      	ldr	r2, [pc, #308]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	4b4b      	ldr	r3, [pc, #300]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a4a      	ldr	r2, [pc, #296]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a9c:	6013      	str	r3, [r2, #0]
 8001a9e:	4b48      	ldr	r3, [pc, #288]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a47      	ldr	r2, [pc, #284]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001aa4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001aa8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d014      	beq.n	8001adc <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8001ab2:	f7ff f9db 	bl	8000e6c <HAL_GetTick>
 8001ab6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ab8:	e009      	b.n	8001ace <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aba:	f7ff f9d7 	bl	8000e6c <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b64      	cmp	r3, #100	; 0x64
 8001ac6:	d902      	bls.n	8001ace <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	f000 bcd4 	b.w	8002476 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ace:	4b3c      	ldr	r3, [pc, #240]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0ef      	beq.n	8001aba <HAL_RCC_OscConfig+0x3ee>
 8001ada:	e013      	b.n	8001b04 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8001adc:	f7ff f9c6 	bl	8000e6c <HAL_GetTick>
 8001ae0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ae2:	e009      	b.n	8001af8 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae4:	f7ff f9c2 	bl	8000e6c <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b64      	cmp	r3, #100	; 0x64
 8001af0:	d902      	bls.n	8001af8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	f000 bcbf 	b.w	8002476 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001af8:	4b31      	ldr	r3, [pc, #196]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1ef      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d05f      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d005      	beq.n	8001b22 <HAL_RCC_OscConfig+0x456>
 8001b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b18:	2b0c      	cmp	r3, #12
 8001b1a:	d114      	bne.n	8001b46 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d111      	bne.n	8001b46 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d102      	bne.n	8001b30 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	f000 bca3 	b.w	8002476 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001b30:	4b23      	ldr	r3, [pc, #140]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	041b      	lsls	r3, r3, #16
 8001b3e:	4920      	ldr	r1, [pc, #128]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001b44:	e044      	b.n	8001bd0 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d024      	beq.n	8001b98 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8001b4e:	4b1c      	ldr	r3, [pc, #112]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a1b      	ldr	r2, [pc, #108]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b58:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001b5a:	f7ff f987 	bl	8000e6c <HAL_GetTick>
 8001b5e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b60:	e009      	b.n	8001b76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b62:	f7ff f983 	bl	8000e6c <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d902      	bls.n	8001b76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	f000 bc80 	b.w	8002476 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b76:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0ef      	beq.n	8001b62 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001b82:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	041b      	lsls	r3, r3, #16
 8001b90:	490b      	ldr	r1, [pc, #44]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	610b      	str	r3, [r1, #16]
 8001b96:	e01b      	b.n	8001bd0 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8001b98:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a08      	ldr	r2, [pc, #32]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ba2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001ba4:	f7ff f962 	bl	8000e6c <HAL_GetTick>
 8001ba8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001baa:	e00b      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bac:	f7ff f95e 	bl	8000e6c <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d904      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	f000 bc5b 	b.w	8002476 <HAL_RCC_OscConfig+0xdaa>
 8001bc0:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bc4:	4baf      	ldr	r3, [pc, #700]	; (8001e84 <HAL_RCC_OscConfig+0x7b8>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1ed      	bne.n	8001bac <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 80c8 	beq.w	8001d6e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8001bde:	2300      	movs	r3, #0
 8001be0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001be4:	4ba7      	ldr	r3, [pc, #668]	; (8001e84 <HAL_RCC_OscConfig+0x7b8>)
 8001be6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d111      	bne.n	8001c16 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bf2:	4ba4      	ldr	r3, [pc, #656]	; (8001e84 <HAL_RCC_OscConfig+0x7b8>)
 8001bf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bf8:	4aa2      	ldr	r2, [pc, #648]	; (8001e84 <HAL_RCC_OscConfig+0x7b8>)
 8001bfa:	f043 0304 	orr.w	r3, r3, #4
 8001bfe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001c02:	4ba0      	ldr	r3, [pc, #640]	; (8001e84 <HAL_RCC_OscConfig+0x7b8>)
 8001c04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8001c10:	2301      	movs	r3, #1
 8001c12:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001c16:	4b9c      	ldr	r3, [pc, #624]	; (8001e88 <HAL_RCC_OscConfig+0x7bc>)
 8001c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d119      	bne.n	8001c56 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001c22:	4b99      	ldr	r3, [pc, #612]	; (8001e88 <HAL_RCC_OscConfig+0x7bc>)
 8001c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c26:	4a98      	ldr	r2, [pc, #608]	; (8001e88 <HAL_RCC_OscConfig+0x7bc>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c2e:	f7ff f91d 	bl	8000e6c <HAL_GetTick>
 8001c32:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001c34:	e009      	b.n	8001c4a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c36:	f7ff f919 	bl	8000e6c <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d902      	bls.n	8001c4a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	f000 bc16 	b.w	8002476 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001c4a:	4b8f      	ldr	r3, [pc, #572]	; (8001e88 <HAL_RCC_OscConfig+0x7bc>)
 8001c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0ef      	beq.n	8001c36 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d05f      	beq.n	8001d1e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8001c5e:	4b89      	ldr	r3, [pc, #548]	; (8001e84 <HAL_RCC_OscConfig+0x7b8>)
 8001c60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c64:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	699a      	ldr	r2, [r3, #24]
 8001c6a:	6a3b      	ldr	r3, [r7, #32]
 8001c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d037      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001c74:	6a3b      	ldr	r3, [r7, #32]
 8001c76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d006      	beq.n	8001c8c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8001c7e:	6a3b      	ldr	r3, [r7, #32]
 8001c80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e3f4      	b.n	8002476 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8001c8c:	6a3b      	ldr	r3, [r7, #32]
 8001c8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d01b      	beq.n	8001cce <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8001c96:	4b7b      	ldr	r3, [pc, #492]	; (8001e84 <HAL_RCC_OscConfig+0x7b8>)
 8001c98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c9c:	4a79      	ldr	r2, [pc, #484]	; (8001e84 <HAL_RCC_OscConfig+0x7b8>)
 8001c9e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001ca2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8001ca6:	f7ff f8e1 	bl	8000e6c <HAL_GetTick>
 8001caa:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cae:	f7ff f8dd 	bl	8000e6c <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b05      	cmp	r3, #5
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e3da      	b.n	8002476 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001cc0:	4b70      	ldr	r3, [pc, #448]	; (8001e84 <HAL_RCC_OscConfig+0x7b8>)
 8001cc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1ef      	bne.n	8001cae <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8001cce:	4b6d      	ldr	r3, [pc, #436]	; (8001e84 <HAL_RCC_OscConfig+0x7b8>)
 8001cd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cd4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	4969      	ldr	r1, [pc, #420]	; (8001e84 <HAL_RCC_OscConfig+0x7b8>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8001ce4:	4b67      	ldr	r3, [pc, #412]	; (8001e84 <HAL_RCC_OscConfig+0x7b8>)
 8001ce6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cea:	4a66      	ldr	r2, [pc, #408]	; (8001e84 <HAL_RCC_OscConfig+0x7b8>)
 8001cec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001cf0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001cf4:	f7ff f8ba 	bl	8000e6c <HAL_GetTick>
 8001cf8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cfc:	f7ff f8b6 	bl	8000e6c <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b05      	cmp	r3, #5
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e3b3      	b.n	8002476 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001d0e:	4b5d      	ldr	r3, [pc, #372]	; (8001e84 <HAL_RCC_OscConfig+0x7b8>)
 8001d10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0ef      	beq.n	8001cfc <HAL_RCC_OscConfig+0x630>
 8001d1c:	e01b      	b.n	8001d56 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8001d1e:	4b59      	ldr	r3, [pc, #356]	; (8001e84 <HAL_RCC_OscConfig+0x7b8>)
 8001d20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d24:	4a57      	ldr	r2, [pc, #348]	; (8001e84 <HAL_RCC_OscConfig+0x7b8>)
 8001d26:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001d2a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001d2e:	f7ff f89d 	bl	8000e6c <HAL_GetTick>
 8001d32:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d36:	f7ff f899 	bl	8000e6c <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b05      	cmp	r3, #5
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e396      	b.n	8002476 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001d48:	4b4e      	ldr	r3, [pc, #312]	; (8001e84 <HAL_RCC_OscConfig+0x7b8>)
 8001d4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1ef      	bne.n	8001d36 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d56:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d107      	bne.n	8001d6e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d5e:	4b49      	ldr	r3, [pc, #292]	; (8001e84 <HAL_RCC_OscConfig+0x7b8>)
 8001d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d64:	4a47      	ldr	r2, [pc, #284]	; (8001e84 <HAL_RCC_OscConfig+0x7b8>)
 8001d66:	f023 0304 	bic.w	r3, r3, #4
 8001d6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0304 	and.w	r3, r3, #4
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 8111 	beq.w	8001f9e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d82:	4b40      	ldr	r3, [pc, #256]	; (8001e84 <HAL_RCC_OscConfig+0x7b8>)
 8001d84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d111      	bne.n	8001db4 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d90:	4b3c      	ldr	r3, [pc, #240]	; (8001e84 <HAL_RCC_OscConfig+0x7b8>)
 8001d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d96:	4a3b      	ldr	r2, [pc, #236]	; (8001e84 <HAL_RCC_OscConfig+0x7b8>)
 8001d98:	f043 0304 	orr.w	r3, r3, #4
 8001d9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001da0:	4b38      	ldr	r3, [pc, #224]	; (8001e84 <HAL_RCC_OscConfig+0x7b8>)
 8001da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001da6:	f003 0304 	and.w	r3, r3, #4
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8001dae:	2301      	movs	r3, #1
 8001db0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001db4:	4b34      	ldr	r3, [pc, #208]	; (8001e88 <HAL_RCC_OscConfig+0x7bc>)
 8001db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d118      	bne.n	8001df2 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001dc0:	4b31      	ldr	r3, [pc, #196]	; (8001e88 <HAL_RCC_OscConfig+0x7bc>)
 8001dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc4:	4a30      	ldr	r2, [pc, #192]	; (8001e88 <HAL_RCC_OscConfig+0x7bc>)
 8001dc6:	f043 0301 	orr.w	r3, r3, #1
 8001dca:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dcc:	f7ff f84e 	bl	8000e6c <HAL_GetTick>
 8001dd0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd4:	f7ff f84a 	bl	8000e6c <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e347      	b.n	8002476 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001de6:	4b28      	ldr	r3, [pc, #160]	; (8001e88 <HAL_RCC_OscConfig+0x7bc>)
 8001de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0f0      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d01f      	beq.n	8001e3e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 0304 	and.w	r3, r3, #4
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d010      	beq.n	8001e2c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001e0a:	4b1e      	ldr	r3, [pc, #120]	; (8001e84 <HAL_RCC_OscConfig+0x7b8>)
 8001e0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e10:	4a1c      	ldr	r2, [pc, #112]	; (8001e84 <HAL_RCC_OscConfig+0x7b8>)
 8001e12:	f043 0304 	orr.w	r3, r3, #4
 8001e16:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e1a:	4b1a      	ldr	r3, [pc, #104]	; (8001e84 <HAL_RCC_OscConfig+0x7b8>)
 8001e1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e20:	4a18      	ldr	r2, [pc, #96]	; (8001e84 <HAL_RCC_OscConfig+0x7b8>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e2a:	e018      	b.n	8001e5e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e2c:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <HAL_RCC_OscConfig+0x7b8>)
 8001e2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e32:	4a14      	ldr	r2, [pc, #80]	; (8001e84 <HAL_RCC_OscConfig+0x7b8>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e3c:	e00f      	b.n	8001e5e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e3e:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <HAL_RCC_OscConfig+0x7b8>)
 8001e40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e44:	4a0f      	ldr	r2, [pc, #60]	; (8001e84 <HAL_RCC_OscConfig+0x7b8>)
 8001e46:	f023 0301 	bic.w	r3, r3, #1
 8001e4a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001e4e:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <HAL_RCC_OscConfig+0x7b8>)
 8001e50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e54:	4a0b      	ldr	r2, [pc, #44]	; (8001e84 <HAL_RCC_OscConfig+0x7b8>)
 8001e56:	f023 0304 	bic.w	r3, r3, #4
 8001e5a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d057      	beq.n	8001f16 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8001e66:	f7ff f801 	bl	8000e6c <HAL_GetTick>
 8001e6a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e6c:	e00e      	b.n	8001e8c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e6e:	f7fe fffd 	bl	8000e6c <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d905      	bls.n	8001e8c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e2f8      	b.n	8002476 <HAL_RCC_OscConfig+0xdaa>
 8001e84:	46020c00 	.word	0x46020c00
 8001e88:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e8c:	4b9c      	ldr	r3, [pc, #624]	; (8002100 <HAL_RCC_OscConfig+0xa34>)
 8001e8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0e9      	beq.n	8001e6e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d01b      	beq.n	8001ede <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001ea6:	4b96      	ldr	r3, [pc, #600]	; (8002100 <HAL_RCC_OscConfig+0xa34>)
 8001ea8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001eac:	4a94      	ldr	r2, [pc, #592]	; (8002100 <HAL_RCC_OscConfig+0xa34>)
 8001eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eb2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001eb6:	e00a      	b.n	8001ece <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb8:	f7fe ffd8 	bl	8000e6c <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e2d3      	b.n	8002476 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001ece:	4b8c      	ldr	r3, [pc, #560]	; (8002100 <HAL_RCC_OscConfig+0xa34>)
 8001ed0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ed4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0ed      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x7ec>
 8001edc:	e053      	b.n	8001f86 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001ede:	4b88      	ldr	r3, [pc, #544]	; (8002100 <HAL_RCC_OscConfig+0xa34>)
 8001ee0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ee4:	4a86      	ldr	r2, [pc, #536]	; (8002100 <HAL_RCC_OscConfig+0xa34>)
 8001ee6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001eea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001eee:	e00a      	b.n	8001f06 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ef0:	f7fe ffbc 	bl	8000e6c <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e2b7      	b.n	8002476 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f06:	4b7e      	ldr	r3, [pc, #504]	; (8002100 <HAL_RCC_OscConfig+0xa34>)
 8001f08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1ed      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x824>
 8001f14:	e037      	b.n	8001f86 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8001f16:	f7fe ffa9 	bl	8000e6c <HAL_GetTick>
 8001f1a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f1c:	e00a      	b.n	8001f34 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1e:	f7fe ffa5 	bl	8000e6c <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e2a0      	b.n	8002476 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f34:	4b72      	ldr	r3, [pc, #456]	; (8002100 <HAL_RCC_OscConfig+0xa34>)
 8001f36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1ed      	bne.n	8001f1e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001f42:	4b6f      	ldr	r3, [pc, #444]	; (8002100 <HAL_RCC_OscConfig+0xa34>)
 8001f44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d01a      	beq.n	8001f86 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001f50:	4b6b      	ldr	r3, [pc, #428]	; (8002100 <HAL_RCC_OscConfig+0xa34>)
 8001f52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f56:	4a6a      	ldr	r2, [pc, #424]	; (8002100 <HAL_RCC_OscConfig+0xa34>)
 8001f58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f5c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f60:	e00a      	b.n	8001f78 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f62:	f7fe ff83 	bl	8000e6c <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e27e      	b.n	8002476 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f78:	4b61      	ldr	r3, [pc, #388]	; (8002100 <HAL_RCC_OscConfig+0xa34>)
 8001f7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1ed      	bne.n	8001f62 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f86:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d107      	bne.n	8001f9e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f8e:	4b5c      	ldr	r3, [pc, #368]	; (8002100 <HAL_RCC_OscConfig+0xa34>)
 8001f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f94:	4a5a      	ldr	r2, [pc, #360]	; (8002100 <HAL_RCC_OscConfig+0xa34>)
 8001f96:	f023 0304 	bic.w	r3, r3, #4
 8001f9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0320 	and.w	r3, r3, #32
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d036      	beq.n	8002018 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d019      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8001fb2:	4b53      	ldr	r3, [pc, #332]	; (8002100 <HAL_RCC_OscConfig+0xa34>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a52      	ldr	r2, [pc, #328]	; (8002100 <HAL_RCC_OscConfig+0xa34>)
 8001fb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fbc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001fbe:	f7fe ff55 	bl	8000e6c <HAL_GetTick>
 8001fc2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fc6:	f7fe ff51 	bl	8000e6c <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e24e      	b.n	8002476 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001fd8:	4b49      	ldr	r3, [pc, #292]	; (8002100 <HAL_RCC_OscConfig+0xa34>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0f0      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x8fa>
 8001fe4:	e018      	b.n	8002018 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8001fe6:	4b46      	ldr	r3, [pc, #280]	; (8002100 <HAL_RCC_OscConfig+0xa34>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a45      	ldr	r2, [pc, #276]	; (8002100 <HAL_RCC_OscConfig+0xa34>)
 8001fec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ff0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001ff2:	f7fe ff3b 	bl	8000e6c <HAL_GetTick>
 8001ff6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ffa:	f7fe ff37 	bl	8000e6c <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e234      	b.n	8002476 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800200c:	4b3c      	ldr	r3, [pc, #240]	; (8002100 <HAL_RCC_OscConfig+0xa34>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1f0      	bne.n	8001ffa <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002020:	2b00      	cmp	r3, #0
 8002022:	d036      	beq.n	8002092 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002028:	2b00      	cmp	r3, #0
 800202a:	d019      	beq.n	8002060 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800202c:	4b34      	ldr	r3, [pc, #208]	; (8002100 <HAL_RCC_OscConfig+0xa34>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a33      	ldr	r2, [pc, #204]	; (8002100 <HAL_RCC_OscConfig+0xa34>)
 8002032:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002036:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002038:	f7fe ff18 	bl	8000e6c <HAL_GetTick>
 800203c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002040:	f7fe ff14 	bl	8000e6c <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e211      	b.n	8002476 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002052:	4b2b      	ldr	r3, [pc, #172]	; (8002100 <HAL_RCC_OscConfig+0xa34>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0f0      	beq.n	8002040 <HAL_RCC_OscConfig+0x974>
 800205e:	e018      	b.n	8002092 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8002060:	4b27      	ldr	r3, [pc, #156]	; (8002100 <HAL_RCC_OscConfig+0xa34>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a26      	ldr	r2, [pc, #152]	; (8002100 <HAL_RCC_OscConfig+0xa34>)
 8002066:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800206a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800206c:	f7fe fefe 	bl	8000e6c <HAL_GetTick>
 8002070:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002074:	f7fe fefa 	bl	8000e6c <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e1f7      	b.n	8002476 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002086:	4b1e      	ldr	r3, [pc, #120]	; (8002100 <HAL_RCC_OscConfig+0xa34>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f0      	bne.n	8002074 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800209a:	2b00      	cmp	r3, #0
 800209c:	d07f      	beq.n	800219e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d062      	beq.n	800216c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80020a6:	4b16      	ldr	r3, [pc, #88]	; (8002100 <HAL_RCC_OscConfig+0xa34>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	4a15      	ldr	r2, [pc, #84]	; (8002100 <HAL_RCC_OscConfig+0xa34>)
 80020ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020b0:	6093      	str	r3, [r2, #8]
 80020b2:	4b13      	ldr	r3, [pc, #76]	; (8002100 <HAL_RCC_OscConfig+0xa34>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020be:	4910      	ldr	r1, [pc, #64]	; (8002100 <HAL_RCC_OscConfig+0xa34>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80020cc:	d309      	bcc.n	80020e2 <HAL_RCC_OscConfig+0xa16>
 80020ce:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <HAL_RCC_OscConfig+0xa34>)
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	f023 021f 	bic.w	r2, r3, #31
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	4909      	ldr	r1, [pc, #36]	; (8002100 <HAL_RCC_OscConfig+0xa34>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	60cb      	str	r3, [r1, #12]
 80020e0:	e02a      	b.n	8002138 <HAL_RCC_OscConfig+0xa6c>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	da0c      	bge.n	8002104 <HAL_RCC_OscConfig+0xa38>
 80020ea:	4b05      	ldr	r3, [pc, #20]	; (8002100 <HAL_RCC_OscConfig+0xa34>)
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	015b      	lsls	r3, r3, #5
 80020f8:	4901      	ldr	r1, [pc, #4]	; (8002100 <HAL_RCC_OscConfig+0xa34>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	60cb      	str	r3, [r1, #12]
 80020fe:	e01b      	b.n	8002138 <HAL_RCC_OscConfig+0xa6c>
 8002100:	46020c00 	.word	0x46020c00
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800210c:	d30a      	bcc.n	8002124 <HAL_RCC_OscConfig+0xa58>
 800210e:	4ba1      	ldr	r3, [pc, #644]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	029b      	lsls	r3, r3, #10
 800211c:	499d      	ldr	r1, [pc, #628]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 800211e:	4313      	orrs	r3, r2
 8002120:	60cb      	str	r3, [r1, #12]
 8002122:	e009      	b.n	8002138 <HAL_RCC_OscConfig+0xa6c>
 8002124:	4b9b      	ldr	r3, [pc, #620]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	03db      	lsls	r3, r3, #15
 8002132:	4998      	ldr	r1, [pc, #608]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 8002134:	4313      	orrs	r3, r2
 8002136:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8002138:	4b96      	ldr	r3, [pc, #600]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a95      	ldr	r2, [pc, #596]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 800213e:	f043 0310 	orr.w	r3, r3, #16
 8002142:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002144:	f7fe fe92 	bl	8000e6c <HAL_GetTick>
 8002148:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800214c:	f7fe fe8e 	bl	8000e6c <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e18b      	b.n	8002476 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800215e:	4b8d      	ldr	r3, [pc, #564]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0320 	and.w	r3, r3, #32
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0f0      	beq.n	800214c <HAL_RCC_OscConfig+0xa80>
 800216a:	e018      	b.n	800219e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800216c:	4b89      	ldr	r3, [pc, #548]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a88      	ldr	r2, [pc, #544]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 8002172:	f023 0310 	bic.w	r3, r3, #16
 8002176:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002178:	f7fe fe78 	bl	8000e6c <HAL_GetTick>
 800217c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002180:	f7fe fe74 	bl	8000e6c <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e171      	b.n	8002476 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002192:	4b80      	ldr	r3, [pc, #512]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0320 	and.w	r3, r3, #32
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1f0      	bne.n	8002180 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 8166 	beq.w	8002474 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80021a8:	2300      	movs	r3, #0
 80021aa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021ae:	4b79      	ldr	r3, [pc, #484]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	f003 030c 	and.w	r3, r3, #12
 80021b6:	2b0c      	cmp	r3, #12
 80021b8:	f000 80f2 	beq.w	80023a0 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	f040 80c5 	bne.w	8002350 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80021c6:	4b73      	ldr	r3, [pc, #460]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a72      	ldr	r2, [pc, #456]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 80021cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021d0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80021d2:	f7fe fe4b 	bl	8000e6c <HAL_GetTick>
 80021d6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021da:	f7fe fe47 	bl	8000e6c <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e144      	b.n	8002476 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80021ec:	4b69      	ldr	r3, [pc, #420]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1f0      	bne.n	80021da <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021f8:	4b66      	ldr	r3, [pc, #408]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 80021fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021fe:	f003 0304 	and.w	r3, r3, #4
 8002202:	2b00      	cmp	r3, #0
 8002204:	d111      	bne.n	800222a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8002206:	4b63      	ldr	r3, [pc, #396]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 8002208:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800220c:	4a61      	ldr	r2, [pc, #388]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 800220e:	f043 0304 	orr.w	r3, r3, #4
 8002212:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002216:	4b5f      	ldr	r3, [pc, #380]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 8002218:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8002224:	2301      	movs	r3, #1
 8002226:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800222a:	4b5b      	ldr	r3, [pc, #364]	; (8002398 <HAL_RCC_OscConfig+0xccc>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002232:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002236:	d102      	bne.n	800223e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8002238:	2301      	movs	r3, #1
 800223a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800223e:	4b56      	ldr	r3, [pc, #344]	; (8002398 <HAL_RCC_OscConfig+0xccc>)
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	4a55      	ldr	r2, [pc, #340]	; (8002398 <HAL_RCC_OscConfig+0xccc>)
 8002244:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002248:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800224a:	4b52      	ldr	r3, [pc, #328]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 800224c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002252:	f023 0303 	bic.w	r3, r3, #3
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800225e:	3a01      	subs	r2, #1
 8002260:	0212      	lsls	r2, r2, #8
 8002262:	4311      	orrs	r1, r2
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002268:	430a      	orrs	r2, r1
 800226a:	494a      	ldr	r1, [pc, #296]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 800226c:	4313      	orrs	r3, r2
 800226e:	628b      	str	r3, [r1, #40]	; 0x28
 8002270:	4b48      	ldr	r3, [pc, #288]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 8002272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002274:	4b49      	ldr	r3, [pc, #292]	; (800239c <HAL_RCC_OscConfig+0xcd0>)
 8002276:	4013      	ands	r3, r2
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800227c:	3a01      	subs	r2, #1
 800227e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002286:	3a01      	subs	r2, #1
 8002288:	0252      	lsls	r2, r2, #9
 800228a:	b292      	uxth	r2, r2
 800228c:	4311      	orrs	r1, r2
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002292:	3a01      	subs	r2, #1
 8002294:	0412      	lsls	r2, r2, #16
 8002296:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800229a:	4311      	orrs	r1, r2
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80022a0:	3a01      	subs	r2, #1
 80022a2:	0612      	lsls	r2, r2, #24
 80022a4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80022a8:	430a      	orrs	r2, r1
 80022aa:	493a      	ldr	r1, [pc, #232]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80022b0:	4b38      	ldr	r3, [pc, #224]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 80022b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b4:	4a37      	ldr	r2, [pc, #220]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 80022b6:	f023 0310 	bic.w	r3, r3, #16
 80022ba:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c0:	4a34      	ldr	r2, [pc, #208]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80022c6:	4b33      	ldr	r3, [pc, #204]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 80022c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ca:	4a32      	ldr	r2, [pc, #200]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 80022cc:	f043 0310 	orr.w	r3, r3, #16
 80022d0:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80022d2:	4b30      	ldr	r3, [pc, #192]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 80022d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d6:	f023 020c 	bic.w	r2, r3, #12
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022de:	492d      	ldr	r1, [pc, #180]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 80022e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d105      	bne.n	80022f8 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80022ec:	4b2a      	ldr	r3, [pc, #168]	; (8002398 <HAL_RCC_OscConfig+0xccc>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	4a29      	ldr	r2, [pc, #164]	; (8002398 <HAL_RCC_OscConfig+0xccc>)
 80022f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022f6:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80022f8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d107      	bne.n	8002310 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8002300:	4b24      	ldr	r3, [pc, #144]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 8002302:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002306:	4a23      	ldr	r2, [pc, #140]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 8002308:	f023 0304 	bic.w	r3, r3, #4
 800230c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002310:	4b20      	ldr	r3, [pc, #128]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 8002312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002314:	4a1f      	ldr	r2, [pc, #124]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 8002316:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800231a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800231c:	4b1d      	ldr	r3, [pc, #116]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a1c      	ldr	r2, [pc, #112]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 8002322:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002326:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002328:	f7fe fda0 	bl	8000e6c <HAL_GetTick>
 800232c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002330:	f7fe fd9c 	bl	8000e6c <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e099      	b.n	8002476 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002342:	4b14      	ldr	r3, [pc, #80]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0f0      	beq.n	8002330 <HAL_RCC_OscConfig+0xc64>
 800234e:	e091      	b.n	8002474 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002350:	4b10      	ldr	r3, [pc, #64]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a0f      	ldr	r2, [pc, #60]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 8002356:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800235a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800235c:	f7fe fd86 	bl	8000e6c <HAL_GetTick>
 8002360:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002364:	f7fe fd82 	bl	8000e6c <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e07f      	b.n	8002476 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002376:	4b07      	ldr	r3, [pc, #28]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f0      	bne.n	8002364 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002382:	4b04      	ldr	r3, [pc, #16]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 8002384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002386:	4a03      	ldr	r2, [pc, #12]	; (8002394 <HAL_RCC_OscConfig+0xcc8>)
 8002388:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800238c:	f023 0303 	bic.w	r3, r3, #3
 8002390:	6293      	str	r3, [r2, #40]	; 0x28
 8002392:	e06f      	b.n	8002474 <HAL_RCC_OscConfig+0xda8>
 8002394:	46020c00 	.word	0x46020c00
 8002398:	46020800 	.word	0x46020800
 800239c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80023a0:	4b37      	ldr	r3, [pc, #220]	; (8002480 <HAL_RCC_OscConfig+0xdb4>)
 80023a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a4:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80023a6:	4b36      	ldr	r3, [pc, #216]	; (8002480 <HAL_RCC_OscConfig+0xdb4>)
 80023a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023aa:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d039      	beq.n	8002428 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f003 0203 	and.w	r2, r3, #3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023be:	429a      	cmp	r2, r3
 80023c0:	d132      	bne.n	8002428 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	0a1b      	lsrs	r3, r3, #8
 80023c6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d129      	bne.n	8002428 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80023de:	429a      	cmp	r2, r3
 80023e0:	d122      	bne.n	8002428 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023ec:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d11a      	bne.n	8002428 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	0a5b      	lsrs	r3, r3, #9
 80023f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002400:	429a      	cmp	r2, r3
 8002402:	d111      	bne.n	8002428 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	0c1b      	lsrs	r3, r3, #16
 8002408:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002410:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002412:	429a      	cmp	r2, r3
 8002414:	d108      	bne.n	8002428 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	0e1b      	lsrs	r3, r3, #24
 800241a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002422:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002424:	429a      	cmp	r2, r3
 8002426:	d001      	beq.n	800242c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e024      	b.n	8002476 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800242c:	4b14      	ldr	r3, [pc, #80]	; (8002480 <HAL_RCC_OscConfig+0xdb4>)
 800242e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002430:	08db      	lsrs	r3, r3, #3
 8002432:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800243a:	429a      	cmp	r2, r3
 800243c:	d01a      	beq.n	8002474 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800243e:	4b10      	ldr	r3, [pc, #64]	; (8002480 <HAL_RCC_OscConfig+0xdb4>)
 8002440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002442:	4a0f      	ldr	r2, [pc, #60]	; (8002480 <HAL_RCC_OscConfig+0xdb4>)
 8002444:	f023 0310 	bic.w	r3, r3, #16
 8002448:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244a:	f7fe fd0f 	bl	8000e6c <HAL_GetTick>
 800244e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8002450:	bf00      	nop
 8002452:	f7fe fd0b 	bl	8000e6c <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245a:	4293      	cmp	r3, r2
 800245c:	d0f9      	beq.n	8002452 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002462:	4a07      	ldr	r2, [pc, #28]	; (8002480 <HAL_RCC_OscConfig+0xdb4>)
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <HAL_RCC_OscConfig+0xdb4>)
 800246a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246c:	4a04      	ldr	r2, [pc, #16]	; (8002480 <HAL_RCC_OscConfig+0xdb4>)
 800246e:	f043 0310 	orr.w	r3, r3, #16
 8002472:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3738      	adds	r7, #56	; 0x38
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	46020c00 	.word	0x46020c00

08002484 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e1d9      	b.n	800284c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002498:	4b9b      	ldr	r3, [pc, #620]	; (8002708 <HAL_RCC_ClockConfig+0x284>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 030f 	and.w	r3, r3, #15
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d910      	bls.n	80024c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a6:	4b98      	ldr	r3, [pc, #608]	; (8002708 <HAL_RCC_ClockConfig+0x284>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f023 020f 	bic.w	r2, r3, #15
 80024ae:	4996      	ldr	r1, [pc, #600]	; (8002708 <HAL_RCC_ClockConfig+0x284>)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b6:	4b94      	ldr	r3, [pc, #592]	; (8002708 <HAL_RCC_ClockConfig+0x284>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d001      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e1c1      	b.n	800284c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0310 	and.w	r3, r3, #16
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d010      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	695a      	ldr	r2, [r3, #20]
 80024d8:	4b8c      	ldr	r3, [pc, #560]	; (800270c <HAL_RCC_ClockConfig+0x288>)
 80024da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d908      	bls.n	80024f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80024e4:	4b89      	ldr	r3, [pc, #548]	; (800270c <HAL_RCC_ClockConfig+0x288>)
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	4986      	ldr	r1, [pc, #536]	; (800270c <HAL_RCC_ClockConfig+0x288>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d012      	beq.n	8002528 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691a      	ldr	r2, [r3, #16]
 8002506:	4b81      	ldr	r3, [pc, #516]	; (800270c <HAL_RCC_ClockConfig+0x288>)
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	091b      	lsrs	r3, r3, #4
 800250c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002510:	429a      	cmp	r2, r3
 8002512:	d909      	bls.n	8002528 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002514:	4b7d      	ldr	r3, [pc, #500]	; (800270c <HAL_RCC_ClockConfig+0x288>)
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	497a      	ldr	r1, [pc, #488]	; (800270c <HAL_RCC_ClockConfig+0x288>)
 8002524:	4313      	orrs	r3, r2
 8002526:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b00      	cmp	r3, #0
 8002532:	d010      	beq.n	8002556 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	4b74      	ldr	r3, [pc, #464]	; (800270c <HAL_RCC_ClockConfig+0x288>)
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002540:	429a      	cmp	r2, r3
 8002542:	d908      	bls.n	8002556 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002544:	4b71      	ldr	r3, [pc, #452]	; (800270c <HAL_RCC_ClockConfig+0x288>)
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	496e      	ldr	r1, [pc, #440]	; (800270c <HAL_RCC_ClockConfig+0x288>)
 8002552:	4313      	orrs	r3, r2
 8002554:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d010      	beq.n	8002584 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	4b69      	ldr	r3, [pc, #420]	; (800270c <HAL_RCC_ClockConfig+0x288>)
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	429a      	cmp	r2, r3
 8002570:	d908      	bls.n	8002584 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002572:	4b66      	ldr	r3, [pc, #408]	; (800270c <HAL_RCC_ClockConfig+0x288>)
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	f023 020f 	bic.w	r2, r3, #15
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	4963      	ldr	r1, [pc, #396]	; (800270c <HAL_RCC_ClockConfig+0x288>)
 8002580:	4313      	orrs	r3, r2
 8002582:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80d2 	beq.w	8002736 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8002592:	2300      	movs	r3, #0
 8002594:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b03      	cmp	r3, #3
 800259c:	d143      	bne.n	8002626 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800259e:	4b5b      	ldr	r3, [pc, #364]	; (800270c <HAL_RCC_ClockConfig+0x288>)
 80025a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d110      	bne.n	80025ce <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80025ac:	4b57      	ldr	r3, [pc, #348]	; (800270c <HAL_RCC_ClockConfig+0x288>)
 80025ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025b2:	4a56      	ldr	r2, [pc, #344]	; (800270c <HAL_RCC_ClockConfig+0x288>)
 80025b4:	f043 0304 	orr.w	r3, r3, #4
 80025b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80025bc:	4b53      	ldr	r3, [pc, #332]	; (800270c <HAL_RCC_ClockConfig+0x288>)
 80025be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025c2:	f003 0304 	and.w	r3, r3, #4
 80025c6:	60bb      	str	r3, [r7, #8]
 80025c8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80025ca:	2301      	movs	r3, #1
 80025cc:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80025ce:	f7fe fc4d 	bl	8000e6c <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80025d4:	4b4e      	ldr	r3, [pc, #312]	; (8002710 <HAL_RCC_ClockConfig+0x28c>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00f      	beq.n	8002600 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80025e2:	f7fe fc43 	bl	8000e6c <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e12b      	b.n	800284c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80025f4:	4b46      	ldr	r3, [pc, #280]	; (8002710 <HAL_RCC_ClockConfig+0x28c>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0f0      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002600:	7dfb      	ldrb	r3, [r7, #23]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d107      	bne.n	8002616 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002606:	4b41      	ldr	r3, [pc, #260]	; (800270c <HAL_RCC_ClockConfig+0x288>)
 8002608:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800260c:	4a3f      	ldr	r2, [pc, #252]	; (800270c <HAL_RCC_ClockConfig+0x288>)
 800260e:	f023 0304 	bic.w	r3, r3, #4
 8002612:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002616:	4b3d      	ldr	r3, [pc, #244]	; (800270c <HAL_RCC_ClockConfig+0x288>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d121      	bne.n	8002666 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e112      	b.n	800284c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2b02      	cmp	r3, #2
 800262c:	d107      	bne.n	800263e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800262e:	4b37      	ldr	r3, [pc, #220]	; (800270c <HAL_RCC_ClockConfig+0x288>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d115      	bne.n	8002666 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e106      	b.n	800284c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d107      	bne.n	8002656 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002646:	4b31      	ldr	r3, [pc, #196]	; (800270c <HAL_RCC_ClockConfig+0x288>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	2b00      	cmp	r3, #0
 8002650:	d109      	bne.n	8002666 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e0fa      	b.n	800284c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002656:	4b2d      	ldr	r3, [pc, #180]	; (800270c <HAL_RCC_ClockConfig+0x288>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e0f2      	b.n	800284c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8002666:	4b29      	ldr	r3, [pc, #164]	; (800270c <HAL_RCC_ClockConfig+0x288>)
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	f023 0203 	bic.w	r2, r3, #3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	4926      	ldr	r1, [pc, #152]	; (800270c <HAL_RCC_ClockConfig+0x288>)
 8002674:	4313      	orrs	r3, r2
 8002676:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8002678:	f7fe fbf8 	bl	8000e6c <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b03      	cmp	r3, #3
 8002684:	d112      	bne.n	80026ac <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002686:	e00a      	b.n	800269e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002688:	f7fe fbf0 	bl	8000e6c <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	f241 3288 	movw	r2, #5000	; 0x1388
 8002696:	4293      	cmp	r3, r2
 8002698:	d901      	bls.n	800269e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e0d6      	b.n	800284c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800269e:	4b1b      	ldr	r3, [pc, #108]	; (800270c <HAL_RCC_ClockConfig+0x288>)
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	f003 030c 	and.w	r3, r3, #12
 80026a6:	2b0c      	cmp	r3, #12
 80026a8:	d1ee      	bne.n	8002688 <HAL_RCC_ClockConfig+0x204>
 80026aa:	e044      	b.n	8002736 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d112      	bne.n	80026da <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80026b4:	e00a      	b.n	80026cc <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026b6:	f7fe fbd9 	bl	8000e6c <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e0bf      	b.n	800284c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80026cc:	4b0f      	ldr	r3, [pc, #60]	; (800270c <HAL_RCC_ClockConfig+0x288>)
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	f003 030c 	and.w	r3, r3, #12
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	d1ee      	bne.n	80026b6 <HAL_RCC_ClockConfig+0x232>
 80026d8:	e02d      	b.n	8002736 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d123      	bne.n	800272a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80026e2:	e00a      	b.n	80026fa <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e4:	f7fe fbc2 	bl	8000e6c <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e0a8      	b.n	800284c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80026fa:	4b04      	ldr	r3, [pc, #16]	; (800270c <HAL_RCC_ClockConfig+0x288>)
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	f003 030c 	and.w	r3, r3, #12
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1ee      	bne.n	80026e4 <HAL_RCC_ClockConfig+0x260>
 8002706:	e016      	b.n	8002736 <HAL_RCC_ClockConfig+0x2b2>
 8002708:	40022000 	.word	0x40022000
 800270c:	46020c00 	.word	0x46020c00
 8002710:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002714:	f7fe fbaa 	bl	8000e6c <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002722:	4293      	cmp	r3, r2
 8002724:	d901      	bls.n	800272a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e090      	b.n	800284c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800272a:	4b4a      	ldr	r3, [pc, #296]	; (8002854 <HAL_RCC_ClockConfig+0x3d0>)
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	f003 030c 	and.w	r3, r3, #12
 8002732:	2b04      	cmp	r3, #4
 8002734:	d1ee      	bne.n	8002714 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d010      	beq.n	8002764 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	4b43      	ldr	r3, [pc, #268]	; (8002854 <HAL_RCC_ClockConfig+0x3d0>)
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	429a      	cmp	r2, r3
 8002750:	d208      	bcs.n	8002764 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002752:	4b40      	ldr	r3, [pc, #256]	; (8002854 <HAL_RCC_ClockConfig+0x3d0>)
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	f023 020f 	bic.w	r2, r3, #15
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	493d      	ldr	r1, [pc, #244]	; (8002854 <HAL_RCC_ClockConfig+0x3d0>)
 8002760:	4313      	orrs	r3, r2
 8002762:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002764:	4b3c      	ldr	r3, [pc, #240]	; (8002858 <HAL_RCC_ClockConfig+0x3d4>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 030f 	and.w	r3, r3, #15
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	429a      	cmp	r2, r3
 8002770:	d210      	bcs.n	8002794 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002772:	4b39      	ldr	r3, [pc, #228]	; (8002858 <HAL_RCC_ClockConfig+0x3d4>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f023 020f 	bic.w	r2, r3, #15
 800277a:	4937      	ldr	r1, [pc, #220]	; (8002858 <HAL_RCC_ClockConfig+0x3d4>)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	4313      	orrs	r3, r2
 8002780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002782:	4b35      	ldr	r3, [pc, #212]	; (8002858 <HAL_RCC_ClockConfig+0x3d4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	429a      	cmp	r2, r3
 800278e:	d001      	beq.n	8002794 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e05b      	b.n	800284c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b00      	cmp	r3, #0
 800279e:	d010      	beq.n	80027c2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68da      	ldr	r2, [r3, #12]
 80027a4:	4b2b      	ldr	r3, [pc, #172]	; (8002854 <HAL_RCC_ClockConfig+0x3d0>)
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d208      	bcs.n	80027c2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80027b0:	4b28      	ldr	r3, [pc, #160]	; (8002854 <HAL_RCC_ClockConfig+0x3d0>)
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	4925      	ldr	r1, [pc, #148]	; (8002854 <HAL_RCC_ClockConfig+0x3d0>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d012      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691a      	ldr	r2, [r3, #16]
 80027d2:	4b20      	ldr	r3, [pc, #128]	; (8002854 <HAL_RCC_ClockConfig+0x3d0>)
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	091b      	lsrs	r3, r3, #4
 80027d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027dc:	429a      	cmp	r2, r3
 80027de:	d209      	bcs.n	80027f4 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80027e0:	4b1c      	ldr	r3, [pc, #112]	; (8002854 <HAL_RCC_ClockConfig+0x3d0>)
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	4919      	ldr	r1, [pc, #100]	; (8002854 <HAL_RCC_ClockConfig+0x3d0>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0310 	and.w	r3, r3, #16
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d010      	beq.n	8002822 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	695a      	ldr	r2, [r3, #20]
 8002804:	4b13      	ldr	r3, [pc, #76]	; (8002854 <HAL_RCC_ClockConfig+0x3d0>)
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800280c:	429a      	cmp	r2, r3
 800280e:	d208      	bcs.n	8002822 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8002810:	4b10      	ldr	r3, [pc, #64]	; (8002854 <HAL_RCC_ClockConfig+0x3d0>)
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	490d      	ldr	r1, [pc, #52]	; (8002854 <HAL_RCC_ClockConfig+0x3d0>)
 800281e:	4313      	orrs	r3, r2
 8002820:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002822:	f000 f821 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 8002826:	4602      	mov	r2, r0
 8002828:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <HAL_RCC_ClockConfig+0x3d0>)
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	f003 030f 	and.w	r3, r3, #15
 8002830:	490a      	ldr	r1, [pc, #40]	; (800285c <HAL_RCC_ClockConfig+0x3d8>)
 8002832:	5ccb      	ldrb	r3, [r1, r3]
 8002834:	fa22 f303 	lsr.w	r3, r2, r3
 8002838:	4a09      	ldr	r2, [pc, #36]	; (8002860 <HAL_RCC_ClockConfig+0x3dc>)
 800283a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800283c:	4b09      	ldr	r3, [pc, #36]	; (8002864 <HAL_RCC_ClockConfig+0x3e0>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f7fe fac9 	bl	8000dd8 <HAL_InitTick>
 8002846:	4603      	mov	r3, r0
 8002848:	73fb      	strb	r3, [r7, #15]

  return status;
 800284a:	7bfb      	ldrb	r3, [r7, #15]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	46020c00 	.word	0x46020c00
 8002858:	40022000 	.word	0x40022000
 800285c:	0800731c 	.word	0x0800731c
 8002860:	20000000 	.word	0x20000000
 8002864:	20000004 	.word	0x20000004

08002868 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002868:	b480      	push	{r7}
 800286a:	b08b      	sub	sp, #44	; 0x2c
 800286c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800286e:	2300      	movs	r3, #0
 8002870:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8002872:	2300      	movs	r3, #0
 8002874:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002876:	4b7b      	ldr	r3, [pc, #492]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	f003 030c 	and.w	r3, r3, #12
 800287e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002880:	4b78      	ldr	r3, [pc, #480]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <HAL_RCC_GetSysClockFreq+0x34>
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	2b0c      	cmp	r3, #12
 8002894:	d121      	bne.n	80028da <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d11e      	bne.n	80028da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800289c:	4b71      	ldr	r3, [pc, #452]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d107      	bne.n	80028b8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80028a8:	4b6e      	ldr	r3, [pc, #440]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80028aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028ae:	0b1b      	lsrs	r3, r3, #12
 80028b0:	f003 030f 	and.w	r3, r3, #15
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
 80028b6:	e005      	b.n	80028c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80028b8:	4b6a      	ldr	r3, [pc, #424]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	0f1b      	lsrs	r3, r3, #28
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80028c4:	4a68      	ldr	r2, [pc, #416]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x200>)
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d110      	bne.n	80028f6 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80028d8:	e00d      	b.n	80028f6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028da:	4b62      	ldr	r3, [pc, #392]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	f003 030c 	and.w	r3, r3, #12
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	d102      	bne.n	80028ec <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028e6:	4b61      	ldr	r3, [pc, #388]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x204>)
 80028e8:	623b      	str	r3, [r7, #32]
 80028ea:	e004      	b.n	80028f6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	2b08      	cmp	r3, #8
 80028f0:	d101      	bne.n	80028f6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028f2:	4b5e      	ldr	r3, [pc, #376]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x204>)
 80028f4:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	2b0c      	cmp	r3, #12
 80028fa:	f040 80ac 	bne.w	8002a56 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80028fe:	4b59      	ldr	r3, [pc, #356]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002908:	4b56      	ldr	r3, [pc, #344]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800290a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290c:	0a1b      	lsrs	r3, r3, #8
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	3301      	adds	r3, #1
 8002914:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002916:	4b53      	ldr	r3, [pc, #332]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291a:	091b      	lsrs	r3, r3, #4
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002922:	4b50      	ldr	r3, [pc, #320]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002926:	08db      	lsrs	r3, r3, #3
 8002928:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800292c:	68ba      	ldr	r2, [r7, #8]
 800292e:	fb02 f303 	mul.w	r3, r2, r3
 8002932:	ee07 3a90 	vmov	s15, r3
 8002936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800293a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 8086 	beq.w	8002a52 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	2b02      	cmp	r3, #2
 800294a:	d003      	beq.n	8002954 <HAL_RCC_GetSysClockFreq+0xec>
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	2b03      	cmp	r3, #3
 8002950:	d022      	beq.n	8002998 <HAL_RCC_GetSysClockFreq+0x130>
 8002952:	e043      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	ee07 3a90 	vmov	s15, r3
 800295a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800295e:	eddf 6a44 	vldr	s13, [pc, #272]	; 8002a70 <HAL_RCC_GetSysClockFreq+0x208>
 8002962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002966:	4b3f      	ldr	r3, [pc, #252]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800296a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800296e:	ee07 3a90 	vmov	s15, r3
 8002972:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002976:	ed97 6a01 	vldr	s12, [r7, #4]
 800297a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002a74 <HAL_RCC_GetSysClockFreq+0x20c>
 800297e:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002982:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002986:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800298a:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800298e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002992:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002996:	e046      	b.n	8002a26 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	ee07 3a90 	vmov	s15, r3
 800299e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029a2:	eddf 6a33 	vldr	s13, [pc, #204]	; 8002a70 <HAL_RCC_GetSysClockFreq+0x208>
 80029a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029aa:	4b2e      	ldr	r3, [pc, #184]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80029ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029b2:	ee07 3a90 	vmov	s15, r3
 80029b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80029ba:	ed97 6a01 	vldr	s12, [r7, #4]
 80029be:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002a74 <HAL_RCC_GetSysClockFreq+0x20c>
 80029c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80029c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80029ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80029d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029d6:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80029da:	e024      	b.n	8002a26 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	ee07 3a90 	vmov	s15, r3
 80029e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	ee07 3a90 	vmov	s15, r3
 80029ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029f4:	4b1b      	ldr	r3, [pc, #108]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80029f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029fc:	ee07 3a90 	vmov	s15, r3
 8002a00:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002a04:	ed97 6a01 	vldr	s12, [r7, #4]
 8002a08:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8002a74 <HAL_RCC_GetSysClockFreq+0x20c>
 8002a0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a10:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002a14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a18:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a20:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002a24:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002a26:	4b0f      	ldr	r3, [pc, #60]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a2a:	0e1b      	lsrs	r3, r3, #24
 8002a2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a30:	3301      	adds	r3, #1
 8002a32:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	ee07 3a90 	vmov	s15, r3
 8002a3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002a42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a4a:	ee17 3a90 	vmov	r3, s15
 8002a4e:	623b      	str	r3, [r7, #32]
 8002a50:	e001      	b.n	8002a56 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8002a52:	2300      	movs	r3, #0
 8002a54:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8002a56:	6a3b      	ldr	r3, [r7, #32]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	372c      	adds	r7, #44	; 0x2c
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	46020c00 	.word	0x46020c00
 8002a68:	08007334 	.word	0x08007334
 8002a6c:	00f42400 	.word	0x00f42400
 8002a70:	4b742400 	.word	0x4b742400
 8002a74:	46000000 	.word	0x46000000

08002a78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002a7c:	f7ff fef4 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 8002a80:	4602      	mov	r2, r0
 8002a82:	4b07      	ldr	r3, [pc, #28]	; (8002aa0 <HAL_RCC_GetHCLKFreq+0x28>)
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	4906      	ldr	r1, [pc, #24]	; (8002aa4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002a8c:	5ccb      	ldrb	r3, [r1, r3]
 8002a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a92:	4a05      	ldr	r2, [pc, #20]	; (8002aa8 <HAL_RCC_GetHCLKFreq+0x30>)
 8002a94:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8002a96:	4b04      	ldr	r3, [pc, #16]	; (8002aa8 <HAL_RCC_GetHCLKFreq+0x30>)
 8002a98:	681b      	ldr	r3, [r3, #0]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	46020c00 	.word	0x46020c00
 8002aa4:	0800731c 	.word	0x0800731c
 8002aa8:	20000000 	.word	0x20000000

08002aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8002ab0:	f7ff ffe2 	bl	8002a78 <HAL_RCC_GetHCLKFreq>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	4b05      	ldr	r3, [pc, #20]	; (8002acc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	091b      	lsrs	r3, r3, #4
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	4903      	ldr	r1, [pc, #12]	; (8002ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ac2:	5ccb      	ldrb	r3, [r1, r3]
 8002ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	46020c00 	.word	0x46020c00
 8002ad0:	0800732c 	.word	0x0800732c

08002ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8002ad8:	f7ff ffce 	bl	8002a78 <HAL_RCC_GetHCLKFreq>
 8002adc:	4602      	mov	r2, r0
 8002ade:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	0a1b      	lsrs	r3, r3, #8
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	4903      	ldr	r1, [pc, #12]	; (8002af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aea:	5ccb      	ldrb	r3, [r1, r3]
 8002aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	46020c00 	.word	0x46020c00
 8002af8:	0800732c 	.word	0x0800732c

08002afc <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8002b00:	f7ff ffba 	bl	8002a78 <HAL_RCC_GetHCLKFreq>
 8002b04:	4602      	mov	r2, r0
 8002b06:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <HAL_RCC_GetPCLK3Freq+0x20>)
 8002b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0a:	091b      	lsrs	r3, r3, #4
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	4903      	ldr	r1, [pc, #12]	; (8002b20 <HAL_RCC_GetPCLK3Freq+0x24>)
 8002b12:	5ccb      	ldrb	r3, [r1, r3]
 8002b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	46020c00 	.word	0x46020c00
 8002b20:	0800732c 	.word	0x0800732c

08002b24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b2c:	4b3e      	ldr	r3, [pc, #248]	; (8002c28 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b3a:	f7fe fd49 	bl	80015d0 <HAL_PWREx_GetVoltageRange>
 8002b3e:	6178      	str	r0, [r7, #20]
 8002b40:	e019      	b.n	8002b76 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b42:	4b39      	ldr	r3, [pc, #228]	; (8002c28 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002b44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b48:	4a37      	ldr	r2, [pc, #220]	; (8002c28 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002b4a:	f043 0304 	orr.w	r3, r3, #4
 8002b4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002b52:	4b35      	ldr	r3, [pc, #212]	; (8002c28 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002b54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b60:	f7fe fd36 	bl	80015d0 <HAL_PWREx_GetVoltageRange>
 8002b64:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b66:	4b30      	ldr	r3, [pc, #192]	; (8002c28 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002b68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b6c:	4a2e      	ldr	r2, [pc, #184]	; (8002c28 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002b6e:	f023 0304 	bic.w	r3, r3, #4
 8002b72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b7c:	d003      	beq.n	8002b86 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b84:	d109      	bne.n	8002b9a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b8c:	d202      	bcs.n	8002b94 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8002b8e:	2301      	movs	r3, #1
 8002b90:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002b92:	e033      	b.n	8002bfc <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8002b94:	2300      	movs	r3, #0
 8002b96:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002b98:	e030      	b.n	8002bfc <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ba0:	d208      	bcs.n	8002bb4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba8:	d102      	bne.n	8002bb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8002baa:	2303      	movs	r3, #3
 8002bac:	613b      	str	r3, [r7, #16]
 8002bae:	e025      	b.n	8002bfc <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e035      	b.n	8002c20 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bba:	d90f      	bls.n	8002bdc <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d109      	bne.n	8002bd6 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002bc8:	d902      	bls.n	8002bd0 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8002bca:	2300      	movs	r3, #0
 8002bcc:	613b      	str	r3, [r7, #16]
 8002bce:	e015      	b.n	8002bfc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	613b      	str	r3, [r7, #16]
 8002bd4:	e012      	b.n	8002bfc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	613b      	str	r3, [r7, #16]
 8002bda:	e00f      	b.n	8002bfc <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002be2:	d109      	bne.n	8002bf8 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bea:	d102      	bne.n	8002bf2 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8002bec:	2301      	movs	r3, #1
 8002bee:	613b      	str	r3, [r7, #16]
 8002bf0:	e004      	b.n	8002bfc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	613b      	str	r3, [r7, #16]
 8002bf6:	e001      	b.n	8002bfc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002bfc:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f023 020f 	bic.w	r2, r3, #15
 8002c04:	4909      	ldr	r1, [pc, #36]	; (8002c2c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002c0c:	4b07      	ldr	r3, [pc, #28]	; (8002c2c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 030f 	and.w	r3, r3, #15
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d001      	beq.n	8002c1e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	46020c00 	.word	0x46020c00
 8002c2c:	40022000 	.word	0x40022000

08002c30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002c30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c34:	b0c4      	sub	sp, #272	; 0x110
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c42:	2300      	movs	r3, #0
 8002c44:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c50:	f002 0401 	and.w	r4, r2, #1
 8002c54:	2500      	movs	r5, #0
 8002c56:	ea54 0305 	orrs.w	r3, r4, r5
 8002c5a:	d00b      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002c5c:	4bd5      	ldr	r3, [pc, #852]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c62:	f023 0103 	bic.w	r1, r3, #3
 8002c66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c6c:	4ad1      	ldr	r2, [pc, #836]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002c6e:	430b      	orrs	r3, r1
 8002c70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7c:	f002 0802 	and.w	r8, r2, #2
 8002c80:	f04f 0900 	mov.w	r9, #0
 8002c84:	ea58 0309 	orrs.w	r3, r8, r9
 8002c88:	d00b      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002c8a:	4bca      	ldr	r3, [pc, #808]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c90:	f023 010c 	bic.w	r1, r3, #12
 8002c94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9a:	4ac6      	ldr	r2, [pc, #792]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002caa:	f002 0a04 	and.w	sl, r2, #4
 8002cae:	f04f 0b00 	mov.w	fp, #0
 8002cb2:	ea5a 030b 	orrs.w	r3, sl, fp
 8002cb6:	d00b      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002cb8:	4bbe      	ldr	r3, [pc, #760]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cbe:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002cc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc8:	4aba      	ldr	r2, [pc, #744]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002cca:	430b      	orrs	r3, r1
 8002ccc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd8:	f002 0308 	and.w	r3, r2, #8
 8002cdc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002ce6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002cea:	460b      	mov	r3, r1
 8002cec:	4313      	orrs	r3, r2
 8002cee:	d00b      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002cf0:	4bb0      	ldr	r3, [pc, #704]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cf6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002cfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d00:	4aac      	ldr	r2, [pc, #688]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002d02:	430b      	orrs	r3, r1
 8002d04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d10:	f002 0310 	and.w	r3, r2, #16
 8002d14:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002d18:	2300      	movs	r3, #0
 8002d1a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002d1e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002d22:	460b      	mov	r3, r1
 8002d24:	4313      	orrs	r3, r2
 8002d26:	d00b      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002d28:	4ba2      	ldr	r3, [pc, #648]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d38:	4a9e      	ldr	r2, [pc, #632]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002d3a:	430b      	orrs	r3, r1
 8002d3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002d40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d48:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8002d4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002d50:	2300      	movs	r3, #0
 8002d52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d56:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	d00b      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8002d60:	4b94      	ldr	r3, [pc, #592]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002d62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002d66:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d70:	4a90      	ldr	r2, [pc, #576]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002d72:	430b      	orrs	r3, r1
 8002d74:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d80:	f002 0320 	and.w	r3, r2, #32
 8002d84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d88:	2300      	movs	r3, #0
 8002d8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002d8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d92:	460b      	mov	r3, r1
 8002d94:	4313      	orrs	r3, r2
 8002d96:	d00b      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002d98:	4b86      	ldr	r3, [pc, #536]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002d9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d9e:	f023 0107 	bic.w	r1, r3, #7
 8002da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002da6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002da8:	4a82      	ldr	r2, [pc, #520]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002daa:	430b      	orrs	r3, r1
 8002dac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002db0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db8:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002dbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002dc6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	d00b      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002dd0:	4b78      	ldr	r3, [pc, #480]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dd6:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8002dda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002de0:	4a74      	ldr	r2, [pc, #464]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002de2:	430b      	orrs	r3, r1
 8002de4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002de8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8002df4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002df8:	2300      	movs	r3, #0
 8002dfa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002dfe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002e02:	460b      	mov	r3, r1
 8002e04:	4313      	orrs	r3, r2
 8002e06:	d00b      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002e08:	4b6a      	ldr	r3, [pc, #424]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e18:	4a66      	ldr	r2, [pc, #408]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e1a:	430b      	orrs	r3, r1
 8002e1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e28:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8002e2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e30:	2300      	movs	r3, #0
 8002e32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e36:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	d00b      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8002e40:	4b5c      	ldr	r3, [pc, #368]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e50:	4a58      	ldr	r2, [pc, #352]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e52:	430b      	orrs	r3, r1
 8002e54:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e60:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002e64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e68:	2300      	movs	r3, #0
 8002e6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002e6e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002e72:	460b      	mov	r3, r1
 8002e74:	4313      	orrs	r3, r2
 8002e76:	d00b      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8002e78:	4b4e      	ldr	r3, [pc, #312]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e7e:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8002e82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e88:	4a4a      	ldr	r2, [pc, #296]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e8a:	430b      	orrs	r3, r1
 8002e8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8002e90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e98:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8002e9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ea6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4313      	orrs	r3, r2
 8002eae:	d00b      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8002eb0:	4b40      	ldr	r3, [pc, #256]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002eb2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002eb6:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8002eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ebe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ec0:	4a3c      	ldr	r2, [pc, #240]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002ec2:	430b      	orrs	r3, r1
 8002ec4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8002ec8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8002ed4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ed8:	2300      	movs	r3, #0
 8002eda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002ede:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	d00c      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8002ee8:	4b32      	ldr	r3, [pc, #200]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002eea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002eee:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002efa:	4a2e      	ldr	r2, [pc, #184]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002efc:	430b      	orrs	r3, r1
 8002efe:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0a:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8002f0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f12:	2300      	movs	r3, #0
 8002f14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002f18:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	d00c      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8002f22:	4b24      	ldr	r3, [pc, #144]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f28:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8002f2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f34:	4a1f      	ldr	r2, [pc, #124]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f36:	430b      	orrs	r3, r1
 8002f38:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f44:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002f48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002f52:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8002f56:	460b      	mov	r3, r1
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	d00c      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8002f5c:	4b15      	ldr	r3, [pc, #84]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f62:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8002f66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6e:	4a11      	ldr	r2, [pc, #68]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f70:	430b      	orrs	r3, r1
 8002f72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8002f76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002f82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f86:	2300      	movs	r3, #0
 8002f88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f8c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8002f90:	460b      	mov	r3, r1
 8002f92:	4313      	orrs	r3, r2
 8002f94:	d010      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8002f96:	4b07      	ldr	r3, [pc, #28]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f9c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002fa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fa8:	4a02      	ldr	r2, [pc, #8]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002faa:	430b      	orrs	r3, r1
 8002fac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002fb0:	e002      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8002fb2:	bf00      	nop
 8002fb4:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002fb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc0:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002fc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002fc8:	2300      	movs	r3, #0
 8002fca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002fce:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	d04c      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8002fd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fe0:	2b80      	cmp	r3, #128	; 0x80
 8002fe2:	d02d      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002fe4:	2b80      	cmp	r3, #128	; 0x80
 8002fe6:	d827      	bhi.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002fe8:	2b60      	cmp	r3, #96	; 0x60
 8002fea:	d02b      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8002fec:	2b60      	cmp	r3, #96	; 0x60
 8002fee:	d823      	bhi.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002ff0:	2b40      	cmp	r3, #64	; 0x40
 8002ff2:	d006      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8002ff4:	2b40      	cmp	r3, #64	; 0x40
 8002ff6:	d81f      	bhi.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d009      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002ffc:	2b20      	cmp	r3, #32
 8002ffe:	d011      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8003000:	e01a      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003002:	4bbe      	ldr	r3, [pc, #760]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003006:	4abd      	ldr	r2, [pc, #756]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800300e:	e01a      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003014:	3308      	adds	r3, #8
 8003016:	4618      	mov	r0, r3
 8003018:	f002 fc5c 	bl	80058d4 <RCCEx_PLL2_Config>
 800301c:	4603      	mov	r3, r0
 800301e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003022:	e010      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003024:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003028:	332c      	adds	r3, #44	; 0x2c
 800302a:	4618      	mov	r0, r3
 800302c:	f002 fcea 	bl	8005a04 <RCCEx_PLL3_Config>
 8003030:	4603      	mov	r3, r0
 8003032:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003036:	e006      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 800303e:	e002      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8003040:	bf00      	nop
 8003042:	e000      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8003044:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003046:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10d      	bne.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800304e:	4bab      	ldr	r3, [pc, #684]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003050:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003054:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8003058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800305c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003060:	4aa6      	ldr	r2, [pc, #664]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003062:	430b      	orrs	r3, r1
 8003064:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003068:	e003      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800306a:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800306e:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800307e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003082:	2300      	movs	r3, #0
 8003084:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003088:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800308c:	460b      	mov	r3, r1
 800308e:	4313      	orrs	r3, r2
 8003090:	d053      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8003092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003096:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800309a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800309e:	d033      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 80030a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030a4:	d82c      	bhi.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80030a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030aa:	d02f      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 80030ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030b0:	d826      	bhi.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80030b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030b6:	d008      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x49a>
 80030b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030bc:	d820      	bhi.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00a      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80030c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030c6:	d011      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80030c8:	e01a      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80030ca:	4b8c      	ldr	r3, [pc, #560]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ce:	4a8b      	ldr	r2, [pc, #556]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d4:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80030d6:	e01a      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80030d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030dc:	3308      	adds	r3, #8
 80030de:	4618      	mov	r0, r3
 80030e0:	f002 fbf8 	bl	80058d4 <RCCEx_PLL2_Config>
 80030e4:	4603      	mov	r3, r0
 80030e6:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80030ea:	e010      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80030ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030f0:	332c      	adds	r3, #44	; 0x2c
 80030f2:	4618      	mov	r0, r3
 80030f4:	f002 fc86 	bl	8005a04 <RCCEx_PLL3_Config>
 80030f8:	4603      	mov	r3, r0
 80030fa:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80030fe:	e006      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003106:	e002      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8003108:	bf00      	nop
 800310a:	e000      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800310c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800310e:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10d      	bne.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8003116:	4b79      	ldr	r3, [pc, #484]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003118:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800311c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003120:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003124:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003128:	4a74      	ldr	r2, [pc, #464]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800312a:	430b      	orrs	r3, r1
 800312c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003130:	e003      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003132:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003136:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800313a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800313e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003142:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003146:	67bb      	str	r3, [r7, #120]	; 0x78
 8003148:	2300      	movs	r3, #0
 800314a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800314c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003150:	460b      	mov	r3, r1
 8003152:	4313      	orrs	r3, r2
 8003154:	d046      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003156:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800315a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800315e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003162:	d028      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003164:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003168:	d821      	bhi.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x57e>
 800316a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800316e:	d022      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003170:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003174:	d81b      	bhi.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8003176:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800317a:	d01c      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800317c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003180:	d815      	bhi.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8003182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003186:	d008      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8003188:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800318c:	d80f      	bhi.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x57e>
 800318e:	2b00      	cmp	r3, #0
 8003190:	d011      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003196:	d00e      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003198:	e009      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x57e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800319a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800319e:	3308      	adds	r3, #8
 80031a0:	4618      	mov	r0, r3
 80031a2:	f002 fb97 	bl	80058d4 <RCCEx_PLL2_Config>
 80031a6:	4603      	mov	r3, r0
 80031a8:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80031ac:	e004      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x588>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80031b4:	e000      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x588>
        break;
 80031b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031b8:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10d      	bne.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80031c0:	4b4e      	ldr	r3, [pc, #312]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031c6:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80031ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80031d2:	4a4a      	ldr	r2, [pc, #296]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031d4:	430b      	orrs	r3, r1
 80031d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80031da:	e003      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031dc:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80031e0:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80031e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ec:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80031f0:	673b      	str	r3, [r7, #112]	; 0x70
 80031f2:	2300      	movs	r3, #0
 80031f4:	677b      	str	r3, [r7, #116]	; 0x74
 80031f6:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80031fa:	460b      	mov	r3, r1
 80031fc:	4313      	orrs	r3, r2
 80031fe:	d03f      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8003200:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003204:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003208:	2b04      	cmp	r3, #4
 800320a:	d81e      	bhi.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x61a>
 800320c:	a201      	add	r2, pc, #4	; (adr r2, 8003214 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800320e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003212:	bf00      	nop
 8003214:	08003253 	.word	0x08003253
 8003218:	08003229 	.word	0x08003229
 800321c:	08003237 	.word	0x08003237
 8003220:	08003253 	.word	0x08003253
 8003224:	08003253 	.word	0x08003253
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003228:	4b34      	ldr	r3, [pc, #208]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800322a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322c:	4a33      	ldr	r2, [pc, #204]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800322e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003232:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003234:	e00e      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003236:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800323a:	332c      	adds	r3, #44	; 0x2c
 800323c:	4618      	mov	r0, r3
 800323e:	f002 fbe1 	bl	8005a04 <RCCEx_PLL3_Config>
 8003242:	4603      	mov	r3, r0
 8003244:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003248:	e004      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003250:	e000      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x624>
        break;
 8003252:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003254:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10d      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800325c:	4b27      	ldr	r3, [pc, #156]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800325e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003262:	f023 0107 	bic.w	r1, r3, #7
 8003266:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800326a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800326e:	4a23      	ldr	r2, [pc, #140]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003270:	430b      	orrs	r3, r1
 8003272:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003276:	e003      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x650>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003278:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800327c:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003280:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003288:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800328c:	66bb      	str	r3, [r7, #104]	; 0x68
 800328e:	2300      	movs	r3, #0
 8003290:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003292:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003296:	460b      	mov	r3, r1
 8003298:	4313      	orrs	r3, r2
 800329a:	d04c      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x706>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800329c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032a8:	d02a      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 80032aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032ae:	d821      	bhi.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 80032b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80032b4:	d026      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 80032b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80032ba:	d81b      	bhi.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 80032bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032c0:	d00e      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80032c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032c6:	d815      	bhi.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d01d      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 80032cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d0:	d110      	bne.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80032d2:	4b0a      	ldr	r3, [pc, #40]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d6:	4a09      	ldr	r2, [pc, #36]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032dc:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80032de:	e014      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80032e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032e4:	332c      	adds	r3, #44	; 0x2c
 80032e6:	4618      	mov	r0, r3
 80032e8:	f002 fb8c 	bl	8005a04 <RCCEx_PLL3_Config>
 80032ec:	4603      	mov	r3, r0
 80032ee:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80032f2:	e00a      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80032fa:	e006      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x6da>
 80032fc:	46020c00 	.word	0x46020c00
        break;
 8003300:	bf00      	nop
 8003302:	e002      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8003304:	bf00      	nop
 8003306:	e000      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8003308:	bf00      	nop
    }
    if (ret == HAL_OK)
 800330a:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10d      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8003312:	4baf      	ldr	r3, [pc, #700]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003314:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003318:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800331c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003320:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003324:	4aaa      	ldr	r2, [pc, #680]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003326:	430b      	orrs	r3, r1
 8003328:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800332c:	e003      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x706>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800332e:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003332:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003336:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800333a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800333e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003342:	663b      	str	r3, [r7, #96]	; 0x60
 8003344:	2300      	movs	r3, #0
 8003346:	667b      	str	r3, [r7, #100]	; 0x64
 8003348:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800334c:	460b      	mov	r3, r1
 800334e:	4313      	orrs	r3, r2
 8003350:	f000 80b5 	beq.w	80034be <HAL_RCCEx_PeriphCLKConfig+0x88e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003354:	2300      	movs	r3, #0
 8003356:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800335a:	4b9d      	ldr	r3, [pc, #628]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800335c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	d113      	bne.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x760>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003368:	4b99      	ldr	r3, [pc, #612]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800336a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800336e:	4a98      	ldr	r2, [pc, #608]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003370:	f043 0304 	orr.w	r3, r3, #4
 8003374:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003378:	4b95      	ldr	r3, [pc, #596]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800337a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800337e:	f003 0304 	and.w	r3, r3, #4
 8003382:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003386:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
      pwrclkchanged = SET;
 800338a:	2301      	movs	r3, #1
 800338c:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003390:	4b90      	ldr	r3, [pc, #576]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8003392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003394:	4a8f      	ldr	r2, [pc, #572]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8003396:	f043 0301 	orr.w	r3, r3, #1
 800339a:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800339c:	f7fd fd66 	bl	8000e6c <HAL_GetTick>
 80033a0:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80033a4:	e00b      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x78e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033a6:	f7fd fd61 	bl	8000e6c <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d903      	bls.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        ret = HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80033bc:	e005      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x79a>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80033be:	4b85      	ldr	r3, [pc, #532]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 80033c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0ed      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x776>
      }
    }

    if (ret == HAL_OK)
 80033ca:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d165      	bne.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033d2:	4b7f      	ldr	r3, [pc, #508]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80033d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80033e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d023      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x800>
 80033e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033ec:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80033f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d01b      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x800>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033f8:	4b75      	ldr	r3, [pc, #468]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80033fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003402:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003406:	4b72      	ldr	r3, [pc, #456]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003408:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800340c:	4a70      	ldr	r2, [pc, #448]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800340e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003412:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003416:	4b6e      	ldr	r3, [pc, #440]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003418:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800341c:	4a6c      	ldr	r2, [pc, #432]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800341e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003422:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003426:	4a6a      	ldr	r2, [pc, #424]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003428:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800342c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003430:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b00      	cmp	r3, #0
 800343a:	d019      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x840>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343c:	f7fd fd16 	bl	8000e6c <HAL_GetTick>
 8003440:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003444:	e00d      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x832>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003446:	f7fd fd11 	bl	8000e6c <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003450:	1ad2      	subs	r2, r2, r3
 8003452:	f241 3388 	movw	r3, #5000	; 0x1388
 8003456:	429a      	cmp	r2, r3
 8003458:	d903      	bls.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x832>
          {
            ret = HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
            break;
 8003460:	e006      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x840>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003462:	4b5b      	ldr	r3, [pc, #364]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003464:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0ea      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x816>
          }
        }
      }

      if (ret == HAL_OK)
 8003470:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10d      	bne.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x864>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003478:	4b55      	ldr	r3, [pc, #340]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800347a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800347e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003482:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003486:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800348a:	4a51      	ldr	r2, [pc, #324]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800348c:	430b      	orrs	r3, r1
 800348e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003492:	e008      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003494:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003498:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
 800349c:	e003      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800349e:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80034a2:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034a6:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d107      	bne.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x88e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ae:	4b48      	ldr	r3, [pc, #288]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80034b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034b4:	4a46      	ldr	r2, [pc, #280]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80034b6:	f023 0304 	bic.w	r3, r3, #4
 80034ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80034be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c6:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80034ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80034cc:	2300      	movs	r3, #0
 80034ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034d0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80034d4:	460b      	mov	r3, r1
 80034d6:	4313      	orrs	r3, r2
 80034d8:	d042      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80034da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80034e2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80034e6:	d022      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 80034e8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80034ec:	d81b      	bhi.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 80034ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034f2:	d011      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 80034f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034f8:	d815      	bhi.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d019      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x902>
 80034fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003502:	d110      	bne.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003504:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003508:	3308      	adds	r3, #8
 800350a:	4618      	mov	r0, r3
 800350c:	f002 f9e2 	bl	80058d4 <RCCEx_PLL2_Config>
 8003510:	4603      	mov	r3, r0
 8003512:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003516:	e00d      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003518:	4b2d      	ldr	r3, [pc, #180]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800351a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351c:	4a2c      	ldr	r2, [pc, #176]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800351e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003522:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003524:	e006      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 800352c:	e002      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 800352e:	bf00      	nop
 8003530:	e000      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8003532:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003534:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10d      	bne.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x928>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800353c:	4b24      	ldr	r3, [pc, #144]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800353e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003542:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800354a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800354e:	4a20      	ldr	r2, [pc, #128]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003550:	430b      	orrs	r3, r1
 8003552:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003556:	e003      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003558:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800355c:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003560:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003568:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800356c:	653b      	str	r3, [r7, #80]	; 0x50
 800356e:	2300      	movs	r3, #0
 8003570:	657b      	str	r3, [r7, #84]	; 0x54
 8003572:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003576:	460b      	mov	r3, r1
 8003578:	4313      	orrs	r3, r2
 800357a:	d031      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800357c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003580:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003584:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003588:	d00b      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800358a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800358e:	d804      	bhi.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003590:	2b00      	cmp	r3, #0
 8003592:	d008      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003598:	d007      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x97a>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80035a0:	e004      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 80035a2:	bf00      	nop
 80035a4:	e002      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 80035a6:	bf00      	nop
 80035a8:	e000      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 80035aa:	bf00      	nop
    }
    if (ret == HAL_OK)
 80035ac:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d111      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80035b4:	4b06      	ldr	r3, [pc, #24]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80035b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80035ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80035c6:	4a02      	ldr	r2, [pc, #8]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80035c8:	430b      	orrs	r3, r1
 80035ca:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80035ce:	e007      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 80035d0:	46020c00 	.word	0x46020c00
 80035d4:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d8:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80035dc:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 80035e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e8:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80035ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80035ee:	2300      	movs	r3, #0
 80035f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035f2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80035f6:	460b      	mov	r3, r1
 80035f8:	4313      	orrs	r3, r2
 80035fa:	d00c      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 80035fc:	4bb2      	ldr	r3, [pc, #712]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80035fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003602:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8003606:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800360a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800360e:	4aae      	ldr	r2, [pc, #696]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003610:	430b      	orrs	r3, r1
 8003612:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8003616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800361a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003622:	643b      	str	r3, [r7, #64]	; 0x40
 8003624:	2300      	movs	r3, #0
 8003626:	647b      	str	r3, [r7, #68]	; 0x44
 8003628:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800362c:	460b      	mov	r3, r1
 800362e:	4313      	orrs	r3, r2
 8003630:	d019      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8003632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003636:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800363a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800363e:	d105      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003640:	4ba1      	ldr	r3, [pc, #644]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003644:	4aa0      	ldr	r2, [pc, #640]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800364a:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800364c:	4b9e      	ldr	r3, [pc, #632]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800364e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003652:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800365a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800365e:	4a9a      	ldr	r2, [pc, #616]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003660:	430b      	orrs	r3, r1
 8003662:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003666:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800366a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003672:	63bb      	str	r3, [r7, #56]	; 0x38
 8003674:	2300      	movs	r3, #0
 8003676:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003678:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800367c:	460b      	mov	r3, r1
 800367e:	4313      	orrs	r3, r2
 8003680:	d00c      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003682:	4b91      	ldr	r3, [pc, #580]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003688:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800368c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003690:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003694:	4a8c      	ldr	r2, [pc, #560]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003696:	430b      	orrs	r3, r1
 8003698:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800369c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80036a8:	633b      	str	r3, [r7, #48]	; 0x30
 80036aa:	2300      	movs	r3, #0
 80036ac:	637b      	str	r3, [r7, #52]	; 0x34
 80036ae:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80036b2:	460b      	mov	r3, r1
 80036b4:	4313      	orrs	r3, r2
 80036b6:	d00c      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80036b8:	4b83      	ldr	r3, [pc, #524]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80036ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036be:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80036c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036c6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80036ca:	4a7f      	ldr	r2, [pc, #508]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80036cc:	430b      	orrs	r3, r1
 80036ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80036d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036da:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80036de:	62bb      	str	r3, [r7, #40]	; 0x28
 80036e0:	2300      	movs	r3, #0
 80036e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036e4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80036e8:	460b      	mov	r3, r1
 80036ea:	4313      	orrs	r3, r2
 80036ec:	d00c      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xad8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80036ee:	4b76      	ldr	r3, [pc, #472]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80036f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036f4:	f023 0218 	bic.w	r2, r3, #24
 80036f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036fc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003700:	4971      	ldr	r1, [pc, #452]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003702:	4313      	orrs	r3, r2
 8003704:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003708:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800370c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003710:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8003714:	623b      	str	r3, [r7, #32]
 8003716:	2300      	movs	r3, #0
 8003718:	627b      	str	r3, [r7, #36]	; 0x24
 800371a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800371e:	460b      	mov	r3, r1
 8003720:	4313      	orrs	r3, r2
 8003722:	d032      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8003724:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003728:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800372c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003730:	d105      	bne.n	800373e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003732:	4b65      	ldr	r3, [pc, #404]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003736:	4a64      	ldr	r2, [pc, #400]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800373c:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800373e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003742:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003746:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800374a:	d108      	bne.n	800375e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800374c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003750:	3308      	adds	r3, #8
 8003752:	4618      	mov	r0, r3
 8003754:	f002 f8be 	bl	80058d4 <RCCEx_PLL2_Config>
 8003758:	4603      	mov	r3, r0
 800375a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    }
    if (ret == HAL_OK)
 800375e:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10d      	bne.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0xb52>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8003766:	4b58      	ldr	r3, [pc, #352]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003768:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800376c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003770:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003774:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003778:	4953      	ldr	r1, [pc, #332]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800377a:	4313      	orrs	r3, r2
 800377c:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8003780:	e003      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003782:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003786:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800378a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800378e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003792:	2100      	movs	r1, #0
 8003794:	61b9      	str	r1, [r7, #24]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	61fb      	str	r3, [r7, #28]
 800379c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80037a0:	460b      	mov	r3, r1
 80037a2:	4313      	orrs	r3, r2
 80037a4:	d04a      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 80037a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037aa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80037ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037b2:	d01e      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 80037b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037b8:	d825      	bhi.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 80037ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037be:	d00e      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80037c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037c4:	d81f      	bhi.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d021      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xbde>
 80037ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037ce:	d11a      	bne.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037d0:	4b3d      	ldr	r3, [pc, #244]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80037d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d4:	4a3c      	ldr	r2, [pc, #240]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80037d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037da:	6293      	str	r3, [r2, #40]	; 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80037dc:	e018      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80037de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037e2:	3308      	adds	r3, #8
 80037e4:	4618      	mov	r0, r3
 80037e6:	f002 f875 	bl	80058d4 <RCCEx_PLL2_Config>
 80037ea:	4603      	mov	r3, r0
 80037ec:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80037f0:	e00e      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80037f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037f6:	332c      	adds	r3, #44	; 0x2c
 80037f8:	4618      	mov	r0, r3
 80037fa:	f002 f903 	bl	8005a04 <RCCEx_PLL3_Config>
 80037fe:	4603      	mov	r3, r0
 8003800:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8003804:	e004      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      default:
        ret = HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 800380c:	e000      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        break;
 800380e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003810:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10d      	bne.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xc04>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 8003818:	4b2b      	ldr	r3, [pc, #172]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800381a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800381e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003822:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003826:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800382a:	4927      	ldr	r1, [pc, #156]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800382c:	4313      	orrs	r3, r2
 800382e:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8003832:	e003      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003834:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003838:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800383c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003844:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8003848:	613b      	str	r3, [r7, #16]
 800384a:	2300      	movs	r3, #0
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003852:	460b      	mov	r3, r1
 8003854:	4313      	orrs	r3, r2
 8003856:	d03d      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0xca4>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8003858:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800385c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003860:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003864:	d00e      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8003866:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800386a:	d815      	bhi.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800386c:	2b00      	cmp	r3, #0
 800386e:	d017      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003874:	d110      	bne.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0xc68>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003876:	4b14      	ldr	r3, [pc, #80]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387a:	4a13      	ldr	r2, [pc, #76]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800387c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003880:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8003882:	e00e      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003888:	3308      	adds	r3, #8
 800388a:	4618      	mov	r0, r3
 800388c:	f002 f822 	bl	80058d4 <RCCEx_PLL2_Config>
 8003890:	4603      	mov	r3, r0
 8003892:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8003896:	e004      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      default:
        ret = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 800389e:	e000      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
        break;
 80038a0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80038a2:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d110      	bne.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80038aa:	4b07      	ldr	r3, [pc, #28]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80038ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038b0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80038b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038bc:	4902      	ldr	r1, [pc, #8]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80038c4:	e006      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0xca4>
 80038c6:	bf00      	nop
 80038c8:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038cc:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80038d0:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80038d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038dc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80038e0:	60bb      	str	r3, [r7, #8]
 80038e2:	2300      	movs	r3, #0
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80038ea:	460b      	mov	r3, r1
 80038ec:	4313      	orrs	r3, r2
 80038ee:	d00c      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0xcda>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80038f0:	4b2c      	ldr	r3, [pc, #176]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80038f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038f6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80038fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038fe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003902:	4928      	ldr	r1, [pc, #160]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8003904:	4313      	orrs	r3, r2
 8003906:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800390a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800390e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003912:	2100      	movs	r1, #0
 8003914:	6039      	str	r1, [r7, #0]
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	607b      	str	r3, [r7, #4]
 800391c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003920:	460b      	mov	r3, r1
 8003922:	4313      	orrs	r3, r2
 8003924:	d036      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 8003926:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800392a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800392e:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003932:	d00d      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003934:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003938:	d811      	bhi.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 800393a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800393e:	d012      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003940:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003944:	d80b      	bhi.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00d      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800394a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800394e:	d106      	bne.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xd2e>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003950:	4b14      	ldr	r3, [pc, #80]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8003952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003954:	4a13      	ldr	r2, [pc, #76]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8003956:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800395a:	6293      	str	r3, [r2, #40]	; 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800395c:	e004      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xd38>

      default:
        ret = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003964:	e000      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xd38>
        break;
 8003966:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003968:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10d      	bne.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xd5c>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8003970:	4b0c      	ldr	r3, [pc, #48]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8003972:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003976:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800397a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800397e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003982:	4908      	ldr	r1, [pc, #32]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8003984:	4313      	orrs	r3, r2
 8003986:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800398a:	e003      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800398c:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003990:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8003994:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
}
 8003998:	4618      	mov	r0, r3
 800399a:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800399e:	46bd      	mov	sp, r7
 80039a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039a4:	46020c00 	.word	0x46020c00

080039a8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b089      	sub	sp, #36	; 0x24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80039b0:	4bad      	ldr	r3, [pc, #692]	; (8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80039b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039b8:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80039ba:	4bab      	ldr	r3, [pc, #684]	; (8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80039bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039be:	f003 0303 	and.w	r3, r3, #3
 80039c2:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80039c4:	4ba8      	ldr	r3, [pc, #672]	; (8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80039c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c8:	0a1b      	lsrs	r3, r3, #8
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	3301      	adds	r3, #1
 80039d0:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80039d2:	4ba5      	ldr	r3, [pc, #660]	; (8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80039d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d6:	091b      	lsrs	r3, r3, #4
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80039de:	4ba2      	ldr	r3, [pc, #648]	; (8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80039e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e2:	08db      	lsrs	r3, r3, #3
 80039e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	fb02 f303 	mul.w	r3, r2, r3
 80039ee:	ee07 3a90 	vmov	s15, r3
 80039f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039f6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 8123 	beq.w	8003c48 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	2b03      	cmp	r3, #3
 8003a06:	d062      	beq.n	8003ace <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	2b03      	cmp	r3, #3
 8003a0c:	f200 8081 	bhi.w	8003b12 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d024      	beq.n	8003a60 <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d17a      	bne.n	8003b12 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	ee07 3a90 	vmov	s15, r3
 8003a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a26:	eddf 6a91 	vldr	s13, [pc, #580]	; 8003c6c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8003a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a2e:	4b8e      	ldr	r3, [pc, #568]	; (8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a36:	ee07 3a90 	vmov	s15, r3
 8003a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a42:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8003c70 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a5e:	e08f      	b.n	8003b80 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003a60:	4b81      	ldr	r3, [pc, #516]	; (8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d005      	beq.n	8003a78 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 8003a6c:	4b7e      	ldr	r3, [pc, #504]	; (8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	0f1b      	lsrs	r3, r3, #28
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	e006      	b.n	8003a86 <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 8003a78:	4b7b      	ldr	r3, [pc, #492]	; (8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003a7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a7e:	041b      	lsls	r3, r3, #16
 8003a80:	0f1b      	lsrs	r3, r3, #28
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	4a7b      	ldr	r2, [pc, #492]	; (8003c74 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8003a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a8c:	ee07 3a90 	vmov	s15, r3
 8003a90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	ee07 3a90 	vmov	s15, r3
 8003a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	ee07 3a90 	vmov	s15, r3
 8003aa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aac:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ab0:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8003c70 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003ab4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ab8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003abc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ac0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003ac4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ac8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003acc:	e058      	b.n	8003b80 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	ee07 3a90 	vmov	s15, r3
 8003ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ad8:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003c6c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8003adc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ae0:	4b61      	ldr	r3, [pc, #388]	; (8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ae8:	ee07 3a90 	vmov	s15, r3
 8003aec:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003af0:	ed97 6a02 	vldr	s12, [r7, #8]
 8003af4:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8003c70 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003af8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003afc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b04:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b0c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b10:	e036      	b.n	8003b80 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003b12:	4b55      	ldr	r3, [pc, #340]	; (8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d005      	beq.n	8003b2a <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 8003b1e:	4b52      	ldr	r3, [pc, #328]	; (8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	0f1b      	lsrs	r3, r3, #28
 8003b24:	f003 030f 	and.w	r3, r3, #15
 8003b28:	e006      	b.n	8003b38 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 8003b2a:	4b4f      	ldr	r3, [pc, #316]	; (8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003b2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b30:	041b      	lsls	r3, r3, #16
 8003b32:	0f1b      	lsrs	r3, r3, #28
 8003b34:	f003 030f 	and.w	r3, r3, #15
 8003b38:	4a4e      	ldr	r2, [pc, #312]	; (8003c74 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8003b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b3e:	ee07 3a90 	vmov	s15, r3
 8003b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	ee07 3a90 	vmov	s15, r3
 8003b4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	ee07 3a90 	vmov	s15, r3
 8003b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b62:	eddf 5a43 	vldr	s11, [pc, #268]	; 8003c70 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b7e:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003b80:	4b39      	ldr	r3, [pc, #228]	; (8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d017      	beq.n	8003bbc <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003b8c:	4b36      	ldr	r3, [pc, #216]	; (8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b90:	0a5b      	lsrs	r3, r3, #9
 8003b92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b96:	ee07 3a90 	vmov	s15, r3
 8003b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8003b9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ba2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003ba6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003baa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bb2:	ee17 2a90 	vmov	r2, s15
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	e002      	b.n	8003bc2 <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8003bc2:	4b29      	ldr	r3, [pc, #164]	; (8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d017      	beq.n	8003bfe <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003bce:	4b26      	ldr	r3, [pc, #152]	; (8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd2:	0c1b      	lsrs	r3, r3, #16
 8003bd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bd8:	ee07 3a90 	vmov	s15, r3
 8003bdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003be0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003be4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003be8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bf4:	ee17 2a90 	vmov	r2, s15
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	605a      	str	r2, [r3, #4]
 8003bfc:	e002      	b.n	8003c04 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8003c04:	4b18      	ldr	r3, [pc, #96]	; (8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d017      	beq.n	8003c40 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003c10:	4b15      	ldr	r3, [pc, #84]	; (8003c68 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c14:	0e1b      	lsrs	r3, r3, #24
 8003c16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c1a:	ee07 3a90 	vmov	s15, r3
 8003c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8003c22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c26:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003c2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c36:	ee17 2a90 	vmov	r2, s15
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003c3e:	e00c      	b.n	8003c5a <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	609a      	str	r2, [r3, #8]
}
 8003c46:	e008      	b.n	8003c5a <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	609a      	str	r2, [r3, #8]
}
 8003c5a:	bf00      	nop
 8003c5c:	3724      	adds	r7, #36	; 0x24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	46020c00 	.word	0x46020c00
 8003c6c:	4b742400 	.word	0x4b742400
 8003c70:	46000000 	.word	0x46000000
 8003c74:	08007334 	.word	0x08007334

08003c78 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b089      	sub	sp, #36	; 0x24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003c80:	4bad      	ldr	r3, [pc, #692]	; (8003f38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c88:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003c8a:	4bab      	ldr	r3, [pc, #684]	; (8003f38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8e:	f003 0303 	and.w	r3, r3, #3
 8003c92:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8003c94:	4ba8      	ldr	r3, [pc, #672]	; (8003f38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c98:	0a1b      	lsrs	r3, r3, #8
 8003c9a:	f003 030f 	and.w	r3, r3, #15
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8003ca2:	4ba5      	ldr	r3, [pc, #660]	; (8003f38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca6:	091b      	lsrs	r3, r3, #4
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003cae:	4ba2      	ldr	r3, [pc, #648]	; (8003f38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	08db      	lsrs	r3, r3, #3
 8003cb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	fb02 f303 	mul.w	r3, r2, r3
 8003cbe:	ee07 3a90 	vmov	s15, r3
 8003cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cc6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 8123 	beq.w	8003f18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	2b03      	cmp	r3, #3
 8003cd6:	d062      	beq.n	8003d9e <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	2b03      	cmp	r3, #3
 8003cdc:	f200 8081 	bhi.w	8003de2 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d024      	beq.n	8003d30 <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d17a      	bne.n	8003de2 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	ee07 3a90 	vmov	s15, r3
 8003cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cf6:	eddf 6a91 	vldr	s13, [pc, #580]	; 8003f3c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cfe:	4b8e      	ldr	r3, [pc, #568]	; (8003f38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d06:	ee07 3a90 	vmov	s15, r3
 8003d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d12:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8003f40 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d2e:	e08f      	b.n	8003e50 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003d30:	4b81      	ldr	r3, [pc, #516]	; (8003f38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d005      	beq.n	8003d48 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 8003d3c:	4b7e      	ldr	r3, [pc, #504]	; (8003f38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	0f1b      	lsrs	r3, r3, #28
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	e006      	b.n	8003d56 <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 8003d48:	4b7b      	ldr	r3, [pc, #492]	; (8003f38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003d4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d4e:	041b      	lsls	r3, r3, #16
 8003d50:	0f1b      	lsrs	r3, r3, #28
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	4a7b      	ldr	r2, [pc, #492]	; (8003f44 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8003d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d5c:	ee07 3a90 	vmov	s15, r3
 8003d60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	ee07 3a90 	vmov	s15, r3
 8003d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	ee07 3a90 	vmov	s15, r3
 8003d78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d7c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d80:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8003f40 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003d84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d90:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d9c:	e058      	b.n	8003e50 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	ee07 3a90 	vmov	s15, r3
 8003da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003da8:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003f3c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003dac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003db0:	4b61      	ldr	r3, [pc, #388]	; (8003f38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003db8:	ee07 3a90 	vmov	s15, r3
 8003dbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003dc0:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dc4:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8003f40 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003dc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003dcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003dd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ddc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003de0:	e036      	b.n	8003e50 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003de2:	4b55      	ldr	r3, [pc, #340]	; (8003f38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d005      	beq.n	8003dfa <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 8003dee:	4b52      	ldr	r3, [pc, #328]	; (8003f38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	0f1b      	lsrs	r3, r3, #28
 8003df4:	f003 030f 	and.w	r3, r3, #15
 8003df8:	e006      	b.n	8003e08 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 8003dfa:	4b4f      	ldr	r3, [pc, #316]	; (8003f38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003dfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e00:	041b      	lsls	r3, r3, #16
 8003e02:	0f1b      	lsrs	r3, r3, #28
 8003e04:	f003 030f 	and.w	r3, r3, #15
 8003e08:	4a4e      	ldr	r2, [pc, #312]	; (8003f44 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8003e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e0e:	ee07 3a90 	vmov	s15, r3
 8003e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	ee07 3a90 	vmov	s15, r3
 8003e1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	ee07 3a90 	vmov	s15, r3
 8003e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e32:	eddf 5a43 	vldr	s11, [pc, #268]	; 8003f40 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8003e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e4e:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8003e50:	4b39      	ldr	r3, [pc, #228]	; (8003f38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d017      	beq.n	8003e8c <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003e5c:	4b36      	ldr	r3, [pc, #216]	; (8003f38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e60:	0a5b      	lsrs	r3, r3, #9
 8003e62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e66:	ee07 3a90 	vmov	s15, r3
 8003e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8003e6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e72:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003e76:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e82:	ee17 2a90 	vmov	r2, s15
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	e002      	b.n	8003e92 <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8003e92:	4b29      	ldr	r3, [pc, #164]	; (8003f38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d017      	beq.n	8003ece <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003e9e:	4b26      	ldr	r3, [pc, #152]	; (8003f38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea2:	0c1b      	lsrs	r3, r3, #16
 8003ea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ea8:	ee07 3a90 	vmov	s15, r3
 8003eac:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8003eb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003eb4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003eb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ebc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ec0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ec4:	ee17 2a90 	vmov	r2, s15
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	605a      	str	r2, [r3, #4]
 8003ecc:	e002      	b.n	8003ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8003ed4:	4b18      	ldr	r3, [pc, #96]	; (8003f38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d017      	beq.n	8003f10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003ee0:	4b15      	ldr	r3, [pc, #84]	; (8003f38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8003ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee4:	0e1b      	lsrs	r3, r3, #24
 8003ee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eea:	ee07 3a90 	vmov	s15, r3
 8003eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8003ef2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ef6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003efa:	edd7 6a07 	vldr	s13, [r7, #28]
 8003efe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f06:	ee17 2a90 	vmov	r2, s15
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003f0e:	e00c      	b.n	8003f2a <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	609a      	str	r2, [r3, #8]
}
 8003f16:	e008      	b.n	8003f2a <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	609a      	str	r2, [r3, #8]
}
 8003f2a:	bf00      	nop
 8003f2c:	3724      	adds	r7, #36	; 0x24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	46020c00 	.word	0x46020c00
 8003f3c:	4b742400 	.word	0x4b742400
 8003f40:	46000000 	.word	0x46000000
 8003f44:	08007334 	.word	0x08007334

08003f48 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b089      	sub	sp, #36	; 0x24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8003f50:	4bad      	ldr	r3, [pc, #692]	; (8004208 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f58:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8003f5a:	4bab      	ldr	r3, [pc, #684]	; (8004208 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5e:	f003 0303 	and.w	r3, r3, #3
 8003f62:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8003f64:	4ba8      	ldr	r3, [pc, #672]	; (8004208 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f68:	0a1b      	lsrs	r3, r3, #8
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	3301      	adds	r3, #1
 8003f70:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8003f72:	4ba5      	ldr	r3, [pc, #660]	; (8004208 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f76:	091b      	lsrs	r3, r3, #4
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8003f7e:	4ba2      	ldr	r3, [pc, #648]	; (8004208 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f82:	08db      	lsrs	r3, r3, #3
 8003f84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	fb02 f303 	mul.w	r3, r2, r3
 8003f8e:	ee07 3a90 	vmov	s15, r3
 8003f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f96:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 8123 	beq.w	80041e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2b03      	cmp	r3, #3
 8003fa6:	d062      	beq.n	800406e <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	2b03      	cmp	r3, #3
 8003fac:	f200 8081 	bhi.w	80040b2 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d024      	beq.n	8004000 <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d17a      	bne.n	80040b2 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	ee07 3a90 	vmov	s15, r3
 8003fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fc6:	eddf 6a91 	vldr	s13, [pc, #580]	; 800420c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8003fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fce:	4b8e      	ldr	r3, [pc, #568]	; (8004208 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8003fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fd6:	ee07 3a90 	vmov	s15, r3
 8003fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8003fde:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fe2:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8004210 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8003fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8003fee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ffa:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8003ffe:	e08f      	b.n	8004120 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004000:	4b81      	ldr	r3, [pc, #516]	; (8004208 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d005      	beq.n	8004018 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 800400c:	4b7e      	ldr	r3, [pc, #504]	; (8004208 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	0f1b      	lsrs	r3, r3, #28
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	e006      	b.n	8004026 <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 8004018:	4b7b      	ldr	r3, [pc, #492]	; (8004208 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800401a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800401e:	041b      	lsls	r3, r3, #16
 8004020:	0f1b      	lsrs	r3, r3, #28
 8004022:	f003 030f 	and.w	r3, r3, #15
 8004026:	4a7b      	ldr	r2, [pc, #492]	; (8004214 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8004028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800402c:	ee07 3a90 	vmov	s15, r3
 8004030:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	ee07 3a90 	vmov	s15, r3
 800403a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800403e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	ee07 3a90 	vmov	s15, r3
 8004048:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800404c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004050:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8004210 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004054:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004058:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800405c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004060:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004064:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004068:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800406c:	e058      	b.n	8004120 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	ee07 3a90 	vmov	s15, r3
 8004074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004078:	eddf 6a64 	vldr	s13, [pc, #400]	; 800420c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800407c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004080:	4b61      	ldr	r3, [pc, #388]	; (8004208 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004088:	ee07 3a90 	vmov	s15, r3
 800408c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8004090:	ed97 6a02 	vldr	s12, [r7, #8]
 8004094:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8004210 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004098:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800409c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80040a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80040a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040b0:	e036      	b.n	8004120 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80040b2:	4b55      	ldr	r3, [pc, #340]	; (8004208 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d005      	beq.n	80040ca <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 80040be:	4b52      	ldr	r3, [pc, #328]	; (8004208 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	0f1b      	lsrs	r3, r3, #28
 80040c4:	f003 030f 	and.w	r3, r3, #15
 80040c8:	e006      	b.n	80040d8 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 80040ca:	4b4f      	ldr	r3, [pc, #316]	; (8004208 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80040cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80040d0:	041b      	lsls	r3, r3, #16
 80040d2:	0f1b      	lsrs	r3, r3, #28
 80040d4:	f003 030f 	and.w	r3, r3, #15
 80040d8:	4a4e      	ldr	r2, [pc, #312]	; (8004214 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 80040da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040de:	ee07 3a90 	vmov	s15, r3
 80040e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	ee07 3a90 	vmov	s15, r3
 80040ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	ee07 3a90 	vmov	s15, r3
 80040fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004102:	eddf 5a43 	vldr	s11, [pc, #268]	; 8004210 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800410a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800410e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004112:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800411a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800411e:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8004120:	4b39      	ldr	r3, [pc, #228]	; (8004208 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d017      	beq.n	800415c <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800412c:	4b36      	ldr	r3, [pc, #216]	; (8004208 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800412e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004130:	0a5b      	lsrs	r3, r3, #9
 8004132:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004136:	ee07 3a90 	vmov	s15, r3
 800413a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800413e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004142:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004146:	edd7 6a07 	vldr	s13, [r7, #28]
 800414a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800414e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004152:	ee17 2a90 	vmov	r2, s15
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	e002      	b.n	8004162 <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8004162:	4b29      	ldr	r3, [pc, #164]	; (8004208 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d017      	beq.n	800419e <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800416e:	4b26      	ldr	r3, [pc, #152]	; (8004208 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004172:	0c1b      	lsrs	r3, r3, #16
 8004174:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004178:	ee07 3a90 	vmov	s15, r3
 800417c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8004180:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004184:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004188:	edd7 6a07 	vldr	s13, [r7, #28]
 800418c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004190:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004194:	ee17 2a90 	vmov	r2, s15
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	605a      	str	r2, [r3, #4]
 800419c:	e002      	b.n	80041a4 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80041a4:	4b18      	ldr	r3, [pc, #96]	; (8004208 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80041a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d017      	beq.n	80041e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80041b0:	4b15      	ldr	r3, [pc, #84]	; (8004208 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80041b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b4:	0e1b      	lsrs	r3, r3, #24
 80041b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041ba:	ee07 3a90 	vmov	s15, r3
 80041be:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80041c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041c6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80041ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80041ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041d6:	ee17 2a90 	vmov	r2, s15
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80041de:	e00c      	b.n	80041fa <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	609a      	str	r2, [r3, #8]
}
 80041e6:	e008      	b.n	80041fa <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	609a      	str	r2, [r3, #8]
}
 80041fa:	bf00      	nop
 80041fc:	3724      	adds	r7, #36	; 0x24
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	46020c00 	.word	0x46020c00
 800420c:	4b742400 	.word	0x4b742400
 8004210:	46000000 	.word	0x46000000
 8004214:	08007334 	.word	0x08007334

08004218 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b08e      	sub	sp, #56	; 0x38
 800421c:	af00      	add	r7, sp, #0
 800421e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8004222:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004226:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800422a:	430b      	orrs	r3, r1
 800422c:	d145      	bne.n	80042ba <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800422e:	4ba7      	ldr	r3, [pc, #668]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004230:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004234:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004238:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800423a:	4ba4      	ldr	r3, [pc, #656]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800423c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b02      	cmp	r3, #2
 8004246:	d108      	bne.n	800425a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800424e:	d104      	bne.n	800425a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8004250:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004254:	637b      	str	r3, [r7, #52]	; 0x34
 8004256:	f001 bb31 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800425a:	4b9c      	ldr	r3, [pc, #624]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800425c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004260:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004264:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004268:	d114      	bne.n	8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800426a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004270:	d110      	bne.n	8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004272:	4b96      	ldr	r3, [pc, #600]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004274:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800427c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004280:	d103      	bne.n	800428a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8004282:	23fa      	movs	r3, #250	; 0xfa
 8004284:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004286:	f001 bb19 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 800428a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800428e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004290:	f001 bb14 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8004294:	4b8d      	ldr	r3, [pc, #564]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042a0:	d107      	bne.n	80042b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80042a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042a8:	d103      	bne.n	80042b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80042aa:	4b89      	ldr	r3, [pc, #548]	; (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80042ac:	637b      	str	r3, [r7, #52]	; 0x34
 80042ae:	f001 bb05 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80042b2:	2300      	movs	r3, #0
 80042b4:	637b      	str	r3, [r7, #52]	; 0x34
 80042b6:	f001 bb01 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80042ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042be:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80042c2:	430b      	orrs	r3, r1
 80042c4:	d151      	bne.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80042c6:	4b81      	ldr	r3, [pc, #516]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80042c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80042cc:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80042d0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80042d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d4:	2b80      	cmp	r3, #128	; 0x80
 80042d6:	d035      	beq.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80042d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042da:	2b80      	cmp	r3, #128	; 0x80
 80042dc:	d841      	bhi.n	8004362 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80042de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e0:	2b60      	cmp	r3, #96	; 0x60
 80042e2:	d02a      	beq.n	800433a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80042e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e6:	2b60      	cmp	r3, #96	; 0x60
 80042e8:	d83b      	bhi.n	8004362 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80042ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ec:	2b40      	cmp	r3, #64	; 0x40
 80042ee:	d009      	beq.n	8004304 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80042f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f2:	2b40      	cmp	r3, #64	; 0x40
 80042f4:	d835      	bhi.n	8004362 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80042f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00c      	beq.n	8004316 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80042fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fe:	2b20      	cmp	r3, #32
 8004300:	d012      	beq.n	8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004302:	e02e      	b.n	8004362 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004308:	4618      	mov	r0, r3
 800430a:	f7ff fb4d 	bl	80039a8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004312:	f001 bad3 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004316:	f107 0318 	add.w	r3, r7, #24
 800431a:	4618      	mov	r0, r3
 800431c:	f7ff fcac 	bl	8003c78 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004324:	f001 baca 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004328:	f107 030c 	add.w	r3, r7, #12
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff fe0b 	bl	8003f48 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004336:	f001 bac1 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800433a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800433e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004340:	f001 babc 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004344:	4b61      	ldr	r3, [pc, #388]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800434c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004350:	d103      	bne.n	800435a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8004352:	4b60      	ldr	r3, [pc, #384]	; (80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004354:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004356:	f001 bab1 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800435a:	2300      	movs	r3, #0
 800435c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800435e:	f001 baad 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :
      {
        frequency = 0U;
 8004362:	2300      	movs	r3, #0
 8004364:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004366:	f001 baa9 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800436a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800436e:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8004372:	430b      	orrs	r3, r1
 8004374:	d158      	bne.n	8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004376:	4b55      	ldr	r3, [pc, #340]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004378:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800437c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004380:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004388:	d03b      	beq.n	8004402 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800438a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004390:	d846      	bhi.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004394:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004398:	d02e      	beq.n	80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800439a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043a0:	d83e      	bhi.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80043a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043a8:	d00b      	beq.n	80043c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80043aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043b0:	d836      	bhi.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80043b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00d      	beq.n	80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80043b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043be:	d012      	beq.n	80043e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80043c0:	e02e      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80043c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7ff faee 	bl	80039a8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80043cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80043d0:	f001 ba74 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80043d4:	f107 0318 	add.w	r3, r7, #24
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff fc4d 	bl	8003c78 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80043e2:	f001 ba6b 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80043e6:	f107 030c 	add.w	r3, r7, #12
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7ff fdac 	bl	8003f48 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80043f4:	f001 ba62 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80043f8:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80043fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80043fe:	f001 ba5d 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004402:	4b32      	ldr	r3, [pc, #200]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800440a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800440e:	d103      	bne.n	8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8004410:	4b30      	ldr	r3, [pc, #192]	; (80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004412:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004414:	f001 ba52 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004418:	2300      	movs	r3, #0
 800441a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800441c:	f001 ba4e 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 8004420:	2300      	movs	r3, #0
 8004422:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004424:	f001 ba4a 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8004428:	e9d7 2300 	ldrd	r2, r3, [r7]
 800442c:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8004430:	430b      	orrs	r3, r1
 8004432:	d126      	bne.n	8004482 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8004434:	4b25      	ldr	r3, [pc, #148]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004436:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800443a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800443e:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8004440:	4b22      	ldr	r3, [pc, #136]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800444c:	d106      	bne.n	800445c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800444e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004450:	2b00      	cmp	r3, #0
 8004452:	d103      	bne.n	800445c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8004454:	4b1f      	ldr	r3, [pc, #124]	; (80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004456:	637b      	str	r3, [r7, #52]	; 0x34
 8004458:	f001 ba30 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800445c:	4b1b      	ldr	r3, [pc, #108]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004468:	d107      	bne.n	800447a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800446a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004470:	d103      	bne.n	800447a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8004472:	4b19      	ldr	r3, [pc, #100]	; (80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004474:	637b      	str	r3, [r7, #52]	; 0x34
 8004476:	f001 ba21 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800447a:	2300      	movs	r3, #0
 800447c:	637b      	str	r3, [r7, #52]	; 0x34
 800447e:	f001 ba1d 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8004482:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004486:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800448a:	430b      	orrs	r3, r1
 800448c:	d16e      	bne.n	800456c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800448e:	4b0f      	ldr	r3, [pc, #60]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004494:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004498:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800449a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80044a0:	d03d      	beq.n	800451e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80044a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80044a8:	d85c      	bhi.n	8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80044aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044b0:	d014      	beq.n	80044dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80044b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044b8:	d854      	bhi.n	8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80044ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d01f      	beq.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80044c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044c6:	d012      	beq.n	80044ee <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80044c8:	e04c      	b.n	8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80044ca:	bf00      	nop
 80044cc:	46020c00 	.word	0x46020c00
 80044d0:	0007a120 	.word	0x0007a120
 80044d4:	00f42400 	.word	0x00f42400
 80044d8:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80044dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7ff fa61 	bl	80039a8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80044e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044ea:	f001 b9e7 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80044ee:	f107 0318 	add.w	r3, r7, #24
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7ff fbc0 	bl	8003c78 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044fc:	f001 b9de 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004500:	4ba7      	ldr	r3, [pc, #668]	; (80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800450c:	d103      	bne.n	8004516 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800450e:	4ba5      	ldr	r3, [pc, #660]	; (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004510:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004512:	f001 b9d3 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004516:	2300      	movs	r3, #0
 8004518:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800451a:	f001 b9cf 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800451e:	4ba0      	ldr	r3, [pc, #640]	; (80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0320 	and.w	r3, r3, #32
 8004526:	2b20      	cmp	r3, #32
 8004528:	d118      	bne.n	800455c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800452a:	4b9d      	ldr	r3, [pc, #628]	; (80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d005      	beq.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8004536:	4b9a      	ldr	r3, [pc, #616]	; (80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	0e1b      	lsrs	r3, r3, #24
 800453c:	f003 030f 	and.w	r3, r3, #15
 8004540:	e006      	b.n	8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8004542:	4b97      	ldr	r3, [pc, #604]	; (80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004544:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004548:	041b      	lsls	r3, r3, #16
 800454a:	0e1b      	lsrs	r3, r3, #24
 800454c:	f003 030f 	and.w	r3, r3, #15
 8004550:	4a95      	ldr	r2, [pc, #596]	; (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004556:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004558:	f001 b9b0 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800455c:	2300      	movs	r3, #0
 800455e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004560:	f001 b9ac 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004568:	f001 b9a8 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800456c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004570:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8004574:	430b      	orrs	r3, r1
 8004576:	d17f      	bne.n	8004678 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004578:	4b89      	ldr	r3, [pc, #548]	; (80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800457a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800457e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004582:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8004584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004586:	2b00      	cmp	r3, #0
 8004588:	d165      	bne.n	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800458a:	4b85      	ldr	r3, [pc, #532]	; (80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800458c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004590:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004594:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8004596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004598:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800459c:	d034      	beq.n	8004608 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800459e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80045a4:	d853      	bhi.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80045a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045ac:	d00b      	beq.n	80045c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 80045ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045b4:	d84b      	bhi.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80045b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d016      	beq.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 80045bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045c2:	d009      	beq.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80045c4:	e043      	b.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80045c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7ff f9ec 	bl	80039a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80045d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80045d4:	f001 b972 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80045d8:	f107 0318 	add.w	r3, r7, #24
 80045dc:	4618      	mov	r0, r3
 80045de:	f7ff fb4b 	bl	8003c78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80045e6:	f001 b969 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80045ea:	4b6d      	ldr	r3, [pc, #436]	; (80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045f6:	d103      	bne.n	8004600 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 80045f8:	4b6a      	ldr	r3, [pc, #424]	; (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80045fa:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80045fc:	f001 b95e 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 8004600:	2300      	movs	r3, #0
 8004602:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004604:	f001 b95a 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004608:	4b65      	ldr	r3, [pc, #404]	; (80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0320 	and.w	r3, r3, #32
 8004610:	2b20      	cmp	r3, #32
 8004612:	d118      	bne.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004614:	4b62      	ldr	r3, [pc, #392]	; (80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d005      	beq.n	800462c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8004620:	4b5f      	ldr	r3, [pc, #380]	; (80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	0e1b      	lsrs	r3, r3, #24
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	e006      	b.n	800463a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800462c:	4b5c      	ldr	r3, [pc, #368]	; (80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800462e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004632:	041b      	lsls	r3, r3, #16
 8004634:	0e1b      	lsrs	r3, r3, #24
 8004636:	f003 030f 	and.w	r3, r3, #15
 800463a:	4a5b      	ldr	r2, [pc, #364]	; (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800463c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004640:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004642:	f001 b93b 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 8004646:	2300      	movs	r3, #0
 8004648:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800464a:	f001 b937 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        default :
        {
          frequency = 0U;
 800464e:	2300      	movs	r3, #0
 8004650:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004652:	f001 b933 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8004656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004658:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800465c:	d108      	bne.n	8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800465e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004662:	4618      	mov	r0, r3
 8004664:	f7ff f9a0 	bl	80039a8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	637b      	str	r3, [r7, #52]	; 0x34
 800466c:	f001 b926 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else
    {
      frequency = 0U;
 8004670:	2300      	movs	r3, #0
 8004672:	637b      	str	r3, [r7, #52]	; 0x34
 8004674:	f001 b922 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8004678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800467c:	1e51      	subs	r1, r2, #1
 800467e:	430b      	orrs	r3, r1
 8004680:	d136      	bne.n	80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004682:	4b47      	ldr	r3, [pc, #284]	; (80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004688:	f003 0303 	and.w	r3, r3, #3
 800468c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800468e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004690:	2b00      	cmp	r3, #0
 8004692:	d104      	bne.n	800469e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8004694:	f7fe fa1e 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 8004698:	6378      	str	r0, [r7, #52]	; 0x34
 800469a:	f001 b90f 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800469e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d104      	bne.n	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80046a4:	f7fe f8e0 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 80046a8:	6378      	str	r0, [r7, #52]	; 0x34
 80046aa:	f001 b907 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80046ae:	4b3c      	ldr	r3, [pc, #240]	; (80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ba:	d106      	bne.n	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80046bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d103      	bne.n	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 80046c2:	4b3a      	ldr	r3, [pc, #232]	; (80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80046c4:	637b      	str	r3, [r7, #52]	; 0x34
 80046c6:	f001 b8f9 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80046ca:	4b35      	ldr	r3, [pc, #212]	; (80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80046cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d107      	bne.n	80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80046d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046da:	2b03      	cmp	r3, #3
 80046dc:	d104      	bne.n	80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 80046de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046e2:	637b      	str	r3, [r7, #52]	; 0x34
 80046e4:	f001 b8ea 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80046e8:	2300      	movs	r3, #0
 80046ea:	637b      	str	r3, [r7, #52]	; 0x34
 80046ec:	f001 b8e6 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80046f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046f4:	1e91      	subs	r1, r2, #2
 80046f6:	430b      	orrs	r3, r1
 80046f8:	d136      	bne.n	8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80046fa:	4b29      	ldr	r3, [pc, #164]	; (80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80046fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004700:	f003 030c 	and.w	r3, r3, #12
 8004704:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8004706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004708:	2b00      	cmp	r3, #0
 800470a:	d104      	bne.n	8004716 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800470c:	f7fe f9ce 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8004710:	6378      	str	r0, [r7, #52]	; 0x34
 8004712:	f001 b8d3 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8004716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004718:	2b04      	cmp	r3, #4
 800471a:	d104      	bne.n	8004726 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800471c:	f7fe f8a4 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 8004720:	6378      	str	r0, [r7, #52]	; 0x34
 8004722:	f001 b8cb 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8004726:	4b1e      	ldr	r3, [pc, #120]	; (80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800472e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004732:	d106      	bne.n	8004742 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8004734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004736:	2b08      	cmp	r3, #8
 8004738:	d103      	bne.n	8004742 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800473a:	4b1c      	ldr	r3, [pc, #112]	; (80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800473c:	637b      	str	r3, [r7, #52]	; 0x34
 800473e:	f001 b8bd 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8004742:	4b17      	ldr	r3, [pc, #92]	; (80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004744:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b02      	cmp	r3, #2
 800474e:	d107      	bne.n	8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8004750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004752:	2b0c      	cmp	r3, #12
 8004754:	d104      	bne.n	8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8004756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800475a:	637b      	str	r3, [r7, #52]	; 0x34
 800475c:	f001 b8ae 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8004760:	2300      	movs	r3, #0
 8004762:	637b      	str	r3, [r7, #52]	; 0x34
 8004764:	f001 b8aa 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8004768:	e9d7 2300 	ldrd	r2, r3, [r7]
 800476c:	1f11      	subs	r1, r2, #4
 800476e:	430b      	orrs	r3, r1
 8004770:	d13f      	bne.n	80047f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004772:	4b0b      	ldr	r3, [pc, #44]	; (80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004778:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800477c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800477e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004780:	2b00      	cmp	r3, #0
 8004782:	d104      	bne.n	800478e <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004784:	f7fe f992 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8004788:	6378      	str	r0, [r7, #52]	; 0x34
 800478a:	f001 b897 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800478e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004790:	2b10      	cmp	r3, #16
 8004792:	d10d      	bne.n	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004794:	f7fe f868 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 8004798:	6378      	str	r0, [r7, #52]	; 0x34
 800479a:	f001 b88f 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800479e:	bf00      	nop
 80047a0:	46020c00 	.word	0x46020c00
 80047a4:	02dc6c00 	.word	0x02dc6c00
 80047a8:	08007334 	.word	0x08007334
 80047ac:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80047b0:	4ba8      	ldr	r3, [pc, #672]	; (8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047bc:	d106      	bne.n	80047cc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 80047be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c0:	2b20      	cmp	r3, #32
 80047c2:	d103      	bne.n	80047cc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 80047c4:	4ba4      	ldr	r3, [pc, #656]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80047c6:	637b      	str	r3, [r7, #52]	; 0x34
 80047c8:	f001 b878 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80047cc:	4ba1      	ldr	r3, [pc, #644]	; (8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80047ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d107      	bne.n	80047ea <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80047da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047dc:	2b30      	cmp	r3, #48	; 0x30
 80047de:	d104      	bne.n	80047ea <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 80047e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047e4:	637b      	str	r3, [r7, #52]	; 0x34
 80047e6:	f001 b869 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80047ea:	2300      	movs	r3, #0
 80047ec:	637b      	str	r3, [r7, #52]	; 0x34
 80047ee:	f001 b865 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80047f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047f6:	f1a2 0108 	sub.w	r1, r2, #8
 80047fa:	430b      	orrs	r3, r1
 80047fc:	d136      	bne.n	800486c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80047fe:	4b95      	ldr	r3, [pc, #596]	; (8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004804:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004808:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800480a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480c:	2b00      	cmp	r3, #0
 800480e:	d104      	bne.n	800481a <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004810:	f7fe f94c 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8004814:	6378      	str	r0, [r7, #52]	; 0x34
 8004816:	f001 b851 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800481a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481c:	2b40      	cmp	r3, #64	; 0x40
 800481e:	d104      	bne.n	800482a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004820:	f7fe f822 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 8004824:	6378      	str	r0, [r7, #52]	; 0x34
 8004826:	f001 b849 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800482a:	4b8a      	ldr	r3, [pc, #552]	; (8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004836:	d106      	bne.n	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8004838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483a:	2b80      	cmp	r3, #128	; 0x80
 800483c:	d103      	bne.n	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800483e:	4b86      	ldr	r3, [pc, #536]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004840:	637b      	str	r3, [r7, #52]	; 0x34
 8004842:	f001 b83b 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8004846:	4b83      	ldr	r3, [pc, #524]	; (8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004848:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b02      	cmp	r3, #2
 8004852:	d107      	bne.n	8004864 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8004854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004856:	2bc0      	cmp	r3, #192	; 0xc0
 8004858:	d104      	bne.n	8004864 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800485a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800485e:	637b      	str	r3, [r7, #52]	; 0x34
 8004860:	f001 b82c 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8004864:	2300      	movs	r3, #0
 8004866:	637b      	str	r3, [r7, #52]	; 0x34
 8004868:	f001 b828 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800486c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004870:	f1a2 0110 	sub.w	r1, r2, #16
 8004874:	430b      	orrs	r3, r1
 8004876:	d139      	bne.n	80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004878:	4b76      	ldr	r3, [pc, #472]	; (8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800487a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800487e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004882:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8004884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004886:	2b00      	cmp	r3, #0
 8004888:	d104      	bne.n	8004894 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800488a:	f7fe f90f 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 800488e:	6378      	str	r0, [r7, #52]	; 0x34
 8004890:	f001 b814 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8004894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800489a:	d104      	bne.n	80048a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800489c:	f7fd ffe4 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 80048a0:	6378      	str	r0, [r7, #52]	; 0x34
 80048a2:	f001 b80b 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80048a6:	4b6b      	ldr	r3, [pc, #428]	; (8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048b2:	d107      	bne.n	80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 80048b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048ba:	d103      	bne.n	80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 80048bc:	4b66      	ldr	r3, [pc, #408]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80048be:	637b      	str	r3, [r7, #52]	; 0x34
 80048c0:	f000 bffc 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80048c4:	4b63      	ldr	r3, [pc, #396]	; (8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80048c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d108      	bne.n	80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 80048d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048d8:	d104      	bne.n	80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 80048da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048de:	637b      	str	r3, [r7, #52]	; 0x34
 80048e0:	f000 bfec 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80048e4:	2300      	movs	r3, #0
 80048e6:	637b      	str	r3, [r7, #52]	; 0x34
 80048e8:	f000 bfe8 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 80048ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048f0:	f102 4160 	add.w	r1, r2, #3758096384	; 0xe0000000
 80048f4:	430b      	orrs	r3, r1
 80048f6:	d139      	bne.n	800496c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 80048f8:	4b56      	ldr	r3, [pc, #344]	; (8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80048fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80048fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004902:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8004904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004906:	2b00      	cmp	r3, #0
 8004908:	d104      	bne.n	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800490a:	f7fe f8cf 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 800490e:	6378      	str	r0, [r7, #52]	; 0x34
 8004910:	f000 bfd4 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 8004914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800491a:	d104      	bne.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800491c:	f7fd ffa4 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 8004920:	6378      	str	r0, [r7, #52]	; 0x34
 8004922:	f000 bfcb 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8004926:	4b4b      	ldr	r3, [pc, #300]	; (8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800492e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004932:	d107      	bne.n	8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8004934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004936:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800493a:	d103      	bne.n	8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800493c:	4b46      	ldr	r3, [pc, #280]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800493e:	637b      	str	r3, [r7, #52]	; 0x34
 8004940:	f000 bfbc 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8004944:	4b43      	ldr	r3, [pc, #268]	; (8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004946:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b02      	cmp	r3, #2
 8004950:	d108      	bne.n	8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 8004952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004954:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004958:	d104      	bne.n	8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800495a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800495e:	637b      	str	r3, [r7, #52]	; 0x34
 8004960:	f000 bfac 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8004964:	2300      	movs	r3, #0
 8004966:	637b      	str	r3, [r7, #52]	; 0x34
 8004968:	f000 bfa8 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800496c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004970:	f1a2 0120 	sub.w	r1, r2, #32
 8004974:	430b      	orrs	r3, r1
 8004976:	d158      	bne.n	8004a2a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004978:	4b36      	ldr	r3, [pc, #216]	; (8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800497a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004986:	2b00      	cmp	r3, #0
 8004988:	d104      	bne.n	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800498a:	f7fe f8b7 	bl	8002afc <HAL_RCC_GetPCLK3Freq>
 800498e:	6378      	str	r0, [r7, #52]	; 0x34
 8004990:	f000 bf94 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8004994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004996:	2b01      	cmp	r3, #1
 8004998:	d104      	bne.n	80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800499a:	f7fd ff65 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 800499e:	6378      	str	r0, [r7, #52]	; 0x34
 80049a0:	f000 bf8c 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80049a4:	4b2b      	ldr	r3, [pc, #172]	; (8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049b0:	d106      	bne.n	80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 80049b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d103      	bne.n	80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 80049b8:	4b27      	ldr	r3, [pc, #156]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80049ba:	637b      	str	r3, [r7, #52]	; 0x34
 80049bc:	f000 bf7e 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80049c0:	4b24      	ldr	r3, [pc, #144]	; (8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80049c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d107      	bne.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 80049ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d0:	2b03      	cmp	r3, #3
 80049d2:	d104      	bne.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 80049d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049d8:	637b      	str	r3, [r7, #52]	; 0x34
 80049da:	f000 bf6f 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80049de:	4b1d      	ldr	r3, [pc, #116]	; (8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0320 	and.w	r3, r3, #32
 80049e6:	2b20      	cmp	r3, #32
 80049e8:	d11b      	bne.n	8004a22 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 80049ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ec:	2b04      	cmp	r3, #4
 80049ee:	d118      	bne.n	8004a22 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80049f0:	4b18      	ldr	r3, [pc, #96]	; (8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d005      	beq.n	8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 80049fc:	4b15      	ldr	r3, [pc, #84]	; (8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	0e1b      	lsrs	r3, r3, #24
 8004a02:	f003 030f 	and.w	r3, r3, #15
 8004a06:	e006      	b.n	8004a16 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8004a08:	4b12      	ldr	r3, [pc, #72]	; (8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a0e:	041b      	lsls	r3, r3, #16
 8004a10:	0e1b      	lsrs	r3, r3, #24
 8004a12:	f003 030f 	and.w	r3, r3, #15
 8004a16:	4a11      	ldr	r2, [pc, #68]	; (8004a5c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a1e:	f000 bf4d 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8004a22:	2300      	movs	r3, #0
 8004a24:	637b      	str	r3, [r7, #52]	; 0x34
 8004a26:	f000 bf49 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8004a2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a2e:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8004a32:	430b      	orrs	r3, r1
 8004a34:	d172      	bne.n	8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004a36:	4b07      	ldr	r3, [pc, #28]	; (8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a3c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004a40:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a48:	d10a      	bne.n	8004a60 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004a4a:	f7fd ff0d 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 8004a4e:	6378      	str	r0, [r7, #52]	; 0x34
 8004a50:	f000 bf34 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8004a54:	46020c00 	.word	0x46020c00
 8004a58:	00f42400 	.word	0x00f42400
 8004a5c:	08007334 	.word	0x08007334
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8004a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a66:	d108      	bne.n	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a68:	f107 0318 	add.w	r3, r7, #24
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7ff f903 	bl	8003c78 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	637b      	str	r3, [r7, #52]	; 0x34
 8004a76:	f000 bf21 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d104      	bne.n	8004a8a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8004a80:	f7fd fffa 	bl	8002a78 <HAL_RCC_GetHCLKFreq>
 8004a84:	6378      	str	r0, [r7, #52]	; 0x34
 8004a86:	f000 bf19 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8004a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004a90:	d122      	bne.n	8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004a92:	4bb0      	ldr	r3, [pc, #704]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0320 	and.w	r3, r3, #32
 8004a9a:	2b20      	cmp	r3, #32
 8004a9c:	d118      	bne.n	8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004a9e:	4bad      	ldr	r3, [pc, #692]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d005      	beq.n	8004ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 8004aaa:	4baa      	ldr	r3, [pc, #680]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	0e1b      	lsrs	r3, r3, #24
 8004ab0:	f003 030f 	and.w	r3, r3, #15
 8004ab4:	e006      	b.n	8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8004ab6:	4ba7      	ldr	r3, [pc, #668]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004ab8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004abc:	041b      	lsls	r3, r3, #16
 8004abe:	0e1b      	lsrs	r3, r3, #24
 8004ac0:	f003 030f 	and.w	r3, r3, #15
 8004ac4:	4aa4      	ldr	r2, [pc, #656]	; (8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8004ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aca:	637b      	str	r3, [r7, #52]	; 0x34
 8004acc:	f000 bef6 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ad4:	f000 bef2 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004ad8:	4b9e      	ldr	r3, [pc, #632]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ae4:	d107      	bne.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8004ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004aec:	d103      	bne.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 8004aee:	4b9b      	ldr	r3, [pc, #620]	; (8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8004af0:	637b      	str	r3, [r7, #52]	; 0x34
 8004af2:	f000 bee3 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004af6:	4b97      	ldr	r3, [pc, #604]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b02:	d107      	bne.n	8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8004b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b0a:	d103      	bne.n	8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 8004b0c:	4b93      	ldr	r3, [pc, #588]	; (8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8004b0e:	637b      	str	r3, [r7, #52]	; 0x34
 8004b10:	f000 bed4 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8004b14:	2300      	movs	r3, #0
 8004b16:	637b      	str	r3, [r7, #52]	; 0x34
 8004b18:	f000 bed0 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8004b1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b20:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8004b24:	430b      	orrs	r3, r1
 8004b26:	d158      	bne.n	8004bda <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8004b28:	4b8a      	ldr	r3, [pc, #552]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004b2a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b36:	2b04      	cmp	r3, #4
 8004b38:	d84b      	bhi.n	8004bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 8004b3a:	a201      	add	r2, pc, #4	; (adr r2, 8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 8004b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b40:	08004b79 	.word	0x08004b79
 8004b44:	08004b55 	.word	0x08004b55
 8004b48:	08004b67 	.word	0x08004b67
 8004b4c:	08004b83 	.word	0x08004b83
 8004b50:	08004b8d 	.word	0x08004b8d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7fe ff25 	bl	80039a8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b62:	f000 beab 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b66:	f107 030c 	add.w	r3, r7, #12
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7ff f9ec 	bl	8003f48 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b74:	f000 bea2 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004b78:	f7fd ff7e 	bl	8002a78 <HAL_RCC_GetHCLKFreq>
 8004b7c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004b7e:	f000 be9d 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004b82:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004b86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b88:	f000 be98 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004b8c:	4b71      	ldr	r3, [pc, #452]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0320 	and.w	r3, r3, #32
 8004b94:	2b20      	cmp	r3, #32
 8004b96:	d118      	bne.n	8004bca <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004b98:	4b6e      	ldr	r3, [pc, #440]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d005      	beq.n	8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8004ba4:	4b6b      	ldr	r3, [pc, #428]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	0e1b      	lsrs	r3, r3, #24
 8004baa:	f003 030f 	and.w	r3, r3, #15
 8004bae:	e006      	b.n	8004bbe <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8004bb0:	4b68      	ldr	r3, [pc, #416]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004bb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004bb6:	041b      	lsls	r3, r3, #16
 8004bb8:	0e1b      	lsrs	r3, r3, #24
 8004bba:	f003 030f 	and.w	r3, r3, #15
 8004bbe:	4a66      	ldr	r2, [pc, #408]	; (8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8004bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bc4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004bc6:	f000 be79 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004bce:	f000 be75 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004bd6:	f000 be71 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8004bda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bde:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8004be2:	430b      	orrs	r3, r1
 8004be4:	d167      	bne.n	8004cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8004be6:	4b5b      	ldr	r3, [pc, #364]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004be8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004bec:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8004bf0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004bf8:	d036      	beq.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8004bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c00:	d855      	bhi.n	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8004c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c04:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c08:	d029      	beq.n	8004c5e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8004c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c10:	d84d      	bhi.n	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8004c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c18:	d013      	beq.n	8004c42 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c20:	d845      	bhi.n	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8004c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d015      	beq.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 8004c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c2e:	d13e      	bne.n	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7fe feb7 	bl	80039a8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c3e:	f000 be3d 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c42:	f107 030c 	add.w	r3, r7, #12
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7ff f97e 	bl	8003f48 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c50:	f000 be34 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004c54:	f7fd ff10 	bl	8002a78 <HAL_RCC_GetHCLKFreq>
 8004c58:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004c5a:	f000 be2f 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004c5e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004c62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c64:	f000 be2a 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004c68:	4b3a      	ldr	r3, [pc, #232]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0320 	and.w	r3, r3, #32
 8004c70:	2b20      	cmp	r3, #32
 8004c72:	d118      	bne.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004c74:	4b37      	ldr	r3, [pc, #220]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d005      	beq.n	8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8004c80:	4b34      	ldr	r3, [pc, #208]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	0e1b      	lsrs	r3, r3, #24
 8004c86:	f003 030f 	and.w	r3, r3, #15
 8004c8a:	e006      	b.n	8004c9a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8004c8c:	4b31      	ldr	r3, [pc, #196]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004c8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c92:	041b      	lsls	r3, r3, #16
 8004c94:	0e1b      	lsrs	r3, r3, #24
 8004c96:	f003 030f 	and.w	r3, r3, #15
 8004c9a:	4a2f      	ldr	r2, [pc, #188]	; (8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8004c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ca0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004ca2:	f000 be0b 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004caa:	f000 be07 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004cb2:	f000 be03 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8004cb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cba:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8004cbe:	430b      	orrs	r3, r1
 8004cc0:	d152      	bne.n	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004cc2:	4b24      	ldr	r3, [pc, #144]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cc8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ccc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d104      	bne.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004cd4:	f7fd feea 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8004cd8:	6378      	str	r0, [r7, #52]	; 0x34
 8004cda:	f000 bdef 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8004cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ce4:	d104      	bne.n	8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004ce6:	f7fd fdbf 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 8004cea:	6378      	str	r0, [r7, #52]	; 0x34
 8004cec:	f000 bde6 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004cf0:	4b18      	ldr	r3, [pc, #96]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cfc:	d107      	bne.n	8004d0e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 8004cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d04:	d103      	bne.n	8004d0e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 8004d06:	4b15      	ldr	r3, [pc, #84]	; (8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8004d08:	637b      	str	r3, [r7, #52]	; 0x34
 8004d0a:	f000 bdd7 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8004d0e:	4b11      	ldr	r3, [pc, #68]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0320 	and.w	r3, r3, #32
 8004d16:	2b20      	cmp	r3, #32
 8004d18:	d122      	bne.n	8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 8004d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d20:	d11e      	bne.n	8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004d22:	4b0c      	ldr	r3, [pc, #48]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d005      	beq.n	8004d3a <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 8004d2e:	4b09      	ldr	r3, [pc, #36]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	0e1b      	lsrs	r3, r3, #24
 8004d34:	f003 030f 	and.w	r3, r3, #15
 8004d38:	e006      	b.n	8004d48 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 8004d3a:	4b06      	ldr	r3, [pc, #24]	; (8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004d3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d40:	041b      	lsls	r3, r3, #16
 8004d42:	0e1b      	lsrs	r3, r3, #24
 8004d44:	f003 030f 	and.w	r3, r3, #15
 8004d48:	4a03      	ldr	r2, [pc, #12]	; (8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8004d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d4e:	637b      	str	r3, [r7, #52]	; 0x34
 8004d50:	f000 bdb4 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8004d54:	46020c00 	.word	0x46020c00
 8004d58:	08007334 	.word	0x08007334
 8004d5c:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	637b      	str	r3, [r7, #52]	; 0x34
 8004d64:	f000 bdaa 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8004d68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d6c:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8004d70:	430b      	orrs	r3, r1
 8004d72:	d14c      	bne.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004d74:	4ba8      	ldr	r3, [pc, #672]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d7a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004d7e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d104      	bne.n	8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004d86:	f7fd fe91 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8004d8a:	6378      	str	r0, [r7, #52]	; 0x34
 8004d8c:	f000 bd96 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8004d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d96:	d104      	bne.n	8004da2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004d98:	f7fd fd66 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 8004d9c:	6378      	str	r0, [r7, #52]	; 0x34
 8004d9e:	f000 bd8d 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004da2:	4b9d      	ldr	r3, [pc, #628]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dae:	d107      	bne.n	8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8004db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004db6:	d103      	bne.n	8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 8004db8:	4b98      	ldr	r3, [pc, #608]	; (800501c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8004dba:	637b      	str	r3, [r7, #52]	; 0x34
 8004dbc:	f000 bd7e 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8004dc0:	4b95      	ldr	r3, [pc, #596]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0320 	and.w	r3, r3, #32
 8004dc8:	2b20      	cmp	r3, #32
 8004dca:	d11c      	bne.n	8004e06 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 8004dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004dd2:	d118      	bne.n	8004e06 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004dd4:	4b90      	ldr	r3, [pc, #576]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d005      	beq.n	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8004de0:	4b8d      	ldr	r3, [pc, #564]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	0e1b      	lsrs	r3, r3, #24
 8004de6:	f003 030f 	and.w	r3, r3, #15
 8004dea:	e006      	b.n	8004dfa <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 8004dec:	4b8a      	ldr	r3, [pc, #552]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004dee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004df2:	041b      	lsls	r3, r3, #16
 8004df4:	0e1b      	lsrs	r3, r3, #24
 8004df6:	f003 030f 	and.w	r3, r3, #15
 8004dfa:	4a89      	ldr	r2, [pc, #548]	; (8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8004dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e00:	637b      	str	r3, [r7, #52]	; 0x34
 8004e02:	f000 bd5b 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8004e06:	2300      	movs	r3, #0
 8004e08:	637b      	str	r3, [r7, #52]	; 0x34
 8004e0a:	f000 bd57 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8004e0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e12:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8004e16:	430b      	orrs	r3, r1
 8004e18:	d158      	bne.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004e1a:	4b7f      	ldr	r3, [pc, #508]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004e1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e20:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e24:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e28:	2bc0      	cmp	r3, #192	; 0xc0
 8004e2a:	d028      	beq.n	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 8004e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2e:	2bc0      	cmp	r3, #192	; 0xc0
 8004e30:	d848      	bhi.n	8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8004e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e34:	2b80      	cmp	r3, #128	; 0x80
 8004e36:	d00e      	beq.n	8004e56 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8004e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3a:	2b80      	cmp	r3, #128	; 0x80
 8004e3c:	d842      	bhi.n	8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8004e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d003      	beq.n	8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 8004e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e46:	2b40      	cmp	r3, #64	; 0x40
 8004e48:	d014      	beq.n	8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8004e4a:	e03b      	b.n	8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8004e4c:	f7fd fe56 	bl	8002afc <HAL_RCC_GetPCLK3Freq>
 8004e50:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004e52:	f000 bd33 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e56:	4b70      	ldr	r3, [pc, #448]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e62:	d103      	bne.n	8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 8004e64:	4b6d      	ldr	r3, [pc, #436]	; (800501c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8004e66:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004e68:	f000 bd28 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e70:	f000 bd24 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8004e74:	f7fd fcf8 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 8004e78:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004e7a:	f000 bd1f 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004e7e:	4b66      	ldr	r3, [pc, #408]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0320 	and.w	r3, r3, #32
 8004e86:	2b20      	cmp	r3, #32
 8004e88:	d118      	bne.n	8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004e8a:	4b63      	ldr	r3, [pc, #396]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d005      	beq.n	8004ea2 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 8004e96:	4b60      	ldr	r3, [pc, #384]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	0e1b      	lsrs	r3, r3, #24
 8004e9c:	f003 030f 	and.w	r3, r3, #15
 8004ea0:	e006      	b.n	8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 8004ea2:	4b5d      	ldr	r3, [pc, #372]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004ea4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ea8:	041b      	lsls	r3, r3, #16
 8004eaa:	0e1b      	lsrs	r3, r3, #24
 8004eac:	f003 030f 	and.w	r3, r3, #15
 8004eb0:	4a5b      	ldr	r2, [pc, #364]	; (8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8004eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eb6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004eb8:	f000 bd00 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ec0:	f000 bcfc 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      default:
      {
        frequency = 0U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ec8:	f000 bcf8 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8004ecc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ed0:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8004ed4:	430b      	orrs	r3, r1
 8004ed6:	d14c      	bne.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004ed8:	4b4f      	ldr	r3, [pc, #316]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ede:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004ee2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8004ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d104      	bne.n	8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004eea:	f7fd fddf 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8004eee:	6378      	str	r0, [r7, #52]	; 0x34
 8004ef0:	f000 bce4 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8004ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004efa:	d104      	bne.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004efc:	f7fd fcb4 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 8004f00:	6378      	str	r0, [r7, #52]	; 0x34
 8004f02:	f000 bcdb 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8004f06:	4b44      	ldr	r3, [pc, #272]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f12:	d107      	bne.n	8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 8004f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f1a:	d103      	bne.n	8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 8004f1c:	4b3f      	ldr	r3, [pc, #252]	; (800501c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8004f1e:	637b      	str	r3, [r7, #52]	; 0x34
 8004f20:	f000 bccc 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8004f24:	4b3c      	ldr	r3, [pc, #240]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0320 	and.w	r3, r3, #32
 8004f2c:	2b20      	cmp	r3, #32
 8004f2e:	d11c      	bne.n	8004f6a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8004f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f32:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f36:	d118      	bne.n	8004f6a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004f38:	4b37      	ldr	r3, [pc, #220]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d005      	beq.n	8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8004f44:	4b34      	ldr	r3, [pc, #208]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	0e1b      	lsrs	r3, r3, #24
 8004f4a:	f003 030f 	and.w	r3, r3, #15
 8004f4e:	e006      	b.n	8004f5e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8004f50:	4b31      	ldr	r3, [pc, #196]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004f52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f56:	041b      	lsls	r3, r3, #16
 8004f58:	0e1b      	lsrs	r3, r3, #24
 8004f5a:	f003 030f 	and.w	r3, r3, #15
 8004f5e:	4a30      	ldr	r2, [pc, #192]	; (8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8004f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f64:	637b      	str	r3, [r7, #52]	; 0x34
 8004f66:	f000 bca9 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	637b      	str	r3, [r7, #52]	; 0x34
 8004f6e:	f000 bca5 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 8004f72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f76:	f102 4140 	add.w	r1, r2, #3221225472	; 0xc0000000
 8004f7a:	430b      	orrs	r3, r1
 8004f7c:	d152      	bne.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 8004f7e:	4b26      	ldr	r3, [pc, #152]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004f80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004f84:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8004f88:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 8004f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d104      	bne.n	8004f9a <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004f90:	f7fd fd8c 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8004f94:	6378      	str	r0, [r7, #52]	; 0x34
 8004f96:	f000 bc91 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 8004f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004fa0:	d104      	bne.n	8004fac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004fa2:	f7fd fc61 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 8004fa6:	6378      	str	r0, [r7, #52]	; 0x34
 8004fa8:	f000 bc88 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 8004fac:	4b1a      	ldr	r3, [pc, #104]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fb8:	d107      	bne.n	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 8004fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fc0:	d103      	bne.n	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 8004fc2:	4b16      	ldr	r3, [pc, #88]	; (800501c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8004fc4:	637b      	str	r3, [r7, #52]	; 0x34
 8004fc6:	f000 bc79 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 8004fca:	4b13      	ldr	r3, [pc, #76]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0320 	and.w	r3, r3, #32
 8004fd2:	2b20      	cmp	r3, #32
 8004fd4:	d11c      	bne.n	8005010 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8004fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004fdc:	d118      	bne.n	8005010 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004fde:	4b0e      	ldr	r3, [pc, #56]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d005      	beq.n	8004ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 8004fea:	4b0b      	ldr	r3, [pc, #44]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	0e1b      	lsrs	r3, r3, #24
 8004ff0:	f003 030f 	and.w	r3, r3, #15
 8004ff4:	e006      	b.n	8005004 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 8004ff6:	4b08      	ldr	r3, [pc, #32]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004ff8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ffc:	041b      	lsls	r3, r3, #16
 8004ffe:	0e1b      	lsrs	r3, r3, #24
 8005000:	f003 030f 	and.w	r3, r3, #15
 8005004:	4a06      	ldr	r2, [pc, #24]	; (8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8005006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800500a:	637b      	str	r3, [r7, #52]	; 0x34
 800500c:	f000 bc56 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 8005010:	2300      	movs	r3, #0
 8005012:	637b      	str	r3, [r7, #52]	; 0x34
 8005014:	f000 bc52 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8005018:	46020c00 	.word	0x46020c00
 800501c:	00f42400 	.word	0x00f42400
 8005020:	08007334 	.word	0x08007334
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 8005024:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005028:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 800502c:	430b      	orrs	r3, r1
 800502e:	d14a      	bne.n	80050c6 <HAL_RCCEx_GetPeriphCLKFreq+0xeae>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 8005030:	4ba5      	ldr	r3, [pc, #660]	; (80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005032:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005036:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800503a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800503c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503e:	2b00      	cmp	r3, #0
 8005040:	d104      	bne.n	800504c <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005042:	f7fd fd33 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8005046:	6378      	str	r0, [r7, #52]	; 0x34
 8005048:	f000 bc38 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800504c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005052:	d104      	bne.n	800505e <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005054:	f7fd fc08 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 8005058:	6378      	str	r0, [r7, #52]	; 0x34
 800505a:	f000 bc2f 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800505e:	4b9a      	ldr	r3, [pc, #616]	; (80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800506a:	d107      	bne.n	800507c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800506c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005072:	d103      	bne.n	800507c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 8005074:	4b95      	ldr	r3, [pc, #596]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8005076:	637b      	str	r3, [r7, #52]	; 0x34
 8005078:	f000 bc20 	b.w	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800507c:	4b92      	ldr	r3, [pc, #584]	; (80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0320 	and.w	r3, r3, #32
 8005084:	2b20      	cmp	r3, #32
 8005086:	d11b      	bne.n	80050c0 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 8005088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800508e:	d117      	bne.n	80050c0 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005090:	4b8d      	ldr	r3, [pc, #564]	; (80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d005      	beq.n	80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800509c:	4b8a      	ldr	r3, [pc, #552]	; (80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	0e1b      	lsrs	r3, r3, #24
 80050a2:	f003 030f 	and.w	r3, r3, #15
 80050a6:	e006      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 80050a8:	4b87      	ldr	r3, [pc, #540]	; (80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80050aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050ae:	041b      	lsls	r3, r3, #16
 80050b0:	0e1b      	lsrs	r3, r3, #24
 80050b2:	f003 030f 	and.w	r3, r3, #15
 80050b6:	4a86      	ldr	r2, [pc, #536]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 80050b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050bc:	637b      	str	r3, [r7, #52]	; 0x34
 80050be:	e3fd      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 80050c0:	2300      	movs	r3, #0
 80050c2:	637b      	str	r3, [r7, #52]	; 0x34
 80050c4:	e3fa      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80050c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050ca:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80050ce:	430b      	orrs	r3, r1
 80050d0:	d164      	bne.n	800519c <HAL_RCCEx_GetPeriphCLKFreq+0xf84>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80050d2:	4b7d      	ldr	r3, [pc, #500]	; (80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80050d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050dc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80050de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d120      	bne.n	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0xf0e>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80050e4:	4b78      	ldr	r3, [pc, #480]	; (80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0320 	and.w	r3, r3, #32
 80050ec:	2b20      	cmp	r3, #32
 80050ee:	d117      	bne.n	8005120 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80050f0:	4b75      	ldr	r3, [pc, #468]	; (80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d005      	beq.n	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0xef0>
 80050fc:	4b72      	ldr	r3, [pc, #456]	; (80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	0e1b      	lsrs	r3, r3, #24
 8005102:	f003 030f 	and.w	r3, r3, #15
 8005106:	e006      	b.n	8005116 <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
 8005108:	4b6f      	ldr	r3, [pc, #444]	; (80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800510a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800510e:	041b      	lsls	r3, r3, #16
 8005110:	0e1b      	lsrs	r3, r3, #24
 8005112:	f003 030f 	and.w	r3, r3, #15
 8005116:	4a6e      	ldr	r2, [pc, #440]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8005118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800511c:	637b      	str	r3, [r7, #52]	; 0x34
 800511e:	e3cd      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 8005120:	2300      	movs	r3, #0
 8005122:	637b      	str	r3, [r7, #52]	; 0x34
 8005124:	e3ca      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8005126:	4b68      	ldr	r3, [pc, #416]	; (80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005128:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800512c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005130:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005134:	d112      	bne.n	800515c <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
 8005136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800513c:	d10e      	bne.n	800515c <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800513e:	4b62      	ldr	r3, [pc, #392]	; (80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005140:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005148:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800514c:	d102      	bne.n	8005154 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
      {
        frequency = LSI_VALUE / 128U;
 800514e:	23fa      	movs	r3, #250	; 0xfa
 8005150:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005152:	e3b3      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 8005154:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005158:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800515a:	e3af      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800515c:	4b5a      	ldr	r3, [pc, #360]	; (80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005168:	d106      	bne.n	8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800516a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005170:	d102      	bne.n	8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
    {
      frequency = HSI_VALUE;
 8005172:	4b56      	ldr	r3, [pc, #344]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8005174:	637b      	str	r3, [r7, #52]	; 0x34
 8005176:	e3a1      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8005178:	4b53      	ldr	r3, [pc, #332]	; (80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800517a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b02      	cmp	r3, #2
 8005184:	d107      	bne.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
 8005186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005188:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800518c:	d103      	bne.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
    {
      frequency = LSE_VALUE;
 800518e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005192:	637b      	str	r3, [r7, #52]	; 0x34
 8005194:	e392      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8005196:	2300      	movs	r3, #0
 8005198:	637b      	str	r3, [r7, #52]	; 0x34
 800519a:	e38f      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800519c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051a0:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80051a4:	430b      	orrs	r3, r1
 80051a6:	d164      	bne.n	8005272 <HAL_RCCEx_GetPeriphCLKFreq+0x105a>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80051a8:	4b47      	ldr	r3, [pc, #284]	; (80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80051aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051ae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80051b2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80051b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d120      	bne.n	80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80051ba:	4b43      	ldr	r3, [pc, #268]	; (80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0320 	and.w	r3, r3, #32
 80051c2:	2b20      	cmp	r3, #32
 80051c4:	d117      	bne.n	80051f6 <HAL_RCCEx_GetPeriphCLKFreq+0xfde>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80051c6:	4b40      	ldr	r3, [pc, #256]	; (80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d005      	beq.n	80051de <HAL_RCCEx_GetPeriphCLKFreq+0xfc6>
 80051d2:	4b3d      	ldr	r3, [pc, #244]	; (80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	0e1b      	lsrs	r3, r3, #24
 80051d8:	f003 030f 	and.w	r3, r3, #15
 80051dc:	e006      	b.n	80051ec <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 80051de:	4b3a      	ldr	r3, [pc, #232]	; (80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80051e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80051e4:	041b      	lsls	r3, r3, #16
 80051e6:	0e1b      	lsrs	r3, r3, #24
 80051e8:	f003 030f 	and.w	r3, r3, #15
 80051ec:	4a38      	ldr	r2, [pc, #224]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 80051ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051f2:	637b      	str	r3, [r7, #52]	; 0x34
 80051f4:	e362      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	637b      	str	r3, [r7, #52]	; 0x34
 80051fa:	e35f      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80051fc:	4b32      	ldr	r3, [pc, #200]	; (80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80051fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005202:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005206:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800520a:	d112      	bne.n	8005232 <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
 800520c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005212:	d10e      	bne.n	8005232 <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005214:	4b2c      	ldr	r3, [pc, #176]	; (80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005216:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800521a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800521e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005222:	d102      	bne.n	800522a <HAL_RCCEx_GetPeriphCLKFreq+0x1012>
      {
        frequency = LSI_VALUE / 128U;
 8005224:	23fa      	movs	r3, #250	; 0xfa
 8005226:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005228:	e348      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 800522a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800522e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005230:	e344      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8005232:	4b25      	ldr	r3, [pc, #148]	; (80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800523a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800523e:	d106      	bne.n	800524e <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
 8005240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005242:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005246:	d102      	bne.n	800524e <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
    {
      frequency = HSI_VALUE;
 8005248:	4b20      	ldr	r3, [pc, #128]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800524a:	637b      	str	r3, [r7, #52]	; 0x34
 800524c:	e336      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800524e:	4b1e      	ldr	r3, [pc, #120]	; (80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005250:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005254:	f003 0302 	and.w	r3, r3, #2
 8005258:	2b02      	cmp	r3, #2
 800525a:	d107      	bne.n	800526c <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
 800525c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005262:	d103      	bne.n	800526c <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
    {
      frequency = LSE_VALUE;
 8005264:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005268:	637b      	str	r3, [r7, #52]	; 0x34
 800526a:	e327      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800526c:	2300      	movs	r3, #0
 800526e:	637b      	str	r3, [r7, #52]	; 0x34
 8005270:	e324      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8005272:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005276:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800527a:	430b      	orrs	r3, r1
 800527c:	d14e      	bne.n	800531c <HAL_RCCEx_GetPeriphCLKFreq+0x1104>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800527e:	4b12      	ldr	r3, [pc, #72]	; (80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8005280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005284:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005288:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800528a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528c:	2b00      	cmp	r3, #0
 800528e:	d103      	bne.n	8005298 <HAL_RCCEx_GetPeriphCLKFreq+0x1080>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005290:	f7fd fc0c 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8005294:	6378      	str	r0, [r7, #52]	; 0x34
 8005296:	e311      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8005298:	4b0b      	ldr	r3, [pc, #44]	; (80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 800529a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800529e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052a6:	d119      	bne.n	80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 80052a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052ae:	d115      	bne.n	80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80052b0:	4b05      	ldr	r3, [pc, #20]	; (80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 80052b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052be:	d109      	bne.n	80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>
      {
        frequency = LSI_VALUE / 128U;
 80052c0:	23fa      	movs	r3, #250	; 0xfa
 80052c2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80052c4:	e2fa      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 80052c6:	bf00      	nop
 80052c8:	46020c00 	.word	0x46020c00
 80052cc:	00f42400 	.word	0x00f42400
 80052d0:	08007334 	.word	0x08007334
      }
      else
      {
        frequency = LSI_VALUE;
 80052d4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80052d8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80052da:	e2ef      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80052dc:	4ba8      	ldr	r3, [pc, #672]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e8:	d106      	bne.n	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
 80052ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80052f0:	d102      	bne.n	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
    {
      frequency = HSI_VALUE;
 80052f2:	4ba4      	ldr	r3, [pc, #656]	; (8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80052f4:	637b      	str	r3, [r7, #52]	; 0x34
 80052f6:	e2e1      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80052f8:	4ba1      	ldr	r3, [pc, #644]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80052fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052fe:	f003 0302 	and.w	r3, r3, #2
 8005302:	2b02      	cmp	r3, #2
 8005304:	d107      	bne.n	8005316 <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
 8005306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005308:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800530c:	d103      	bne.n	8005316 <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
    {
      frequency = LSE_VALUE;
 800530e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005312:	637b      	str	r3, [r7, #52]	; 0x34
 8005314:	e2d2      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8005316:	2300      	movs	r3, #0
 8005318:	637b      	str	r3, [r7, #52]	; 0x34
 800531a:	e2cf      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800531c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005320:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8005324:	430b      	orrs	r3, r1
 8005326:	d12d      	bne.n	8005384 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8005328:	4b95      	ldr	r3, [pc, #596]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800532a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800532e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8005332:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8005334:	4b92      	ldr	r3, [pc, #584]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800533c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005340:	d105      	bne.n	800534e <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
 8005342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005344:	2b00      	cmp	r3, #0
 8005346:	d102      	bne.n	800534e <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
    {
      frequency = HSE_VALUE;
 8005348:	4b8e      	ldr	r3, [pc, #568]	; (8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800534a:	637b      	str	r3, [r7, #52]	; 0x34
 800534c:	e2b6      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800534e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005354:	d107      	bne.n	8005366 <HAL_RCCEx_GetPeriphCLKFreq+0x114e>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800535a:	4618      	mov	r0, r3
 800535c:	f7fe fb24 	bl	80039a8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8005360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005362:	637b      	str	r3, [r7, #52]	; 0x34
 8005364:	e2aa      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8005366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005368:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800536c:	d107      	bne.n	800537e <HAL_RCCEx_GetPeriphCLKFreq+0x1166>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800536e:	f107 0318 	add.w	r3, r7, #24
 8005372:	4618      	mov	r0, r3
 8005374:	f7fe fc80 	bl	8003c78 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	637b      	str	r3, [r7, #52]	; 0x34
 800537c:	e29e      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800537e:	2300      	movs	r3, #0
 8005380:	637b      	str	r3, [r7, #52]	; 0x34
 8005382:	e29b      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8005384:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005388:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 800538c:	430b      	orrs	r3, r1
 800538e:	d156      	bne.n	800543e <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8005390:	4b7b      	ldr	r3, [pc, #492]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005396:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800539a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800539c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80053a2:	d028      	beq.n	80053f6 <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
 80053a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80053aa:	d845      	bhi.n	8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 80053ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053b2:	d013      	beq.n	80053dc <HAL_RCCEx_GetPeriphCLKFreq+0x11c4>
 80053b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053ba:	d83d      	bhi.n	8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 80053bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d004      	beq.n	80053cc <HAL_RCCEx_GetPeriphCLKFreq+0x11b4>
 80053c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053c8:	d004      	beq.n	80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x11bc>
 80053ca:	e035      	b.n	8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80053cc:	f7fd fb82 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 80053d0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80053d2:	e273      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80053d4:	f7fd fa48 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 80053d8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80053da:	e26f      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80053dc:	4b68      	ldr	r3, [pc, #416]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053e8:	d102      	bne.n	80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        {
          frequency = HSI_VALUE;
 80053ea:	4b66      	ldr	r3, [pc, #408]	; (8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80053ec:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80053ee:	e265      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80053f0:	2300      	movs	r3, #0
 80053f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053f4:	e262      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80053f6:	4b62      	ldr	r3, [pc, #392]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0320 	and.w	r3, r3, #32
 80053fe:	2b20      	cmp	r3, #32
 8005400:	d117      	bne.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x121a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005402:	4b5f      	ldr	r3, [pc, #380]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d005      	beq.n	800541a <HAL_RCCEx_GetPeriphCLKFreq+0x1202>
 800540e:	4b5c      	ldr	r3, [pc, #368]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	0e1b      	lsrs	r3, r3, #24
 8005414:	f003 030f 	and.w	r3, r3, #15
 8005418:	e006      	b.n	8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x1210>
 800541a:	4b59      	ldr	r3, [pc, #356]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800541c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005420:	041b      	lsls	r3, r3, #16
 8005422:	0e1b      	lsrs	r3, r3, #24
 8005424:	f003 030f 	and.w	r3, r3, #15
 8005428:	4a57      	ldr	r2, [pc, #348]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800542a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800542e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005430:	e244      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8005432:	2300      	movs	r3, #0
 8005434:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005436:	e241      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8005438:	2300      	movs	r3, #0
 800543a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800543c:	e23e      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800543e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005442:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8005446:	430b      	orrs	r3, r1
 8005448:	d156      	bne.n	80054f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800544a:	4b4d      	ldr	r3, [pc, #308]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800544c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005450:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005454:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005458:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800545c:	d028      	beq.n	80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>
 800545e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005460:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005464:	d845      	bhi.n	80054f2 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 8005466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005468:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800546c:	d013      	beq.n	8005496 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 800546e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005470:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005474:	d83d      	bhi.n	80054f2 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 8005476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005478:	2b00      	cmp	r3, #0
 800547a:	d004      	beq.n	8005486 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 800547c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005482:	d004      	beq.n	800548e <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8005484:	e035      	b.n	80054f2 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8005486:	f7fd fb11 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 800548a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800548c:	e216      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800548e:	f7fd f9eb 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 8005492:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005494:	e212      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005496:	4b3a      	ldr	r3, [pc, #232]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800549e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054a2:	d102      	bne.n	80054aa <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
        {
          frequency = HSI_VALUE;
 80054a4:	4b37      	ldr	r3, [pc, #220]	; (8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80054a6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80054a8:	e208      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80054aa:	2300      	movs	r3, #0
 80054ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054ae:	e205      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80054b0:	4b33      	ldr	r3, [pc, #204]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0320 	and.w	r3, r3, #32
 80054b8:	2b20      	cmp	r3, #32
 80054ba:	d117      	bne.n	80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x12d4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80054bc:	4b30      	ldr	r3, [pc, #192]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d005      	beq.n	80054d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12bc>
 80054c8:	4b2d      	ldr	r3, [pc, #180]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	0e1b      	lsrs	r3, r3, #24
 80054ce:	f003 030f 	and.w	r3, r3, #15
 80054d2:	e006      	b.n	80054e2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ca>
 80054d4:	4b2a      	ldr	r3, [pc, #168]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80054d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80054da:	041b      	lsls	r3, r3, #16
 80054dc:	0e1b      	lsrs	r3, r3, #24
 80054de:	f003 030f 	and.w	r3, r3, #15
 80054e2:	4a29      	ldr	r2, [pc, #164]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 80054e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054e8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80054ea:	e1e7      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80054ec:	2300      	movs	r3, #0
 80054ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054f0:	e1e4      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80054f2:	2300      	movs	r3, #0
 80054f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054f6:	e1e1      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80054f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054fc:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8005500:	430b      	orrs	r3, r1
 8005502:	d17c      	bne.n	80055fe <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8005504:	4b1e      	ldr	r3, [pc, #120]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005506:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800550a:	f003 0318 	and.w	r3, r3, #24
 800550e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005512:	2b18      	cmp	r3, #24
 8005514:	d870      	bhi.n	80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>
 8005516:	a201      	add	r2, pc, #4	; (adr r2, 800551c <HAL_RCCEx_GetPeriphCLKFreq+0x1304>)
 8005518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551c:	0800558d 	.word	0x0800558d
 8005520:	080055f9 	.word	0x080055f9
 8005524:	080055f9 	.word	0x080055f9
 8005528:	080055f9 	.word	0x080055f9
 800552c:	080055f9 	.word	0x080055f9
 8005530:	080055f9 	.word	0x080055f9
 8005534:	080055f9 	.word	0x080055f9
 8005538:	080055f9 	.word	0x080055f9
 800553c:	08005595 	.word	0x08005595
 8005540:	080055f9 	.word	0x080055f9
 8005544:	080055f9 	.word	0x080055f9
 8005548:	080055f9 	.word	0x080055f9
 800554c:	080055f9 	.word	0x080055f9
 8005550:	080055f9 	.word	0x080055f9
 8005554:	080055f9 	.word	0x080055f9
 8005558:	080055f9 	.word	0x080055f9
 800555c:	0800559d 	.word	0x0800559d
 8005560:	080055f9 	.word	0x080055f9
 8005564:	080055f9 	.word	0x080055f9
 8005568:	080055f9 	.word	0x080055f9
 800556c:	080055f9 	.word	0x080055f9
 8005570:	080055f9 	.word	0x080055f9
 8005574:	080055f9 	.word	0x080055f9
 8005578:	080055f9 	.word	0x080055f9
 800557c:	080055b7 	.word	0x080055b7
 8005580:	46020c00 	.word	0x46020c00
 8005584:	00f42400 	.word	0x00f42400
 8005588:	08007334 	.word	0x08007334
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800558c:	f7fd fab6 	bl	8002afc <HAL_RCC_GetPCLK3Freq>
 8005590:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005592:	e193      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005594:	f7fd f968 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 8005598:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800559a:	e18f      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800559c:	4b9f      	ldr	r3, [pc, #636]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055a8:	d102      	bne.n	80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
        {
          frequency = HSI_VALUE;
 80055aa:	4b9d      	ldr	r3, [pc, #628]	; (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80055ac:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80055ae:	e185      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80055b0:	2300      	movs	r3, #0
 80055b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055b4:	e182      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80055b6:	4b99      	ldr	r3, [pc, #612]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0320 	and.w	r3, r3, #32
 80055be:	2b20      	cmp	r3, #32
 80055c0:	d117      	bne.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0x13da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80055c2:	4b96      	ldr	r3, [pc, #600]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d005      	beq.n	80055da <HAL_RCCEx_GetPeriphCLKFreq+0x13c2>
 80055ce:	4b93      	ldr	r3, [pc, #588]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	0e1b      	lsrs	r3, r3, #24
 80055d4:	f003 030f 	and.w	r3, r3, #15
 80055d8:	e006      	b.n	80055e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13d0>
 80055da:	4b90      	ldr	r3, [pc, #576]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80055dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80055e0:	041b      	lsls	r3, r3, #16
 80055e2:	0e1b      	lsrs	r3, r3, #24
 80055e4:	f003 030f 	and.w	r3, r3, #15
 80055e8:	4a8e      	ldr	r2, [pc, #568]	; (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80055ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055ee:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80055f0:	e164      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80055f2:	2300      	movs	r3, #0
 80055f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055f6:	e161      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80055f8:	2300      	movs	r3, #0
 80055fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055fc:	e15e      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80055fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005602:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8005606:	430b      	orrs	r3, r1
 8005608:	d155      	bne.n	80056b6 <HAL_RCCEx_GetPeriphCLKFreq+0x149e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800560a:	4b84      	ldr	r3, [pc, #528]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800560c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005610:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005614:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800561c:	d013      	beq.n	8005646 <HAL_RCCEx_GetPeriphCLKFreq+0x142e>
 800561e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005620:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005624:	d844      	bhi.n	80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 8005626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005628:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800562c:	d013      	beq.n	8005656 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
 800562e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005630:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005634:	d83c      	bhi.n	80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 8005636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005638:	2b00      	cmp	r3, #0
 800563a:	d014      	beq.n	8005666 <HAL_RCCEx_GetPeriphCLKFreq+0x144e>
 800563c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005642:	d014      	beq.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 8005644:	e034      	b.n	80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005646:	f107 0318 	add.w	r3, r7, #24
 800564a:	4618      	mov	r0, r3
 800564c:	f7fe fb14 	bl	8003c78 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005654:	e132      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800565a:	4618      	mov	r0, r3
 800565c:	f7fe f9a4 	bl	80039a8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005662:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005664:	e12a      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005666:	f7fd f8ff 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 800566a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800566c:	e126      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800566e:	4b6b      	ldr	r3, [pc, #428]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0320 	and.w	r3, r3, #32
 8005676:	2b20      	cmp	r3, #32
 8005678:	d117      	bne.n	80056aa <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800567a:	4b68      	ldr	r3, [pc, #416]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d005      	beq.n	8005692 <HAL_RCCEx_GetPeriphCLKFreq+0x147a>
 8005686:	4b65      	ldr	r3, [pc, #404]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	0e1b      	lsrs	r3, r3, #24
 800568c:	f003 030f 	and.w	r3, r3, #15
 8005690:	e006      	b.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1488>
 8005692:	4b62      	ldr	r3, [pc, #392]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005694:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005698:	041b      	lsls	r3, r3, #16
 800569a:	0e1b      	lsrs	r3, r3, #24
 800569c:	f003 030f 	and.w	r3, r3, #15
 80056a0:	4a60      	ldr	r2, [pc, #384]	; (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80056a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056a6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80056a8:	e108      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80056aa:	2300      	movs	r3, #0
 80056ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056ae:	e105      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80056b0:	2300      	movs	r3, #0
 80056b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056b4:	e102      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 80056b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056ba:	1e59      	subs	r1, r3, #1
 80056bc:	ea52 0301 	orrs.w	r3, r2, r1
 80056c0:	d13c      	bne.n	800573c <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 80056c2:	4b56      	ldr	r3, [pc, #344]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80056c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80056c8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80056cc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80056ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80056d4:	d027      	beq.n	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 80056d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80056dc:	d82b      	bhi.n	8005736 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 80056de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056e4:	d017      	beq.n	8005716 <HAL_RCCEx_GetPeriphCLKFreq+0x14fe>
 80056e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056ec:	d823      	bhi.n	8005736 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 80056ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d004      	beq.n	80056fe <HAL_RCCEx_GetPeriphCLKFreq+0x14e6>
 80056f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056fa:	d004      	beq.n	8005706 <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 80056fc:	e01b      	b.n	8005736 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80056fe:	f7fd f8b3 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 8005702:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005704:	e0da      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800570a:	4618      	mov	r0, r3
 800570c:	f7fe f94c 	bl	80039a8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005712:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005714:	e0d2      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005716:	f107 0318 	add.w	r3, r7, #24
 800571a:	4618      	mov	r0, r3
 800571c:	f7fe faac 	bl	8003c78 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005724:	e0ca      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005726:	f107 030c 	add.w	r3, r7, #12
 800572a:	4618      	mov	r0, r3
 800572c:	f7fe fc0c 	bl	8003f48 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005734:	e0c2      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8005736:	2300      	movs	r3, #0
 8005738:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800573a:	e0bf      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800573c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005740:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8005744:	430b      	orrs	r3, r1
 8005746:	d131      	bne.n	80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x1594>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8005748:	4b34      	ldr	r3, [pc, #208]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800574a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800574e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005752:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8005754:	4b31      	ldr	r3, [pc, #196]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005756:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	2b02      	cmp	r3, #2
 8005760:	d106      	bne.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
 8005762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005764:	2b00      	cmp	r3, #0
 8005766:	d103      	bne.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
    {
      frequency = LSE_VALUE;
 8005768:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800576c:	637b      	str	r3, [r7, #52]	; 0x34
 800576e:	e0a5      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8005770:	4b2a      	ldr	r3, [pc, #168]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8005772:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005776:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800577a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800577e:	d112      	bne.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
 8005780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005782:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005786:	d10e      	bne.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005788:	4b24      	ldr	r3, [pc, #144]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800578a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800578e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005792:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005796:	d102      	bne.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
      {
        frequency = LSI_VALUE / 128U;
 8005798:	23fa      	movs	r3, #250	; 0xfa
 800579a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800579c:	e08e      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 800579e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80057a2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80057a4:	e08a      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80057a6:	2300      	movs	r3, #0
 80057a8:	637b      	str	r3, [r7, #52]	; 0x34
 80057aa:	e087      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80057ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057b0:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80057b4:	430b      	orrs	r3, r1
 80057b6:	d13b      	bne.n	8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80057b8:	4b18      	ldr	r3, [pc, #96]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80057ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80057be:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80057c2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80057c4:	4b15      	ldr	r3, [pc, #84]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057d0:	d105      	bne.n	80057de <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
 80057d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d102      	bne.n	80057de <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
    {
      frequency = HSI48_VALUE;
 80057d8:	4b13      	ldr	r3, [pc, #76]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 80057da:	637b      	str	r3, [r7, #52]	; 0x34
 80057dc:	e06e      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 80057de:	4b0f      	ldr	r3, [pc, #60]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057ea:	d106      	bne.n	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
 80057ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057f2:	d102      	bne.n	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
    {
      frequency = HSI48_VALUE >> 1U ;
 80057f4:	4b0d      	ldr	r3, [pc, #52]	; (800582c <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 80057f6:	637b      	str	r3, [r7, #52]	; 0x34
 80057f8:	e060      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80057fa:	4b08      	ldr	r3, [pc, #32]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005806:	d106      	bne.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
 8005808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800580e:	d102      	bne.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
    {
      frequency = HSI_VALUE;
 8005810:	4b03      	ldr	r3, [pc, #12]	; (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8005812:	637b      	str	r3, [r7, #52]	; 0x34
 8005814:	e052      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8005816:	2300      	movs	r3, #0
 8005818:	637b      	str	r3, [r7, #52]	; 0x34
 800581a:	e04f      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 800581c:	46020c00 	.word	0x46020c00
 8005820:	00f42400 	.word	0x00f42400
 8005824:	08007334 	.word	0x08007334
 8005828:	02dc6c00 	.word	0x02dc6c00
 800582c:	016e3600 	.word	0x016e3600
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 8005830:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005834:	f1a3 0108 	sub.w	r1, r3, #8
 8005838:	ea52 0301 	orrs.w	r3, r2, r1
 800583c:	d13c      	bne.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800583e:	4b22      	ldr	r3, [pc, #136]	; (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 8005840:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005844:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005848:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800584a:	4b1f      	ldr	r3, [pc, #124]	; (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005852:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005856:	d105      	bne.n	8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
 8005858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585a:	2b00      	cmp	r3, #0
 800585c:	d102      	bne.n	8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    {
      frequency = HSE_VALUE;
 800585e:	4b1b      	ldr	r3, [pc, #108]	; (80058cc <HAL_RCCEx_GetPeriphCLKFreq+0x16b4>)
 8005860:	637b      	str	r3, [r7, #52]	; 0x34
 8005862:	e02b      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 8005864:	4b18      	ldr	r3, [pc, #96]	; (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800586c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005870:	d106      	bne.n	8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
 8005872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005874:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005878:	d102      	bne.n	8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
    {
      frequency = HSE_VALUE >> 1U ;
 800587a:	4b15      	ldr	r3, [pc, #84]	; (80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 800587c:	637b      	str	r3, [r7, #52]	; 0x34
 800587e:	e01d      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 8005880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005886:	d107      	bne.n	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x1680>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800588c:	4618      	mov	r0, r3
 800588e:	f7fe f88b 	bl	80039a8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	637b      	str	r3, [r7, #52]	; 0x34
 8005896:	e011      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 8005898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589a:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800589e:	d108      	bne.n	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80058a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058a4:	4618      	mov	r0, r3
 80058a6:	f7fe f87f 	bl	80039a8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	085b      	lsrs	r3, r3, #1
 80058ae:	637b      	str	r3, [r7, #52]	; 0x34
 80058b0:	e004      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 80058b2:	2300      	movs	r3, #0
 80058b4:	637b      	str	r3, [r7, #52]	; 0x34
 80058b6:	e001      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80058b8:	2300      	movs	r3, #0
 80058ba:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 80058bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3738      	adds	r7, #56	; 0x38
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	46020c00 	.word	0x46020c00
 80058cc:	00f42400 	.word	0x00f42400
 80058d0:	007a1200 	.word	0x007a1200

080058d4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80058dc:	4b47      	ldr	r3, [pc, #284]	; (80059fc <RCCEx_PLL2_Config+0x128>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a46      	ldr	r2, [pc, #280]	; (80059fc <RCCEx_PLL2_Config+0x128>)
 80058e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80058e6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80058e8:	f7fb fac0 	bl	8000e6c <HAL_GetTick>
 80058ec:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80058ee:	e008      	b.n	8005902 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80058f0:	f7fb fabc 	bl	8000e6c <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d901      	bls.n	8005902 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e077      	b.n	80059f2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005902:	4b3e      	ldr	r3, [pc, #248]	; (80059fc <RCCEx_PLL2_Config+0x128>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1f0      	bne.n	80058f0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800590e:	4b3b      	ldr	r3, [pc, #236]	; (80059fc <RCCEx_PLL2_Config+0x128>)
 8005910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005912:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005916:	f023 0303 	bic.w	r3, r3, #3
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	6811      	ldr	r1, [r2, #0]
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	6852      	ldr	r2, [r2, #4]
 8005922:	3a01      	subs	r2, #1
 8005924:	0212      	lsls	r2, r2, #8
 8005926:	430a      	orrs	r2, r1
 8005928:	4934      	ldr	r1, [pc, #208]	; (80059fc <RCCEx_PLL2_Config+0x128>)
 800592a:	4313      	orrs	r3, r2
 800592c:	62cb      	str	r3, [r1, #44]	; 0x2c
 800592e:	4b33      	ldr	r3, [pc, #204]	; (80059fc <RCCEx_PLL2_Config+0x128>)
 8005930:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005932:	4b33      	ldr	r3, [pc, #204]	; (8005a00 <RCCEx_PLL2_Config+0x12c>)
 8005934:	4013      	ands	r3, r2
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	6892      	ldr	r2, [r2, #8]
 800593a:	3a01      	subs	r2, #1
 800593c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	68d2      	ldr	r2, [r2, #12]
 8005944:	3a01      	subs	r2, #1
 8005946:	0252      	lsls	r2, r2, #9
 8005948:	b292      	uxth	r2, r2
 800594a:	4311      	orrs	r1, r2
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	6912      	ldr	r2, [r2, #16]
 8005950:	3a01      	subs	r2, #1
 8005952:	0412      	lsls	r2, r2, #16
 8005954:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005958:	4311      	orrs	r1, r2
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	6952      	ldr	r2, [r2, #20]
 800595e:	3a01      	subs	r2, #1
 8005960:	0612      	lsls	r2, r2, #24
 8005962:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005966:	430a      	orrs	r2, r1
 8005968:	4924      	ldr	r1, [pc, #144]	; (80059fc <RCCEx_PLL2_Config+0x128>)
 800596a:	4313      	orrs	r3, r2
 800596c:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800596e:	4b23      	ldr	r3, [pc, #140]	; (80059fc <RCCEx_PLL2_Config+0x128>)
 8005970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005972:	f023 020c 	bic.w	r2, r3, #12
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	4920      	ldr	r1, [pc, #128]	; (80059fc <RCCEx_PLL2_Config+0x128>)
 800597c:	4313      	orrs	r3, r2
 800597e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005980:	4b1e      	ldr	r3, [pc, #120]	; (80059fc <RCCEx_PLL2_Config+0x128>)
 8005982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a1b      	ldr	r3, [r3, #32]
 8005988:	491c      	ldr	r1, [pc, #112]	; (80059fc <RCCEx_PLL2_Config+0x128>)
 800598a:	4313      	orrs	r3, r2
 800598c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800598e:	4b1b      	ldr	r3, [pc, #108]	; (80059fc <RCCEx_PLL2_Config+0x128>)
 8005990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005992:	4a1a      	ldr	r2, [pc, #104]	; (80059fc <RCCEx_PLL2_Config+0x128>)
 8005994:	f023 0310 	bic.w	r3, r3, #16
 8005998:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800599a:	4b18      	ldr	r3, [pc, #96]	; (80059fc <RCCEx_PLL2_Config+0x128>)
 800599c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059a2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	69d2      	ldr	r2, [r2, #28]
 80059aa:	00d2      	lsls	r2, r2, #3
 80059ac:	4913      	ldr	r1, [pc, #76]	; (80059fc <RCCEx_PLL2_Config+0x128>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80059b2:	4b12      	ldr	r3, [pc, #72]	; (80059fc <RCCEx_PLL2_Config+0x128>)
 80059b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b6:	4a11      	ldr	r2, [pc, #68]	; (80059fc <RCCEx_PLL2_Config+0x128>)
 80059b8:	f043 0310 	orr.w	r3, r3, #16
 80059bc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80059be:	4b0f      	ldr	r3, [pc, #60]	; (80059fc <RCCEx_PLL2_Config+0x128>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a0e      	ldr	r2, [pc, #56]	; (80059fc <RCCEx_PLL2_Config+0x128>)
 80059c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059c8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80059ca:	f7fb fa4f 	bl	8000e6c <HAL_GetTick>
 80059ce:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80059d0:	e008      	b.n	80059e4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80059d2:	f7fb fa4b 	bl	8000e6c <HAL_GetTick>
 80059d6:	4602      	mov	r2, r0
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d901      	bls.n	80059e4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80059e0:	2303      	movs	r3, #3
 80059e2:	e006      	b.n	80059f2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80059e4:	4b05      	ldr	r3, [pc, #20]	; (80059fc <RCCEx_PLL2_Config+0x128>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d0f0      	beq.n	80059d2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80059f0:	2300      	movs	r3, #0

}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	46020c00 	.word	0x46020c00
 8005a00:	80800000 	.word	0x80800000

08005a04 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8005a0c:	4b47      	ldr	r3, [pc, #284]	; (8005b2c <RCCEx_PLL3_Config+0x128>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a46      	ldr	r2, [pc, #280]	; (8005b2c <RCCEx_PLL3_Config+0x128>)
 8005a12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a16:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005a18:	f7fb fa28 	bl	8000e6c <HAL_GetTick>
 8005a1c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a1e:	e008      	b.n	8005a32 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005a20:	f7fb fa24 	bl	8000e6c <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d901      	bls.n	8005a32 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e077      	b.n	8005b22 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a32:	4b3e      	ldr	r3, [pc, #248]	; (8005b2c <RCCEx_PLL3_Config+0x128>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1f0      	bne.n	8005a20 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8005a3e:	4b3b      	ldr	r3, [pc, #236]	; (8005b2c <RCCEx_PLL3_Config+0x128>)
 8005a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a42:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005a46:	f023 0303 	bic.w	r3, r3, #3
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	6811      	ldr	r1, [r2, #0]
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	6852      	ldr	r2, [r2, #4]
 8005a52:	3a01      	subs	r2, #1
 8005a54:	0212      	lsls	r2, r2, #8
 8005a56:	430a      	orrs	r2, r1
 8005a58:	4934      	ldr	r1, [pc, #208]	; (8005b2c <RCCEx_PLL3_Config+0x128>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	630b      	str	r3, [r1, #48]	; 0x30
 8005a5e:	4b33      	ldr	r3, [pc, #204]	; (8005b2c <RCCEx_PLL3_Config+0x128>)
 8005a60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a62:	4b33      	ldr	r3, [pc, #204]	; (8005b30 <RCCEx_PLL3_Config+0x12c>)
 8005a64:	4013      	ands	r3, r2
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	6892      	ldr	r2, [r2, #8]
 8005a6a:	3a01      	subs	r2, #1
 8005a6c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	68d2      	ldr	r2, [r2, #12]
 8005a74:	3a01      	subs	r2, #1
 8005a76:	0252      	lsls	r2, r2, #9
 8005a78:	b292      	uxth	r2, r2
 8005a7a:	4311      	orrs	r1, r2
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	6912      	ldr	r2, [r2, #16]
 8005a80:	3a01      	subs	r2, #1
 8005a82:	0412      	lsls	r2, r2, #16
 8005a84:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005a88:	4311      	orrs	r1, r2
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	6952      	ldr	r2, [r2, #20]
 8005a8e:	3a01      	subs	r2, #1
 8005a90:	0612      	lsls	r2, r2, #24
 8005a92:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005a96:	430a      	orrs	r2, r1
 8005a98:	4924      	ldr	r1, [pc, #144]	; (8005b2c <RCCEx_PLL3_Config+0x128>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8005a9e:	4b23      	ldr	r3, [pc, #140]	; (8005b2c <RCCEx_PLL3_Config+0x128>)
 8005aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa2:	f023 020c 	bic.w	r2, r3, #12
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	4920      	ldr	r1, [pc, #128]	; (8005b2c <RCCEx_PLL3_Config+0x128>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005ab0:	4b1e      	ldr	r3, [pc, #120]	; (8005b2c <RCCEx_PLL3_Config+0x128>)
 8005ab2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	491c      	ldr	r1, [pc, #112]	; (8005b2c <RCCEx_PLL3_Config+0x128>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8005abe:	4b1b      	ldr	r3, [pc, #108]	; (8005b2c <RCCEx_PLL3_Config+0x128>)
 8005ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac2:	4a1a      	ldr	r2, [pc, #104]	; (8005b2c <RCCEx_PLL3_Config+0x128>)
 8005ac4:	f023 0310 	bic.w	r3, r3, #16
 8005ac8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005aca:	4b18      	ldr	r3, [pc, #96]	; (8005b2c <RCCEx_PLL3_Config+0x128>)
 8005acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ace:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ad2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	69d2      	ldr	r2, [r2, #28]
 8005ada:	00d2      	lsls	r2, r2, #3
 8005adc:	4913      	ldr	r1, [pc, #76]	; (8005b2c <RCCEx_PLL3_Config+0x128>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8005ae2:	4b12      	ldr	r3, [pc, #72]	; (8005b2c <RCCEx_PLL3_Config+0x128>)
 8005ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae6:	4a11      	ldr	r2, [pc, #68]	; (8005b2c <RCCEx_PLL3_Config+0x128>)
 8005ae8:	f043 0310 	orr.w	r3, r3, #16
 8005aec:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8005aee:	4b0f      	ldr	r3, [pc, #60]	; (8005b2c <RCCEx_PLL3_Config+0x128>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a0e      	ldr	r2, [pc, #56]	; (8005b2c <RCCEx_PLL3_Config+0x128>)
 8005af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005af8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005afa:	f7fb f9b7 	bl	8000e6c <HAL_GetTick>
 8005afe:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b00:	e008      	b.n	8005b14 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005b02:	f7fb f9b3 	bl	8000e6c <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d901      	bls.n	8005b14 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e006      	b.n	8005b22 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b14:	4b05      	ldr	r3, [pc, #20]	; (8005b2c <RCCEx_PLL3_Config+0x128>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d0f0      	beq.n	8005b02 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	46020c00 	.word	0x46020c00
 8005b30:	80800000 	.word	0x80800000

08005b34 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e0fb      	b.n	8005d3e <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a7f      	ldr	r2, [pc, #508]	; (8005d48 <HAL_SPI_Init+0x214>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d004      	beq.n	8005b5a <HAL_SPI_Init+0x26>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a7d      	ldr	r2, [pc, #500]	; (8005d4c <HAL_SPI_Init+0x218>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	e000      	b.n	8005b5c <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8005b5a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a78      	ldr	r2, [pc, #480]	; (8005d48 <HAL_SPI_Init+0x214>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d004      	beq.n	8005b76 <HAL_SPI_Init+0x42>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a76      	ldr	r2, [pc, #472]	; (8005d4c <HAL_SPI_Init+0x218>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d105      	bne.n	8005b82 <HAL_SPI_Init+0x4e>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	2b0f      	cmp	r3, #15
 8005b7c:	d901      	bls.n	8005b82 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e0dd      	b.n	8005d3e <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fd88 	bl	8006698 <SPI_GetPacketSize>
 8005b88:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a6e      	ldr	r2, [pc, #440]	; (8005d48 <HAL_SPI_Init+0x214>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d004      	beq.n	8005b9e <HAL_SPI_Init+0x6a>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a6c      	ldr	r2, [pc, #432]	; (8005d4c <HAL_SPI_Init+0x218>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d102      	bne.n	8005ba4 <HAL_SPI_Init+0x70>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2b08      	cmp	r3, #8
 8005ba2:	d816      	bhi.n	8005bd2 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005ba8:	4a69      	ldr	r2, [pc, #420]	; (8005d50 <HAL_SPI_Init+0x21c>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d00e      	beq.n	8005bcc <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a68      	ldr	r2, [pc, #416]	; (8005d54 <HAL_SPI_Init+0x220>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d009      	beq.n	8005bcc <HAL_SPI_Init+0x98>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a66      	ldr	r2, [pc, #408]	; (8005d58 <HAL_SPI_Init+0x224>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d004      	beq.n	8005bcc <HAL_SPI_Init+0x98>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a65      	ldr	r2, [pc, #404]	; (8005d5c <HAL_SPI_Init+0x228>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d104      	bne.n	8005bd6 <HAL_SPI_Init+0xa2>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2b10      	cmp	r3, #16
 8005bd0:	d901      	bls.n	8005bd6 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e0b3      	b.n	8005d3e <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d106      	bne.n	8005bf0 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7fa ff00 	bl	80009f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f022 0201 	bic.w	r2, r2, #1
 8005c06:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8005c12:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c1c:	d119      	bne.n	8005c52 <HAL_SPI_Init+0x11e>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c26:	d103      	bne.n	8005c30 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d008      	beq.n	8005c42 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10c      	bne.n	8005c52 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005c3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c40:	d107      	bne.n	8005c52 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c50:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00f      	beq.n	8005c7e <HAL_SPI_Init+0x14a>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	2b06      	cmp	r3, #6
 8005c64:	d90b      	bls.n	8005c7e <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	430a      	orrs	r2, r1
 8005c7a:	601a      	str	r2, [r3, #0]
 8005c7c:	e007      	b.n	8005c8e <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c8c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	69da      	ldr	r2, [r3, #28]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c96:	431a      	orrs	r2, r3
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca0:	ea42 0103 	orr.w	r1, r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68da      	ldr	r2, [r3, #12]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	430a      	orrs	r2, r1
 8005cae:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb8:	431a      	orrs	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cbe:	431a      	orrs	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	431a      	orrs	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	431a      	orrs	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	431a      	orrs	r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	431a      	orrs	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ce2:	431a      	orrs	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cf4:	431a      	orrs	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cfa:	ea42 0103 	orr.w	r1, r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	430a      	orrs	r2, r1
 8005d08:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00a      	beq.n	8005d2c <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	46002000 	.word	0x46002000
 8005d4c:	56002000 	.word	0x56002000
 8005d50:	40013000 	.word	0x40013000
 8005d54:	50013000 	.word	0x50013000
 8005d58:	40003800 	.word	0x40003800
 8005d5c:	50003800 	.word	0x50003800

08005d60 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b08a      	sub	sp, #40	; 0x28
 8005d64:	af02      	add	r7, sp, #8
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	603b      	str	r3, [r7, #0]
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	3320      	adds	r3, #32
 8005d76:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d101      	bne.n	8005d8a <HAL_SPI_Transmit+0x2a>
 8005d86:	2302      	movs	r3, #2
 8005d88:	e203      	b.n	8006192 <HAL_SPI_Transmit+0x432>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d92:	f7fb f86b 	bl	8000e6c <HAL_GetTick>
 8005d96:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d007      	beq.n	8005db4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8005da4:	2302      	movs	r3, #2
 8005da6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8005db0:	7efb      	ldrb	r3, [r7, #27]
 8005db2:	e1ee      	b.n	8006192 <HAL_SPI_Transmit+0x432>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d002      	beq.n	8005dc0 <HAL_SPI_Transmit+0x60>
 8005dba:	88fb      	ldrh	r3, [r7, #6]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d107      	bne.n	8005dd0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8005dcc:	7efb      	ldrb	r3, [r7, #27]
 8005dce:	e1e0      	b.n	8006192 <HAL_SPI_Transmit+0x432>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2203      	movs	r2, #3
 8005dd4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	88fa      	ldrh	r2, [r7, #6]
 8005dea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	88fa      	ldrh	r2, [r7, #6]
 8005df2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005e20:	d108      	bne.n	8005e34 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e30:	601a      	str	r2, [r3, #0]
 8005e32:	e009      	b.n	8005e48 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005e46:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	0c1b      	lsrs	r3, r3, #16
 8005e50:	041b      	lsls	r3, r3, #16
 8005e52:	88f9      	ldrh	r1, [r7, #6]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	6812      	ldr	r2, [r2, #0]
 8005e58:	430b      	orrs	r3, r1
 8005e5a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f042 0201 	orr.w	r2, r2, #1
 8005e6a:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10c      	bne.n	8005e94 <HAL_SPI_Transmit+0x134>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e82:	d107      	bne.n	8005e94 <HAL_SPI_Transmit+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	2b0f      	cmp	r3, #15
 8005e9a:	d95b      	bls.n	8005f54 <HAL_SPI_Transmit+0x1f4>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a8f      	ldr	r2, [pc, #572]	; (80060e0 <HAL_SPI_Transmit+0x380>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d04f      	beq.n	8005f46 <HAL_SPI_Transmit+0x1e6>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a8e      	ldr	r2, [pc, #568]	; (80060e4 <HAL_SPI_Transmit+0x384>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d04a      	beq.n	8005f46 <HAL_SPI_Transmit+0x1e6>
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a8c      	ldr	r2, [pc, #560]	; (80060e8 <HAL_SPI_Transmit+0x388>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d045      	beq.n	8005f46 <HAL_SPI_Transmit+0x1e6>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a8b      	ldr	r2, [pc, #556]	; (80060ec <HAL_SPI_Transmit+0x38c>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d147      	bne.n	8005f54 <HAL_SPI_Transmit+0x1f4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005ec4:	e03f      	b.n	8005f46 <HAL_SPI_Transmit+0x1e6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	695b      	ldr	r3, [r3, #20]
 8005ecc:	f003 0302 	and.w	r3, r3, #2
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d114      	bne.n	8005efe <HAL_SPI_Transmit+0x19e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6812      	ldr	r2, [r2, #0]
 8005ede:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ee4:	1d1a      	adds	r2, r3, #4
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005efc:	e023      	b.n	8005f46 <HAL_SPI_Transmit+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005efe:	f7fa ffb5 	bl	8000e6c <HAL_GetTick>
 8005f02:	4602      	mov	r2, r0
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	683a      	ldr	r2, [r7, #0]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d803      	bhi.n	8005f16 <HAL_SPI_Transmit+0x1b6>
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f14:	d102      	bne.n	8005f1c <HAL_SPI_Transmit+0x1bc>
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d114      	bne.n	8005f46 <HAL_SPI_Transmit+0x1e6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f000 faed 	bl	80064fc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e125      	b.n	8006192 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1b9      	bne.n	8005ec6 <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8005f52:	e0f8      	b.n	8006146 <HAL_SPI_Transmit+0x3e6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	2b07      	cmp	r3, #7
 8005f5a:	f240 80ed 	bls.w	8006138 <HAL_SPI_Transmit+0x3d8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005f5e:	e05d      	b.n	800601c <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d132      	bne.n	8005fd4 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d918      	bls.n	8005fac <HAL_SPI_Transmit+0x24c>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d014      	beq.n	8005fac <HAL_SPI_Transmit+0x24c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	6812      	ldr	r2, [r2, #0]
 8005f8c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f92:	1d1a      	adds	r2, r3, #4
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	3b02      	subs	r3, #2
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005faa:	e037      	b.n	800601c <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fb0:	881a      	ldrh	r2, [r3, #0]
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fba:	1c9a      	adds	r2, r3, #2
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005fd2:	e023      	b.n	800601c <HAL_SPI_Transmit+0x2bc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fd4:	f7fa ff4a 	bl	8000e6c <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d803      	bhi.n	8005fec <HAL_SPI_Transmit+0x28c>
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fea:	d102      	bne.n	8005ff2 <HAL_SPI_Transmit+0x292>
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d114      	bne.n	800601c <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f000 fa82 	bl	80064fc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006006:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	e0ba      	b.n	8006192 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006022:	b29b      	uxth	r3, r3
 8006024:	2b00      	cmp	r3, #0
 8006026:	d19b      	bne.n	8005f60 <HAL_SPI_Transmit+0x200>
 8006028:	e08d      	b.n	8006146 <HAL_SPI_Transmit+0x3e6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	f003 0302 	and.w	r3, r3, #2
 8006034:	2b02      	cmp	r3, #2
 8006036:	d15b      	bne.n	80060f0 <HAL_SPI_Transmit+0x390>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800603e:	b29b      	uxth	r3, r3
 8006040:	2b03      	cmp	r3, #3
 8006042:	d918      	bls.n	8006076 <HAL_SPI_Transmit+0x316>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006048:	2b40      	cmp	r3, #64	; 0x40
 800604a:	d914      	bls.n	8006076 <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6812      	ldr	r2, [r2, #0]
 8006056:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800605c:	1d1a      	adds	r2, r3, #4
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006068:	b29b      	uxth	r3, r3
 800606a:	3b04      	subs	r3, #4
 800606c:	b29a      	uxth	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006074:	e060      	b.n	8006138 <HAL_SPI_Transmit+0x3d8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800607c:	b29b      	uxth	r3, r3
 800607e:	2b01      	cmp	r3, #1
 8006080:	d917      	bls.n	80060b2 <HAL_SPI_Transmit+0x352>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006086:	2b00      	cmp	r3, #0
 8006088:	d013      	beq.n	80060b2 <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800608e:	881a      	ldrh	r2, [r3, #0]
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006098:	1c9a      	adds	r2, r3, #2
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	3b02      	subs	r3, #2
 80060a8:	b29a      	uxth	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80060b0:	e042      	b.n	8006138 <HAL_SPI_Transmit+0x3d8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	3320      	adds	r3, #32
 80060bc:	7812      	ldrb	r2, [r2, #0]
 80060be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060c4:	1c5a      	adds	r2, r3, #1
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	3b01      	subs	r3, #1
 80060d4:	b29a      	uxth	r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80060dc:	e02c      	b.n	8006138 <HAL_SPI_Transmit+0x3d8>
 80060de:	bf00      	nop
 80060e0:	40013000 	.word	0x40013000
 80060e4:	50013000 	.word	0x50013000
 80060e8:	40003800 	.word	0x40003800
 80060ec:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060f0:	f7fa febc 	bl	8000e6c <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d803      	bhi.n	8006108 <HAL_SPI_Transmit+0x3a8>
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006106:	d102      	bne.n	800610e <HAL_SPI_Transmit+0x3ae>
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d114      	bne.n	8006138 <HAL_SPI_Transmit+0x3d8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f000 f9f4 	bl	80064fc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006122:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8006134:	2303      	movs	r3, #3
 8006136:	e02c      	b.n	8006192 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800613e:	b29b      	uxth	r3, r3
 8006140:	2b00      	cmp	r3, #0
 8006142:	f47f af72 	bne.w	800602a <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2200      	movs	r2, #0
 800614e:	2108      	movs	r1, #8
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f000 fa73 	bl	800663c <SPI_WaitOnFlagUntilTimeout>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d007      	beq.n	800616c <HAL_SPI_Transmit+0x40c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006162:	f043 0220 	orr.w	r2, r3, #32
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f000 f9c5 	bl	80064fc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006188:	2b00      	cmp	r3, #0
 800618a:	d001      	beq.n	8006190 <HAL_SPI_Transmit+0x430>
  {
    return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e000      	b.n	8006192 <HAL_SPI_Transmit+0x432>
  }
  return errorcode;
 8006190:	7efb      	ldrb	r3, [r7, #27]
}
 8006192:	4618      	mov	r0, r3
 8006194:	3720      	adds	r7, #32
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop

0800619c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b088      	sub	sp, #32
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	603b      	str	r3, [r7, #0]
 80061a8:	4613      	mov	r3, r2
 80061aa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80061ac:	2300      	movs	r3, #0
 80061ae:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	3330      	adds	r3, #48	; 0x30
 80061b6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d101      	bne.n	80061c6 <HAL_SPI_Receive+0x2a>
 80061c2:	2302      	movs	r3, #2
 80061c4:	e18e      	b.n	80064e4 <HAL_SPI_Receive+0x348>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061ce:	f7fa fe4d 	bl	8000e6c <HAL_GetTick>
 80061d2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d007      	beq.n	80061f0 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 80061e0:	2302      	movs	r3, #2
 80061e2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80061ec:	7ffb      	ldrb	r3, [r7, #31]
 80061ee:	e179      	b.n	80064e4 <HAL_SPI_Receive+0x348>
  }

  if ((pData == NULL) || (Size == 0UL))
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d002      	beq.n	80061fc <HAL_SPI_Receive+0x60>
 80061f6:	88fb      	ldrh	r3, [r7, #6]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d107      	bne.n	800620c <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8006208:	7ffb      	ldrb	r3, [r7, #31]
 800620a:	e16b      	b.n	80064e4 <HAL_SPI_Receive+0x348>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2204      	movs	r2, #4
 8006210:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = Size;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	88fa      	ldrh	r2, [r7, #6]
 8006226:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = Size;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	88fa      	ldrh	r2, [r7, #6]
 800622e:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2200      	movs	r2, #0
 800623c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2200      	movs	r2, #0
 8006244:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxISR       = NULL;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800625c:	d108      	bne.n	8006270 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800626c:	601a      	str	r2, [r3, #0]
 800626e:	e009      	b.n	8006284 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006282:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	0c1b      	lsrs	r3, r3, #16
 800628c:	041b      	lsls	r3, r3, #16
 800628e:	88f9      	ldrh	r1, [r7, #6]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	6812      	ldr	r2, [r2, #0]
 8006294:	430b      	orrs	r3, r1
 8006296:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f042 0201 	orr.w	r2, r2, #1
 80062a6:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	69db      	ldr	r3, [r3, #28]
 80062ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10c      	bne.n	80062d0 <HAL_SPI_Receive+0x134>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062be:	d107      	bne.n	80062d0 <HAL_SPI_Receive+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062ce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	2b0f      	cmp	r3, #15
 80062d6:	d95c      	bls.n	8006392 <HAL_SPI_Receive+0x1f6>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a83      	ldr	r2, [pc, #524]	; (80064ec <HAL_SPI_Receive+0x350>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d050      	beq.n	8006384 <HAL_SPI_Receive+0x1e8>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a82      	ldr	r2, [pc, #520]	; (80064f0 <HAL_SPI_Receive+0x354>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d04b      	beq.n	8006384 <HAL_SPI_Receive+0x1e8>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a80      	ldr	r2, [pc, #512]	; (80064f4 <HAL_SPI_Receive+0x358>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d046      	beq.n	8006384 <HAL_SPI_Receive+0x1e8>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a7f      	ldr	r2, [pc, #508]	; (80064f8 <HAL_SPI_Receive+0x35c>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d148      	bne.n	8006392 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006300:	e040      	b.n	8006384 <HAL_SPI_Receive+0x1e8>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	695a      	ldr	r2, [r3, #20]
 8006308:	f248 0308 	movw	r3, #32776	; 0x8008
 800630c:	4013      	ands	r3, r2
 800630e:	2b00      	cmp	r3, #0
 8006310:	d014      	beq.n	800633c <HAL_SPI_Receive+0x1a0>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800631a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800631c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006322:	1d1a      	adds	r2, r3, #4
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800632e:	b29b      	uxth	r3, r3
 8006330:	3b01      	subs	r3, #1
 8006332:	b29a      	uxth	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 800633a:	e023      	b.n	8006384 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800633c:	f7fa fd96 	bl	8000e6c <HAL_GetTick>
 8006340:	4602      	mov	r2, r0
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	429a      	cmp	r2, r3
 800634a:	d803      	bhi.n	8006354 <HAL_SPI_Receive+0x1b8>
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006352:	d102      	bne.n	800635a <HAL_SPI_Receive+0x1be>
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d114      	bne.n	8006384 <HAL_SPI_Receive+0x1e8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f000 f8ce 	bl	80064fc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800636e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e0af      	b.n	80064e4 <HAL_SPI_Receive+0x348>
    while (hspi->RxXferCount > 0UL)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800638a:	b29b      	uxth	r3, r3
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1b8      	bne.n	8006302 <HAL_SPI_Receive+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8006390:	e095      	b.n	80064be <HAL_SPI_Receive+0x322>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	2b07      	cmp	r3, #7
 8006398:	f240 808b 	bls.w	80064b2 <HAL_SPI_Receive+0x316>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800639c:	e03f      	b.n	800641e <HAL_SPI_Receive+0x282>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	f003 0301 	and.w	r3, r3, #1
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d114      	bne.n	80063d6 <HAL_SPI_Receive+0x23a>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	8812      	ldrh	r2, [r2, #0]
 80063b4:	b292      	uxth	r2, r2
 80063b6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063bc:	1c9a      	adds	r2, r3, #2
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	3b01      	subs	r3, #1
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 80063d4:	e023      	b.n	800641e <HAL_SPI_Receive+0x282>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063d6:	f7fa fd49 	bl	8000e6c <HAL_GetTick>
 80063da:	4602      	mov	r2, r0
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	683a      	ldr	r2, [r7, #0]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d803      	bhi.n	80063ee <HAL_SPI_Receive+0x252>
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ec:	d102      	bne.n	80063f4 <HAL_SPI_Receive+0x258>
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d114      	bne.n	800641e <HAL_SPI_Receive+0x282>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f000 f881 	bl	80064fc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006408:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e062      	b.n	80064e4 <HAL_SPI_Receive+0x348>
    while (hspi->RxXferCount > 0UL)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8006424:	b29b      	uxth	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1b9      	bne.n	800639e <HAL_SPI_Receive+0x202>
 800642a:	e048      	b.n	80064be <HAL_SPI_Receive+0x322>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b01      	cmp	r3, #1
 8006438:	d117      	bne.n	800646a <HAL_SPI_Receive+0x2ce>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006446:	7812      	ldrb	r2, [r2, #0]
 8006448:	b2d2      	uxtb	r2, r2
 800644a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006450:	1c5a      	adds	r2, r3, #1
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800645c:	b29b      	uxth	r3, r3
 800645e:	3b01      	subs	r3, #1
 8006460:	b29a      	uxth	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8006468:	e023      	b.n	80064b2 <HAL_SPI_Receive+0x316>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800646a:	f7fa fcff 	bl	8000e6c <HAL_GetTick>
 800646e:	4602      	mov	r2, r0
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	683a      	ldr	r2, [r7, #0]
 8006476:	429a      	cmp	r2, r3
 8006478:	d803      	bhi.n	8006482 <HAL_SPI_Receive+0x2e6>
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006480:	d102      	bne.n	8006488 <HAL_SPI_Receive+0x2ec>
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d114      	bne.n	80064b2 <HAL_SPI_Receive+0x316>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f000 f837 	bl	80064fc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800649c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e018      	b.n	80064e4 <HAL_SPI_Receive+0x348>
    while (hspi->RxXferCount > 0UL)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1b6      	bne.n	800642c <HAL_SPI_Receive+0x290>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f000 f81c 	bl	80064fc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <HAL_SPI_Receive+0x346>
  {
    return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e000      	b.n	80064e4 <HAL_SPI_Receive+0x348>
  }
  return errorcode;
 80064e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3720      	adds	r7, #32
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	40013000 	.word	0x40013000
 80064f0:	50013000 	.word	0x50013000
 80064f4:	40003800 	.word	0x40003800
 80064f8:	50003800 	.word	0x50003800

080064fc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	699a      	ldr	r2, [r3, #24]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f042 0208 	orr.w	r2, r2, #8
 800651a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	699a      	ldr	r2, [r3, #24]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f042 0210 	orr.w	r2, r2, #16
 800652a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f022 0201 	bic.w	r2, r2, #1
 800653a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	6812      	ldr	r2, [r2, #0]
 8006546:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 800654a:	f023 0303 	bic.w	r3, r3, #3
 800654e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689a      	ldr	r2, [r3, #8]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800655e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8006566:	b2db      	uxtb	r3, r3
 8006568:	2b04      	cmp	r3, #4
 800656a:	d014      	beq.n	8006596 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f003 0320 	and.w	r3, r3, #32
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00f      	beq.n	8006596 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800657c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	699a      	ldr	r2, [r3, #24]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f042 0220 	orr.w	r2, r2, #32
 8006594:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800659c:	b2db      	uxtb	r3, r3
 800659e:	2b03      	cmp	r3, #3
 80065a0:	d014      	beq.n	80065cc <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00f      	beq.n	80065cc <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065b2:	f043 0204 	orr.w	r2, r3, #4
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	699a      	ldr	r2, [r3, #24]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065ca:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00f      	beq.n	80065f6 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065dc:	f043 0201 	orr.w	r2, r3, #1
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	699a      	ldr	r2, [r3, #24]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065f4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00f      	beq.n	8006620 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006606:	f043 0208 	orr.w	r2, r3, #8
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	699a      	ldr	r2, [r3, #24]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800661e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 8006630:	bf00      	nop
 8006632:	3714      	adds	r7, #20
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	603b      	str	r3, [r7, #0]
 8006648:	4613      	mov	r3, r2
 800664a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800664c:	e010      	b.n	8006670 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800664e:	f7fa fc0d 	bl	8000e6c <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	683a      	ldr	r2, [r7, #0]
 800665a:	429a      	cmp	r2, r3
 800665c:	d803      	bhi.n	8006666 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006664:	d102      	bne.n	800666c <SPI_WaitOnFlagUntilTimeout+0x30>
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d101      	bne.n	8006670 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	e00f      	b.n	8006690 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	695a      	ldr	r2, [r3, #20]
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	4013      	ands	r3, r2
 800667a:	68ba      	ldr	r2, [r7, #8]
 800667c:	429a      	cmp	r2, r3
 800667e:	bf0c      	ite	eq
 8006680:	2301      	moveq	r3, #1
 8006682:	2300      	movne	r3, #0
 8006684:	b2db      	uxtb	r3, r3
 8006686:	461a      	mov	r2, r3
 8006688:	79fb      	ldrb	r3, [r7, #7]
 800668a:	429a      	cmp	r2, r3
 800668c:	d0df      	beq.n	800664e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066a4:	095b      	lsrs	r3, r3, #5
 80066a6:	3301      	adds	r3, #1
 80066a8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	3301      	adds	r3, #1
 80066b0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	3307      	adds	r3, #7
 80066b6:	08db      	lsrs	r3, r3, #3
 80066b8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	fb02 f303 	mul.w	r3, r2, r3
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3714      	adds	r7, #20
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b083      	sub	sp, #12
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
 80066d6:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d12e      	bne.n	8006742 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d101      	bne.n	80066f2 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 80066ee:	2302      	movs	r3, #2
 80066f0:	e028      	b.n	8006744 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2202      	movs	r2, #2
 80066fe:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f022 0201 	bic.w	r2, r2, #1
 8006710:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800671e:	ea42 0103 	orr.w	r1, r2, r3
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	689a      	ldr	r2, [r3, #8]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	430a      	orrs	r2, r1
 800672c:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2201      	movs	r2, #1
 8006732:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800673e:	2300      	movs	r3, #0
 8006740:	e000      	b.n	8006744 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
  }
}
 8006744:	4618      	mov	r0, r3
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d101      	bne.n	8006762 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e042      	b.n	80067e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006768:	2b00      	cmp	r3, #0
 800676a:	d106      	bne.n	800677a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f7fa fa6d 	bl	8000c54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2224      	movs	r2, #36	; 0x24
 800677e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f022 0201 	bic.w	r2, r2, #1
 8006790:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f8ba 	bl	800690c <UART_SetConfig>
 8006798:	4603      	mov	r3, r0
 800679a:	2b01      	cmp	r3, #1
 800679c:	d101      	bne.n	80067a2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e022      	b.n	80067e8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d002      	beq.n	80067b0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 fa5c 	bl	8006c68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685a      	ldr	r2, [r3, #4]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	689a      	ldr	r2, [r3, #8]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f042 0201 	orr.w	r2, r2, #1
 80067de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 fae3 	bl	8006dac <UART_CheckIdleState>
 80067e6:	4603      	mov	r3, r0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3708      	adds	r7, #8
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b08a      	sub	sp, #40	; 0x28
 80067f4:	af02      	add	r7, sp, #8
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	603b      	str	r3, [r7, #0]
 80067fc:	4613      	mov	r3, r2
 80067fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006806:	2b20      	cmp	r3, #32
 8006808:	d17b      	bne.n	8006902 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d002      	beq.n	8006816 <HAL_UART_Transmit+0x26>
 8006810:	88fb      	ldrh	r3, [r7, #6]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d101      	bne.n	800681a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e074      	b.n	8006904 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2221      	movs	r2, #33	; 0x21
 8006826:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800682a:	f7fa fb1f 	bl	8000e6c <HAL_GetTick>
 800682e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	88fa      	ldrh	r2, [r7, #6]
 8006834:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	88fa      	ldrh	r2, [r7, #6]
 800683c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006848:	d108      	bne.n	800685c <HAL_UART_Transmit+0x6c>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d104      	bne.n	800685c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006852:	2300      	movs	r3, #0
 8006854:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	61bb      	str	r3, [r7, #24]
 800685a:	e003      	b.n	8006864 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006860:	2300      	movs	r3, #0
 8006862:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006864:	e030      	b.n	80068c8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	9300      	str	r3, [sp, #0]
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	2200      	movs	r2, #0
 800686e:	2180      	movs	r1, #128	; 0x80
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f000 fb45 	bl	8006f00 <UART_WaitOnFlagUntilTimeout>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d005      	beq.n	8006888 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2220      	movs	r2, #32
 8006880:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e03d      	b.n	8006904 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10b      	bne.n	80068a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	881b      	ldrh	r3, [r3, #0]
 8006892:	461a      	mov	r2, r3
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800689c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	3302      	adds	r3, #2
 80068a2:	61bb      	str	r3, [r7, #24]
 80068a4:	e007      	b.n	80068b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	781a      	ldrb	r2, [r3, #0]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	3301      	adds	r3, #1
 80068b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80068bc:	b29b      	uxth	r3, r3
 80068be:	3b01      	subs	r3, #1
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1c8      	bne.n	8006866 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	9300      	str	r3, [sp, #0]
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	2200      	movs	r2, #0
 80068dc:	2140      	movs	r1, #64	; 0x40
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	f000 fb0e 	bl	8006f00 <UART_WaitOnFlagUntilTimeout>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d005      	beq.n	80068f6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2220      	movs	r2, #32
 80068ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	e006      	b.n	8006904 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2220      	movs	r2, #32
 80068fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80068fe:	2300      	movs	r3, #0
 8006900:	e000      	b.n	8006904 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006902:	2302      	movs	r3, #2
  }
}
 8006904:	4618      	mov	r0, r3
 8006906:	3720      	adds	r7, #32
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800690c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006910:	b094      	sub	sp, #80	; 0x50
 8006912:	af00      	add	r7, sp, #0
 8006914:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006916:	2300      	movs	r3, #0
 8006918:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800691c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	4b83      	ldr	r3, [pc, #524]	; (8006b30 <UART_SetConfig+0x224>)
 8006922:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006926:	689a      	ldr	r2, [r3, #8]
 8006928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	431a      	orrs	r2, r3
 800692e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	431a      	orrs	r2, r3
 8006934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006936:	69db      	ldr	r3, [r3, #28]
 8006938:	4313      	orrs	r3, r2
 800693a:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800693c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	497c      	ldr	r1, [pc, #496]	; (8006b34 <UART_SetConfig+0x228>)
 8006944:	4019      	ands	r1, r3
 8006946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800694c:	430b      	orrs	r3, r1
 800694e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800695a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695c:	68d9      	ldr	r1, [r3, #12]
 800695e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	ea40 0301 	orr.w	r3, r0, r1
 8006966:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800696e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	4b6f      	ldr	r3, [pc, #444]	; (8006b30 <UART_SetConfig+0x224>)
 8006974:	429a      	cmp	r2, r3
 8006976:	d009      	beq.n	800698c <UART_SetConfig+0x80>
 8006978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	4b6e      	ldr	r3, [pc, #440]	; (8006b38 <UART_SetConfig+0x22c>)
 800697e:	429a      	cmp	r2, r3
 8006980:	d004      	beq.n	800698c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006984:	6a1a      	ldr	r2, [r3, #32]
 8006986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006988:	4313      	orrs	r3, r2
 800698a:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800698c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8006996:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800699a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069a0:	430b      	orrs	r3, r1
 80069a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80069a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069aa:	f023 000f 	bic.w	r0, r3, #15
 80069ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80069b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	ea40 0301 	orr.w	r3, r0, r1
 80069ba:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	4b5e      	ldr	r3, [pc, #376]	; (8006b3c <UART_SetConfig+0x230>)
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d102      	bne.n	80069cc <UART_SetConfig+0xc0>
 80069c6:	2301      	movs	r3, #1
 80069c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80069ca:	e032      	b.n	8006a32 <UART_SetConfig+0x126>
 80069cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	4b5b      	ldr	r3, [pc, #364]	; (8006b40 <UART_SetConfig+0x234>)
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d102      	bne.n	80069dc <UART_SetConfig+0xd0>
 80069d6:	2302      	movs	r3, #2
 80069d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80069da:	e02a      	b.n	8006a32 <UART_SetConfig+0x126>
 80069dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	4b58      	ldr	r3, [pc, #352]	; (8006b44 <UART_SetConfig+0x238>)
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d102      	bne.n	80069ec <UART_SetConfig+0xe0>
 80069e6:	2304      	movs	r3, #4
 80069e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80069ea:	e022      	b.n	8006a32 <UART_SetConfig+0x126>
 80069ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	4b55      	ldr	r3, [pc, #340]	; (8006b48 <UART_SetConfig+0x23c>)
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d102      	bne.n	80069fc <UART_SetConfig+0xf0>
 80069f6:	2308      	movs	r3, #8
 80069f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80069fa:	e01a      	b.n	8006a32 <UART_SetConfig+0x126>
 80069fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	4b52      	ldr	r3, [pc, #328]	; (8006b4c <UART_SetConfig+0x240>)
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d102      	bne.n	8006a0c <UART_SetConfig+0x100>
 8006a06:	2310      	movs	r3, #16
 8006a08:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a0a:	e012      	b.n	8006a32 <UART_SetConfig+0x126>
 8006a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	4b4f      	ldr	r3, [pc, #316]	; (8006b50 <UART_SetConfig+0x244>)
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d103      	bne.n	8006a1e <UART_SetConfig+0x112>
 8006a16:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006a1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a1c:	e009      	b.n	8006a32 <UART_SetConfig+0x126>
 8006a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	4b43      	ldr	r3, [pc, #268]	; (8006b30 <UART_SetConfig+0x224>)
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d102      	bne.n	8006a2e <UART_SetConfig+0x122>
 8006a28:	2320      	movs	r3, #32
 8006a2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a2c:	e001      	b.n	8006a32 <UART_SetConfig+0x126>
 8006a2e:	2300      	movs	r3, #0
 8006a30:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	4b3e      	ldr	r3, [pc, #248]	; (8006b30 <UART_SetConfig+0x224>)
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d005      	beq.n	8006a48 <UART_SetConfig+0x13c>
 8006a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	4b3d      	ldr	r3, [pc, #244]	; (8006b38 <UART_SetConfig+0x22c>)
 8006a42:	429a      	cmp	r2, r3
 8006a44:	f040 8088 	bne.w	8006b58 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006a48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	623b      	str	r3, [r7, #32]
 8006a4e:	627a      	str	r2, [r7, #36]	; 0x24
 8006a50:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006a54:	f7fd fbe0 	bl	8004218 <HAL_RCCEx_GetPeriphCLKFreq>
 8006a58:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f000 80eb 	beq.w	8006c38 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a66:	4a3b      	ldr	r2, [pc, #236]	; (8006b54 <UART_SetConfig+0x248>)
 8006a68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a70:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a74:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a78:	685a      	ldr	r2, [r3, #4]
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	005b      	lsls	r3, r3, #1
 8006a7e:	4413      	add	r3, r2
 8006a80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d305      	bcc.n	8006a92 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d903      	bls.n	8006a9a <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006a98:	e048      	b.n	8006b2c <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	61bb      	str	r3, [r7, #24]
 8006aa0:	61fa      	str	r2, [r7, #28]
 8006aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa6:	4a2b      	ldr	r2, [pc, #172]	; (8006b54 <UART_SetConfig+0x248>)
 8006aa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	2200      	movs	r2, #0
 8006ab0:	613b      	str	r3, [r7, #16]
 8006ab2:	617a      	str	r2, [r7, #20]
 8006ab4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006ab8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006abc:	f7f9 fbe8 	bl	8000290 <__aeabi_uldivmod>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	4610      	mov	r0, r2
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	f04f 0200 	mov.w	r2, #0
 8006acc:	f04f 0300 	mov.w	r3, #0
 8006ad0:	020b      	lsls	r3, r1, #8
 8006ad2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006ad6:	0202      	lsls	r2, r0, #8
 8006ad8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ada:	6849      	ldr	r1, [r1, #4]
 8006adc:	0849      	lsrs	r1, r1, #1
 8006ade:	2000      	movs	r0, #0
 8006ae0:	460c      	mov	r4, r1
 8006ae2:	4605      	mov	r5, r0
 8006ae4:	eb12 0804 	adds.w	r8, r2, r4
 8006ae8:	eb43 0905 	adc.w	r9, r3, r5
 8006aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	60bb      	str	r3, [r7, #8]
 8006af4:	60fa      	str	r2, [r7, #12]
 8006af6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006afa:	4640      	mov	r0, r8
 8006afc:	4649      	mov	r1, r9
 8006afe:	f7f9 fbc7 	bl	8000290 <__aeabi_uldivmod>
 8006b02:	4602      	mov	r2, r0
 8006b04:	460b      	mov	r3, r1
 8006b06:	4613      	mov	r3, r2
 8006b08:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b10:	d308      	bcc.n	8006b24 <UART_SetConfig+0x218>
 8006b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b18:	d204      	bcs.n	8006b24 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 8006b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b20:	60da      	str	r2, [r3, #12]
 8006b22:	e003      	b.n	8006b2c <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8006b2a:	e085      	b.n	8006c38 <UART_SetConfig+0x32c>
 8006b2c:	e084      	b.n	8006c38 <UART_SetConfig+0x32c>
 8006b2e:	bf00      	nop
 8006b30:	46002400 	.word	0x46002400
 8006b34:	cfff69f3 	.word	0xcfff69f3
 8006b38:	56002400 	.word	0x56002400
 8006b3c:	40013800 	.word	0x40013800
 8006b40:	40004400 	.word	0x40004400
 8006b44:	40004800 	.word	0x40004800
 8006b48:	40004c00 	.word	0x40004c00
 8006b4c:	40005000 	.word	0x40005000
 8006b50:	40006400 	.word	0x40006400
 8006b54:	080073f4 	.word	0x080073f4
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5a:	69db      	ldr	r3, [r3, #28]
 8006b5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b60:	d13c      	bne.n	8006bdc <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006b62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b64:	2200      	movs	r2, #0
 8006b66:	603b      	str	r3, [r7, #0]
 8006b68:	607a      	str	r2, [r7, #4]
 8006b6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b6e:	f7fd fb53 	bl	8004218 <HAL_RCCEx_GetPeriphCLKFreq>
 8006b72:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d05e      	beq.n	8006c38 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7e:	4a39      	ldr	r2, [pc, #228]	; (8006c64 <UART_SetConfig+0x358>)
 8006b80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b84:	461a      	mov	r2, r3
 8006b86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b88:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b8c:	005a      	lsls	r2, r3, #1
 8006b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	085b      	lsrs	r3, r3, #1
 8006b94:	441a      	add	r2, r3
 8006b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ba2:	2b0f      	cmp	r3, #15
 8006ba4:	d916      	bls.n	8006bd4 <UART_SetConfig+0x2c8>
 8006ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bac:	d212      	bcs.n	8006bd4 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	f023 030f 	bic.w	r3, r3, #15
 8006bb6:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bba:	085b      	lsrs	r3, r3, #1
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	f003 0307 	and.w	r3, r3, #7
 8006bc2:	b29a      	uxth	r2, r3
 8006bc4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8006bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8006bd0:	60da      	str	r2, [r3, #12]
 8006bd2:	e031      	b.n	8006c38 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006bda:	e02d      	b.n	8006c38 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006bdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bde:	2200      	movs	r2, #0
 8006be0:	469a      	mov	sl, r3
 8006be2:	4693      	mov	fp, r2
 8006be4:	4650      	mov	r0, sl
 8006be6:	4659      	mov	r1, fp
 8006be8:	f7fd fb16 	bl	8004218 <HAL_RCCEx_GetPeriphCLKFreq>
 8006bec:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8006bee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d021      	beq.n	8006c38 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf8:	4a1a      	ldr	r2, [pc, #104]	; (8006c64 <UART_SetConfig+0x358>)
 8006bfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bfe:	461a      	mov	r2, r3
 8006c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c02:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	085b      	lsrs	r3, r3, #1
 8006c0c:	441a      	add	r2, r3
 8006c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c16:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c1a:	2b0f      	cmp	r3, #15
 8006c1c:	d909      	bls.n	8006c32 <UART_SetConfig+0x326>
 8006c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c24:	d205      	bcs.n	8006c32 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c28:	b29a      	uxth	r2, r3
 8006c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	60da      	str	r2, [r3, #12]
 8006c30:	e002      	b.n	8006c38 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c42:	2201      	movs	r2, #1
 8006c44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c50:	2200      	movs	r2, #0
 8006c52:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006c54:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3750      	adds	r7, #80	; 0x50
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c62:	bf00      	nop
 8006c64:	080073f4 	.word	0x080073f4

08006c68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c74:	f003 0301 	and.w	r3, r3, #1
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00a      	beq.n	8006c92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c96:	f003 0302 	and.w	r3, r3, #2
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00a      	beq.n	8006cb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	430a      	orrs	r2, r1
 8006cb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb8:	f003 0304 	and.w	r3, r3, #4
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00a      	beq.n	8006cd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	430a      	orrs	r2, r1
 8006cd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cda:	f003 0308 	and.w	r3, r3, #8
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00a      	beq.n	8006cf8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cfc:	f003 0310 	and.w	r3, r3, #16
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00a      	beq.n	8006d1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	430a      	orrs	r2, r1
 8006d18:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d1e:	f003 0320 	and.w	r3, r3, #32
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00a      	beq.n	8006d3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d01a      	beq.n	8006d7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d66:	d10a      	bne.n	8006d7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	430a      	orrs	r2, r1
 8006d7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00a      	beq.n	8006da0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	430a      	orrs	r2, r1
 8006d9e:	605a      	str	r2, [r3, #4]
  }
}
 8006da0:	bf00      	nop
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b098      	sub	sp, #96	; 0x60
 8006db0:	af02      	add	r7, sp, #8
 8006db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006dbc:	f7fa f856 	bl	8000e6c <HAL_GetTick>
 8006dc0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0308 	and.w	r3, r3, #8
 8006dcc:	2b08      	cmp	r3, #8
 8006dce:	d12f      	bne.n	8006e30 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f88e 	bl	8006f00 <UART_WaitOnFlagUntilTimeout>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d022      	beq.n	8006e30 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df2:	e853 3f00 	ldrex	r3, [r3]
 8006df6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dfe:	653b      	str	r3, [r7, #80]	; 0x50
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	461a      	mov	r2, r3
 8006e06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e08:	647b      	str	r3, [r7, #68]	; 0x44
 8006e0a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e10:	e841 2300 	strex	r3, r2, [r1]
 8006e14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1e6      	bne.n	8006dea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2220      	movs	r2, #32
 8006e20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e063      	b.n	8006ef8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0304 	and.w	r3, r3, #4
 8006e3a:	2b04      	cmp	r3, #4
 8006e3c:	d149      	bne.n	8006ed2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e42:	9300      	str	r3, [sp, #0]
 8006e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e46:	2200      	movs	r2, #0
 8006e48:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 f857 	bl	8006f00 <UART_WaitOnFlagUntilTimeout>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d03c      	beq.n	8006ed2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e60:	e853 3f00 	ldrex	r3, [r3]
 8006e64:	623b      	str	r3, [r7, #32]
   return(result);
 8006e66:	6a3b      	ldr	r3, [r7, #32]
 8006e68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	461a      	mov	r2, r3
 8006e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e76:	633b      	str	r3, [r7, #48]	; 0x30
 8006e78:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e7e:	e841 2300 	strex	r3, r2, [r1]
 8006e82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1e6      	bne.n	8006e58 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	3308      	adds	r3, #8
 8006e90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	e853 3f00 	ldrex	r3, [r3]
 8006e98:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f023 0301 	bic.w	r3, r3, #1
 8006ea0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	3308      	adds	r3, #8
 8006ea8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006eaa:	61fa      	str	r2, [r7, #28]
 8006eac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eae:	69b9      	ldr	r1, [r7, #24]
 8006eb0:	69fa      	ldr	r2, [r7, #28]
 8006eb2:	e841 2300 	strex	r3, r2, [r1]
 8006eb6:	617b      	str	r3, [r7, #20]
   return(result);
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1e5      	bne.n	8006e8a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2220      	movs	r2, #32
 8006ec2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e012      	b.n	8006ef8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2220      	movs	r2, #32
 8006ed6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2220      	movs	r2, #32
 8006ede:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3758      	adds	r7, #88	; 0x58
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	603b      	str	r3, [r7, #0]
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f10:	e049      	b.n	8006fa6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f18:	d045      	beq.n	8006fa6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f1a:	f7f9 ffa7 	bl	8000e6c <HAL_GetTick>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	69ba      	ldr	r2, [r7, #24]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d302      	bcc.n	8006f30 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d101      	bne.n	8006f34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	e048      	b.n	8006fc6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0304 	and.w	r3, r3, #4
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d031      	beq.n	8006fa6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	69db      	ldr	r3, [r3, #28]
 8006f48:	f003 0308 	and.w	r3, r3, #8
 8006f4c:	2b08      	cmp	r3, #8
 8006f4e:	d110      	bne.n	8006f72 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2208      	movs	r2, #8
 8006f56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f000 f838 	bl	8006fce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2208      	movs	r2, #8
 8006f62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e029      	b.n	8006fc6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	69db      	ldr	r3, [r3, #28]
 8006f78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f80:	d111      	bne.n	8006fa6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f000 f81e 	bl	8006fce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2220      	movs	r2, #32
 8006f96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e00f      	b.n	8006fc6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	69da      	ldr	r2, [r3, #28]
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	4013      	ands	r3, r2
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	bf0c      	ite	eq
 8006fb6:	2301      	moveq	r3, #1
 8006fb8:	2300      	movne	r3, #0
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	79fb      	ldrb	r3, [r7, #7]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d0a6      	beq.n	8006f12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fce:	b480      	push	{r7}
 8006fd0:	b095      	sub	sp, #84	; 0x54
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fde:	e853 3f00 	ldrex	r3, [r3]
 8006fe2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ff4:	643b      	str	r3, [r7, #64]	; 0x40
 8006ff6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ffa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ffc:	e841 2300 	strex	r3, r2, [r1]
 8007000:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007004:	2b00      	cmp	r3, #0
 8007006:	d1e6      	bne.n	8006fd6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	3308      	adds	r3, #8
 800700e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007010:	6a3b      	ldr	r3, [r7, #32]
 8007012:	e853 3f00 	ldrex	r3, [r3]
 8007016:	61fb      	str	r3, [r7, #28]
   return(result);
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800701e:	f023 0301 	bic.w	r3, r3, #1
 8007022:	64bb      	str	r3, [r7, #72]	; 0x48
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	3308      	adds	r3, #8
 800702a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800702c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800702e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007030:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007034:	e841 2300 	strex	r3, r2, [r1]
 8007038:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800703a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703c:	2b00      	cmp	r3, #0
 800703e:	d1e3      	bne.n	8007008 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007044:	2b01      	cmp	r3, #1
 8007046:	d118      	bne.n	800707a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	e853 3f00 	ldrex	r3, [r3]
 8007054:	60bb      	str	r3, [r7, #8]
   return(result);
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	f023 0310 	bic.w	r3, r3, #16
 800705c:	647b      	str	r3, [r7, #68]	; 0x44
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	461a      	mov	r2, r3
 8007064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007066:	61bb      	str	r3, [r7, #24]
 8007068:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706a:	6979      	ldr	r1, [r7, #20]
 800706c:	69ba      	ldr	r2, [r7, #24]
 800706e:	e841 2300 	strex	r3, r2, [r1]
 8007072:	613b      	str	r3, [r7, #16]
   return(result);
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1e6      	bne.n	8007048 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2220      	movs	r2, #32
 800707e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800708e:	bf00      	nop
 8007090:	3754      	adds	r7, #84	; 0x54
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr

0800709a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800709a:	b480      	push	{r7}
 800709c:	b085      	sub	sp, #20
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d101      	bne.n	80070b0 <HAL_UARTEx_DisableFifoMode+0x16>
 80070ac:	2302      	movs	r3, #2
 80070ae:	e027      	b.n	8007100 <HAL_UARTEx_DisableFifoMode+0x66>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2224      	movs	r2, #36	; 0x24
 80070bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f022 0201 	bic.w	r2, r2, #1
 80070d6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80070de:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2220      	movs	r2, #32
 80070f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	3714      	adds	r7, #20
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800711c:	2b01      	cmp	r3, #1
 800711e:	d101      	bne.n	8007124 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007120:	2302      	movs	r3, #2
 8007122:	e02d      	b.n	8007180 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2224      	movs	r2, #36	; 0x24
 8007130:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f022 0201 	bic.w	r2, r2, #1
 800714a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	683a      	ldr	r2, [r7, #0]
 800715c:	430a      	orrs	r2, r1
 800715e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 f84f 	bl	8007204 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2220      	movs	r2, #32
 8007172:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007198:	2b01      	cmp	r3, #1
 800719a:	d101      	bne.n	80071a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800719c:	2302      	movs	r3, #2
 800719e:	e02d      	b.n	80071fc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2224      	movs	r2, #36	; 0x24
 80071ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f022 0201 	bic.w	r2, r2, #1
 80071c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	683a      	ldr	r2, [r7, #0]
 80071d8:	430a      	orrs	r2, r1
 80071da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 f811 	bl	8007204 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2220      	movs	r2, #32
 80071ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007210:	2b00      	cmp	r3, #0
 8007212:	d108      	bne.n	8007226 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007224:	e031      	b.n	800728a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007226:	2308      	movs	r3, #8
 8007228:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800722a:	2308      	movs	r3, #8
 800722c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	0e5b      	lsrs	r3, r3, #25
 8007236:	b2db      	uxtb	r3, r3
 8007238:	f003 0307 	and.w	r3, r3, #7
 800723c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	0f5b      	lsrs	r3, r3, #29
 8007246:	b2db      	uxtb	r3, r3
 8007248:	f003 0307 	and.w	r3, r3, #7
 800724c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800724e:	7bbb      	ldrb	r3, [r7, #14]
 8007250:	7b3a      	ldrb	r2, [r7, #12]
 8007252:	4911      	ldr	r1, [pc, #68]	; (8007298 <UARTEx_SetNbDataToProcess+0x94>)
 8007254:	5c8a      	ldrb	r2, [r1, r2]
 8007256:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800725a:	7b3a      	ldrb	r2, [r7, #12]
 800725c:	490f      	ldr	r1, [pc, #60]	; (800729c <UARTEx_SetNbDataToProcess+0x98>)
 800725e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007260:	fb93 f3f2 	sdiv	r3, r3, r2
 8007264:	b29a      	uxth	r2, r3
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800726c:	7bfb      	ldrb	r3, [r7, #15]
 800726e:	7b7a      	ldrb	r2, [r7, #13]
 8007270:	4909      	ldr	r1, [pc, #36]	; (8007298 <UARTEx_SetNbDataToProcess+0x94>)
 8007272:	5c8a      	ldrb	r2, [r1, r2]
 8007274:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007278:	7b7a      	ldrb	r2, [r7, #13]
 800727a:	4908      	ldr	r1, [pc, #32]	; (800729c <UARTEx_SetNbDataToProcess+0x98>)
 800727c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800727e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007282:	b29a      	uxth	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800728a:	bf00      	nop
 800728c:	3714      	adds	r7, #20
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop
 8007298:	0800740c 	.word	0x0800740c
 800729c:	08007414 	.word	0x08007414

080072a0 <memset>:
 80072a0:	4402      	add	r2, r0
 80072a2:	4603      	mov	r3, r0
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d100      	bne.n	80072aa <memset+0xa>
 80072a8:	4770      	bx	lr
 80072aa:	f803 1b01 	strb.w	r1, [r3], #1
 80072ae:	e7f9      	b.n	80072a4 <memset+0x4>

080072b0 <__libc_init_array>:
 80072b0:	b570      	push	{r4, r5, r6, lr}
 80072b2:	4d0d      	ldr	r5, [pc, #52]	; (80072e8 <__libc_init_array+0x38>)
 80072b4:	2600      	movs	r6, #0
 80072b6:	4c0d      	ldr	r4, [pc, #52]	; (80072ec <__libc_init_array+0x3c>)
 80072b8:	1b64      	subs	r4, r4, r5
 80072ba:	10a4      	asrs	r4, r4, #2
 80072bc:	42a6      	cmp	r6, r4
 80072be:	d109      	bne.n	80072d4 <__libc_init_array+0x24>
 80072c0:	4d0b      	ldr	r5, [pc, #44]	; (80072f0 <__libc_init_array+0x40>)
 80072c2:	2600      	movs	r6, #0
 80072c4:	4c0b      	ldr	r4, [pc, #44]	; (80072f4 <__libc_init_array+0x44>)
 80072c6:	f000 f817 	bl	80072f8 <_init>
 80072ca:	1b64      	subs	r4, r4, r5
 80072cc:	10a4      	asrs	r4, r4, #2
 80072ce:	42a6      	cmp	r6, r4
 80072d0:	d105      	bne.n	80072de <__libc_init_array+0x2e>
 80072d2:	bd70      	pop	{r4, r5, r6, pc}
 80072d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80072d8:	3601      	adds	r6, #1
 80072da:	4798      	blx	r3
 80072dc:	e7ee      	b.n	80072bc <__libc_init_array+0xc>
 80072de:	f855 3b04 	ldr.w	r3, [r5], #4
 80072e2:	3601      	adds	r6, #1
 80072e4:	4798      	blx	r3
 80072e6:	e7f2      	b.n	80072ce <__libc_init_array+0x1e>
 80072e8:	08007424 	.word	0x08007424
 80072ec:	08007424 	.word	0x08007424
 80072f0:	08007424 	.word	0x08007424
 80072f4:	08007428 	.word	0x08007428

080072f8 <_init>:
 80072f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072fa:	bf00      	nop
 80072fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072fe:	bc08      	pop	{r3}
 8007300:	469e      	mov	lr, r3
 8007302:	4770      	bx	lr

08007304 <_fini>:
 8007304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007306:	bf00      	nop
 8007308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800730a:	bc08      	pop	{r3}
 800730c:	469e      	mov	lr, r3
 800730e:	4770      	bx	lr
