
STM32_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e20  08000250  08000250  00010250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08004070  08004070  00014070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004150  08004150  00014150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004154  08004154  00014154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000009  20000000  08004158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000b0  2000000c  08004161  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  200000bc  08004161  000200bc  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  00020009  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002003f  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000cea5  00000000  00000000  00020082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000020ec  00000000  00000000  0002cf27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000b98  00000000  00000000  0002f018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000089a  00000000  00000000  0002fbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034a3b  00000000  00000000  0003044a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000f7f8  00000000  00000000  00064e85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00146675  00000000  00000000  0007467d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00002d78  00000000  00000000  001bacf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000083  00000000  00000000  001bda6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	; (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	2000000c 	.word	0x2000000c
 800026c:	00000000 	.word	0x00000000
 8000270:	08004058 	.word	0x08004058

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	; (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000010 	.word	0x20000010
 800028c:	08004058 	.word	0x08004058

08000290 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b08c      	sub	sp, #48	; 0x30
 8000294:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000296:	f107 031c 	add.w	r3, r7, #28
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]
 80002a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002a6:	4b60      	ldr	r3, [pc, #384]	; (8000428 <MX_GPIO_Init+0x198>)
 80002a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80002ac:	4a5e      	ldr	r2, [pc, #376]	; (8000428 <MX_GPIO_Init+0x198>)
 80002ae:	f043 0301 	orr.w	r3, r3, #1
 80002b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80002b6:	4b5c      	ldr	r3, [pc, #368]	; (8000428 <MX_GPIO_Init+0x198>)
 80002b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80002bc:	f003 0301 	and.w	r3, r3, #1
 80002c0:	61bb      	str	r3, [r7, #24]
 80002c2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002c4:	4b58      	ldr	r3, [pc, #352]	; (8000428 <MX_GPIO_Init+0x198>)
 80002c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80002ca:	4a57      	ldr	r2, [pc, #348]	; (8000428 <MX_GPIO_Init+0x198>)
 80002cc:	f043 0320 	orr.w	r3, r3, #32
 80002d0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80002d4:	4b54      	ldr	r3, [pc, #336]	; (8000428 <MX_GPIO_Init+0x198>)
 80002d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80002da:	f003 0320 	and.w	r3, r3, #32
 80002de:	617b      	str	r3, [r7, #20]
 80002e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002e2:	4b51      	ldr	r3, [pc, #324]	; (8000428 <MX_GPIO_Init+0x198>)
 80002e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80002e8:	4a4f      	ldr	r2, [pc, #316]	; (8000428 <MX_GPIO_Init+0x198>)
 80002ea:	f043 0308 	orr.w	r3, r3, #8
 80002ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80002f2:	4b4d      	ldr	r3, [pc, #308]	; (8000428 <MX_GPIO_Init+0x198>)
 80002f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80002f8:	f003 0308 	and.w	r3, r3, #8
 80002fc:	613b      	str	r3, [r7, #16]
 80002fe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000300:	4b49      	ldr	r3, [pc, #292]	; (8000428 <MX_GPIO_Init+0x198>)
 8000302:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000306:	4a48      	ldr	r2, [pc, #288]	; (8000428 <MX_GPIO_Init+0x198>)
 8000308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800030c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000310:	4b45      	ldr	r3, [pc, #276]	; (8000428 <MX_GPIO_Init+0x198>)
 8000312:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800031a:	60fb      	str	r3, [r7, #12]
 800031c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800031e:	4b42      	ldr	r3, [pc, #264]	; (8000428 <MX_GPIO_Init+0x198>)
 8000320:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000324:	4a40      	ldr	r2, [pc, #256]	; (8000428 <MX_GPIO_Init+0x198>)
 8000326:	f043 0304 	orr.w	r3, r3, #4
 800032a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800032e:	4b3e      	ldr	r3, [pc, #248]	; (8000428 <MX_GPIO_Init+0x198>)
 8000330:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000334:	f003 0304 	and.w	r3, r3, #4
 8000338:	60bb      	str	r3, [r7, #8]
 800033a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800033c:	4b3a      	ldr	r3, [pc, #232]	; (8000428 <MX_GPIO_Init+0x198>)
 800033e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000342:	4a39      	ldr	r2, [pc, #228]	; (8000428 <MX_GPIO_Init+0x198>)
 8000344:	f043 0302 	orr.w	r3, r3, #2
 8000348:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800034c:	4b36      	ldr	r3, [pc, #216]	; (8000428 <MX_GPIO_Init+0x198>)
 800034e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000352:	f003 0302 	and.w	r3, r3, #2
 8000356:	607b      	str	r3, [r7, #4]
 8000358:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000360:	4832      	ldr	r0, [pc, #200]	; (800042c <MX_GPIO_Init+0x19c>)
 8000362:	f000 fe49 	bl	8000ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000366:	2200      	movs	r2, #0
 8000368:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800036c:	4830      	ldr	r0, [pc, #192]	; (8000430 <MX_GPIO_Init+0x1a0>)
 800036e:	f000 fe43 	bl	8000ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000372:	2201      	movs	r2, #1
 8000374:	2104      	movs	r1, #4
 8000376:	482f      	ldr	r0, [pc, #188]	; (8000434 <MX_GPIO_Init+0x1a4>)
 8000378:	f000 fe3e 	bl	8000ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800037c:	2201      	movs	r2, #1
 800037e:	2180      	movs	r1, #128	; 0x80
 8000380:	482d      	ldr	r0, [pc, #180]	; (8000438 <MX_GPIO_Init+0x1a8>)
 8000382:	f000 fe39 	bl	8000ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8000386:	2200      	movs	r2, #0
 8000388:	2180      	movs	r1, #128	; 0x80
 800038a:	482c      	ldr	r0, [pc, #176]	; (800043c <MX_GPIO_Init+0x1ac>)
 800038c:	f000 fe34 	bl	8000ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8000390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000396:	2301      	movs	r3, #1
 8000398:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039a:	2300      	movs	r3, #0
 800039c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800039e:	2300      	movs	r3, #0
 80003a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 80003a2:	f107 031c 	add.w	r3, r7, #28
 80003a6:	4619      	mov	r1, r3
 80003a8:	4820      	ldr	r0, [pc, #128]	; (800042c <MX_GPIO_Init+0x19c>)
 80003aa:	f000 fc4d 	bl	8000c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 80003ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b4:	2301      	movs	r3, #1
 80003b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b8:	2300      	movs	r3, #0
 80003ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003bc:	2300      	movs	r3, #0
 80003be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 80003c0:	f107 031c 	add.w	r3, r7, #28
 80003c4:	4619      	mov	r1, r3
 80003c6:	481a      	ldr	r0, [pc, #104]	; (8000430 <MX_GPIO_Init+0x1a0>)
 80003c8:	f000 fc3e 	bl	8000c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80003cc:	2304      	movs	r3, #4
 80003ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d0:	2301      	movs	r3, #1
 80003d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d4:	2300      	movs	r3, #0
 80003d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d8:	2300      	movs	r3, #0
 80003da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80003dc:	f107 031c 	add.w	r3, r7, #28
 80003e0:	4619      	mov	r1, r3
 80003e2:	4814      	ldr	r0, [pc, #80]	; (8000434 <MX_GPIO_Init+0x1a4>)
 80003e4:	f000 fc30 	bl	8000c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80003e8:	2380      	movs	r3, #128	; 0x80
 80003ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ec:	2301      	movs	r3, #1
 80003ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f0:	2300      	movs	r3, #0
 80003f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f4:	2300      	movs	r3, #0
 80003f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80003f8:	f107 031c 	add.w	r3, r7, #28
 80003fc:	4619      	mov	r1, r3
 80003fe:	480e      	ldr	r0, [pc, #56]	; (8000438 <MX_GPIO_Init+0x1a8>)
 8000400:	f000 fc22 	bl	8000c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8000404:	2380      	movs	r3, #128	; 0x80
 8000406:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000408:	2301      	movs	r3, #1
 800040a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040c:	2300      	movs	r3, #0
 800040e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000410:	2300      	movs	r3, #0
 8000412:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000414:	f107 031c 	add.w	r3, r7, #28
 8000418:	4619      	mov	r1, r3
 800041a:	4808      	ldr	r0, [pc, #32]	; (800043c <MX_GPIO_Init+0x1ac>)
 800041c:	f000 fc14 	bl	8000c48 <HAL_GPIO_Init>

}
 8000420:	bf00      	nop
 8000422:	3730      	adds	r7, #48	; 0x30
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	46020c00 	.word	0x46020c00
 800042c:	42021400 	.word	0x42021400
 8000430:	42020c00 	.word	0x42020c00
 8000434:	42021800 	.word	0x42021800
 8000438:	42020800 	.word	0x42020800
 800043c:	42020400 	.word	0x42020400

08000440 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000444:	2000      	movs	r0, #0
 8000446:	f000 fdef 	bl	8001028 <HAL_ICACHE_ConfigAssociativityMode>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000450:	f000 f8eb 	bl	800062a <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000454:	f000 fe08 	bl	8001068 <HAL_ICACHE_Enable>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800045e:	f000 f8e4 	bl	800062a <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000462:	bf00      	nop
 8000464:	bd80      	pop	{r7, pc}
	...

08000468 <LCD_Init>:

/* Includes ------------------------------------------------------------------*/
#include "main.h"

void LCD_Init(SPI_HandleTypeDef * spi_handler)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b086      	sub	sp, #24
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  //Start unlocking the EEProm
  uint8_t initFrequence[] = {0x38u, 0x38u, 0x38u, 0x38u, 0x08u, 0x01u, 0x06u, 0x0Fu};
 8000470:	4a15      	ldr	r2, [pc, #84]	; (80004c8 <LCD_Init+0x60>)
 8000472:	f107 030c 	add.w	r3, r7, #12
 8000476:	e892 0003 	ldmia.w	r2, {r0, r1}
 800047a:	e883 0003 	stmia.w	r3, {r0, r1}

  for (uint8_t i; i < sizeof(initFrequence); i++)
 800047e:	e01a      	b.n	80004b6 <LCD_Init+0x4e>
  {
    HAL_GPIO_WritePin(GPIOF, LCD_CS_Pin, GPIO_PIN_RESET);
 8000480:	2200      	movs	r2, #0
 8000482:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000486:	4811      	ldr	r0, [pc, #68]	; (80004cc <LCD_Init+0x64>)
 8000488:	f000 fdb6 	bl	8000ff8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(spi_handler, &initFrequence[i], 1, 10);
 800048c:	7dfb      	ldrb	r3, [r7, #23]
 800048e:	f107 020c 	add.w	r2, r7, #12
 8000492:	18d1      	adds	r1, r2, r3
 8000494:	230a      	movs	r3, #10
 8000496:	2201      	movs	r2, #1
 8000498:	6878      	ldr	r0, [r7, #4]
 800049a:	f003 fa69 	bl	8003970 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOF, LCD_CS_Pin, GPIO_PIN_SET);
 800049e:	2201      	movs	r2, #1
 80004a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004a4:	4809      	ldr	r0, [pc, #36]	; (80004cc <LCD_Init+0x64>)
 80004a6:	f000 fda7 	bl	8000ff8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80004aa:	200a      	movs	r0, #10
 80004ac:	f000 fac4 	bl	8000a38 <HAL_Delay>
  for (uint8_t i; i < sizeof(initFrequence); i++)
 80004b0:	7dfb      	ldrb	r3, [r7, #23]
 80004b2:	3301      	adds	r3, #1
 80004b4:	75fb      	strb	r3, [r7, #23]
 80004b6:	7dfb      	ldrb	r3, [r7, #23]
 80004b8:	2b07      	cmp	r3, #7
 80004ba:	d9e1      	bls.n	8000480 <LCD_Init+0x18>
  }
}
 80004bc:	bf00      	nop
 80004be:	bf00      	nop
 80004c0:	3718      	adds	r7, #24
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	08004070 	.word	0x08004070
 80004cc:	42021400 	.word	0x42021400

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t aTxBuffer[] = "jan ";
 80004d6:	4a23      	ldr	r2, [pc, #140]	; (8000564 <main+0x94>)
 80004d8:	463b      	mov	r3, r7
 80004da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004de:	6018      	str	r0, [r3, #0]
 80004e0:	3304      	adds	r3, #4
 80004e2:	7019      	strb	r1, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 fa24 	bl	8000930 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f846 	bl	8000578 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80004ec:	f000 f88d 	bl	800060a <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f7ff fece 	bl	8000290 <MX_GPIO_Init>
  MX_ICACHE_Init();
 80004f4:	f7ff ffa4 	bl	8000440 <MX_ICACHE_Init>
  MX_SPI1_Init();
 80004f8:	f000 f89c 	bl	8000634 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init(&hspi1);
 80004fc:	481a      	ldr	r0, [pc, #104]	; (8000568 <main+0x98>)
 80004fe:	f7ff ffb3 	bl	8000468 <LCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8000502:	2200      	movs	r2, #0
 8000504:	2180      	movs	r1, #128	; 0x80
 8000506:	4819      	ldr	r0, [pc, #100]	; (800056c <main+0x9c>)
 8000508:	f000 fd76 	bl	8000ff8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LCD_RS_Pin, GPIO_PIN_SET);
 800050c:	2201      	movs	r2, #1
 800050e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000512:	4817      	ldr	r0, [pc, #92]	; (8000570 <main+0xa0>)
 8000514:	f000 fd70 	bl	8000ff8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, LCD_CS_Pin, GPIO_PIN_RESET);
 8000518:	2200      	movs	r2, #0
 800051a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800051e:	4815      	ldr	r0, [pc, #84]	; (8000574 <main+0xa4>)
 8000520:	f000 fd6a 	bl	8000ff8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)aTxBuffer, BUFFERSIZE, 500);
 8000524:	4639      	mov	r1, r7
 8000526:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800052a:	2204      	movs	r2, #4
 800052c:	480e      	ldr	r0, [pc, #56]	; (8000568 <main+0x98>)
 800052e:	f003 fa1f 	bl	8003970 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOF, LCD_CS_Pin, GPIO_PIN_SET);
 8000532:	2201      	movs	r2, #1
 8000534:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000538:	480e      	ldr	r0, [pc, #56]	; (8000574 <main+0xa4>)
 800053a:	f000 fd5d 	bl	8000ff8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LCD_RS_Pin, GPIO_PIN_RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000544:	480a      	ldr	r0, [pc, #40]	; (8000570 <main+0xa0>)
 8000546:	f000 fd57 	bl	8000ff8 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800054a:	20c8      	movs	r0, #200	; 0xc8
 800054c:	f000 fa74 	bl	8000a38 <HAL_Delay>
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 8000550:	2201      	movs	r2, #1
 8000552:	2180      	movs	r1, #128	; 0x80
 8000554:	4805      	ldr	r0, [pc, #20]	; (800056c <main+0x9c>)
 8000556:	f000 fd4f 	bl	8000ff8 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 800055a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800055e:	f000 fa6b 	bl	8000a38 <HAL_Delay>
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8000562:	e7ce      	b.n	8000502 <main+0x32>
 8000564:	08004078 	.word	0x08004078
 8000568:	20000028 	.word	0x20000028
 800056c:	42020400 	.word	0x42020400
 8000570:	42020c00 	.word	0x42020c00
 8000574:	42021400 	.word	0x42021400

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b09e      	sub	sp, #120	; 0x78
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0318 	add.w	r3, r7, #24
 8000582:	2260      	movs	r2, #96	; 0x60
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f003 fd3a 	bl	8004000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	463b      	mov	r3, r7
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]
 800059a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE3) != HAL_OK)
 800059c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80005a0:	f000 fd72 	bl	8001088 <HAL_PWREx_ControlVoltageScaling>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x36>
  {
    Error_Handler();
 80005aa:	f000 f83e 	bl	800062a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005ae:	2310      	movs	r3, #16
 80005b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005b2:	2301      	movs	r3, #1
 80005b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80005b6:	2310      	movs	r3, #16
 80005b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005be:	2300      	movs	r3, #0
 80005c0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 0318 	add.w	r3, r7, #24
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 fe5a 	bl	8001280 <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80005d2:	f000 f82a 	bl	800062a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	231f      	movs	r3, #31
 80005d8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005da:	2300      	movs	r3, #0
 80005dc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e6:	2340      	movs	r3, #64	; 0x40
 80005e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005ee:	463b      	mov	r3, r7
 80005f0:	2101      	movs	r1, #1
 80005f2:	4618      	mov	r0, r3
 80005f4:	f001 fd20 	bl	8002038 <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80005fe:	f000 f814 	bl	800062a <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	3778      	adds	r7, #120	; 0x78
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800060a:	b580      	push	{r7, lr}
 800060c:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 800060e:	f000 fe17 	bl	8001240 <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000612:	f000 fe25 	bl	8001260 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000616:	2002      	movs	r0, #2
 8000618:	f000 fdc2 	bl	80011a0 <HAL_PWREx_ConfigSupply>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemPower_Config+0x1c>
  {
    Error_Handler();
 8000622:	f000 f802 	bl	800062a <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}

0800062a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800062e:	b672      	cpsid	i
}
 8000630:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000632:	e7fe      	b.n	8000632 <Error_Handler+0x8>

08000634 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000644:	4b30      	ldr	r3, [pc, #192]	; (8000708 <MX_SPI1_Init+0xd4>)
 8000646:	4a31      	ldr	r2, [pc, #196]	; (800070c <MX_SPI1_Init+0xd8>)
 8000648:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800064a:	4b2f      	ldr	r3, [pc, #188]	; (8000708 <MX_SPI1_Init+0xd4>)
 800064c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000650:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000652:	4b2d      	ldr	r3, [pc, #180]	; (8000708 <MX_SPI1_Init+0xd4>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000658:	4b2b      	ldr	r3, [pc, #172]	; (8000708 <MX_SPI1_Init+0xd4>)
 800065a:	2207      	movs	r2, #7
 800065c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800065e:	4b2a      	ldr	r3, [pc, #168]	; (8000708 <MX_SPI1_Init+0xd4>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000664:	4b28      	ldr	r3, [pc, #160]	; (8000708 <MX_SPI1_Init+0xd4>)
 8000666:	2200      	movs	r2, #0
 8000668:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800066a:	4b27      	ldr	r3, [pc, #156]	; (8000708 <MX_SPI1_Init+0xd4>)
 800066c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000670:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000672:	4b25      	ldr	r3, [pc, #148]	; (8000708 <MX_SPI1_Init+0xd4>)
 8000674:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8000678:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800067a:	4b23      	ldr	r3, [pc, #140]	; (8000708 <MX_SPI1_Init+0xd4>)
 800067c:	2200      	movs	r2, #0
 800067e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000680:	4b21      	ldr	r3, [pc, #132]	; (8000708 <MX_SPI1_Init+0xd4>)
 8000682:	2200      	movs	r2, #0
 8000684:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000686:	4b20      	ldr	r3, [pc, #128]	; (8000708 <MX_SPI1_Init+0xd4>)
 8000688:	2200      	movs	r2, #0
 800068a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800068c:	4b1e      	ldr	r3, [pc, #120]	; (8000708 <MX_SPI1_Init+0xd4>)
 800068e:	2207      	movs	r2, #7
 8000690:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000692:	4b1d      	ldr	r3, [pc, #116]	; (8000708 <MX_SPI1_Init+0xd4>)
 8000694:	2200      	movs	r2, #0
 8000696:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000698:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <MX_SPI1_Init+0xd4>)
 800069a:	2200      	movs	r2, #0
 800069c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800069e:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <MX_SPI1_Init+0xd4>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80006a4:	4b18      	ldr	r3, [pc, #96]	; (8000708 <MX_SPI1_Init+0xd4>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80006aa:	4b17      	ldr	r3, [pc, #92]	; (8000708 <MX_SPI1_Init+0xd4>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80006b0:	4b15      	ldr	r3, [pc, #84]	; (8000708 <MX_SPI1_Init+0xd4>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80006b6:	4b14      	ldr	r3, [pc, #80]	; (8000708 <MX_SPI1_Init+0xd4>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <MX_SPI1_Init+0xd4>)
 80006be:	2200      	movs	r2, #0
 80006c0:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_SPI1_Init+0xd4>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_SPI1_Init+0xd4>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006ce:	480e      	ldr	r0, [pc, #56]	; (8000708 <MX_SPI1_Init+0xd4>)
 80006d0:	f003 f838 	bl	8003744 <HAL_SPI_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 80006da:	f7ff ffa6 	bl	800062a <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80006de:	2300      	movs	r3, #0
 80006e0:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 80006e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80006e6:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	4619      	mov	r1, r3
 80006f0:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_SPI1_Init+0xd4>)
 80006f2:	f003 fc44 	bl	8003f7e <HAL_SPIEx_SetConfigAutonomousMode>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 80006fc:	f7ff ff95 	bl	800062a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000028 	.word	0x20000028
 800070c:	40013000 	.word	0x40013000

08000710 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b0c0      	sub	sp, #256	; 0x100
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000718:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000728:	f107 0310 	add.w	r3, r7, #16
 800072c:	22d8      	movs	r2, #216	; 0xd8
 800072e:	2100      	movs	r1, #0
 8000730:	4618      	mov	r0, r3
 8000732:	f003 fc65 	bl	8004000 <memset>
  if(spiHandle->Instance==SPI1)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a27      	ldr	r2, [pc, #156]	; (80007d8 <HAL_SPI_MspInit+0xc8>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d145      	bne.n	80007cc <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000740:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000744:	f04f 0300 	mov.w	r3, #0
 8000748:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PCLK2;
 800074c:	2300      	movs	r3, #0
 800074e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000752:	f107 0310 	add.w	r3, r7, #16
 8000756:	4618      	mov	r0, r3
 8000758:	f002 f808 	bl	800276c <HAL_RCCEx_PeriphCLKConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8000762:	f7ff ff62 	bl	800062a <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000766:	4b1d      	ldr	r3, [pc, #116]	; (80007dc <HAL_SPI_MspInit+0xcc>)
 8000768:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800076c:	4a1b      	ldr	r2, [pc, #108]	; (80007dc <HAL_SPI_MspInit+0xcc>)
 800076e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000772:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000776:	4b19      	ldr	r3, [pc, #100]	; (80007dc <HAL_SPI_MspInit+0xcc>)
 8000778:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800077c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000784:	4b15      	ldr	r3, [pc, #84]	; (80007dc <HAL_SPI_MspInit+0xcc>)
 8000786:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800078a:	4a14      	ldr	r2, [pc, #80]	; (80007dc <HAL_SPI_MspInit+0xcc>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <HAL_SPI_MspInit+0xcc>)
 8000796:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80007a2:	23e0      	movs	r3, #224	; 0xe0
 80007a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a8:	2302      	movs	r3, #2
 80007aa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	2300      	movs	r3, #0
 80007b6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007ba:	2305      	movs	r3, #5
 80007bc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80007c4:	4619      	mov	r1, r3
 80007c6:	4806      	ldr	r0, [pc, #24]	; (80007e0 <HAL_SPI_MspInit+0xd0>)
 80007c8:	f000 fa3e 	bl	8000c48 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80007cc:	bf00      	nop
 80007ce:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40013000 	.word	0x40013000
 80007dc:	46020c00 	.word	0x46020c00
 80007e0:	42020000 	.word	0x42020000

080007e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007ea:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <HAL_MspInit+0x30>)
 80007ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80007f0:	4a08      	ldr	r2, [pc, #32]	; (8000814 <HAL_MspInit+0x30>)
 80007f2:	f043 0304 	orr.w	r3, r3, #4
 80007f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <HAL_MspInit+0x30>)
 80007fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000800:	f003 0304 	and.w	r3, r3, #4
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000808:	bf00      	nop
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	46020c00 	.word	0x46020c00

08000818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800081c:	e7fe      	b.n	800081c <NMI_Handler+0x4>

0800081e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000822:	e7fe      	b.n	8000822 <HardFault_Handler+0x4>

08000824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <MemManage_Handler+0x4>

0800082a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800082e:	e7fe      	b.n	800082e <BusFault_Handler+0x4>

08000830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <UsageFault_Handler+0x4>

08000836 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr

08000852 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000864:	f000 f8c8 	bl	80009f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}

0800086c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000870:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <SystemInit+0x68>)
 8000872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000876:	4a17      	ldr	r2, [pc, #92]	; (80008d4 <SystemInit+0x68>)
 8000878:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800087c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000880:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <SystemInit+0x6c>)
 8000882:	2201      	movs	r2, #1
 8000884:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <SystemInit+0x6c>)
 8000888:	2200      	movs	r2, #0
 800088a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <SystemInit+0x6c>)
 800088e:	2200      	movs	r2, #0
 8000890:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <SystemInit+0x6c>)
 8000894:	2200      	movs	r2, #0
 8000896:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <SystemInit+0x6c>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a0e      	ldr	r2, [pc, #56]	; (80008d8 <SystemInit+0x6c>)
 800089e:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80008a2:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80008a6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80008a8:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <SystemInit+0x6c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80008ae:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <SystemInit+0x6c>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a09      	ldr	r2, [pc, #36]	; (80008d8 <SystemInit+0x6c>)
 80008b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008b8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80008ba:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <SystemInit+0x6c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008c0:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <SystemInit+0x68>)
 80008c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008c6:	609a      	str	r2, [r3, #8]
  #endif
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	e000ed00 	.word	0xe000ed00
 80008d8:	46020c00 	.word	0x46020c00

080008dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80008dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000914 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008e0:	f7ff ffc4 	bl	800086c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80008e4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80008e6:	e003      	b.n	80008f0 <LoopCopyDataInit>

080008e8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80008e8:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80008ea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80008ec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80008ee:	3104      	adds	r1, #4

080008f0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80008f0:	480a      	ldr	r0, [pc, #40]	; (800091c <LoopForever+0xa>)
	ldr	r3, =_edata
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <LoopForever+0xe>)
	adds	r2, r0, r1
 80008f4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80008f6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80008f8:	d3f6      	bcc.n	80008e8 <CopyDataInit>
	ldr	r2, =_sbss
 80008fa:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <LoopForever+0x12>)
	b	LoopFillZerobss
 80008fc:	e002      	b.n	8000904 <LoopFillZerobss>

080008fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80008fe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000900:	f842 3b04 	str.w	r3, [r2], #4

08000904 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <LoopForever+0x16>)
	cmp	r2, r3
 8000906:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000908:	d3f9      	bcc.n	80008fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800090a:	f003 fb81 	bl	8004010 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800090e:	f7ff fddf 	bl	80004d0 <main>

08000912 <LoopForever>:

LoopForever:
    b LoopForever
 8000912:	e7fe      	b.n	8000912 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000914:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8000918:	08004158 	.word	0x08004158
	ldr	r0, =_sdata
 800091c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000920:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8000924:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000928:	200000bc 	.word	0x200000bc

0800092c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800092c:	e7fe      	b.n	800092c <ADC1_2_IRQHandler>
	...

08000930 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <HAL_Init+0x4c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a10      	ldr	r2, [pc, #64]	; (800097c <HAL_Init+0x4c>)
 800093a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800093e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000940:	2003      	movs	r0, #3
 8000942:	f000 f94f 	bl	8000be4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000946:	f001 fd69 	bl	800241c <HAL_RCC_GetSysClockFreq>
 800094a:	4602      	mov	r2, r0
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <HAL_Init+0x50>)
 800094e:	6a1b      	ldr	r3, [r3, #32]
 8000950:	f003 030f 	and.w	r3, r3, #15
 8000954:	490b      	ldr	r1, [pc, #44]	; (8000984 <HAL_Init+0x54>)
 8000956:	5ccb      	ldrb	r3, [r1, r3]
 8000958:	fa22 f303 	lsr.w	r3, r2, r3
 800095c:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <HAL_Init+0x58>)
 800095e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000960:	200f      	movs	r0, #15
 8000962:	f000 f813 	bl	800098c <HAL_InitTick>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 800096c:	2301      	movs	r3, #1
 800096e:	e002      	b.n	8000976 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000970:	f7ff ff38 	bl	80007e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000974:	2300      	movs	r3, #0
}
 8000976:	4618      	mov	r0, r3
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40022000 	.word	0x40022000
 8000980:	46020c00 	.word	0x46020c00
 8000984:	08004080 	.word	0x08004080
 8000988:	20000000 	.word	0x20000000

0800098c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000994:	4b15      	ldr	r3, [pc, #84]	; (80009ec <HAL_InitTick+0x60>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d101      	bne.n	80009a0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800099c:	2301      	movs	r3, #1
 800099e:	e021      	b.n	80009e4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <HAL_InitTick+0x64>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <HAL_InitTick+0x60>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	4619      	mov	r1, r3
 80009aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80009b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 f939 	bl	8000c2e <HAL_SYSTICK_Config>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
 80009c4:	e00e      	b.n	80009e4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2b0f      	cmp	r3, #15
 80009ca:	d80a      	bhi.n	80009e2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009cc:	2200      	movs	r2, #0
 80009ce:	6879      	ldr	r1, [r7, #4]
 80009d0:	f04f 30ff 	mov.w	r0, #4294967295
 80009d4:	f000 f911 	bl	8000bfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d8:	4a06      	ldr	r2, [pc, #24]	; (80009f4 <HAL_InitTick+0x68>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009de:	2300      	movs	r3, #0
 80009e0:	e000      	b.n	80009e4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000008 	.word	0x20000008
 80009f0:	20000000 	.word	0x20000000
 80009f4:	20000004 	.word	0x20000004

080009f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <HAL_IncTick+0x20>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <HAL_IncTick+0x24>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4413      	add	r3, r2
 8000a08:	4a04      	ldr	r2, [pc, #16]	; (8000a1c <HAL_IncTick+0x24>)
 8000a0a:	6013      	str	r3, [r2, #0]
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	20000008 	.word	0x20000008
 8000a1c:	200000b8 	.word	0x200000b8

08000a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  return uwTick;
 8000a24:	4b03      	ldr	r3, [pc, #12]	; (8000a34 <HAL_GetTick+0x14>)
 8000a26:	681b      	ldr	r3, [r3, #0]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	200000b8 	.word	0x200000b8

08000a38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a40:	f7ff ffee 	bl	8000a20 <HAL_GetTick>
 8000a44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a50:	d005      	beq.n	8000a5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a52:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <HAL_Delay+0x44>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	461a      	mov	r2, r3
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a5e:	bf00      	nop
 8000a60:	f7ff ffde 	bl	8000a20 <HAL_GetTick>
 8000a64:	4602      	mov	r2, r0
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d8f7      	bhi.n	8000a60 <HAL_Delay+0x28>
  {
  }
}
 8000a70:	bf00      	nop
 8000a72:	bf00      	nop
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000008 	.word	0x20000008

08000a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab2:	4a04      	ldr	r2, [pc, #16]	; (8000ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	60d3      	str	r3, [r2, #12]
}
 8000ab8:	bf00      	nop
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000acc:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	0a1b      	lsrs	r3, r3, #8
 8000ad2:	f003 0307 	and.w	r3, r3, #7
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	6039      	str	r1, [r7, #0]
 8000aee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000af0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	db0a      	blt.n	8000b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	490c      	ldr	r1, [pc, #48]	; (8000b30 <__NVIC_SetPriority+0x4c>)
 8000afe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b02:	0112      	lsls	r2, r2, #4
 8000b04:	b2d2      	uxtb	r2, r2
 8000b06:	440b      	add	r3, r1
 8000b08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b0c:	e00a      	b.n	8000b24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	b2da      	uxtb	r2, r3
 8000b12:	4908      	ldr	r1, [pc, #32]	; (8000b34 <__NVIC_SetPriority+0x50>)
 8000b14:	88fb      	ldrh	r3, [r7, #6]
 8000b16:	f003 030f 	and.w	r3, r3, #15
 8000b1a:	3b04      	subs	r3, #4
 8000b1c:	0112      	lsls	r2, r2, #4
 8000b1e:	b2d2      	uxtb	r2, r2
 8000b20:	440b      	add	r3, r1
 8000b22:	761a      	strb	r2, [r3, #24]
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000e100 	.word	0xe000e100
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b089      	sub	sp, #36	; 0x24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	f1c3 0307 	rsb	r3, r3, #7
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	bf28      	it	cs
 8000b56:	2304      	movcs	r3, #4
 8000b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	3304      	adds	r3, #4
 8000b5e:	2b06      	cmp	r3, #6
 8000b60:	d902      	bls.n	8000b68 <NVIC_EncodePriority+0x30>
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	3b03      	subs	r3, #3
 8000b66:	e000      	b.n	8000b6a <NVIC_EncodePriority+0x32>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	43da      	mvns	r2, r3
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	401a      	ands	r2, r3
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b80:	f04f 31ff 	mov.w	r1, #4294967295
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8a:	43d9      	mvns	r1, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b90:	4313      	orrs	r3, r2
         );
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3724      	adds	r7, #36	; 0x24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
	...

08000ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bb0:	d301      	bcc.n	8000bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e00f      	b.n	8000bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <SysTick_Config+0x40>)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bbe:	210f      	movs	r1, #15
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	f7ff ff8e 	bl	8000ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc8:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <SysTick_Config+0x40>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bce:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <SysTick_Config+0x40>)
 8000bd0:	2207      	movs	r2, #7
 8000bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	e000e010 	.word	0xe000e010

08000be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff ff47 	bl	8000a80 <__NVIC_SetPriorityGrouping>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b086      	sub	sp, #24
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	4603      	mov	r3, r0
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
 8000c06:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c08:	f7ff ff5e 	bl	8000ac8 <__NVIC_GetPriorityGrouping>
 8000c0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	68b9      	ldr	r1, [r7, #8]
 8000c12:	6978      	ldr	r0, [r7, #20]
 8000c14:	f7ff ff90 	bl	8000b38 <NVIC_EncodePriority>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c1e:	4611      	mov	r1, r2
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ff5f 	bl	8000ae4 <__NVIC_SetPriority>
}
 8000c26:	bf00      	nop
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff ffb2 	bl	8000ba0 <SysTick_Config>
 8000c3c:	4603      	mov	r3, r0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b089      	sub	sp, #36	; 0x24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000c5a:	e1ba      	b.n	8000fd2 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	2101      	movs	r1, #1
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	fa01 f303 	lsl.w	r3, r1, r3
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f000 81aa 	beq.w	8000fcc <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a55      	ldr	r2, [pc, #340]	; (8000dd0 <HAL_GPIO_Init+0x188>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d15d      	bne.n	8000d3c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8000c86:	2201      	movs	r2, #1
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	69fa      	ldr	r2, [r7, #28]
 8000c92:	4013      	ands	r3, r2
 8000c94:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f003 0201 	and.w	r2, r3, #1
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	69fa      	ldr	r2, [r7, #28]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	69fa      	ldr	r2, [r7, #28]
 8000cae:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8000cb0:	4a48      	ldr	r2, [pc, #288]	; (8000dd4 <HAL_GPIO_Init+0x18c>)
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000cb8:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8000cba:	4a46      	ldr	r2, [pc, #280]	; (8000dd4 <HAL_GPIO_Init+0x18c>)
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	00db      	lsls	r3, r3, #3
 8000cc0:	4413      	add	r3, r2
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	08da      	lsrs	r2, r3, #3
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	3208      	adds	r2, #8
 8000cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cd2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	220f      	movs	r2, #15
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	69fa      	ldr	r2, [r7, #28]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8000cea:	69bb      	ldr	r3, [r7, #24]
 8000cec:	f003 0307 	and.w	r3, r3, #7
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	220b      	movs	r2, #11
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	69fa      	ldr	r2, [r7, #28]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	08da      	lsrs	r2, r3, #3
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	3208      	adds	r2, #8
 8000d06:	69f9      	ldr	r1, [r7, #28]
 8000d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	2203      	movs	r2, #3
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	69fa      	ldr	r2, [r7, #28]
 8000d20:	4013      	ands	r3, r2
 8000d22:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	2202      	movs	r2, #2
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	69fa      	ldr	r2, [r7, #28]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	69fa      	ldr	r2, [r7, #28]
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	e067      	b.n	8000e0c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d003      	beq.n	8000d4c <HAL_GPIO_Init+0x104>
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	2b12      	cmp	r3, #18
 8000d4a:	d145      	bne.n	8000dd8 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	08da      	lsrs	r2, r3, #3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3208      	adds	r2, #8
 8000d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d58:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	f003 0307 	and.w	r3, r3, #7
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	220f      	movs	r2, #15
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	69fa      	ldr	r2, [r7, #28]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	691b      	ldr	r3, [r3, #16]
 8000d74:	f003 020f 	and.w	r2, r3, #15
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	69fa      	ldr	r2, [r7, #28]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	08da      	lsrs	r2, r3, #3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	3208      	adds	r2, #8
 8000d92:	69f9      	ldr	r1, [r7, #28]
 8000d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	2203      	movs	r2, #3
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	69fa      	ldr	r2, [r7, #28]
 8000dac:	4013      	ands	r3, r2
 8000dae:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 0203 	and.w	r2, r3, #3
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	69fa      	ldr	r2, [r7, #28]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	69fa      	ldr	r2, [r7, #28]
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	e01e      	b.n	8000e0c <HAL_GPIO_Init+0x1c4>
 8000dce:	bf00      	nop
 8000dd0:	46020000 	.word	0x46020000
 8000dd4:	080040d0 	.word	0x080040d0
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	2203      	movs	r2, #3
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	69fa      	ldr	r2, [r7, #28]
 8000dec:	4013      	ands	r3, r2
 8000dee:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0203 	and.w	r2, r3, #3
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	69fa      	ldr	r2, [r7, #28]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	69fa      	ldr	r2, [r7, #28]
 8000e0a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d00b      	beq.n	8000e2c <HAL_GPIO_Init+0x1e4>
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d007      	beq.n	8000e2c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e20:	2b11      	cmp	r3, #17
 8000e22:	d003      	beq.n	8000e2c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	2b12      	cmp	r3, #18
 8000e2a:	d130      	bne.n	8000e8e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	2203      	movs	r2, #3
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	69fa      	ldr	r2, [r7, #28]
 8000e40:	4013      	ands	r3, r2
 8000e42:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	68da      	ldr	r2, [r3, #12]
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	69fa      	ldr	r2, [r7, #28]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	69fa      	ldr	r2, [r7, #28]
 8000e5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8000e62:	2201      	movs	r2, #1
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	69fa      	ldr	r2, [r7, #28]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	091b      	lsrs	r3, r3, #4
 8000e78:	f003 0201 	and.w	r2, r3, #1
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	69fa      	ldr	r2, [r7, #28]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	69fa      	ldr	r2, [r7, #28]
 8000e8c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2b03      	cmp	r3, #3
 8000e94:	d017      	beq.n	8000ec6 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	68db      	ldr	r3, [r3, #12]
 8000e9a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	69fa      	ldr	r2, [r7, #28]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	689a      	ldr	r2, [r3, #8]
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	69fa      	ldr	r2, [r7, #28]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	69fa      	ldr	r2, [r7, #28]
 8000ec4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d07c      	beq.n	8000fcc <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000ed2:	4a47      	ldr	r2, [pc, #284]	; (8000ff0 <HAL_GPIO_Init+0x3a8>)
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	089b      	lsrs	r3, r3, #2
 8000ed8:	3318      	adds	r3, #24
 8000eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ede:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	220f      	movs	r2, #15
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	69fa      	ldr	r2, [r7, #28]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	0a9a      	lsrs	r2, r3, #10
 8000efa:	4b3e      	ldr	r3, [pc, #248]	; (8000ff4 <HAL_GPIO_Init+0x3ac>)
 8000efc:	4013      	ands	r3, r2
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	f002 0203 	and.w	r2, r2, #3
 8000f04:	00d2      	lsls	r2, r2, #3
 8000f06:	4093      	lsls	r3, r2
 8000f08:	69fa      	ldr	r2, [r7, #28]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000f0e:	4938      	ldr	r1, [pc, #224]	; (8000ff0 <HAL_GPIO_Init+0x3a8>)
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	089b      	lsrs	r3, r3, #2
 8000f14:	3318      	adds	r3, #24
 8000f16:	69fa      	ldr	r2, [r7, #28]
 8000f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000f1c:	4b34      	ldr	r3, [pc, #208]	; (8000ff0 <HAL_GPIO_Init+0x3a8>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69fa      	ldr	r2, [r7, #28]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d003      	beq.n	8000f40 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8000f38:	69fa      	ldr	r2, [r7, #28]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8000f40:	4a2b      	ldr	r2, [pc, #172]	; (8000ff0 <HAL_GPIO_Init+0x3a8>)
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8000f46:	4b2a      	ldr	r3, [pc, #168]	; (8000ff0 <HAL_GPIO_Init+0x3a8>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	69fa      	ldr	r2, [r7, #28]
 8000f52:	4013      	ands	r3, r2
 8000f54:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d003      	beq.n	8000f6a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8000f62:	69fa      	ldr	r2, [r7, #28]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8000f6a:	4a21      	ldr	r2, [pc, #132]	; (8000ff0 <HAL_GPIO_Init+0x3a8>)
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8000f70:	4b1f      	ldr	r3, [pc, #124]	; (8000ff0 <HAL_GPIO_Init+0x3a8>)
 8000f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000f76:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	69fa      	ldr	r2, [r7, #28]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8000f8e:	69fa      	ldr	r2, [r7, #28]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8000f96:	4a16      	ldr	r2, [pc, #88]	; (8000ff0 <HAL_GPIO_Init+0x3a8>)
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8000f9e:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <HAL_GPIO_Init+0x3a8>)
 8000fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fa4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69fa      	ldr	r2, [r7, #28]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8000fbc:	69fa      	ldr	r2, [r7, #28]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8000fc4:	4a0a      	ldr	r2, [pc, #40]	; (8000ff0 <HAL_GPIO_Init+0x3a8>)
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	f47f ae3d 	bne.w	8000c5c <HAL_GPIO_Init+0x14>
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	bf00      	nop
 8000fe6:	3724      	adds	r7, #36	; 0x24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	46022000 	.word	0x46022000
 8000ff4:	002f7f7f 	.word	0x002f7f7f

08000ff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	807b      	strh	r3, [r7, #2]
 8001004:	4613      	mov	r3, r2
 8001006:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001008:	787b      	ldrb	r3, [r7, #1]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800100e:	887a      	ldrh	r2, [r7, #2]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8001014:	e002      	b.n	800101c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8001016:	887a      	ldrh	r2, [r7, #2]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001030:	2300      	movs	r3, #0
 8001032:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001034:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	2b00      	cmp	r3, #0
 800103e:	d002      	beq.n	8001046 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	73fb      	strb	r3, [r7, #15]
 8001044:	e007      	b.n	8001056 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8001046:	4b07      	ldr	r3, [pc, #28]	; (8001064 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f023 0204 	bic.w	r2, r3, #4
 800104e:	4905      	ldr	r1, [pc, #20]	; (8001064 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4313      	orrs	r3, r2
 8001054:	600b      	str	r3, [r1, #0]
  }

  return status;
 8001056:	7bfb      	ldrb	r3, [r7, #15]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	40030400 	.word	0x40030400

08001068 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <HAL_ICACHE_Enable+0x1c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a04      	ldr	r2, [pc, #16]	; (8001084 <HAL_ICACHE_Enable+0x1c>)
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	40030400 	.word	0x40030400

08001088 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8001090:	4b39      	ldr	r3, [pc, #228]	; (8001178 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001094:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001098:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d10b      	bne.n	80010ba <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010a8:	d905      	bls.n	80010b6 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80010aa:	4b33      	ldr	r3, [pc, #204]	; (8001178 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	4a32      	ldr	r2, [pc, #200]	; (8001178 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80010b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b4:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80010b6:	2300      	movs	r3, #0
 80010b8:	e057      	b.n	800116a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c0:	d90a      	bls.n	80010d8 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80010c2:	4b2d      	ldr	r3, [pc, #180]	; (8001178 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	4a2a      	ldr	r2, [pc, #168]	; (8001178 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80010d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010d4:	60d3      	str	r3, [r2, #12]
 80010d6:	e007      	b.n	80010e8 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80010d8:	4b27      	ldr	r3, [pc, #156]	; (8001178 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80010e0:	4925      	ldr	r1, [pc, #148]	; (8001178 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80010e8:	4b24      	ldr	r3, [pc, #144]	; (800117c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a24      	ldr	r2, [pc, #144]	; (8001180 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80010ee:	fba2 2303 	umull	r2, r3, r2, r3
 80010f2:	099b      	lsrs	r3, r3, #6
 80010f4:	2232      	movs	r2, #50	; 0x32
 80010f6:	fb02 f303 	mul.w	r3, r2, r3
 80010fa:	4a21      	ldr	r2, [pc, #132]	; (8001180 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80010fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001100:	099b      	lsrs	r3, r3, #6
 8001102:	3301      	adds	r3, #1
 8001104:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001106:	e002      	b.n	800110e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	3b01      	subs	r3, #1
 800110c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800110e:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d102      	bne.n	8001120 <HAL_PWREx_ControlVoltageScaling+0x98>
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1f3      	bne.n	8001108 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d01b      	beq.n	800115e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001126:	4b15      	ldr	r3, [pc, #84]	; (800117c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a15      	ldr	r2, [pc, #84]	; (8001180 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800112c:	fba2 2303 	umull	r2, r3, r2, r3
 8001130:	099b      	lsrs	r3, r3, #6
 8001132:	2232      	movs	r2, #50	; 0x32
 8001134:	fb02 f303 	mul.w	r3, r2, r3
 8001138:	4a11      	ldr	r2, [pc, #68]	; (8001180 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800113a:	fba2 2303 	umull	r2, r3, r2, r3
 800113e:	099b      	lsrs	r3, r3, #6
 8001140:	3301      	adds	r3, #1
 8001142:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001144:	e002      	b.n	800114c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	3b01      	subs	r3, #1
 800114a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800114c:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800114e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001150:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d102      	bne.n	800115e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1f3      	bne.n	8001146 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d101      	bne.n	8001168 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8001164:	2303      	movs	r3, #3
 8001166:	e000      	b.n	800116a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	46020800 	.word	0x46020800
 800117c:	20000000 	.word	0x20000000
 8001180:	10624dd3 	.word	0x10624dd3

08001184 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8001188:	4b04      	ldr	r3, [pc, #16]	; (800119c <HAL_PWREx_GetVoltageRange+0x18>)
 800118a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800118c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	46020800 	.word	0x46020800

080011a0 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80011a8:	4b22      	ldr	r3, [pc, #136]	; (8001234 <HAL_PWREx_ConfigSupply+0x94>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a22      	ldr	r2, [pc, #136]	; (8001238 <HAL_PWREx_ConfigSupply+0x98>)
 80011ae:	fba2 2303 	umull	r2, r3, r2, r3
 80011b2:	099b      	lsrs	r3, r3, #6
 80011b4:	2232      	movs	r2, #50	; 0x32
 80011b6:	fb02 f303 	mul.w	r3, r2, r3
 80011ba:	4a1f      	ldr	r2, [pc, #124]	; (8001238 <HAL_PWREx_ConfigSupply+0x98>)
 80011bc:	fba2 2303 	umull	r2, r3, r2, r3
 80011c0:	099b      	lsrs	r3, r3, #6
 80011c2:	3301      	adds	r3, #1
 80011c4:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d113      	bne.n	80011f4 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80011cc:	4b1b      	ldr	r3, [pc, #108]	; (800123c <HAL_PWREx_ConfigSupply+0x9c>)
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	4a1a      	ldr	r2, [pc, #104]	; (800123c <HAL_PWREx_ConfigSupply+0x9c>)
 80011d2:	f023 0302 	bic.w	r3, r3, #2
 80011d6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80011d8:	e002      	b.n	80011e0 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	3b01      	subs	r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80011e0:	4b16      	ldr	r3, [pc, #88]	; (800123c <HAL_PWREx_ConfigSupply+0x9c>)
 80011e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d116      	bne.n	800121a <HAL_PWREx_ConfigSupply+0x7a>
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1f3      	bne.n	80011da <HAL_PWREx_ConfigSupply+0x3a>
 80011f2:	e012      	b.n	800121a <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <HAL_PWREx_ConfigSupply+0x9c>)
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	4a10      	ldr	r2, [pc, #64]	; (800123c <HAL_PWREx_ConfigSupply+0x9c>)
 80011fa:	f043 0302 	orr.w	r3, r3, #2
 80011fe:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001200:	e002      	b.n	8001208 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	3b01      	subs	r3, #1
 8001206:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <HAL_PWREx_ConfigSupply+0x9c>)
 800120a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d102      	bne.n	800121a <HAL_PWREx_ConfigSupply+0x7a>
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1f3      	bne.n	8001202 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d101      	bne.n	8001224 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e000      	b.n	8001226 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	20000000 	.word	0x20000000
 8001238:	10624dd3 	.word	0x10624dd3
 800123c:	46020800 	.word	0x46020800

08001240 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	4a04      	ldr	r2, [pc, #16]	; (800125c <HAL_PWREx_EnableVddIO2+0x1c>)
 800124a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800124e:	6113      	str	r3, [r2, #16]
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	46020800 	.word	0x46020800

08001260 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001268:	4a04      	ldr	r2, [pc, #16]	; (800127c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	46020800 	.word	0x46020800

08001280 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08e      	sub	sp, #56	; 0x38
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8001288:	2300      	movs	r3, #0
 800128a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d102      	bne.n	800129a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	f000 bec8 	b.w	800202a <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800129a:	4b99      	ldr	r3, [pc, #612]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	f003 030c 	and.w	r3, r3, #12
 80012a2:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012a4:	4b96      	ldr	r3, [pc, #600]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 80012a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a8:	f003 0303 	and.w	r3, r3, #3
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0310 	and.w	r3, r3, #16
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f000 816c 	beq.w	8001594 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80012bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d007      	beq.n	80012d2 <HAL_RCC_OscConfig+0x52>
 80012c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012c4:	2b0c      	cmp	r3, #12
 80012c6:	f040 80de 	bne.w	8001486 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	f040 80da 	bne.w	8001486 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d102      	bne.n	80012e0 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	f000 bea5 	b.w	800202a <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012e4:	4b86      	ldr	r3, [pc, #536]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d004      	beq.n	80012fa <HAL_RCC_OscConfig+0x7a>
 80012f0:	4b83      	ldr	r3, [pc, #524]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80012f8:	e005      	b.n	8001306 <HAL_RCC_OscConfig+0x86>
 80012fa:	4b81      	ldr	r3, [pc, #516]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 80012fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001300:	041b      	lsls	r3, r3, #16
 8001302:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001306:	4293      	cmp	r3, r2
 8001308:	d255      	bcs.n	80013b6 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800130a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800130c:	2b00      	cmp	r3, #0
 800130e:	d10a      	bne.n	8001326 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001314:	4618      	mov	r0, r3
 8001316:	f001 f9a3 	bl	8002660 <RCC_SetFlashLatencyFromMSIRange>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d002      	beq.n	8001326 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	f000 be82 	b.w	800202a <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001326:	4b76      	ldr	r3, [pc, #472]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	4a75      	ldr	r2, [pc, #468]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 800132c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001330:	6093      	str	r3, [r2, #8]
 8001332:	4b73      	ldr	r3, [pc, #460]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133e:	4970      	ldr	r1, [pc, #448]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 8001340:	4313      	orrs	r3, r2
 8001342:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001348:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800134c:	d309      	bcc.n	8001362 <HAL_RCC_OscConfig+0xe2>
 800134e:	4b6c      	ldr	r3, [pc, #432]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	f023 021f 	bic.w	r2, r3, #31
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a1b      	ldr	r3, [r3, #32]
 800135a:	4969      	ldr	r1, [pc, #420]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 800135c:	4313      	orrs	r3, r2
 800135e:	60cb      	str	r3, [r1, #12]
 8001360:	e07e      	b.n	8001460 <HAL_RCC_OscConfig+0x1e0>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001366:	2b00      	cmp	r3, #0
 8001368:	da0a      	bge.n	8001380 <HAL_RCC_OscConfig+0x100>
 800136a:	4b65      	ldr	r3, [pc, #404]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a1b      	ldr	r3, [r3, #32]
 8001376:	015b      	lsls	r3, r3, #5
 8001378:	4961      	ldr	r1, [pc, #388]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 800137a:	4313      	orrs	r3, r2
 800137c:	60cb      	str	r3, [r1, #12]
 800137e:	e06f      	b.n	8001460 <HAL_RCC_OscConfig+0x1e0>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001388:	d30a      	bcc.n	80013a0 <HAL_RCC_OscConfig+0x120>
 800138a:	4b5d      	ldr	r3, [pc, #372]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a1b      	ldr	r3, [r3, #32]
 8001396:	029b      	lsls	r3, r3, #10
 8001398:	4959      	ldr	r1, [pc, #356]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 800139a:	4313      	orrs	r3, r2
 800139c:	60cb      	str	r3, [r1, #12]
 800139e:	e05f      	b.n	8001460 <HAL_RCC_OscConfig+0x1e0>
 80013a0:	4b57      	ldr	r3, [pc, #348]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	03db      	lsls	r3, r3, #15
 80013ae:	4954      	ldr	r1, [pc, #336]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 80013b0:	4313      	orrs	r3, r2
 80013b2:	60cb      	str	r3, [r1, #12]
 80013b4:	e054      	b.n	8001460 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80013b6:	4b52      	ldr	r3, [pc, #328]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	4a51      	ldr	r2, [pc, #324]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 80013bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013c0:	6093      	str	r3, [r2, #8]
 80013c2:	4b4f      	ldr	r3, [pc, #316]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ce:	494c      	ldr	r1, [pc, #304]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 80013d0:	4313      	orrs	r3, r2
 80013d2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80013dc:	d309      	bcc.n	80013f2 <HAL_RCC_OscConfig+0x172>
 80013de:	4b48      	ldr	r3, [pc, #288]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	f023 021f 	bic.w	r2, r3, #31
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a1b      	ldr	r3, [r3, #32]
 80013ea:	4945      	ldr	r1, [pc, #276]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 80013ec:	4313      	orrs	r3, r2
 80013ee:	60cb      	str	r3, [r1, #12]
 80013f0:	e028      	b.n	8001444 <HAL_RCC_OscConfig+0x1c4>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	da0a      	bge.n	8001410 <HAL_RCC_OscConfig+0x190>
 80013fa:	4b41      	ldr	r3, [pc, #260]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a1b      	ldr	r3, [r3, #32]
 8001406:	015b      	lsls	r3, r3, #5
 8001408:	493d      	ldr	r1, [pc, #244]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 800140a:	4313      	orrs	r3, r2
 800140c:	60cb      	str	r3, [r1, #12]
 800140e:	e019      	b.n	8001444 <HAL_RCC_OscConfig+0x1c4>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001418:	d30a      	bcc.n	8001430 <HAL_RCC_OscConfig+0x1b0>
 800141a:	4b39      	ldr	r3, [pc, #228]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a1b      	ldr	r3, [r3, #32]
 8001426:	029b      	lsls	r3, r3, #10
 8001428:	4935      	ldr	r1, [pc, #212]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 800142a:	4313      	orrs	r3, r2
 800142c:	60cb      	str	r3, [r1, #12]
 800142e:	e009      	b.n	8001444 <HAL_RCC_OscConfig+0x1c4>
 8001430:	4b33      	ldr	r3, [pc, #204]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a1b      	ldr	r3, [r3, #32]
 800143c:	03db      	lsls	r3, r3, #15
 800143e:	4930      	ldr	r1, [pc, #192]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 8001440:	4313      	orrs	r3, r2
 8001442:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001446:	2b00      	cmp	r3, #0
 8001448:	d10a      	bne.n	8001460 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144e:	4618      	mov	r0, r3
 8001450:	f001 f906 	bl	8002660 <RCC_SetFlashLatencyFromMSIRange>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d002      	beq.n	8001460 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	f000 bde5 	b.w	800202a <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8001460:	f001 f8e4 	bl	800262c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001464:	4b27      	ldr	r3, [pc, #156]	; (8001504 <HAL_RCC_OscConfig+0x284>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fa8f 	bl	800098c <HAL_InitTick>
 800146e:	4603      	mov	r3, r0
 8001470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8001474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001478:	2b00      	cmp	r3, #0
 800147a:	f000 808a 	beq.w	8001592 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800147e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001482:	f000 bdd2 	b.w	800202a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d066      	beq.n	800155c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800148e:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a1b      	ldr	r2, [pc, #108]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800149a:	f7ff fac1 	bl	8000a20 <HAL_GetTick>
 800149e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80014a0:	e009      	b.n	80014b6 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014a2:	f7ff fabd 	bl	8000a20 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d902      	bls.n	80014b6 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	f000 bdba 	b.w	800202a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80014b6:	4b12      	ldr	r3, [pc, #72]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0304 	and.w	r3, r3, #4
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0ef      	beq.n	80014a2 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80014c2:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	4a0e      	ldr	r2, [pc, #56]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 80014c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014cc:	6093      	str	r3, [r2, #8]
 80014ce:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014da:	4909      	ldr	r1, [pc, #36]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 80014dc:	4313      	orrs	r3, r2
 80014de:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80014e8:	d30e      	bcc.n	8001508 <HAL_RCC_OscConfig+0x288>
 80014ea:	4b05      	ldr	r3, [pc, #20]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	f023 021f 	bic.w	r2, r3, #31
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a1b      	ldr	r3, [r3, #32]
 80014f6:	4902      	ldr	r1, [pc, #8]	; (8001500 <HAL_RCC_OscConfig+0x280>)
 80014f8:	4313      	orrs	r3, r2
 80014fa:	60cb      	str	r3, [r1, #12]
 80014fc:	e04a      	b.n	8001594 <HAL_RCC_OscConfig+0x314>
 80014fe:	bf00      	nop
 8001500:	46020c00 	.word	0x46020c00
 8001504:	20000004 	.word	0x20000004
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150c:	2b00      	cmp	r3, #0
 800150e:	da0a      	bge.n	8001526 <HAL_RCC_OscConfig+0x2a6>
 8001510:	4b98      	ldr	r3, [pc, #608]	; (8001774 <HAL_RCC_OscConfig+0x4f4>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	015b      	lsls	r3, r3, #5
 800151e:	4995      	ldr	r1, [pc, #596]	; (8001774 <HAL_RCC_OscConfig+0x4f4>)
 8001520:	4313      	orrs	r3, r2
 8001522:	60cb      	str	r3, [r1, #12]
 8001524:	e036      	b.n	8001594 <HAL_RCC_OscConfig+0x314>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800152e:	d30a      	bcc.n	8001546 <HAL_RCC_OscConfig+0x2c6>
 8001530:	4b90      	ldr	r3, [pc, #576]	; (8001774 <HAL_RCC_OscConfig+0x4f4>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	029b      	lsls	r3, r3, #10
 800153e:	498d      	ldr	r1, [pc, #564]	; (8001774 <HAL_RCC_OscConfig+0x4f4>)
 8001540:	4313      	orrs	r3, r2
 8001542:	60cb      	str	r3, [r1, #12]
 8001544:	e026      	b.n	8001594 <HAL_RCC_OscConfig+0x314>
 8001546:	4b8b      	ldr	r3, [pc, #556]	; (8001774 <HAL_RCC_OscConfig+0x4f4>)
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a1b      	ldr	r3, [r3, #32]
 8001552:	03db      	lsls	r3, r3, #15
 8001554:	4987      	ldr	r1, [pc, #540]	; (8001774 <HAL_RCC_OscConfig+0x4f4>)
 8001556:	4313      	orrs	r3, r2
 8001558:	60cb      	str	r3, [r1, #12]
 800155a:	e01b      	b.n	8001594 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800155c:	4b85      	ldr	r3, [pc, #532]	; (8001774 <HAL_RCC_OscConfig+0x4f4>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a84      	ldr	r2, [pc, #528]	; (8001774 <HAL_RCC_OscConfig+0x4f4>)
 8001562:	f023 0301 	bic.w	r3, r3, #1
 8001566:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001568:	f7ff fa5a 	bl	8000a20 <HAL_GetTick>
 800156c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800156e:	e009      	b.n	8001584 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001570:	f7ff fa56 	bl	8000a20 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d902      	bls.n	8001584 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	f000 bd53 	b.w	800202a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001584:	4b7b      	ldr	r3, [pc, #492]	; (8001774 <HAL_RCC_OscConfig+0x4f4>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1ef      	bne.n	8001570 <HAL_RCC_OscConfig+0x2f0>
 8001590:	e000      	b.n	8001594 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001592:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 808b 	beq.w	80016b8 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80015a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a4:	2b08      	cmp	r3, #8
 80015a6:	d005      	beq.n	80015b4 <HAL_RCC_OscConfig+0x334>
 80015a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015aa:	2b0c      	cmp	r3, #12
 80015ac:	d109      	bne.n	80015c2 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b0:	2b03      	cmp	r3, #3
 80015b2:	d106      	bne.n	80015c2 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d17d      	bne.n	80016b8 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	f000 bd34 	b.w	800202a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ca:	d106      	bne.n	80015da <HAL_RCC_OscConfig+0x35a>
 80015cc:	4b69      	ldr	r3, [pc, #420]	; (8001774 <HAL_RCC_OscConfig+0x4f4>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a68      	ldr	r2, [pc, #416]	; (8001774 <HAL_RCC_OscConfig+0x4f4>)
 80015d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d6:	6013      	str	r3, [r2, #0]
 80015d8:	e041      	b.n	800165e <HAL_RCC_OscConfig+0x3de>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015e2:	d112      	bne.n	800160a <HAL_RCC_OscConfig+0x38a>
 80015e4:	4b63      	ldr	r3, [pc, #396]	; (8001774 <HAL_RCC_OscConfig+0x4f4>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a62      	ldr	r2, [pc, #392]	; (8001774 <HAL_RCC_OscConfig+0x4f4>)
 80015ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	4b60      	ldr	r3, [pc, #384]	; (8001774 <HAL_RCC_OscConfig+0x4f4>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a5f      	ldr	r2, [pc, #380]	; (8001774 <HAL_RCC_OscConfig+0x4f4>)
 80015f6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80015fa:	6013      	str	r3, [r2, #0]
 80015fc:	4b5d      	ldr	r3, [pc, #372]	; (8001774 <HAL_RCC_OscConfig+0x4f4>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a5c      	ldr	r2, [pc, #368]	; (8001774 <HAL_RCC_OscConfig+0x4f4>)
 8001602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	e029      	b.n	800165e <HAL_RCC_OscConfig+0x3de>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001612:	d112      	bne.n	800163a <HAL_RCC_OscConfig+0x3ba>
 8001614:	4b57      	ldr	r3, [pc, #348]	; (8001774 <HAL_RCC_OscConfig+0x4f4>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a56      	ldr	r2, [pc, #344]	; (8001774 <HAL_RCC_OscConfig+0x4f4>)
 800161a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	4b54      	ldr	r3, [pc, #336]	; (8001774 <HAL_RCC_OscConfig+0x4f4>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a53      	ldr	r2, [pc, #332]	; (8001774 <HAL_RCC_OscConfig+0x4f4>)
 8001626:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800162a:	6013      	str	r3, [r2, #0]
 800162c:	4b51      	ldr	r3, [pc, #324]	; (8001774 <HAL_RCC_OscConfig+0x4f4>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a50      	ldr	r2, [pc, #320]	; (8001774 <HAL_RCC_OscConfig+0x4f4>)
 8001632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	e011      	b.n	800165e <HAL_RCC_OscConfig+0x3de>
 800163a:	4b4e      	ldr	r3, [pc, #312]	; (8001774 <HAL_RCC_OscConfig+0x4f4>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a4d      	ldr	r2, [pc, #308]	; (8001774 <HAL_RCC_OscConfig+0x4f4>)
 8001640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	4b4b      	ldr	r3, [pc, #300]	; (8001774 <HAL_RCC_OscConfig+0x4f4>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a4a      	ldr	r2, [pc, #296]	; (8001774 <HAL_RCC_OscConfig+0x4f4>)
 800164c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	4b48      	ldr	r3, [pc, #288]	; (8001774 <HAL_RCC_OscConfig+0x4f4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a47      	ldr	r2, [pc, #284]	; (8001774 <HAL_RCC_OscConfig+0x4f4>)
 8001658:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800165c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d014      	beq.n	8001690 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8001666:	f7ff f9db 	bl	8000a20 <HAL_GetTick>
 800166a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800166c:	e009      	b.n	8001682 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800166e:	f7ff f9d7 	bl	8000a20 <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b64      	cmp	r3, #100	; 0x64
 800167a:	d902      	bls.n	8001682 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	f000 bcd4 	b.w	800202a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001682:	4b3c      	ldr	r3, [pc, #240]	; (8001774 <HAL_RCC_OscConfig+0x4f4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0ef      	beq.n	800166e <HAL_RCC_OscConfig+0x3ee>
 800168e:	e013      	b.n	80016b8 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8001690:	f7ff f9c6 	bl	8000a20 <HAL_GetTick>
 8001694:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001696:	e009      	b.n	80016ac <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001698:	f7ff f9c2 	bl	8000a20 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b64      	cmp	r3, #100	; 0x64
 80016a4:	d902      	bls.n	80016ac <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	f000 bcbf 	b.w	800202a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016ac:	4b31      	ldr	r3, [pc, #196]	; (8001774 <HAL_RCC_OscConfig+0x4f4>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1ef      	bne.n	8001698 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d05f      	beq.n	8001784 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80016c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	d005      	beq.n	80016d6 <HAL_RCC_OscConfig+0x456>
 80016ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016cc:	2b0c      	cmp	r3, #12
 80016ce:	d114      	bne.n	80016fa <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d111      	bne.n	80016fa <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d102      	bne.n	80016e4 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	f000 bca3 	b.w	800202a <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80016e4:	4b23      	ldr	r3, [pc, #140]	; (8001774 <HAL_RCC_OscConfig+0x4f4>)
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	691b      	ldr	r3, [r3, #16]
 80016f0:	041b      	lsls	r3, r3, #16
 80016f2:	4920      	ldr	r1, [pc, #128]	; (8001774 <HAL_RCC_OscConfig+0x4f4>)
 80016f4:	4313      	orrs	r3, r2
 80016f6:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80016f8:	e044      	b.n	8001784 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d024      	beq.n	800174c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8001702:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <HAL_RCC_OscConfig+0x4f4>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a1b      	ldr	r2, [pc, #108]	; (8001774 <HAL_RCC_OscConfig+0x4f4>)
 8001708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800170c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800170e:	f7ff f987 	bl	8000a20 <HAL_GetTick>
 8001712:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001714:	e009      	b.n	800172a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001716:	f7ff f983 	bl	8000a20 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d902      	bls.n	800172a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	f000 bc80 	b.w	800202a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800172a:	4b12      	ldr	r3, [pc, #72]	; (8001774 <HAL_RCC_OscConfig+0x4f4>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0ef      	beq.n	8001716 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001736:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <HAL_RCC_OscConfig+0x4f4>)
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	041b      	lsls	r3, r3, #16
 8001744:	490b      	ldr	r1, [pc, #44]	; (8001774 <HAL_RCC_OscConfig+0x4f4>)
 8001746:	4313      	orrs	r3, r2
 8001748:	610b      	str	r3, [r1, #16]
 800174a:	e01b      	b.n	8001784 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800174c:	4b09      	ldr	r3, [pc, #36]	; (8001774 <HAL_RCC_OscConfig+0x4f4>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a08      	ldr	r2, [pc, #32]	; (8001774 <HAL_RCC_OscConfig+0x4f4>)
 8001752:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001756:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001758:	f7ff f962 	bl	8000a20 <HAL_GetTick>
 800175c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800175e:	e00b      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001760:	f7ff f95e 	bl	8000a20 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d904      	bls.n	8001778 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	f000 bc5b 	b.w	800202a <HAL_RCC_OscConfig+0xdaa>
 8001774:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001778:	4baf      	ldr	r3, [pc, #700]	; (8001a38 <HAL_RCC_OscConfig+0x7b8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1ed      	bne.n	8001760 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0308 	and.w	r3, r3, #8
 800178c:	2b00      	cmp	r3, #0
 800178e:	f000 80c8 	beq.w	8001922 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8001792:	2300      	movs	r3, #0
 8001794:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001798:	4ba7      	ldr	r3, [pc, #668]	; (8001a38 <HAL_RCC_OscConfig+0x7b8>)
 800179a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800179e:	f003 0304 	and.w	r3, r3, #4
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d111      	bne.n	80017ca <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017a6:	4ba4      	ldr	r3, [pc, #656]	; (8001a38 <HAL_RCC_OscConfig+0x7b8>)
 80017a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ac:	4aa2      	ldr	r2, [pc, #648]	; (8001a38 <HAL_RCC_OscConfig+0x7b8>)
 80017ae:	f043 0304 	orr.w	r3, r3, #4
 80017b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80017b6:	4ba0      	ldr	r3, [pc, #640]	; (8001a38 <HAL_RCC_OscConfig+0x7b8>)
 80017b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80017c4:	2301      	movs	r3, #1
 80017c6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80017ca:	4b9c      	ldr	r3, [pc, #624]	; (8001a3c <HAL_RCC_OscConfig+0x7bc>)
 80017cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d119      	bne.n	800180a <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80017d6:	4b99      	ldr	r3, [pc, #612]	; (8001a3c <HAL_RCC_OscConfig+0x7bc>)
 80017d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017da:	4a98      	ldr	r2, [pc, #608]	; (8001a3c <HAL_RCC_OscConfig+0x7bc>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017e2:	f7ff f91d 	bl	8000a20 <HAL_GetTick>
 80017e6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80017e8:	e009      	b.n	80017fe <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ea:	f7ff f919 	bl	8000a20 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d902      	bls.n	80017fe <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	f000 bc16 	b.w	800202a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80017fe:	4b8f      	ldr	r3, [pc, #572]	; (8001a3c <HAL_RCC_OscConfig+0x7bc>)
 8001800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0ef      	beq.n	80017ea <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d05f      	beq.n	80018d2 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8001812:	4b89      	ldr	r3, [pc, #548]	; (8001a38 <HAL_RCC_OscConfig+0x7b8>)
 8001814:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001818:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	699a      	ldr	r2, [r3, #24]
 800181e:	6a3b      	ldr	r3, [r7, #32]
 8001820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001824:	429a      	cmp	r2, r3
 8001826:	d037      	beq.n	8001898 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001828:	6a3b      	ldr	r3, [r7, #32]
 800182a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d006      	beq.n	8001840 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8001832:	6a3b      	ldr	r3, [r7, #32]
 8001834:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001838:	2b00      	cmp	r3, #0
 800183a:	d101      	bne.n	8001840 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e3f4      	b.n	800202a <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8001840:	6a3b      	ldr	r3, [r7, #32]
 8001842:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d01b      	beq.n	8001882 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800184a:	4b7b      	ldr	r3, [pc, #492]	; (8001a38 <HAL_RCC_OscConfig+0x7b8>)
 800184c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001850:	4a79      	ldr	r2, [pc, #484]	; (8001a38 <HAL_RCC_OscConfig+0x7b8>)
 8001852:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001856:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800185a:	f7ff f8e1 	bl	8000a20 <HAL_GetTick>
 800185e:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001862:	f7ff f8dd 	bl	8000a20 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b05      	cmp	r3, #5
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e3da      	b.n	800202a <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001874:	4b70      	ldr	r3, [pc, #448]	; (8001a38 <HAL_RCC_OscConfig+0x7b8>)
 8001876:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800187a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1ef      	bne.n	8001862 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8001882:	4b6d      	ldr	r3, [pc, #436]	; (8001a38 <HAL_RCC_OscConfig+0x7b8>)
 8001884:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001888:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	4969      	ldr	r1, [pc, #420]	; (8001a38 <HAL_RCC_OscConfig+0x7b8>)
 8001892:	4313      	orrs	r3, r2
 8001894:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8001898:	4b67      	ldr	r3, [pc, #412]	; (8001a38 <HAL_RCC_OscConfig+0x7b8>)
 800189a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800189e:	4a66      	ldr	r2, [pc, #408]	; (8001a38 <HAL_RCC_OscConfig+0x7b8>)
 80018a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80018a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80018a8:	f7ff f8ba 	bl	8000a20 <HAL_GetTick>
 80018ac:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018b0:	f7ff f8b6 	bl	8000a20 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b05      	cmp	r3, #5
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e3b3      	b.n	800202a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80018c2:	4b5d      	ldr	r3, [pc, #372]	; (8001a38 <HAL_RCC_OscConfig+0x7b8>)
 80018c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d0ef      	beq.n	80018b0 <HAL_RCC_OscConfig+0x630>
 80018d0:	e01b      	b.n	800190a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80018d2:	4b59      	ldr	r3, [pc, #356]	; (8001a38 <HAL_RCC_OscConfig+0x7b8>)
 80018d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018d8:	4a57      	ldr	r2, [pc, #348]	; (8001a38 <HAL_RCC_OscConfig+0x7b8>)
 80018da:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80018de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80018e2:	f7ff f89d 	bl	8000a20 <HAL_GetTick>
 80018e6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ea:	f7ff f899 	bl	8000a20 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b05      	cmp	r3, #5
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e396      	b.n	800202a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80018fc:	4b4e      	ldr	r3, [pc, #312]	; (8001a38 <HAL_RCC_OscConfig+0x7b8>)
 80018fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001902:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1ef      	bne.n	80018ea <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800190a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800190e:	2b01      	cmp	r3, #1
 8001910:	d107      	bne.n	8001922 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001912:	4b49      	ldr	r3, [pc, #292]	; (8001a38 <HAL_RCC_OscConfig+0x7b8>)
 8001914:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001918:	4a47      	ldr	r2, [pc, #284]	; (8001a38 <HAL_RCC_OscConfig+0x7b8>)
 800191a:	f023 0304 	bic.w	r3, r3, #4
 800191e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0304 	and.w	r3, r3, #4
 800192a:	2b00      	cmp	r3, #0
 800192c:	f000 8111 	beq.w	8001b52 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8001930:	2300      	movs	r3, #0
 8001932:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001936:	4b40      	ldr	r3, [pc, #256]	; (8001a38 <HAL_RCC_OscConfig+0x7b8>)
 8001938:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	2b00      	cmp	r3, #0
 8001942:	d111      	bne.n	8001968 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001944:	4b3c      	ldr	r3, [pc, #240]	; (8001a38 <HAL_RCC_OscConfig+0x7b8>)
 8001946:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800194a:	4a3b      	ldr	r2, [pc, #236]	; (8001a38 <HAL_RCC_OscConfig+0x7b8>)
 800194c:	f043 0304 	orr.w	r3, r3, #4
 8001950:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001954:	4b38      	ldr	r3, [pc, #224]	; (8001a38 <HAL_RCC_OscConfig+0x7b8>)
 8001956:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8001962:	2301      	movs	r3, #1
 8001964:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001968:	4b34      	ldr	r3, [pc, #208]	; (8001a3c <HAL_RCC_OscConfig+0x7bc>)
 800196a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	2b00      	cmp	r3, #0
 8001972:	d118      	bne.n	80019a6 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001974:	4b31      	ldr	r3, [pc, #196]	; (8001a3c <HAL_RCC_OscConfig+0x7bc>)
 8001976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001978:	4a30      	ldr	r2, [pc, #192]	; (8001a3c <HAL_RCC_OscConfig+0x7bc>)
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001980:	f7ff f84e 	bl	8000a20 <HAL_GetTick>
 8001984:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001988:	f7ff f84a 	bl	8000a20 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e347      	b.n	800202a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800199a:	4b28      	ldr	r3, [pc, #160]	; (8001a3c <HAL_RCC_OscConfig+0x7bc>)
 800199c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f0      	beq.n	8001988 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d01f      	beq.n	80019f2 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 0304 	and.w	r3, r3, #4
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d010      	beq.n	80019e0 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80019be:	4b1e      	ldr	r3, [pc, #120]	; (8001a38 <HAL_RCC_OscConfig+0x7b8>)
 80019c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019c4:	4a1c      	ldr	r2, [pc, #112]	; (8001a38 <HAL_RCC_OscConfig+0x7b8>)
 80019c6:	f043 0304 	orr.w	r3, r3, #4
 80019ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80019ce:	4b1a      	ldr	r3, [pc, #104]	; (8001a38 <HAL_RCC_OscConfig+0x7b8>)
 80019d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019d4:	4a18      	ldr	r2, [pc, #96]	; (8001a38 <HAL_RCC_OscConfig+0x7b8>)
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80019de:	e018      	b.n	8001a12 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80019e0:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <HAL_RCC_OscConfig+0x7b8>)
 80019e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019e6:	4a14      	ldr	r2, [pc, #80]	; (8001a38 <HAL_RCC_OscConfig+0x7b8>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80019f0:	e00f      	b.n	8001a12 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80019f2:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <HAL_RCC_OscConfig+0x7b8>)
 80019f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019f8:	4a0f      	ldr	r2, [pc, #60]	; (8001a38 <HAL_RCC_OscConfig+0x7b8>)
 80019fa:	f023 0301 	bic.w	r3, r3, #1
 80019fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a02:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <HAL_RCC_OscConfig+0x7b8>)
 8001a04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a08:	4a0b      	ldr	r2, [pc, #44]	; (8001a38 <HAL_RCC_OscConfig+0x7b8>)
 8001a0a:	f023 0304 	bic.w	r3, r3, #4
 8001a0e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d057      	beq.n	8001aca <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8001a1a:	f7ff f801 	bl	8000a20 <HAL_GetTick>
 8001a1e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a20:	e00e      	b.n	8001a40 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a22:	f7fe fffd 	bl	8000a20 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d905      	bls.n	8001a40 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e2f8      	b.n	800202a <HAL_RCC_OscConfig+0xdaa>
 8001a38:	46020c00 	.word	0x46020c00
 8001a3c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a40:	4b9c      	ldr	r3, [pc, #624]	; (8001cb4 <HAL_RCC_OscConfig+0xa34>)
 8001a42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0e9      	beq.n	8001a22 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d01b      	beq.n	8001a92 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001a5a:	4b96      	ldr	r3, [pc, #600]	; (8001cb4 <HAL_RCC_OscConfig+0xa34>)
 8001a5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a60:	4a94      	ldr	r2, [pc, #592]	; (8001cb4 <HAL_RCC_OscConfig+0xa34>)
 8001a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a66:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001a6a:	e00a      	b.n	8001a82 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6c:	f7fe ffd8 	bl	8000a20 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e2d3      	b.n	800202a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001a82:	4b8c      	ldr	r3, [pc, #560]	; (8001cb4 <HAL_RCC_OscConfig+0xa34>)
 8001a84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0ed      	beq.n	8001a6c <HAL_RCC_OscConfig+0x7ec>
 8001a90:	e053      	b.n	8001b3a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001a92:	4b88      	ldr	r3, [pc, #544]	; (8001cb4 <HAL_RCC_OscConfig+0xa34>)
 8001a94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a98:	4a86      	ldr	r2, [pc, #536]	; (8001cb4 <HAL_RCC_OscConfig+0xa34>)
 8001a9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a9e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001aa2:	e00a      	b.n	8001aba <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa4:	f7fe ffbc 	bl	8000a20 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e2b7      	b.n	800202a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001aba:	4b7e      	ldr	r3, [pc, #504]	; (8001cb4 <HAL_RCC_OscConfig+0xa34>)
 8001abc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ac0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1ed      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x824>
 8001ac8:	e037      	b.n	8001b3a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8001aca:	f7fe ffa9 	bl	8000a20 <HAL_GetTick>
 8001ace:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ad0:	e00a      	b.n	8001ae8 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad2:	f7fe ffa5 	bl	8000a20 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e2a0      	b.n	800202a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ae8:	4b72      	ldr	r3, [pc, #456]	; (8001cb4 <HAL_RCC_OscConfig+0xa34>)
 8001aea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1ed      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001af6:	4b6f      	ldr	r3, [pc, #444]	; (8001cb4 <HAL_RCC_OscConfig+0xa34>)
 8001af8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d01a      	beq.n	8001b3a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001b04:	4b6b      	ldr	r3, [pc, #428]	; (8001cb4 <HAL_RCC_OscConfig+0xa34>)
 8001b06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b0a:	4a6a      	ldr	r2, [pc, #424]	; (8001cb4 <HAL_RCC_OscConfig+0xa34>)
 8001b0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b10:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b14:	e00a      	b.n	8001b2c <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b16:	f7fe ff83 	bl	8000a20 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e27e      	b.n	800202a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b2c:	4b61      	ldr	r3, [pc, #388]	; (8001cb4 <HAL_RCC_OscConfig+0xa34>)
 8001b2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1ed      	bne.n	8001b16 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b3a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d107      	bne.n	8001b52 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b42:	4b5c      	ldr	r3, [pc, #368]	; (8001cb4 <HAL_RCC_OscConfig+0xa34>)
 8001b44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b48:	4a5a      	ldr	r2, [pc, #360]	; (8001cb4 <HAL_RCC_OscConfig+0xa34>)
 8001b4a:	f023 0304 	bic.w	r3, r3, #4
 8001b4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0320 	and.w	r3, r3, #32
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d036      	beq.n	8001bcc <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d019      	beq.n	8001b9a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8001b66:	4b53      	ldr	r3, [pc, #332]	; (8001cb4 <HAL_RCC_OscConfig+0xa34>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a52      	ldr	r2, [pc, #328]	; (8001cb4 <HAL_RCC_OscConfig+0xa34>)
 8001b6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b70:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001b72:	f7fe ff55 	bl	8000a20 <HAL_GetTick>
 8001b76:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b7a:	f7fe ff51 	bl	8000a20 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e24e      	b.n	800202a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001b8c:	4b49      	ldr	r3, [pc, #292]	; (8001cb4 <HAL_RCC_OscConfig+0xa34>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0f0      	beq.n	8001b7a <HAL_RCC_OscConfig+0x8fa>
 8001b98:	e018      	b.n	8001bcc <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8001b9a:	4b46      	ldr	r3, [pc, #280]	; (8001cb4 <HAL_RCC_OscConfig+0xa34>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a45      	ldr	r2, [pc, #276]	; (8001cb4 <HAL_RCC_OscConfig+0xa34>)
 8001ba0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ba4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001ba6:	f7fe ff3b 	bl	8000a20 <HAL_GetTick>
 8001baa:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bae:	f7fe ff37 	bl	8000a20 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e234      	b.n	800202a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001bc0:	4b3c      	ldr	r3, [pc, #240]	; (8001cb4 <HAL_RCC_OscConfig+0xa34>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1f0      	bne.n	8001bae <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d036      	beq.n	8001c46 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d019      	beq.n	8001c14 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8001be0:	4b34      	ldr	r3, [pc, #208]	; (8001cb4 <HAL_RCC_OscConfig+0xa34>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a33      	ldr	r2, [pc, #204]	; (8001cb4 <HAL_RCC_OscConfig+0xa34>)
 8001be6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bea:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001bec:	f7fe ff18 	bl	8000a20 <HAL_GetTick>
 8001bf0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001bf4:	f7fe ff14 	bl	8000a20 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e211      	b.n	800202a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001c06:	4b2b      	ldr	r3, [pc, #172]	; (8001cb4 <HAL_RCC_OscConfig+0xa34>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0f0      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x974>
 8001c12:	e018      	b.n	8001c46 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8001c14:	4b27      	ldr	r3, [pc, #156]	; (8001cb4 <HAL_RCC_OscConfig+0xa34>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a26      	ldr	r2, [pc, #152]	; (8001cb4 <HAL_RCC_OscConfig+0xa34>)
 8001c1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c1e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001c20:	f7fe fefe 	bl	8000a20 <HAL_GetTick>
 8001c24:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001c28:	f7fe fefa 	bl	8000a20 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e1f7      	b.n	800202a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001c3a:	4b1e      	ldr	r3, [pc, #120]	; (8001cb4 <HAL_RCC_OscConfig+0xa34>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d07f      	beq.n	8001d52 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d062      	beq.n	8001d20 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8001c5a:	4b16      	ldr	r3, [pc, #88]	; (8001cb4 <HAL_RCC_OscConfig+0xa34>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	4a15      	ldr	r2, [pc, #84]	; (8001cb4 <HAL_RCC_OscConfig+0xa34>)
 8001c60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c64:	6093      	str	r3, [r2, #8]
 8001c66:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <HAL_RCC_OscConfig+0xa34>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c72:	4910      	ldr	r1, [pc, #64]	; (8001cb4 <HAL_RCC_OscConfig+0xa34>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001c80:	d309      	bcc.n	8001c96 <HAL_RCC_OscConfig+0xa16>
 8001c82:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <HAL_RCC_OscConfig+0xa34>)
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	f023 021f 	bic.w	r2, r3, #31
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	4909      	ldr	r1, [pc, #36]	; (8001cb4 <HAL_RCC_OscConfig+0xa34>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	60cb      	str	r3, [r1, #12]
 8001c94:	e02a      	b.n	8001cec <HAL_RCC_OscConfig+0xa6c>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	da0c      	bge.n	8001cb8 <HAL_RCC_OscConfig+0xa38>
 8001c9e:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <HAL_RCC_OscConfig+0xa34>)
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	015b      	lsls	r3, r3, #5
 8001cac:	4901      	ldr	r1, [pc, #4]	; (8001cb4 <HAL_RCC_OscConfig+0xa34>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	60cb      	str	r3, [r1, #12]
 8001cb2:	e01b      	b.n	8001cec <HAL_RCC_OscConfig+0xa6c>
 8001cb4:	46020c00 	.word	0x46020c00
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cc0:	d30a      	bcc.n	8001cd8 <HAL_RCC_OscConfig+0xa58>
 8001cc2:	4ba1      	ldr	r3, [pc, #644]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	029b      	lsls	r3, r3, #10
 8001cd0:	499d      	ldr	r1, [pc, #628]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	60cb      	str	r3, [r1, #12]
 8001cd6:	e009      	b.n	8001cec <HAL_RCC_OscConfig+0xa6c>
 8001cd8:	4b9b      	ldr	r3, [pc, #620]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	03db      	lsls	r3, r3, #15
 8001ce6:	4998      	ldr	r1, [pc, #608]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8001cec:	4b96      	ldr	r3, [pc, #600]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a95      	ldr	r2, [pc, #596]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001cf2:	f043 0310 	orr.w	r3, r3, #16
 8001cf6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001cf8:	f7fe fe92 	bl	8000a20 <HAL_GetTick>
 8001cfc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001d00:	f7fe fe8e 	bl	8000a20 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e18b      	b.n	800202a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001d12:	4b8d      	ldr	r3, [pc, #564]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0320 	and.w	r3, r3, #32
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCC_OscConfig+0xa80>
 8001d1e:	e018      	b.n	8001d52 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8001d20:	4b89      	ldr	r3, [pc, #548]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a88      	ldr	r2, [pc, #544]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001d26:	f023 0310 	bic.w	r3, r3, #16
 8001d2a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001d2c:	f7fe fe78 	bl	8000a20 <HAL_GetTick>
 8001d30:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001d34:	f7fe fe74 	bl	8000a20 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e171      	b.n	800202a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8001d46:	4b80      	ldr	r3, [pc, #512]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0320 	and.w	r3, r3, #32
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f0      	bne.n	8001d34 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 8166 	beq.w	8002028 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d62:	4b79      	ldr	r3, [pc, #484]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	f003 030c 	and.w	r3, r3, #12
 8001d6a:	2b0c      	cmp	r3, #12
 8001d6c:	f000 80f2 	beq.w	8001f54 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	f040 80c5 	bne.w	8001f04 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8001d7a:	4b73      	ldr	r3, [pc, #460]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a72      	ldr	r2, [pc, #456]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001d80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d84:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001d86:	f7fe fe4b 	bl	8000a20 <HAL_GetTick>
 8001d8a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d8e:	f7fe fe47 	bl	8000a20 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e144      	b.n	800202a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001da0:	4b69      	ldr	r3, [pc, #420]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1f0      	bne.n	8001d8e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dac:	4b66      	ldr	r3, [pc, #408]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d111      	bne.n	8001dde <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8001dba:	4b63      	ldr	r3, [pc, #396]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001dbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dc0:	4a61      	ldr	r2, [pc, #388]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001dc2:	f043 0304 	orr.w	r3, r3, #4
 8001dc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001dca:	4b5f      	ldr	r3, [pc, #380]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8001dde:	4b5b      	ldr	r3, [pc, #364]	; (8001f4c <HAL_RCC_OscConfig+0xccc>)
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001de6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001dea:	d102      	bne.n	8001df2 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8001dec:	2301      	movs	r3, #1
 8001dee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001df2:	4b56      	ldr	r3, [pc, #344]	; (8001f4c <HAL_RCC_OscConfig+0xccc>)
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	4a55      	ldr	r2, [pc, #340]	; (8001f4c <HAL_RCC_OscConfig+0xccc>)
 8001df8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dfc:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8001dfe:	4b52      	ldr	r3, [pc, #328]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e06:	f023 0303 	bic.w	r3, r3, #3
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e12:	3a01      	subs	r2, #1
 8001e14:	0212      	lsls	r2, r2, #8
 8001e16:	4311      	orrs	r1, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	494a      	ldr	r1, [pc, #296]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	628b      	str	r3, [r1, #40]	; 0x28
 8001e24:	4b48      	ldr	r3, [pc, #288]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001e26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e28:	4b49      	ldr	r3, [pc, #292]	; (8001f50 <HAL_RCC_OscConfig+0xcd0>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e30:	3a01      	subs	r2, #1
 8001e32:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e3a:	3a01      	subs	r2, #1
 8001e3c:	0252      	lsls	r2, r2, #9
 8001e3e:	b292      	uxth	r2, r2
 8001e40:	4311      	orrs	r1, r2
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e46:	3a01      	subs	r2, #1
 8001e48:	0412      	lsls	r2, r2, #16
 8001e4a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001e4e:	4311      	orrs	r1, r2
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001e54:	3a01      	subs	r2, #1
 8001e56:	0612      	lsls	r2, r2, #24
 8001e58:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	493a      	ldr	r1, [pc, #232]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8001e64:	4b38      	ldr	r3, [pc, #224]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e68:	4a37      	ldr	r2, [pc, #220]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001e6a:	f023 0310 	bic.w	r3, r3, #16
 8001e6e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e74:	4a34      	ldr	r2, [pc, #208]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8001e7a:	4b33      	ldr	r3, [pc, #204]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7e:	4a32      	ldr	r2, [pc, #200]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001e80:	f043 0310 	orr.w	r3, r3, #16
 8001e84:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8001e86:	4b30      	ldr	r3, [pc, #192]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8a:	f023 020c 	bic.w	r2, r3, #12
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e92:	492d      	ldr	r1, [pc, #180]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8001e98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d105      	bne.n	8001eac <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001ea0:	4b2a      	ldr	r3, [pc, #168]	; (8001f4c <HAL_RCC_OscConfig+0xccc>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	4a29      	ldr	r2, [pc, #164]	; (8001f4c <HAL_RCC_OscConfig+0xccc>)
 8001ea6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eaa:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8001eac:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d107      	bne.n	8001ec4 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8001eb4:	4b24      	ldr	r3, [pc, #144]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eba:	4a23      	ldr	r2, [pc, #140]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001ebc:	f023 0304 	bic.w	r3, r3, #4
 8001ec0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001ec4:	4b20      	ldr	r3, [pc, #128]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec8:	4a1f      	ldr	r2, [pc, #124]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001eca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ece:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8001ed0:	4b1d      	ldr	r3, [pc, #116]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a1c      	ldr	r2, [pc, #112]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001ed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eda:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001edc:	f7fe fda0 	bl	8000a20 <HAL_GetTick>
 8001ee0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee4:	f7fe fd9c 	bl	8000a20 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e099      	b.n	800202a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001ef6:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0xc64>
 8001f02:	e091      	b.n	8002028 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8001f04:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a0f      	ldr	r2, [pc, #60]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001f0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f0e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001f10:	f7fe fd86 	bl	8000a20 <HAL_GetTick>
 8001f14:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f18:	f7fe fd82 	bl	8000a20 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e07f      	b.n	800202a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001f2a:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f0      	bne.n	8001f18 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001f36:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3a:	4a03      	ldr	r2, [pc, #12]	; (8001f48 <HAL_RCC_OscConfig+0xcc8>)
 8001f3c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8001f40:	f023 0303 	bic.w	r3, r3, #3
 8001f44:	6293      	str	r3, [r2, #40]	; 0x28
 8001f46:	e06f      	b.n	8002028 <HAL_RCC_OscConfig+0xda8>
 8001f48:	46020c00 	.word	0x46020c00
 8001f4c:	46020800 	.word	0x46020800
 8001f50:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8001f54:	4b37      	ldr	r3, [pc, #220]	; (8002034 <HAL_RCC_OscConfig+0xdb4>)
 8001f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f58:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001f5a:	4b36      	ldr	r3, [pc, #216]	; (8002034 <HAL_RCC_OscConfig+0xdb4>)
 8001f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f5e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d039      	beq.n	8001fdc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	f003 0203 	and.w	r2, r3, #3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d132      	bne.n	8001fdc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	0a1b      	lsrs	r3, r3, #8
 8001f7a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d129      	bne.n	8001fdc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d122      	bne.n	8001fdc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fa0:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d11a      	bne.n	8001fdc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	0a5b      	lsrs	r3, r3, #9
 8001faa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d111      	bne.n	8001fdc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	0c1b      	lsrs	r3, r3, #16
 8001fbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fc4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d108      	bne.n	8001fdc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	0e1b      	lsrs	r3, r3, #24
 8001fce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d001      	beq.n	8001fe0 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e024      	b.n	800202a <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001fe0:	4b14      	ldr	r3, [pc, #80]	; (8002034 <HAL_RCC_OscConfig+0xdb4>)
 8001fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe4:	08db      	lsrs	r3, r3, #3
 8001fe6:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d01a      	beq.n	8002028 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8001ff2:	4b10      	ldr	r3, [pc, #64]	; (8002034 <HAL_RCC_OscConfig+0xdb4>)
 8001ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff6:	4a0f      	ldr	r2, [pc, #60]	; (8002034 <HAL_RCC_OscConfig+0xdb4>)
 8001ff8:	f023 0310 	bic.w	r3, r3, #16
 8001ffc:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffe:	f7fe fd0f 	bl	8000a20 <HAL_GetTick>
 8002002:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8002004:	bf00      	nop
 8002006:	f7fe fd0b 	bl	8000a20 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200e:	4293      	cmp	r3, r2
 8002010:	d0f9      	beq.n	8002006 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002016:	4a07      	ldr	r2, [pc, #28]	; (8002034 <HAL_RCC_OscConfig+0xdb4>)
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800201c:	4b05      	ldr	r3, [pc, #20]	; (8002034 <HAL_RCC_OscConfig+0xdb4>)
 800201e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002020:	4a04      	ldr	r2, [pc, #16]	; (8002034 <HAL_RCC_OscConfig+0xdb4>)
 8002022:	f043 0310 	orr.w	r3, r3, #16
 8002026:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3738      	adds	r7, #56	; 0x38
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	46020c00 	.word	0x46020c00

08002038 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e1d9      	b.n	8002400 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800204c:	4b9b      	ldr	r3, [pc, #620]	; (80022bc <HAL_RCC_ClockConfig+0x284>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 030f 	and.w	r3, r3, #15
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d910      	bls.n	800207c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205a:	4b98      	ldr	r3, [pc, #608]	; (80022bc <HAL_RCC_ClockConfig+0x284>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f023 020f 	bic.w	r2, r3, #15
 8002062:	4996      	ldr	r1, [pc, #600]	; (80022bc <HAL_RCC_ClockConfig+0x284>)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	4313      	orrs	r3, r2
 8002068:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800206a:	4b94      	ldr	r3, [pc, #592]	; (80022bc <HAL_RCC_ClockConfig+0x284>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	429a      	cmp	r2, r3
 8002076:	d001      	beq.n	800207c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e1c1      	b.n	8002400 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0310 	and.w	r3, r3, #16
 8002084:	2b00      	cmp	r3, #0
 8002086:	d010      	beq.n	80020aa <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	695a      	ldr	r2, [r3, #20]
 800208c:	4b8c      	ldr	r3, [pc, #560]	; (80022c0 <HAL_RCC_ClockConfig+0x288>)
 800208e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002090:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002094:	429a      	cmp	r2, r3
 8002096:	d908      	bls.n	80020aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8002098:	4b89      	ldr	r3, [pc, #548]	; (80022c0 <HAL_RCC_ClockConfig+0x288>)
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	4986      	ldr	r1, [pc, #536]	; (80022c0 <HAL_RCC_ClockConfig+0x288>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d012      	beq.n	80020dc <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691a      	ldr	r2, [r3, #16]
 80020ba:	4b81      	ldr	r3, [pc, #516]	; (80022c0 <HAL_RCC_ClockConfig+0x288>)
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	091b      	lsrs	r3, r3, #4
 80020c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d909      	bls.n	80020dc <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80020c8:	4b7d      	ldr	r3, [pc, #500]	; (80022c0 <HAL_RCC_ClockConfig+0x288>)
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	011b      	lsls	r3, r3, #4
 80020d6:	497a      	ldr	r1, [pc, #488]	; (80022c0 <HAL_RCC_ClockConfig+0x288>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d010      	beq.n	800210a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	4b74      	ldr	r3, [pc, #464]	; (80022c0 <HAL_RCC_ClockConfig+0x288>)
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d908      	bls.n	800210a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80020f8:	4b71      	ldr	r3, [pc, #452]	; (80022c0 <HAL_RCC_ClockConfig+0x288>)
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	496e      	ldr	r1, [pc, #440]	; (80022c0 <HAL_RCC_ClockConfig+0x288>)
 8002106:	4313      	orrs	r3, r2
 8002108:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d010      	beq.n	8002138 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	4b69      	ldr	r3, [pc, #420]	; (80022c0 <HAL_RCC_ClockConfig+0x288>)
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	f003 030f 	and.w	r3, r3, #15
 8002122:	429a      	cmp	r2, r3
 8002124:	d908      	bls.n	8002138 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002126:	4b66      	ldr	r3, [pc, #408]	; (80022c0 <HAL_RCC_ClockConfig+0x288>)
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	f023 020f 	bic.w	r2, r3, #15
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	4963      	ldr	r1, [pc, #396]	; (80022c0 <HAL_RCC_ClockConfig+0x288>)
 8002134:	4313      	orrs	r3, r2
 8002136:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 80d2 	beq.w	80022ea <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8002146:	2300      	movs	r3, #0
 8002148:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b03      	cmp	r3, #3
 8002150:	d143      	bne.n	80021da <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002152:	4b5b      	ldr	r3, [pc, #364]	; (80022c0 <HAL_RCC_ClockConfig+0x288>)
 8002154:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	d110      	bne.n	8002182 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002160:	4b57      	ldr	r3, [pc, #348]	; (80022c0 <HAL_RCC_ClockConfig+0x288>)
 8002162:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002166:	4a56      	ldr	r2, [pc, #344]	; (80022c0 <HAL_RCC_ClockConfig+0x288>)
 8002168:	f043 0304 	orr.w	r3, r3, #4
 800216c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002170:	4b53      	ldr	r3, [pc, #332]	; (80022c0 <HAL_RCC_ClockConfig+0x288>)
 8002172:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002176:	f003 0304 	and.w	r3, r3, #4
 800217a:	60bb      	str	r3, [r7, #8]
 800217c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800217e:	2301      	movs	r3, #1
 8002180:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8002182:	f7fe fc4d 	bl	8000a20 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002188:	4b4e      	ldr	r3, [pc, #312]	; (80022c4 <HAL_RCC_ClockConfig+0x28c>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00f      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8002196:	f7fe fc43 	bl	8000a20 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e12b      	b.n	8002400 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80021a8:	4b46      	ldr	r3, [pc, #280]	; (80022c4 <HAL_RCC_ClockConfig+0x28c>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0f0      	beq.n	8002196 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80021b4:	7dfb      	ldrb	r3, [r7, #23]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d107      	bne.n	80021ca <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80021ba:	4b41      	ldr	r3, [pc, #260]	; (80022c0 <HAL_RCC_ClockConfig+0x288>)
 80021bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021c0:	4a3f      	ldr	r2, [pc, #252]	; (80022c0 <HAL_RCC_ClockConfig+0x288>)
 80021c2:	f023 0304 	bic.w	r3, r3, #4
 80021c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80021ca:	4b3d      	ldr	r3, [pc, #244]	; (80022c0 <HAL_RCC_ClockConfig+0x288>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d121      	bne.n	800221a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e112      	b.n	8002400 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d107      	bne.n	80021f2 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021e2:	4b37      	ldr	r3, [pc, #220]	; (80022c0 <HAL_RCC_ClockConfig+0x288>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d115      	bne.n	800221a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e106      	b.n	8002400 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d107      	bne.n	800220a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80021fa:	4b31      	ldr	r3, [pc, #196]	; (80022c0 <HAL_RCC_ClockConfig+0x288>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0304 	and.w	r3, r3, #4
 8002202:	2b00      	cmp	r3, #0
 8002204:	d109      	bne.n	800221a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e0fa      	b.n	8002400 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800220a:	4b2d      	ldr	r3, [pc, #180]	; (80022c0 <HAL_RCC_ClockConfig+0x288>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e0f2      	b.n	8002400 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800221a:	4b29      	ldr	r3, [pc, #164]	; (80022c0 <HAL_RCC_ClockConfig+0x288>)
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	f023 0203 	bic.w	r2, r3, #3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	4926      	ldr	r1, [pc, #152]	; (80022c0 <HAL_RCC_ClockConfig+0x288>)
 8002228:	4313      	orrs	r3, r2
 800222a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800222c:	f7fe fbf8 	bl	8000a20 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b03      	cmp	r3, #3
 8002238:	d112      	bne.n	8002260 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800223a:	e00a      	b.n	8002252 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800223c:	f7fe fbf0 	bl	8000a20 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	f241 3288 	movw	r2, #5000	; 0x1388
 800224a:	4293      	cmp	r3, r2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e0d6      	b.n	8002400 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002252:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <HAL_RCC_ClockConfig+0x288>)
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	f003 030c 	and.w	r3, r3, #12
 800225a:	2b0c      	cmp	r3, #12
 800225c:	d1ee      	bne.n	800223c <HAL_RCC_ClockConfig+0x204>
 800225e:	e044      	b.n	80022ea <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2b02      	cmp	r3, #2
 8002266:	d112      	bne.n	800228e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002268:	e00a      	b.n	8002280 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800226a:	f7fe fbd9 	bl	8000a20 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	f241 3288 	movw	r2, #5000	; 0x1388
 8002278:	4293      	cmp	r3, r2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e0bf      	b.n	8002400 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002280:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <HAL_RCC_ClockConfig+0x288>)
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	f003 030c 	and.w	r3, r3, #12
 8002288:	2b08      	cmp	r3, #8
 800228a:	d1ee      	bne.n	800226a <HAL_RCC_ClockConfig+0x232>
 800228c:	e02d      	b.n	80022ea <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d123      	bne.n	80022de <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002296:	e00a      	b.n	80022ae <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002298:	f7fe fbc2 	bl	8000a20 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e0a8      	b.n	8002400 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80022ae:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <HAL_RCC_ClockConfig+0x288>)
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	f003 030c 	and.w	r3, r3, #12
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1ee      	bne.n	8002298 <HAL_RCC_ClockConfig+0x260>
 80022ba:	e016      	b.n	80022ea <HAL_RCC_ClockConfig+0x2b2>
 80022bc:	40022000 	.word	0x40022000
 80022c0:	46020c00 	.word	0x46020c00
 80022c4:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c8:	f7fe fbaa 	bl	8000a20 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e090      	b.n	8002400 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80022de:	4b4a      	ldr	r3, [pc, #296]	; (8002408 <HAL_RCC_ClockConfig+0x3d0>)
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	f003 030c 	and.w	r3, r3, #12
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	d1ee      	bne.n	80022c8 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d010      	beq.n	8002318 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	4b43      	ldr	r3, [pc, #268]	; (8002408 <HAL_RCC_ClockConfig+0x3d0>)
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	429a      	cmp	r2, r3
 8002304:	d208      	bcs.n	8002318 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002306:	4b40      	ldr	r3, [pc, #256]	; (8002408 <HAL_RCC_ClockConfig+0x3d0>)
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	f023 020f 	bic.w	r2, r3, #15
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	493d      	ldr	r1, [pc, #244]	; (8002408 <HAL_RCC_ClockConfig+0x3d0>)
 8002314:	4313      	orrs	r3, r2
 8002316:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002318:	4b3c      	ldr	r3, [pc, #240]	; (800240c <HAL_RCC_ClockConfig+0x3d4>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 030f 	and.w	r3, r3, #15
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d210      	bcs.n	8002348 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002326:	4b39      	ldr	r3, [pc, #228]	; (800240c <HAL_RCC_ClockConfig+0x3d4>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f023 020f 	bic.w	r2, r3, #15
 800232e:	4937      	ldr	r1, [pc, #220]	; (800240c <HAL_RCC_ClockConfig+0x3d4>)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	4313      	orrs	r3, r2
 8002334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002336:	4b35      	ldr	r3, [pc, #212]	; (800240c <HAL_RCC_ClockConfig+0x3d4>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d001      	beq.n	8002348 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e05b      	b.n	8002400 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b00      	cmp	r3, #0
 8002352:	d010      	beq.n	8002376 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68da      	ldr	r2, [r3, #12]
 8002358:	4b2b      	ldr	r3, [pc, #172]	; (8002408 <HAL_RCC_ClockConfig+0x3d0>)
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002360:	429a      	cmp	r2, r3
 8002362:	d208      	bcs.n	8002376 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002364:	4b28      	ldr	r3, [pc, #160]	; (8002408 <HAL_RCC_ClockConfig+0x3d0>)
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	4925      	ldr	r1, [pc, #148]	; (8002408 <HAL_RCC_ClockConfig+0x3d0>)
 8002372:	4313      	orrs	r3, r2
 8002374:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	2b00      	cmp	r3, #0
 8002380:	d012      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691a      	ldr	r2, [r3, #16]
 8002386:	4b20      	ldr	r3, [pc, #128]	; (8002408 <HAL_RCC_ClockConfig+0x3d0>)
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	091b      	lsrs	r3, r3, #4
 800238c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002390:	429a      	cmp	r2, r3
 8002392:	d209      	bcs.n	80023a8 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002394:	4b1c      	ldr	r3, [pc, #112]	; (8002408 <HAL_RCC_ClockConfig+0x3d0>)
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	011b      	lsls	r3, r3, #4
 80023a2:	4919      	ldr	r1, [pc, #100]	; (8002408 <HAL_RCC_ClockConfig+0x3d0>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0310 	and.w	r3, r3, #16
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d010      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	695a      	ldr	r2, [r3, #20]
 80023b8:	4b13      	ldr	r3, [pc, #76]	; (8002408 <HAL_RCC_ClockConfig+0x3d0>)
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d208      	bcs.n	80023d6 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80023c4:	4b10      	ldr	r3, [pc, #64]	; (8002408 <HAL_RCC_ClockConfig+0x3d0>)
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	490d      	ldr	r1, [pc, #52]	; (8002408 <HAL_RCC_ClockConfig+0x3d0>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80023d6:	f000 f821 	bl	800241c <HAL_RCC_GetSysClockFreq>
 80023da:	4602      	mov	r2, r0
 80023dc:	4b0a      	ldr	r3, [pc, #40]	; (8002408 <HAL_RCC_ClockConfig+0x3d0>)
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	f003 030f 	and.w	r3, r3, #15
 80023e4:	490a      	ldr	r1, [pc, #40]	; (8002410 <HAL_RCC_ClockConfig+0x3d8>)
 80023e6:	5ccb      	ldrb	r3, [r1, r3]
 80023e8:	fa22 f303 	lsr.w	r3, r2, r3
 80023ec:	4a09      	ldr	r2, [pc, #36]	; (8002414 <HAL_RCC_ClockConfig+0x3dc>)
 80023ee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023f0:	4b09      	ldr	r3, [pc, #36]	; (8002418 <HAL_RCC_ClockConfig+0x3e0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7fe fac9 	bl	800098c <HAL_InitTick>
 80023fa:	4603      	mov	r3, r0
 80023fc:	73fb      	strb	r3, [r7, #15]

  return status;
 80023fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	46020c00 	.word	0x46020c00
 800240c:	40022000 	.word	0x40022000
 8002410:	08004080 	.word	0x08004080
 8002414:	20000000 	.word	0x20000000
 8002418:	20000004 	.word	0x20000004

0800241c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800241c:	b480      	push	{r7}
 800241e:	b08b      	sub	sp, #44	; 0x2c
 8002420:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002422:	2300      	movs	r3, #0
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8002426:	2300      	movs	r3, #0
 8002428:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800242a:	4b7b      	ldr	r3, [pc, #492]	; (8002618 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	f003 030c 	and.w	r3, r3, #12
 8002432:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002434:	4b78      	ldr	r3, [pc, #480]	; (8002618 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002438:	f003 0303 	and.w	r3, r3, #3
 800243c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_RCC_GetSysClockFreq+0x34>
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	2b0c      	cmp	r3, #12
 8002448:	d121      	bne.n	800248e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d11e      	bne.n	800248e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8002450:	4b71      	ldr	r3, [pc, #452]	; (8002618 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d107      	bne.n	800246c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800245c:	4b6e      	ldr	r3, [pc, #440]	; (8002618 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800245e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002462:	0b1b      	lsrs	r3, r3, #12
 8002464:	f003 030f 	and.w	r3, r3, #15
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
 800246a:	e005      	b.n	8002478 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800246c:	4b6a      	ldr	r3, [pc, #424]	; (8002618 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	0f1b      	lsrs	r3, r3, #28
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002478:	4a68      	ldr	r2, [pc, #416]	; (800261c <HAL_RCC_GetSysClockFreq+0x200>)
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002480:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d110      	bne.n	80024aa <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800248c:	e00d      	b.n	80024aa <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800248e:	4b62      	ldr	r3, [pc, #392]	; (8002618 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	f003 030c 	and.w	r3, r3, #12
 8002496:	2b04      	cmp	r3, #4
 8002498:	d102      	bne.n	80024a0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800249a:	4b61      	ldr	r3, [pc, #388]	; (8002620 <HAL_RCC_GetSysClockFreq+0x204>)
 800249c:	623b      	str	r3, [r7, #32]
 800249e:	e004      	b.n	80024aa <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d101      	bne.n	80024aa <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024a6:	4b5e      	ldr	r3, [pc, #376]	; (8002620 <HAL_RCC_GetSysClockFreq+0x204>)
 80024a8:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	2b0c      	cmp	r3, #12
 80024ae:	f040 80ac 	bne.w	800260a <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80024b2:	4b59      	ldr	r3, [pc, #356]	; (8002618 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80024b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80024bc:	4b56      	ldr	r3, [pc, #344]	; (8002618 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80024be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c0:	0a1b      	lsrs	r3, r3, #8
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	3301      	adds	r3, #1
 80024c8:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80024ca:	4b53      	ldr	r3, [pc, #332]	; (8002618 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80024cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ce:	091b      	lsrs	r3, r3, #4
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80024d6:	4b50      	ldr	r3, [pc, #320]	; (8002618 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80024d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024da:	08db      	lsrs	r3, r3, #3
 80024dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80024e0:	68ba      	ldr	r2, [r7, #8]
 80024e2:	fb02 f303 	mul.w	r3, r2, r3
 80024e6:	ee07 3a90 	vmov	s15, r3
 80024ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024ee:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f000 8086 	beq.w	8002606 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d003      	beq.n	8002508 <HAL_RCC_GetSysClockFreq+0xec>
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	2b03      	cmp	r3, #3
 8002504:	d022      	beq.n	800254c <HAL_RCC_GetSysClockFreq+0x130>
 8002506:	e043      	b.n	8002590 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	ee07 3a90 	vmov	s15, r3
 800250e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002512:	eddf 6a44 	vldr	s13, [pc, #272]	; 8002624 <HAL_RCC_GetSysClockFreq+0x208>
 8002516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800251a:	4b3f      	ldr	r3, [pc, #252]	; (8002618 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800251c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800251e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002522:	ee07 3a90 	vmov	s15, r3
 8002526:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800252a:	ed97 6a01 	vldr	s12, [r7, #4]
 800252e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002628 <HAL_RCC_GetSysClockFreq+0x20c>
 8002532:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002536:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800253a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800253e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002546:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800254a:	e046      	b.n	80025da <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	ee07 3a90 	vmov	s15, r3
 8002552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002556:	eddf 6a33 	vldr	s13, [pc, #204]	; 8002624 <HAL_RCC_GetSysClockFreq+0x208>
 800255a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800255e:	4b2e      	ldr	r3, [pc, #184]	; (8002618 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002566:	ee07 3a90 	vmov	s15, r3
 800256a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800256e:	ed97 6a01 	vldr	s12, [r7, #4]
 8002572:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002628 <HAL_RCC_GetSysClockFreq+0x20c>
 8002576:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800257a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800257e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002582:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800258a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800258e:	e024      	b.n	80025da <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	ee07 3a90 	vmov	s15, r3
 8002596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	ee07 3a90 	vmov	s15, r3
 80025a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025a8:	4b1b      	ldr	r3, [pc, #108]	; (8002618 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80025aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025b0:	ee07 3a90 	vmov	s15, r3
 80025b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80025b8:	ed97 6a01 	vldr	s12, [r7, #4]
 80025bc:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8002628 <HAL_RCC_GetSysClockFreq+0x20c>
 80025c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80025c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80025c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80025d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025d4:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80025d8:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80025da:	4b0f      	ldr	r3, [pc, #60]	; (8002618 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80025dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025de:	0e1b      	lsrs	r3, r3, #24
 80025e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025e4:	3301      	adds	r3, #1
 80025e6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	ee07 3a90 	vmov	s15, r3
 80025ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80025f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025fe:	ee17 3a90 	vmov	r3, s15
 8002602:	623b      	str	r3, [r7, #32]
 8002604:	e001      	b.n	800260a <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800260a:	6a3b      	ldr	r3, [r7, #32]
}
 800260c:	4618      	mov	r0, r3
 800260e:	372c      	adds	r7, #44	; 0x2c
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	46020c00 	.word	0x46020c00
 800261c:	08004090 	.word	0x08004090
 8002620:	00f42400 	.word	0x00f42400
 8002624:	4b742400 	.word	0x4b742400
 8002628:	46000000 	.word	0x46000000

0800262c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002630:	f7ff fef4 	bl	800241c <HAL_RCC_GetSysClockFreq>
 8002634:	4602      	mov	r2, r0
 8002636:	4b07      	ldr	r3, [pc, #28]	; (8002654 <HAL_RCC_GetHCLKFreq+0x28>)
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	4906      	ldr	r1, [pc, #24]	; (8002658 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002640:	5ccb      	ldrb	r3, [r1, r3]
 8002642:	fa22 f303 	lsr.w	r3, r2, r3
 8002646:	4a05      	ldr	r2, [pc, #20]	; (800265c <HAL_RCC_GetHCLKFreq+0x30>)
 8002648:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800264a:	4b04      	ldr	r3, [pc, #16]	; (800265c <HAL_RCC_GetHCLKFreq+0x30>)
 800264c:	681b      	ldr	r3, [r3, #0]
}
 800264e:	4618      	mov	r0, r3
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	46020c00 	.word	0x46020c00
 8002658:	08004080 	.word	0x08004080
 800265c:	20000000 	.word	0x20000000

08002660 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002668:	4b3e      	ldr	r3, [pc, #248]	; (8002764 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800266a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800266e:	f003 0304 	and.w	r3, r3, #4
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002676:	f7fe fd85 	bl	8001184 <HAL_PWREx_GetVoltageRange>
 800267a:	6178      	str	r0, [r7, #20]
 800267c:	e019      	b.n	80026b2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800267e:	4b39      	ldr	r3, [pc, #228]	; (8002764 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002680:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002684:	4a37      	ldr	r2, [pc, #220]	; (8002764 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002686:	f043 0304 	orr.w	r3, r3, #4
 800268a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800268e:	4b35      	ldr	r3, [pc, #212]	; (8002764 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002690:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800269c:	f7fe fd72 	bl	8001184 <HAL_PWREx_GetVoltageRange>
 80026a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80026a2:	4b30      	ldr	r3, [pc, #192]	; (8002764 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80026a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026a8:	4a2e      	ldr	r2, [pc, #184]	; (8002764 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80026aa:	f023 0304 	bic.w	r3, r3, #4
 80026ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80026b8:	d003      	beq.n	80026c2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026c0:	d109      	bne.n	80026d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026c8:	d202      	bcs.n	80026d0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80026ca:	2301      	movs	r3, #1
 80026cc:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80026ce:	e033      	b.n	8002738 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80026d0:	2300      	movs	r3, #0
 80026d2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80026d4:	e030      	b.n	8002738 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026dc:	d208      	bcs.n	80026f0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e4:	d102      	bne.n	80026ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80026e6:	2303      	movs	r3, #3
 80026e8:	613b      	str	r3, [r7, #16]
 80026ea:	e025      	b.n	8002738 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e035      	b.n	800275c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026f6:	d90f      	bls.n	8002718 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d109      	bne.n	8002712 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002704:	d902      	bls.n	800270c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8002706:	2300      	movs	r3, #0
 8002708:	613b      	str	r3, [r7, #16]
 800270a:	e015      	b.n	8002738 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800270c:	2301      	movs	r3, #1
 800270e:	613b      	str	r3, [r7, #16]
 8002710:	e012      	b.n	8002738 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8002712:	2300      	movs	r3, #0
 8002714:	613b      	str	r3, [r7, #16]
 8002716:	e00f      	b.n	8002738 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800271e:	d109      	bne.n	8002734 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002726:	d102      	bne.n	800272e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8002728:	2301      	movs	r3, #1
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	e004      	b.n	8002738 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800272e:	2302      	movs	r3, #2
 8002730:	613b      	str	r3, [r7, #16]
 8002732:	e001      	b.n	8002738 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8002734:	2301      	movs	r3, #1
 8002736:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002738:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f023 020f 	bic.w	r2, r3, #15
 8002740:	4909      	ldr	r1, [pc, #36]	; (8002768 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	4313      	orrs	r3, r2
 8002746:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002748:	4b07      	ldr	r3, [pc, #28]	; (8002768 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 030f 	and.w	r3, r3, #15
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	429a      	cmp	r2, r3
 8002754:	d001      	beq.n	800275a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e000      	b.n	800275c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3718      	adds	r7, #24
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	46020c00 	.word	0x46020c00
 8002768:	40022000 	.word	0x40022000

0800276c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800276c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002770:	b0c4      	sub	sp, #272	; 0x110
 8002772:	af00      	add	r7, sp, #0
 8002774:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002778:	2300      	movs	r3, #0
 800277a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800277e:	2300      	movs	r3, #0
 8002780:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002784:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800278c:	f002 0401 	and.w	r4, r2, #1
 8002790:	2500      	movs	r5, #0
 8002792:	ea54 0305 	orrs.w	r3, r4, r5
 8002796:	d00b      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002798:	4bd5      	ldr	r3, [pc, #852]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800279a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800279e:	f023 0103 	bic.w	r1, r3, #3
 80027a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027a8:	4ad1      	ldr	r2, [pc, #836]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80027aa:	430b      	orrs	r3, r1
 80027ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b8:	f002 0802 	and.w	r8, r2, #2
 80027bc:	f04f 0900 	mov.w	r9, #0
 80027c0:	ea58 0309 	orrs.w	r3, r8, r9
 80027c4:	d00b      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80027c6:	4bca      	ldr	r3, [pc, #808]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80027c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027cc:	f023 010c 	bic.w	r1, r3, #12
 80027d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d6:	4ac6      	ldr	r2, [pc, #792]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80027d8:	430b      	orrs	r3, r1
 80027da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e6:	f002 0a04 	and.w	sl, r2, #4
 80027ea:	f04f 0b00 	mov.w	fp, #0
 80027ee:	ea5a 030b 	orrs.w	r3, sl, fp
 80027f2:	d00b      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80027f4:	4bbe      	ldr	r3, [pc, #760]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80027f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027fa:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80027fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002804:	4aba      	ldr	r2, [pc, #744]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002806:	430b      	orrs	r3, r1
 8002808:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800280c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002814:	f002 0308 	and.w	r3, r2, #8
 8002818:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800281c:	2300      	movs	r3, #0
 800281e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002822:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002826:	460b      	mov	r3, r1
 8002828:	4313      	orrs	r3, r2
 800282a:	d00b      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800282c:	4bb0      	ldr	r3, [pc, #704]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800282e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002832:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800283a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283c:	4aac      	ldr	r2, [pc, #688]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800283e:	430b      	orrs	r3, r1
 8002840:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002844:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284c:	f002 0310 	and.w	r3, r2, #16
 8002850:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002854:	2300      	movs	r3, #0
 8002856:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800285a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800285e:	460b      	mov	r3, r1
 8002860:	4313      	orrs	r3, r2
 8002862:	d00b      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002864:	4ba2      	ldr	r3, [pc, #648]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800286a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800286e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002874:	4a9e      	ldr	r2, [pc, #632]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002876:	430b      	orrs	r3, r1
 8002878:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800287c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002884:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8002888:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800288c:	2300      	movs	r3, #0
 800288e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002892:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002896:	460b      	mov	r3, r1
 8002898:	4313      	orrs	r3, r2
 800289a:	d00b      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800289c:	4b94      	ldr	r3, [pc, #592]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800289e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80028a2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80028a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028ac:	4a90      	ldr	r2, [pc, #576]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80028ae:	430b      	orrs	r3, r1
 80028b0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028bc:	f002 0320 	and.w	r3, r2, #32
 80028c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80028c4:	2300      	movs	r3, #0
 80028c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80028ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80028ce:	460b      	mov	r3, r1
 80028d0:	4313      	orrs	r3, r2
 80028d2:	d00b      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80028d4:	4b86      	ldr	r3, [pc, #536]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80028d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028da:	f023 0107 	bic.w	r1, r3, #7
 80028de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028e4:	4a82      	ldr	r2, [pc, #520]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80028e6:	430b      	orrs	r3, r1
 80028e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f4:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80028f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80028fc:	2300      	movs	r3, #0
 80028fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002902:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002906:	460b      	mov	r3, r1
 8002908:	4313      	orrs	r3, r2
 800290a:	d00b      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800290c:	4b78      	ldr	r3, [pc, #480]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800290e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002912:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8002916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800291a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800291c:	4a74      	ldr	r2, [pc, #464]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800291e:	430b      	orrs	r3, r1
 8002920:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002924:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8002930:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002934:	2300      	movs	r3, #0
 8002936:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800293a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800293e:	460b      	mov	r3, r1
 8002940:	4313      	orrs	r3, r2
 8002942:	d00b      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002944:	4b6a      	ldr	r3, [pc, #424]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800294a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800294e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002954:	4a66      	ldr	r2, [pc, #408]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002956:	430b      	orrs	r3, r1
 8002958:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800295c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002964:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8002968:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800296c:	2300      	movs	r3, #0
 800296e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002972:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002976:	460b      	mov	r3, r1
 8002978:	4313      	orrs	r3, r2
 800297a:	d00b      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800297c:	4b5c      	ldr	r3, [pc, #368]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800297e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002982:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002986:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800298a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800298c:	4a58      	ldr	r2, [pc, #352]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800298e:	430b      	orrs	r3, r1
 8002990:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002994:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80029a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029a4:	2300      	movs	r3, #0
 80029a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80029aa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80029ae:	460b      	mov	r3, r1
 80029b0:	4313      	orrs	r3, r2
 80029b2:	d00b      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80029b4:	4b4e      	ldr	r3, [pc, #312]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80029b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ba:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 80029be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029c4:	4a4a      	ldr	r2, [pc, #296]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80029c6:	430b      	orrs	r3, r1
 80029c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 80029cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d4:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80029d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029dc:	2300      	movs	r3, #0
 80029de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029e2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4313      	orrs	r3, r2
 80029ea:	d00b      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 80029ec:	4b40      	ldr	r3, [pc, #256]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80029ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80029f2:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 80029f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029fc:	4a3c      	ldr	r2, [pc, #240]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80029fe:	430b      	orrs	r3, r1
 8002a00:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8002a04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8002a10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002a14:	2300      	movs	r3, #0
 8002a16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002a1a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4313      	orrs	r3, r2
 8002a22:	d00c      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8002a24:	4b32      	ldr	r3, [pc, #200]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002a26:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002a2a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002a2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a36:	4a2e      	ldr	r2, [pc, #184]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002a38:	430b      	orrs	r3, r1
 8002a3a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a46:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8002a4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002a54:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	d00c      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8002a5e:	4b24      	ldr	r3, [pc, #144]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002a60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a64:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8002a68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a70:	4a1f      	ldr	r2, [pc, #124]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002a72:	430b      	orrs	r3, r1
 8002a74:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a80:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002a84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002a88:	2300      	movs	r3, #0
 8002a8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002a8e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8002a92:	460b      	mov	r3, r1
 8002a94:	4313      	orrs	r3, r2
 8002a96:	d00c      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8002a98:	4b15      	ldr	r3, [pc, #84]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a9e:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8002aa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aaa:	4a11      	ldr	r2, [pc, #68]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002aac:	430b      	orrs	r3, r1
 8002aae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8002ab2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aba:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002abe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002ac8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8002acc:	460b      	mov	r3, r1
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	d010      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8002ad2:	4b07      	ldr	r3, [pc, #28]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002ad4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ad8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002adc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ae4:	4a02      	ldr	r2, [pc, #8]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002ae6:	430b      	orrs	r3, r1
 8002ae8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002aec:	e002      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8002aee:	bf00      	nop
 8002af0:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002af4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afc:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002b00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002b04:	2300      	movs	r3, #0
 8002b06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002b0a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4313      	orrs	r3, r2
 8002b12:	d04c      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8002b14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b1c:	2b80      	cmp	r3, #128	; 0x80
 8002b1e:	d02d      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002b20:	2b80      	cmp	r3, #128	; 0x80
 8002b22:	d827      	bhi.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002b24:	2b60      	cmp	r3, #96	; 0x60
 8002b26:	d02b      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8002b28:	2b60      	cmp	r3, #96	; 0x60
 8002b2a:	d823      	bhi.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002b2c:	2b40      	cmp	r3, #64	; 0x40
 8002b2e:	d006      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8002b30:	2b40      	cmp	r3, #64	; 0x40
 8002b32:	d81f      	bhi.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d009      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002b38:	2b20      	cmp	r3, #32
 8002b3a:	d011      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8002b3c:	e01a      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b3e:	4bbe      	ldr	r3, [pc, #760]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b42:	4abd      	ldr	r2, [pc, #756]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b48:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002b4a:	e01a      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002b4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b50:	3308      	adds	r3, #8
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 fcc6 	bl	80034e4 <RCCEx_PLL2_Config>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002b5e:	e010      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002b60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b64:	332c      	adds	r3, #44	; 0x2c
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 fd54 	bl	8003614 <RCCEx_PLL3_Config>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002b72:	e006      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8002b7a:	e002      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8002b7c:	bf00      	nop
 8002b7e:	e000      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8002b80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b82:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10d      	bne.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8002b8a:	4bab      	ldr	r3, [pc, #684]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b8c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002b90:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8002b94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b9c:	4aa6      	ldr	r2, [pc, #664]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b9e:	430b      	orrs	r3, r1
 8002ba0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002ba4:	e003      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ba6:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002baa:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002bba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002bc4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	d053      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8002bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bd2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bda:	d033      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8002bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be0:	d82c      	bhi.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002be2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002be6:	d02f      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8002be8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bec:	d826      	bhi.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002bee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bf2:	d008      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8002bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bf8:	d820      	bhi.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00a      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c02:	d011      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002c04:	e01a      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c06:	4b8c      	ldr	r3, [pc, #560]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0a:	4a8b      	ldr	r2, [pc, #556]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c10:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002c12:	e01a      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002c14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c18:	3308      	adds	r3, #8
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 fc62 	bl	80034e4 <RCCEx_PLL2_Config>
 8002c20:	4603      	mov	r3, r0
 8002c22:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002c26:	e010      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002c28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c2c:	332c      	adds	r3, #44	; 0x2c
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 fcf0 	bl	8003614 <RCCEx_PLL3_Config>
 8002c34:	4603      	mov	r3, r0
 8002c36:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002c3a:	e006      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8002c42:	e002      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8002c44:	bf00      	nop
 8002c46:	e000      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8002c48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c4a:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10d      	bne.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8002c52:	4b79      	ldr	r3, [pc, #484]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002c58:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8002c5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002c64:	4a74      	ldr	r2, [pc, #464]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c66:	430b      	orrs	r3, r1
 8002c68:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002c6c:	e003      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c6e:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002c72:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8002c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7e:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002c82:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c84:	2300      	movs	r3, #0
 8002c86:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c88:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	d046      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8002c92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002c9a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002c9e:	d028      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002ca0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002ca4:	d821      	bhi.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8002ca6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002caa:	d022      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002cac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cb0:	d81b      	bhi.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8002cb2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002cb6:	d01c      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002cb8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002cbc:	d815      	bhi.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8002cbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cc2:	d008      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8002cc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cc8:	d80f      	bhi.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d011      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd2:	d00e      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002cd4:	e009      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x57e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cda:	3308      	adds	r3, #8
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f000 fc01 	bl	80034e4 <RCCEx_PLL2_Config>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8002ce8:	e004      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x588>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8002cf0:	e000      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x588>
        break;
 8002cf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cf4:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10d      	bne.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8002cfc:	4b4e      	ldr	r3, [pc, #312]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d02:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002d06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002d0e:	4a4a      	ldr	r2, [pc, #296]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d10:	430b      	orrs	r3, r1
 8002d12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d16:	e003      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d18:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002d1c:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8002d20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d28:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8002d2c:	673b      	str	r3, [r7, #112]	; 0x70
 8002d2e:	2300      	movs	r3, #0
 8002d30:	677b      	str	r3, [r7, #116]	; 0x74
 8002d32:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8002d36:	460b      	mov	r3, r1
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	d03f      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8002d3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	d81e      	bhi.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8002d48:	a201      	add	r2, pc, #4	; (adr r2, 8002d50 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d4e:	bf00      	nop
 8002d50:	08002d8f 	.word	0x08002d8f
 8002d54:	08002d65 	.word	0x08002d65
 8002d58:	08002d73 	.word	0x08002d73
 8002d5c:	08002d8f 	.word	0x08002d8f
 8002d60:	08002d8f 	.word	0x08002d8f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d64:	4b34      	ldr	r3, [pc, #208]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d68:	4a33      	ldr	r2, [pc, #204]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d6e:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8002d70:	e00e      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d76:	332c      	adds	r3, #44	; 0x2c
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f000 fc4b 	bl	8003614 <RCCEx_PLL3_Config>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8002d84:	e004      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8002d8c:	e000      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x624>
        break;
 8002d8e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8002d90:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10d      	bne.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8002d98:	4b27      	ldr	r3, [pc, #156]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d9a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002d9e:	f023 0107 	bic.w	r1, r3, #7
 8002da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002daa:	4a23      	ldr	r2, [pc, #140]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dac:	430b      	orrs	r3, r1
 8002dae:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002db2:	e003      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x650>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002db4:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002db8:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8002dbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc4:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8002dc8:	66bb      	str	r3, [r7, #104]	; 0x68
 8002dca:	2300      	movs	r3, #0
 8002dcc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002dce:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	d04c      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x706>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8002dd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ddc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002de0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002de4:	d02a      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8002de6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dea:	d821      	bhi.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8002dec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002df0:	d026      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 8002df2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002df6:	d81b      	bhi.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8002df8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002dfc:	d00e      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8002dfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e02:	d815      	bhi.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d01d      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8002e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e0c:	d110      	bne.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002e0e:	4b0a      	ldr	r3, [pc, #40]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e12:	4a09      	ldr	r2, [pc, #36]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e18:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8002e1a:	e014      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002e1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e20:	332c      	adds	r3, #44	; 0x2c
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 fbf6 	bl	8003614 <RCCEx_PLL3_Config>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8002e2e:	e00a      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8002e36:	e006      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8002e38:	46020c00 	.word	0x46020c00
        break;
 8002e3c:	bf00      	nop
 8002e3e:	e002      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8002e40:	bf00      	nop
 8002e42:	e000      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8002e44:	bf00      	nop
    }
    if (ret == HAL_OK)
 8002e46:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10d      	bne.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8002e4e:	4baf      	ldr	r3, [pc, #700]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002e50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e54:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002e58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e60:	4aaa      	ldr	r2, [pc, #680]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002e62:	430b      	orrs	r3, r1
 8002e64:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e68:	e003      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x706>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e6a:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002e6e:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8002e7e:	663b      	str	r3, [r7, #96]	; 0x60
 8002e80:	2300      	movs	r3, #0
 8002e82:	667b      	str	r3, [r7, #100]	; 0x64
 8002e84:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8002e88:	460b      	mov	r3, r1
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	f000 80b5 	beq.w	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x88e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e90:	2300      	movs	r3, #0
 8002e92:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e96:	4b9d      	ldr	r3, [pc, #628]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d113      	bne.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x760>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ea4:	4b99      	ldr	r3, [pc, #612]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002ea6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eaa:	4a98      	ldr	r2, [pc, #608]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002eac:	f043 0304 	orr.w	r3, r3, #4
 8002eb0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002eb4:	4b95      	ldr	r3, [pc, #596]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eba:	f003 0304 	and.w	r3, r3, #4
 8002ebe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002ec2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
      pwrclkchanged = SET;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002ecc:	4b90      	ldr	r3, [pc, #576]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8002ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed0:	4a8f      	ldr	r2, [pc, #572]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8002ed2:	f043 0301 	orr.w	r3, r3, #1
 8002ed6:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ed8:	f7fd fda2 	bl	8000a20 <HAL_GetTick>
 8002edc:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002ee0:	e00b      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x78e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ee2:	f7fd fd9d 	bl	8000a20 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d903      	bls.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        ret = HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8002ef8:	e005      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x79a>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002efa:	4b85      	ldr	r3, [pc, #532]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8002efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0ed      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x776>
      }
    }

    if (ret == HAL_OK)
 8002f06:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d165      	bne.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f0e:	4b7f      	ldr	r3, [pc, #508]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002f10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f18:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8002f1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d023      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x800>
 8002f24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f28:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8002f2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d01b      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x800>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f34:	4b75      	ldr	r3, [pc, #468]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002f36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f3e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f42:	4b72      	ldr	r3, [pc, #456]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002f44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f48:	4a70      	ldr	r2, [pc, #448]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f4e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f52:	4b6e      	ldr	r3, [pc, #440]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002f54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f58:	4a6c      	ldr	r2, [pc, #432]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f5e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f62:	4a6a      	ldr	r2, [pc, #424]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002f64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f68:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d019      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x840>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f78:	f7fd fd52 	bl	8000a20 <HAL_GetTick>
 8002f7c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f80:	e00d      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x832>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f82:	f7fd fd4d 	bl	8000a20 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f8c:	1ad2      	subs	r2, r2, r3
 8002f8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d903      	bls.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x832>
          {
            ret = HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
            break;
 8002f9c:	e006      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x840>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f9e:	4b5b      	ldr	r3, [pc, #364]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002fa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0ea      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x816>
          }
        }
      }

      if (ret == HAL_OK)
 8002fac:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10d      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x864>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8002fb4:	4b55      	ldr	r3, [pc, #340]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002fb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002fbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fc2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8002fc6:	4a51      	ldr	r2, [pc, #324]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002fc8:	430b      	orrs	r3, r1
 8002fca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002fce:	e008      	b.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fd0:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002fd4:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
 8002fd8:	e003      	b.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fda:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002fde:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fe2:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d107      	bne.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x88e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fea:	4b48      	ldr	r3, [pc, #288]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002fec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ff0:	4a46      	ldr	r2, [pc, #280]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002ff2:	f023 0304 	bic.w	r3, r3, #4
 8002ff6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8002ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003002:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003006:	65bb      	str	r3, [r7, #88]	; 0x58
 8003008:	2300      	movs	r3, #0
 800300a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800300c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003010:	460b      	mov	r3, r1
 8003012:	4313      	orrs	r3, r2
 8003014:	d042      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8003016:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800301a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800301e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003022:	d022      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8003024:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003028:	d81b      	bhi.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 800302a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800302e:	d011      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 8003030:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003034:	d815      	bhi.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8003036:	2b00      	cmp	r3, #0
 8003038:	d019      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x902>
 800303a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800303e:	d110      	bne.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003040:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003044:	3308      	adds	r3, #8
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fa4c 	bl	80034e4 <RCCEx_PLL2_Config>
 800304c:	4603      	mov	r3, r0
 800304e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003052:	e00d      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003054:	4b2d      	ldr	r3, [pc, #180]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003058:	4a2c      	ldr	r2, [pc, #176]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800305a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800305e:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003060:	e006      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003068:	e002      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 800306a:	bf00      	nop
 800306c:	e000      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 800306e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003070:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10d      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x928>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8003078:	4b24      	ldr	r3, [pc, #144]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800307a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800307e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003086:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800308a:	4a20      	ldr	r2, [pc, #128]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800308c:	430b      	orrs	r3, r1
 800308e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003092:	e003      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003094:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003098:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800309c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80030a8:	653b      	str	r3, [r7, #80]	; 0x50
 80030aa:	2300      	movs	r3, #0
 80030ac:	657b      	str	r3, [r7, #84]	; 0x54
 80030ae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80030b2:	460b      	mov	r3, r1
 80030b4:	4313      	orrs	r3, r2
 80030b6:	d031      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80030b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80030c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030c4:	d00b      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x972>
 80030c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ca:	d804      	bhi.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d008      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80030d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030d4:	d007      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x97a>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80030dc:	e004      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 80030de:	bf00      	nop
 80030e0:	e002      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 80030e2:	bf00      	nop
 80030e4:	e000      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 80030e6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80030e8:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d111      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80030f0:	4b06      	ldr	r3, [pc, #24]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80030f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80030f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003102:	4a02      	ldr	r2, [pc, #8]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003104:	430b      	orrs	r3, r1
 8003106:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800310a:	e007      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 800310c:	46020c00 	.word	0x46020c00
 8003110:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003114:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003118:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800311c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003124:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003128:	64bb      	str	r3, [r7, #72]	; 0x48
 800312a:	2300      	movs	r3, #0
 800312c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800312e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003132:	460b      	mov	r3, r1
 8003134:	4313      	orrs	r3, r2
 8003136:	d00c      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8003138:	4bb2      	ldr	r3, [pc, #712]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800313a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800313e:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8003142:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003146:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800314a:	4aae      	ldr	r2, [pc, #696]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800314c:	430b      	orrs	r3, r1
 800314e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8003152:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800315e:	643b      	str	r3, [r7, #64]	; 0x40
 8003160:	2300      	movs	r3, #0
 8003162:	647b      	str	r3, [r7, #68]	; 0x44
 8003164:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003168:	460b      	mov	r3, r1
 800316a:	4313      	orrs	r3, r2
 800316c:	d019      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800316e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003172:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003176:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800317a:	d105      	bne.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800317c:	4ba1      	ldr	r3, [pc, #644]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800317e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003180:	4aa0      	ldr	r2, [pc, #640]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003182:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003186:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8003188:	4b9e      	ldr	r3, [pc, #632]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800318a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800318e:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003196:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800319a:	4a9a      	ldr	r2, [pc, #616]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800319c:	430b      	orrs	r3, r1
 800319e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80031a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031aa:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80031ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80031b0:	2300      	movs	r3, #0
 80031b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031b4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80031b8:	460b      	mov	r3, r1
 80031ba:	4313      	orrs	r3, r2
 80031bc:	d00c      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80031be:	4b91      	ldr	r3, [pc, #580]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80031c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031c4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80031c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031cc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80031d0:	4a8c      	ldr	r2, [pc, #560]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80031d2:	430b      	orrs	r3, r1
 80031d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80031d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80031e4:	633b      	str	r3, [r7, #48]	; 0x30
 80031e6:	2300      	movs	r3, #0
 80031e8:	637b      	str	r3, [r7, #52]	; 0x34
 80031ea:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80031ee:	460b      	mov	r3, r1
 80031f0:	4313      	orrs	r3, r2
 80031f2:	d00c      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80031f4:	4b83      	ldr	r3, [pc, #524]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80031f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031fa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80031fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003202:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003206:	4a7f      	ldr	r2, [pc, #508]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003208:	430b      	orrs	r3, r1
 800320a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800320e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003216:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800321a:	62bb      	str	r3, [r7, #40]	; 0x28
 800321c:	2300      	movs	r3, #0
 800321e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003220:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003224:	460b      	mov	r3, r1
 8003226:	4313      	orrs	r3, r2
 8003228:	d00c      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xad8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800322a:	4b76      	ldr	r3, [pc, #472]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800322c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003230:	f023 0218 	bic.w	r2, r3, #24
 8003234:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003238:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800323c:	4971      	ldr	r1, [pc, #452]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800323e:	4313      	orrs	r3, r2
 8003240:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003244:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324c:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8003250:	623b      	str	r3, [r7, #32]
 8003252:	2300      	movs	r3, #0
 8003254:	627b      	str	r3, [r7, #36]	; 0x24
 8003256:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800325a:	460b      	mov	r3, r1
 800325c:	4313      	orrs	r3, r2
 800325e:	d032      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8003260:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003264:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003268:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800326c:	d105      	bne.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800326e:	4b65      	ldr	r3, [pc, #404]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003272:	4a64      	ldr	r2, [pc, #400]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003278:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800327a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800327e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003282:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003286:	d108      	bne.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003288:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800328c:	3308      	adds	r3, #8
 800328e:	4618      	mov	r0, r3
 8003290:	f000 f928 	bl	80034e4 <RCCEx_PLL2_Config>
 8003294:	4603      	mov	r3, r0
 8003296:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    }
    if (ret == HAL_OK)
 800329a:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10d      	bne.n	80032be <HAL_RCCEx_PeriphCLKConfig+0xb52>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80032a2:	4b58      	ldr	r3, [pc, #352]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80032a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80032a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032b0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80032b4:	4953      	ldr	r1, [pc, #332]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80032bc:	e003      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032be:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80032c2:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 80032c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ce:	2100      	movs	r1, #0
 80032d0:	61b9      	str	r1, [r7, #24]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	61fb      	str	r3, [r7, #28]
 80032d8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80032dc:	460b      	mov	r3, r1
 80032de:	4313      	orrs	r3, r2
 80032e0:	d04a      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 80032e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032e6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80032ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032ee:	d01e      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 80032f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032f4:	d825      	bhi.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 80032f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032fa:	d00e      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80032fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003300:	d81f      	bhi.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 8003302:	2b00      	cmp	r3, #0
 8003304:	d021      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0xbde>
 8003306:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800330a:	d11a      	bne.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800330c:	4b3d      	ldr	r3, [pc, #244]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800330e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003310:	4a3c      	ldr	r2, [pc, #240]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003316:	6293      	str	r3, [r2, #40]	; 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8003318:	e018      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800331a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800331e:	3308      	adds	r3, #8
 8003320:	4618      	mov	r0, r3
 8003322:	f000 f8df 	bl	80034e4 <RCCEx_PLL2_Config>
 8003326:	4603      	mov	r3, r0
 8003328:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800332c:	e00e      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800332e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003332:	332c      	adds	r3, #44	; 0x2c
 8003334:	4618      	mov	r0, r3
 8003336:	f000 f96d 	bl	8003614 <RCCEx_PLL3_Config>
 800333a:	4603      	mov	r3, r0
 800333c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8003340:	e004      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      default:
        ret = HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003348:	e000      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        break;
 800334a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800334c:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10d      	bne.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xc04>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 8003354:	4b2b      	ldr	r3, [pc, #172]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003356:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800335a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800335e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003362:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003366:	4927      	ldr	r1, [pc, #156]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003368:	4313      	orrs	r3, r2
 800336a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800336e:	e003      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003370:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003374:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8003378:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800337c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003380:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8003384:	613b      	str	r3, [r7, #16]
 8003386:	2300      	movs	r3, #0
 8003388:	617b      	str	r3, [r7, #20]
 800338a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800338e:	460b      	mov	r3, r1
 8003390:	4313      	orrs	r3, r2
 8003392:	d03d      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xca4>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8003394:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033a0:	d00e      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80033a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033a6:	d815      	bhi.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d017      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80033ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033b0:	d110      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033b2:	4b14      	ldr	r3, [pc, #80]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80033b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b6:	4a13      	ldr	r2, [pc, #76]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80033b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033bc:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80033be:	e00e      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xc72>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80033c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033c4:	3308      	adds	r3, #8
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 f88c 	bl	80034e4 <RCCEx_PLL2_Config>
 80033cc:	4603      	mov	r3, r0
 80033ce:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80033d2:	e004      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xc72>
      default:
        ret = HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80033da:	e000      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xc72>
        break;
 80033dc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80033de:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d110      	bne.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80033e6:	4b07      	ldr	r3, [pc, #28]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80033e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033ec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80033f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f8:	4902      	ldr	r1, [pc, #8]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8003400:	e006      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xca4>
 8003402:	bf00      	nop
 8003404:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003408:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800340c:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8003410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003418:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	2300      	movs	r3, #0
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003426:	460b      	mov	r3, r1
 8003428:	4313      	orrs	r3, r2
 800342a:	d00c      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0xcda>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800342c:	4b2c      	ldr	r3, [pc, #176]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 800342e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003432:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800343a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800343e:	4928      	ldr	r1, [pc, #160]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8003440:	4313      	orrs	r3, r2
 8003442:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 8003446:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800344a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344e:	2100      	movs	r1, #0
 8003450:	6039      	str	r1, [r7, #0]
 8003452:	f003 0308 	and.w	r3, r3, #8
 8003456:	607b      	str	r3, [r7, #4]
 8003458:	e9d7 1200 	ldrd	r1, r2, [r7]
 800345c:	460b      	mov	r3, r1
 800345e:	4313      	orrs	r3, r2
 8003460:	d036      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 8003462:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003466:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800346a:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800346e:	d00d      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003470:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003474:	d811      	bhi.n	800349a <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8003476:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800347a:	d012      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800347c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003480:	d80b      	bhi.n	800349a <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00d      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800348a:	d106      	bne.n	800349a <HAL_RCCEx_PeriphCLKConfig+0xd2e>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800348c:	4b14      	ldr	r3, [pc, #80]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 800348e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003490:	4a13      	ldr	r2, [pc, #76]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8003492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003496:	6293      	str	r3, [r2, #40]	; 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8003498:	e004      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>

      default:
        ret = HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80034a0:	e000      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
        break;
 80034a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034a4:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10d      	bne.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 80034ac:	4b0c      	ldr	r3, [pc, #48]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80034ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80034b2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80034b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80034be:	4908      	ldr	r1, [pc, #32]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80034c6:	e003      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c8:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80034cc:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80034d0:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80034da:	46bd      	mov	sp, r7
 80034dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034e0:	46020c00 	.word	0x46020c00

080034e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80034ec:	4b47      	ldr	r3, [pc, #284]	; (800360c <RCCEx_PLL2_Config+0x128>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a46      	ldr	r2, [pc, #280]	; (800360c <RCCEx_PLL2_Config+0x128>)
 80034f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034f6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80034f8:	f7fd fa92 	bl	8000a20 <HAL_GetTick>
 80034fc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80034fe:	e008      	b.n	8003512 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003500:	f7fd fa8e 	bl	8000a20 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e077      	b.n	8003602 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003512:	4b3e      	ldr	r3, [pc, #248]	; (800360c <RCCEx_PLL2_Config+0x128>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f0      	bne.n	8003500 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800351e:	4b3b      	ldr	r3, [pc, #236]	; (800360c <RCCEx_PLL2_Config+0x128>)
 8003520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003522:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003526:	f023 0303 	bic.w	r3, r3, #3
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6811      	ldr	r1, [r2, #0]
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	6852      	ldr	r2, [r2, #4]
 8003532:	3a01      	subs	r2, #1
 8003534:	0212      	lsls	r2, r2, #8
 8003536:	430a      	orrs	r2, r1
 8003538:	4934      	ldr	r1, [pc, #208]	; (800360c <RCCEx_PLL2_Config+0x128>)
 800353a:	4313      	orrs	r3, r2
 800353c:	62cb      	str	r3, [r1, #44]	; 0x2c
 800353e:	4b33      	ldr	r3, [pc, #204]	; (800360c <RCCEx_PLL2_Config+0x128>)
 8003540:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003542:	4b33      	ldr	r3, [pc, #204]	; (8003610 <RCCEx_PLL2_Config+0x12c>)
 8003544:	4013      	ands	r3, r2
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6892      	ldr	r2, [r2, #8]
 800354a:	3a01      	subs	r2, #1
 800354c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	68d2      	ldr	r2, [r2, #12]
 8003554:	3a01      	subs	r2, #1
 8003556:	0252      	lsls	r2, r2, #9
 8003558:	b292      	uxth	r2, r2
 800355a:	4311      	orrs	r1, r2
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6912      	ldr	r2, [r2, #16]
 8003560:	3a01      	subs	r2, #1
 8003562:	0412      	lsls	r2, r2, #16
 8003564:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8003568:	4311      	orrs	r1, r2
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6952      	ldr	r2, [r2, #20]
 800356e:	3a01      	subs	r2, #1
 8003570:	0612      	lsls	r2, r2, #24
 8003572:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8003576:	430a      	orrs	r2, r1
 8003578:	4924      	ldr	r1, [pc, #144]	; (800360c <RCCEx_PLL2_Config+0x128>)
 800357a:	4313      	orrs	r3, r2
 800357c:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800357e:	4b23      	ldr	r3, [pc, #140]	; (800360c <RCCEx_PLL2_Config+0x128>)
 8003580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003582:	f023 020c 	bic.w	r2, r3, #12
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	4920      	ldr	r1, [pc, #128]	; (800360c <RCCEx_PLL2_Config+0x128>)
 800358c:	4313      	orrs	r3, r2
 800358e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8003590:	4b1e      	ldr	r3, [pc, #120]	; (800360c <RCCEx_PLL2_Config+0x128>)
 8003592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	491c      	ldr	r1, [pc, #112]	; (800360c <RCCEx_PLL2_Config+0x128>)
 800359a:	4313      	orrs	r3, r2
 800359c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800359e:	4b1b      	ldr	r3, [pc, #108]	; (800360c <RCCEx_PLL2_Config+0x128>)
 80035a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a2:	4a1a      	ldr	r2, [pc, #104]	; (800360c <RCCEx_PLL2_Config+0x128>)
 80035a4:	f023 0310 	bic.w	r3, r3, #16
 80035a8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80035aa:	4b18      	ldr	r3, [pc, #96]	; (800360c <RCCEx_PLL2_Config+0x128>)
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035b2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	69d2      	ldr	r2, [r2, #28]
 80035ba:	00d2      	lsls	r2, r2, #3
 80035bc:	4913      	ldr	r1, [pc, #76]	; (800360c <RCCEx_PLL2_Config+0x128>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80035c2:	4b12      	ldr	r3, [pc, #72]	; (800360c <RCCEx_PLL2_Config+0x128>)
 80035c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c6:	4a11      	ldr	r2, [pc, #68]	; (800360c <RCCEx_PLL2_Config+0x128>)
 80035c8:	f043 0310 	orr.w	r3, r3, #16
 80035cc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80035ce:	4b0f      	ldr	r3, [pc, #60]	; (800360c <RCCEx_PLL2_Config+0x128>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a0e      	ldr	r2, [pc, #56]	; (800360c <RCCEx_PLL2_Config+0x128>)
 80035d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035d8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80035da:	f7fd fa21 	bl	8000a20 <HAL_GetTick>
 80035de:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80035e0:	e008      	b.n	80035f4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80035e2:	f7fd fa1d 	bl	8000a20 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d901      	bls.n	80035f4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e006      	b.n	8003602 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80035f4:	4b05      	ldr	r3, [pc, #20]	; (800360c <RCCEx_PLL2_Config+0x128>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0f0      	beq.n	80035e2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8003600:	2300      	movs	r3, #0

}
 8003602:	4618      	mov	r0, r3
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	46020c00 	.word	0x46020c00
 8003610:	80800000 	.word	0x80800000

08003614 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800361c:	4b47      	ldr	r3, [pc, #284]	; (800373c <RCCEx_PLL3_Config+0x128>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a46      	ldr	r2, [pc, #280]	; (800373c <RCCEx_PLL3_Config+0x128>)
 8003622:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003626:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003628:	f7fd f9fa 	bl	8000a20 <HAL_GetTick>
 800362c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800362e:	e008      	b.n	8003642 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003630:	f7fd f9f6 	bl	8000a20 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e077      	b.n	8003732 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003642:	4b3e      	ldr	r3, [pc, #248]	; (800373c <RCCEx_PLL3_Config+0x128>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f0      	bne.n	8003630 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800364e:	4b3b      	ldr	r3, [pc, #236]	; (800373c <RCCEx_PLL3_Config+0x128>)
 8003650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003652:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003656:	f023 0303 	bic.w	r3, r3, #3
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6811      	ldr	r1, [r2, #0]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6852      	ldr	r2, [r2, #4]
 8003662:	3a01      	subs	r2, #1
 8003664:	0212      	lsls	r2, r2, #8
 8003666:	430a      	orrs	r2, r1
 8003668:	4934      	ldr	r1, [pc, #208]	; (800373c <RCCEx_PLL3_Config+0x128>)
 800366a:	4313      	orrs	r3, r2
 800366c:	630b      	str	r3, [r1, #48]	; 0x30
 800366e:	4b33      	ldr	r3, [pc, #204]	; (800373c <RCCEx_PLL3_Config+0x128>)
 8003670:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003672:	4b33      	ldr	r3, [pc, #204]	; (8003740 <RCCEx_PLL3_Config+0x12c>)
 8003674:	4013      	ands	r3, r2
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6892      	ldr	r2, [r2, #8]
 800367a:	3a01      	subs	r2, #1
 800367c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	68d2      	ldr	r2, [r2, #12]
 8003684:	3a01      	subs	r2, #1
 8003686:	0252      	lsls	r2, r2, #9
 8003688:	b292      	uxth	r2, r2
 800368a:	4311      	orrs	r1, r2
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6912      	ldr	r2, [r2, #16]
 8003690:	3a01      	subs	r2, #1
 8003692:	0412      	lsls	r2, r2, #16
 8003694:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8003698:	4311      	orrs	r1, r2
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6952      	ldr	r2, [r2, #20]
 800369e:	3a01      	subs	r2, #1
 80036a0:	0612      	lsls	r2, r2, #24
 80036a2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80036a6:	430a      	orrs	r2, r1
 80036a8:	4924      	ldr	r1, [pc, #144]	; (800373c <RCCEx_PLL3_Config+0x128>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80036ae:	4b23      	ldr	r3, [pc, #140]	; (800373c <RCCEx_PLL3_Config+0x128>)
 80036b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b2:	f023 020c 	bic.w	r2, r3, #12
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	4920      	ldr	r1, [pc, #128]	; (800373c <RCCEx_PLL3_Config+0x128>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80036c0:	4b1e      	ldr	r3, [pc, #120]	; (800373c <RCCEx_PLL3_Config+0x128>)
 80036c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	491c      	ldr	r1, [pc, #112]	; (800373c <RCCEx_PLL3_Config+0x128>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80036ce:	4b1b      	ldr	r3, [pc, #108]	; (800373c <RCCEx_PLL3_Config+0x128>)
 80036d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d2:	4a1a      	ldr	r2, [pc, #104]	; (800373c <RCCEx_PLL3_Config+0x128>)
 80036d4:	f023 0310 	bic.w	r3, r3, #16
 80036d8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80036da:	4b18      	ldr	r3, [pc, #96]	; (800373c <RCCEx_PLL3_Config+0x128>)
 80036dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036e2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	69d2      	ldr	r2, [r2, #28]
 80036ea:	00d2      	lsls	r2, r2, #3
 80036ec:	4913      	ldr	r1, [pc, #76]	; (800373c <RCCEx_PLL3_Config+0x128>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80036f2:	4b12      	ldr	r3, [pc, #72]	; (800373c <RCCEx_PLL3_Config+0x128>)
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	4a11      	ldr	r2, [pc, #68]	; (800373c <RCCEx_PLL3_Config+0x128>)
 80036f8:	f043 0310 	orr.w	r3, r3, #16
 80036fc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80036fe:	4b0f      	ldr	r3, [pc, #60]	; (800373c <RCCEx_PLL3_Config+0x128>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a0e      	ldr	r2, [pc, #56]	; (800373c <RCCEx_PLL3_Config+0x128>)
 8003704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003708:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800370a:	f7fd f989 	bl	8000a20 <HAL_GetTick>
 800370e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003710:	e008      	b.n	8003724 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003712:	f7fd f985 	bl	8000a20 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d901      	bls.n	8003724 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e006      	b.n	8003732 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003724:	4b05      	ldr	r3, [pc, #20]	; (800373c <RCCEx_PLL3_Config+0x128>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0f0      	beq.n	8003712 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	46020c00 	.word	0x46020c00
 8003740:	80800000 	.word	0x80800000

08003744 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e0fb      	b.n	800394e <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a7f      	ldr	r2, [pc, #508]	; (8003958 <HAL_SPI_Init+0x214>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d004      	beq.n	800376a <HAL_SPI_Init+0x26>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a7d      	ldr	r2, [pc, #500]	; (800395c <HAL_SPI_Init+0x218>)
 8003766:	4293      	cmp	r3, r2
 8003768:	e000      	b.n	800376c <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800376a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a78      	ldr	r2, [pc, #480]	; (8003958 <HAL_SPI_Init+0x214>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d004      	beq.n	8003786 <HAL_SPI_Init+0x42>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a76      	ldr	r2, [pc, #472]	; (800395c <HAL_SPI_Init+0x218>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d105      	bne.n	8003792 <HAL_SPI_Init+0x4e>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	2b0f      	cmp	r3, #15
 800378c:	d901      	bls.n	8003792 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e0dd      	b.n	800394e <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 fbd8 	bl	8003f48 <SPI_GetPacketSize>
 8003798:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a6e      	ldr	r2, [pc, #440]	; (8003958 <HAL_SPI_Init+0x214>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d004      	beq.n	80037ae <HAL_SPI_Init+0x6a>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a6c      	ldr	r2, [pc, #432]	; (800395c <HAL_SPI_Init+0x218>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d102      	bne.n	80037b4 <HAL_SPI_Init+0x70>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d816      	bhi.n	80037e2 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80037b8:	4a69      	ldr	r2, [pc, #420]	; (8003960 <HAL_SPI_Init+0x21c>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d00e      	beq.n	80037dc <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a68      	ldr	r2, [pc, #416]	; (8003964 <HAL_SPI_Init+0x220>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d009      	beq.n	80037dc <HAL_SPI_Init+0x98>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a66      	ldr	r2, [pc, #408]	; (8003968 <HAL_SPI_Init+0x224>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d004      	beq.n	80037dc <HAL_SPI_Init+0x98>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a65      	ldr	r2, [pc, #404]	; (800396c <HAL_SPI_Init+0x228>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d104      	bne.n	80037e6 <HAL_SPI_Init+0xa2>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2b10      	cmp	r3, #16
 80037e0:	d901      	bls.n	80037e6 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e0b3      	b.n	800394e <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d106      	bne.n	8003800 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7fc ff88 	bl	8000710 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0201 	bic.w	r2, r2, #1
 8003816:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8003822:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800382c:	d119      	bne.n	8003862 <HAL_SPI_Init+0x11e>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003836:	d103      	bne.n	8003840 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800383c:	2b00      	cmp	r3, #0
 800383e:	d008      	beq.n	8003852 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10c      	bne.n	8003862 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800384c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003850:	d107      	bne.n	8003862 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003860:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00f      	beq.n	800388e <HAL_SPI_Init+0x14a>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	2b06      	cmp	r3, #6
 8003874:	d90b      	bls.n	800388e <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	e007      	b.n	800389e <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800389c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69da      	ldr	r2, [r3, #28]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a6:	431a      	orrs	r2, r3
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	431a      	orrs	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b0:	ea42 0103 	orr.w	r1, r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	431a      	orrs	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ce:	431a      	orrs	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	431a      	orrs	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	431a      	orrs	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	431a      	orrs	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	431a      	orrs	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003904:	431a      	orrs	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390a:	ea42 0103 	orr.w	r1, r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00a      	beq.n	800393c <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	430a      	orrs	r2, r1
 800393a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	46002000 	.word	0x46002000
 800395c:	56002000 	.word	0x56002000
 8003960:	40013000 	.word	0x40013000
 8003964:	50013000 	.word	0x50013000
 8003968:	40003800 	.word	0x40003800
 800396c:	50003800 	.word	0x50003800

08003970 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b08a      	sub	sp, #40	; 0x28
 8003974:	af02      	add	r7, sp, #8
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	603b      	str	r3, [r7, #0]
 800397c:	4613      	mov	r3, r2
 800397e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	3320      	adds	r3, #32
 8003986:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003988:	2300      	movs	r3, #0
 800398a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8003992:	2b01      	cmp	r3, #1
 8003994:	d101      	bne.n	800399a <HAL_SPI_Transmit+0x2a>
 8003996:	2302      	movs	r3, #2
 8003998:	e203      	b.n	8003da2 <HAL_SPI_Transmit+0x432>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039a2:	f7fd f83d 	bl	8000a20 <HAL_GetTick>
 80039a6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d007      	beq.n	80039c4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80039b4:	2302      	movs	r3, #2
 80039b6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80039c0:	7efb      	ldrb	r3, [r7, #27]
 80039c2:	e1ee      	b.n	8003da2 <HAL_SPI_Transmit+0x432>
  }

  if ((pData == NULL) || (Size == 0UL))
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d002      	beq.n	80039d0 <HAL_SPI_Transmit+0x60>
 80039ca:	88fb      	ldrh	r3, [r7, #6]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d107      	bne.n	80039e0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80039dc:	7efb      	ldrb	r3, [r7, #27]
 80039de:	e1e0      	b.n	8003da2 <HAL_SPI_Transmit+0x432>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2203      	movs	r2, #3
 80039e4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	88fa      	ldrh	r2, [r7, #6]
 80039fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	88fa      	ldrh	r2, [r7, #6]
 8003a02:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8003a30:	d108      	bne.n	8003a44 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	e009      	b.n	8003a58 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003a56:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	0c1b      	lsrs	r3, r3, #16
 8003a60:	041b      	lsls	r3, r3, #16
 8003a62:	88f9      	ldrh	r1, [r7, #6]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	6812      	ldr	r2, [r2, #0]
 8003a68:	430b      	orrs	r3, r1
 8003a6a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f042 0201 	orr.w	r2, r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10c      	bne.n	8003aa4 <HAL_SPI_Transmit+0x134>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a92:	d107      	bne.n	8003aa4 <HAL_SPI_Transmit+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aa2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	2b0f      	cmp	r3, #15
 8003aaa:	d95b      	bls.n	8003b64 <HAL_SPI_Transmit+0x1f4>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a8f      	ldr	r2, [pc, #572]	; (8003cf0 <HAL_SPI_Transmit+0x380>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d04f      	beq.n	8003b56 <HAL_SPI_Transmit+0x1e6>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a8e      	ldr	r2, [pc, #568]	; (8003cf4 <HAL_SPI_Transmit+0x384>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d04a      	beq.n	8003b56 <HAL_SPI_Transmit+0x1e6>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a8c      	ldr	r2, [pc, #560]	; (8003cf8 <HAL_SPI_Transmit+0x388>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d045      	beq.n	8003b56 <HAL_SPI_Transmit+0x1e6>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a8b      	ldr	r2, [pc, #556]	; (8003cfc <HAL_SPI_Transmit+0x38c>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d147      	bne.n	8003b64 <HAL_SPI_Transmit+0x1f4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8003ad4:	e03f      	b.n	8003b56 <HAL_SPI_Transmit+0x1e6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d114      	bne.n	8003b0e <HAL_SPI_Transmit+0x19e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6812      	ldr	r2, [r2, #0]
 8003aee:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003af4:	1d1a      	adds	r2, r3, #4
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	3b01      	subs	r3, #1
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8003b0c:	e023      	b.n	8003b56 <HAL_SPI_Transmit+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b0e:	f7fc ff87 	bl	8000a20 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d803      	bhi.n	8003b26 <HAL_SPI_Transmit+0x1b6>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b24:	d102      	bne.n	8003b2c <HAL_SPI_Transmit+0x1bc>
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d114      	bne.n	8003b56 <HAL_SPI_Transmit+0x1e6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 f93d 	bl	8003dac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e125      	b.n	8003da2 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1b9      	bne.n	8003ad6 <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8003b62:	e0f8      	b.n	8003d56 <HAL_SPI_Transmit+0x3e6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	2b07      	cmp	r3, #7
 8003b6a:	f240 80ed 	bls.w	8003d48 <HAL_SPI_Transmit+0x3d8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8003b6e:	e05d      	b.n	8003c2c <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d132      	bne.n	8003be4 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d918      	bls.n	8003bbc <HAL_SPI_Transmit+0x24c>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d014      	beq.n	8003bbc <HAL_SPI_Transmit+0x24c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6812      	ldr	r2, [r2, #0]
 8003b9c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ba2:	1d1a      	adds	r2, r3, #4
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	3b02      	subs	r3, #2
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8003bba:	e037      	b.n	8003c2c <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bc0:	881a      	ldrh	r2, [r3, #0]
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bca:	1c9a      	adds	r2, r3, #2
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8003be2:	e023      	b.n	8003c2c <HAL_SPI_Transmit+0x2bc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003be4:	f7fc ff1c 	bl	8000a20 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d803      	bhi.n	8003bfc <HAL_SPI_Transmit+0x28c>
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bfa:	d102      	bne.n	8003c02 <HAL_SPI_Transmit+0x292>
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d114      	bne.n	8003c2c <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 f8d2 	bl	8003dac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c16:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e0ba      	b.n	8003da2 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d19b      	bne.n	8003b70 <HAL_SPI_Transmit+0x200>
 8003c38:	e08d      	b.n	8003d56 <HAL_SPI_Transmit+0x3e6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d15b      	bne.n	8003d00 <HAL_SPI_Transmit+0x390>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	2b03      	cmp	r3, #3
 8003c52:	d918      	bls.n	8003c86 <HAL_SPI_Transmit+0x316>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c58:	2b40      	cmp	r3, #64	; 0x40
 8003c5a:	d914      	bls.n	8003c86 <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6812      	ldr	r2, [r2, #0]
 8003c66:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c6c:	1d1a      	adds	r2, r3, #4
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	3b04      	subs	r3, #4
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8003c84:	e060      	b.n	8003d48 <HAL_SPI_Transmit+0x3d8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d917      	bls.n	8003cc2 <HAL_SPI_Transmit+0x352>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d013      	beq.n	8003cc2 <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c9e:	881a      	ldrh	r2, [r3, #0]
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ca8:	1c9a      	adds	r2, r3, #2
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	3b02      	subs	r3, #2
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8003cc0:	e042      	b.n	8003d48 <HAL_SPI_Transmit+0x3d8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	3320      	adds	r3, #32
 8003ccc:	7812      	ldrb	r2, [r2, #0]
 8003cce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cd4:	1c5a      	adds	r2, r3, #1
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8003cec:	e02c      	b.n	8003d48 <HAL_SPI_Transmit+0x3d8>
 8003cee:	bf00      	nop
 8003cf0:	40013000 	.word	0x40013000
 8003cf4:	50013000 	.word	0x50013000
 8003cf8:	40003800 	.word	0x40003800
 8003cfc:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d00:	f7fc fe8e 	bl	8000a20 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d803      	bhi.n	8003d18 <HAL_SPI_Transmit+0x3a8>
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d16:	d102      	bne.n	8003d1e <HAL_SPI_Transmit+0x3ae>
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d114      	bne.n	8003d48 <HAL_SPI_Transmit+0x3d8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f000 f844 	bl	8003dac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e02c      	b.n	8003da2 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f47f af72 	bne.w	8003c3a <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	2108      	movs	r1, #8
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f000 f8c3 	bl	8003eec <SPI_WaitOnFlagUntilTimeout>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d007      	beq.n	8003d7c <HAL_SPI_Transmit+0x40c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d72:	f043 0220 	orr.w	r2, r3, #32
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 f815 	bl	8003dac <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <HAL_SPI_Transmit+0x430>
  {
    return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e000      	b.n	8003da2 <HAL_SPI_Transmit+0x432>
  }
  return errorcode;
 8003da0:	7efb      	ldrb	r3, [r7, #27]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3720      	adds	r7, #32
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop

08003dac <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	699a      	ldr	r2, [r3, #24]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0208 	orr.w	r2, r2, #8
 8003dca:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	699a      	ldr	r2, [r3, #24]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0210 	orr.w	r2, r2, #16
 8003dda:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0201 	bic.w	r2, r2, #1
 8003dea:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6812      	ldr	r2, [r2, #0]
 8003df6:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8003dfa:	f023 0303 	bic.w	r3, r3, #3
 8003dfe:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689a      	ldr	r2, [r3, #8]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003e0e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b04      	cmp	r3, #4
 8003e1a:	d014      	beq.n	8003e46 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f003 0320 	and.w	r3, r3, #32
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00f      	beq.n	8003e46 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e2c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	699a      	ldr	r2, [r3, #24]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f042 0220 	orr.w	r2, r2, #32
 8003e44:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	d014      	beq.n	8003e7c <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00f      	beq.n	8003e7c <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e62:	f043 0204 	orr.w	r2, r3, #4
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699a      	ldr	r2, [r3, #24]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e7a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00f      	beq.n	8003ea6 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e8c:	f043 0201 	orr.w	r2, r3, #1
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	699a      	ldr	r2, [r3, #24]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ea4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00f      	beq.n	8003ed0 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eb6:	f043 0208 	orr.w	r2, r3, #8
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699a      	ldr	r2, [r3, #24]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ece:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 8003ee0:	bf00      	nop
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	603b      	str	r3, [r7, #0]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8003efc:	e010      	b.n	8003f20 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003efe:	f7fc fd8f 	bl	8000a20 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d803      	bhi.n	8003f16 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f14:	d102      	bne.n	8003f1c <SPI_WaitOnFlagUntilTimeout+0x30>
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e00f      	b.n	8003f40 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	695a      	ldr	r2, [r3, #20]
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	bf0c      	ite	eq
 8003f30:	2301      	moveq	r3, #1
 8003f32:	2300      	movne	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	461a      	mov	r2, r3
 8003f38:	79fb      	ldrb	r3, [r7, #7]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d0df      	beq.n	8003efe <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f54:	095b      	lsrs	r3, r3, #5
 8003f56:	3301      	adds	r3, #1
 8003f58:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	3307      	adds	r3, #7
 8003f66:	08db      	lsrs	r3, r3, #3
 8003f68:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	fb02 f303 	mul.w	r3, r2, r3
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
 8003f86:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d12e      	bne.n	8003ff2 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d101      	bne.n	8003fa2 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	e028      	b.n	8003ff4 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2202      	movs	r2, #2
 8003fae:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0201 	bic.w	r2, r2, #1
 8003fc0:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003fce:	ea42 0103 	orr.w	r1, r2, r3
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	689a      	ldr	r2, [r3, #8]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	e000      	b.n	8003ff4 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
  }
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <memset>:
 8004000:	4402      	add	r2, r0
 8004002:	4603      	mov	r3, r0
 8004004:	4293      	cmp	r3, r2
 8004006:	d100      	bne.n	800400a <memset+0xa>
 8004008:	4770      	bx	lr
 800400a:	f803 1b01 	strb.w	r1, [r3], #1
 800400e:	e7f9      	b.n	8004004 <memset+0x4>

08004010 <__libc_init_array>:
 8004010:	b570      	push	{r4, r5, r6, lr}
 8004012:	4d0d      	ldr	r5, [pc, #52]	; (8004048 <__libc_init_array+0x38>)
 8004014:	2600      	movs	r6, #0
 8004016:	4c0d      	ldr	r4, [pc, #52]	; (800404c <__libc_init_array+0x3c>)
 8004018:	1b64      	subs	r4, r4, r5
 800401a:	10a4      	asrs	r4, r4, #2
 800401c:	42a6      	cmp	r6, r4
 800401e:	d109      	bne.n	8004034 <__libc_init_array+0x24>
 8004020:	4d0b      	ldr	r5, [pc, #44]	; (8004050 <__libc_init_array+0x40>)
 8004022:	2600      	movs	r6, #0
 8004024:	4c0b      	ldr	r4, [pc, #44]	; (8004054 <__libc_init_array+0x44>)
 8004026:	f000 f817 	bl	8004058 <_init>
 800402a:	1b64      	subs	r4, r4, r5
 800402c:	10a4      	asrs	r4, r4, #2
 800402e:	42a6      	cmp	r6, r4
 8004030:	d105      	bne.n	800403e <__libc_init_array+0x2e>
 8004032:	bd70      	pop	{r4, r5, r6, pc}
 8004034:	f855 3b04 	ldr.w	r3, [r5], #4
 8004038:	3601      	adds	r6, #1
 800403a:	4798      	blx	r3
 800403c:	e7ee      	b.n	800401c <__libc_init_array+0xc>
 800403e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004042:	3601      	adds	r6, #1
 8004044:	4798      	blx	r3
 8004046:	e7f2      	b.n	800402e <__libc_init_array+0x1e>
 8004048:	08004150 	.word	0x08004150
 800404c:	08004150 	.word	0x08004150
 8004050:	08004150 	.word	0x08004150
 8004054:	08004154 	.word	0x08004154

08004058 <_init>:
 8004058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405a:	bf00      	nop
 800405c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800405e:	bc08      	pop	{r3}
 8004060:	469e      	mov	lr, r3
 8004062:	4770      	bx	lr

08004064 <_fini>:
 8004064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004066:	bf00      	nop
 8004068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800406a:	bc08      	pop	{r3}
 800406c:	469e      	mov	lr, r3
 800406e:	4770      	bx	lr
