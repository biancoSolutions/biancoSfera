
STM32_SPI_PoC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d80  08000250  08000250  00010250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08003fd0  08003fd0  00013fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080040a8  080040a8  000140a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080040ac  080040ac  000140ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000009  20000000  080040b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000b0  2000000c  080040b9  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  200000bc  080040b9  000200bc  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  00020009  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d13d  00000000  00000000  0002003f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001d88  00000000  00000000  0002d17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000b50  00000000  00000000  0002ef08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000a68  00000000  00000000  0002fa58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00034353  00000000  00000000  000304c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000d8a7  00000000  00000000  00064813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014681b  00000000  00000000  000720ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001b88d5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002d50  00000000  00000000  001b8928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	; (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	e000      	b.n	8000262 <__do_global_dtors_aux+0x12>
 8000260:	bf00      	nop
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	2000000c 	.word	0x2000000c
 800026c:	00000000 	.word	0x00000000
 8000270:	08003fb8 	.word	0x08003fb8

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	; (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <frame_dummy+0x18>)
 800027e:	e000      	b.n	8000282 <frame_dummy+0xe>
 8000280:	bf00      	nop
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000010 	.word	0x20000010
 800028c:	08003fb8 	.word	0x08003fb8

08000290 <LCD_Init>:

/* Includes ------------------------------------------------------------------*/
#include "main.h"

void LCD_Init(SPI_HandleTypeDef * spi_handler)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b086      	sub	sp, #24
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
  //Start unlocking the EEProm
  uint8_t initFrequence[] = {0x38u, 0x38u, 0x38u, 0x38u, 0x08u, 0x01u, 0x06u, 0x0Fu};
 8000298:	4a15      	ldr	r2, [pc, #84]	; (80002f0 <LCD_Init+0x60>)
 800029a:	f107 030c 	add.w	r3, r7, #12
 800029e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002a2:	e883 0003 	stmia.w	r3, {r0, r1}

  for (uint8_t i; i < sizeof(initFrequence); i++)
 80002a6:	e01a      	b.n	80002de <LCD_Init+0x4e>
  {
    HAL_GPIO_WritePin(GPIOF, CS_Pin, GPIO_PIN_RESET);
 80002a8:	2200      	movs	r2, #0
 80002aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002ae:	4811      	ldr	r0, [pc, #68]	; (80002f4 <LCD_Init+0x64>)
 80002b0:	f000 fe52 	bl	8000f58 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(spi_handler, &initFrequence[i], 1, 10);
 80002b4:	7dfb      	ldrb	r3, [r7, #23]
 80002b6:	f107 020c 	add.w	r2, r7, #12
 80002ba:	18d1      	adds	r1, r2, r3
 80002bc:	230a      	movs	r3, #10
 80002be:	2201      	movs	r2, #1
 80002c0:	6878      	ldr	r0, [r7, #4]
 80002c2:	f003 fb05 	bl	80038d0 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOF, CS_Pin, GPIO_PIN_SET);
 80002c6:	2201      	movs	r2, #1
 80002c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002cc:	4809      	ldr	r0, [pc, #36]	; (80002f4 <LCD_Init+0x64>)
 80002ce:	f000 fe43 	bl	8000f58 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80002d2:	200a      	movs	r0, #10
 80002d4:	f000 fb60 	bl	8000998 <HAL_Delay>
  for (uint8_t i; i < sizeof(initFrequence); i++)
 80002d8:	7dfb      	ldrb	r3, [r7, #23]
 80002da:	3301      	adds	r3, #1
 80002dc:	75fb      	strb	r3, [r7, #23]
 80002de:	7dfb      	ldrb	r3, [r7, #23]
 80002e0:	2b07      	cmp	r3, #7
 80002e2:	d9e1      	bls.n	80002a8 <LCD_Init+0x18>
  }
}
 80002e4:	bf00      	nop
 80002e6:	bf00      	nop
 80002e8:	3718      	adds	r7, #24
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	08003fd0 	.word	0x08003fd0
 80002f4:	42021400 	.word	0x42021400

080002f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t aTxBuffer[] = "jan";
 80002fe:	4b19      	ldr	r3, [pc, #100]	; (8000364 <main+0x6c>)
 8000300:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000302:	f000 fac5 	bl	8000890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000306:	f000 f835 	bl	8000374 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 800030a:	f000 f87c 	bl	8000406 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800030e:	f000 f90b 	bl	8000528 <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000312:	f000 f888 	bl	8000426 <MX_ICACHE_Init>
  MX_SPI1_Init();
 8000316:	f000 f899 	bl	800044c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init(&hspi1);
 800031a:	4813      	ldr	r0, [pc, #76]	; (8000368 <main+0x70>)
 800031c:	f7ff ffb8 	bl	8000290 <LCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOD, RS_Pin, GPIO_PIN_SET);
 8000320:	2201      	movs	r2, #1
 8000322:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000326:	4811      	ldr	r0, [pc, #68]	; (800036c <main+0x74>)
 8000328:	f000 fe16 	bl	8000f58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOF, CS_Pin, GPIO_PIN_RESET);
 800032c:	2200      	movs	r2, #0
 800032e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000332:	480f      	ldr	r0, [pc, #60]	; (8000370 <main+0x78>)
 8000334:	f000 fe10 	bl	8000f58 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)aTxBuffer, BUFFERSIZE, 200);
 8000338:	1d39      	adds	r1, r7, #4
 800033a:	23c8      	movs	r3, #200	; 0xc8
 800033c:	2203      	movs	r2, #3
 800033e:	480a      	ldr	r0, [pc, #40]	; (8000368 <main+0x70>)
 8000340:	f003 fac6 	bl	80038d0 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOF, CS_Pin, GPIO_PIN_SET);
 8000344:	2201      	movs	r2, #1
 8000346:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800034a:	4809      	ldr	r0, [pc, #36]	; (8000370 <main+0x78>)
 800034c:	f000 fe04 	bl	8000f58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, RS_Pin, GPIO_PIN_RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000356:	4805      	ldr	r0, [pc, #20]	; (800036c <main+0x74>)
 8000358:	f000 fdfe 	bl	8000f58 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800035c:	2064      	movs	r0, #100	; 0x64
 800035e:	f000 fb1b 	bl	8000998 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOD, RS_Pin, GPIO_PIN_SET);
 8000362:	e7dd      	b.n	8000320 <main+0x28>
 8000364:	006e616a 	.word	0x006e616a
 8000368:	20000028 	.word	0x20000028
 800036c:	42020c00 	.word	0x42020c00
 8000370:	42021400 	.word	0x42021400

08000374 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b09e      	sub	sp, #120	; 0x78
 8000378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037a:	f107 0318 	add.w	r3, r7, #24
 800037e:	2260      	movs	r2, #96	; 0x60
 8000380:	2100      	movs	r1, #0
 8000382:	4618      	mov	r0, r3
 8000384:	f003 fe10 	bl	8003fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000388:	463b      	mov	r3, r7
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
 8000394:	611a      	str	r2, [r3, #16]
 8000396:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE3) != HAL_OK)
 8000398:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800039c:	f000 fe24 	bl	8000fe8 <HAL_PWREx_ControlVoltageScaling>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <SystemClock_Config+0x36>
  {
    Error_Handler();
 80003a6:	f000 f959 	bl	800065c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80003aa:	2310      	movs	r3, #16
 80003ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80003ae:	2301      	movs	r3, #1
 80003b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80003b2:	2310      	movs	r3, #16
 80003b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 80003b6:	2300      	movs	r3, #0
 80003b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003ba:	2300      	movs	r3, #0
 80003bc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003be:	f107 0318 	add.w	r3, r7, #24
 80003c2:	4618      	mov	r0, r3
 80003c4:	f000 ff0c 	bl	80011e0 <HAL_RCC_OscConfig>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80003ce:	f000 f945 	bl	800065c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d2:	231f      	movs	r3, #31
 80003d4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80003d6:	2300      	movs	r3, #0
 80003d8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003da:	2300      	movs	r3, #0
 80003dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003de:	2300      	movs	r3, #0
 80003e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003e2:	2300      	movs	r3, #0
 80003e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80003e6:	2300      	movs	r3, #0
 80003e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003ea:	463b      	mov	r3, r7
 80003ec:	2101      	movs	r1, #1
 80003ee:	4618      	mov	r0, r3
 80003f0:	f001 fdd2 	bl	8001f98 <HAL_RCC_ClockConfig>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80003fa:	f000 f92f 	bl	800065c <Error_Handler>
  }
}
 80003fe:	bf00      	nop
 8000400:	3778      	adds	r7, #120	; 0x78
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}

08000406 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000406:	b580      	push	{r7, lr}
 8000408:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 800040a:	f000 fec9 	bl	80011a0 <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 800040e:	f000 fed7 	bl	80011c0 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000412:	2002      	movs	r0, #2
 8000414:	f000 fe74 	bl	8001100 <HAL_PWREx_ConfigSupply>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <SystemPower_Config+0x1c>
  {
    Error_Handler();
 800041e:	f000 f91d 	bl	800065c <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}

08000426 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000426:	b580      	push	{r7, lr}
 8000428:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800042a:	2000      	movs	r0, #0
 800042c:	f000 fdac 	bl	8000f88 <HAL_ICACHE_ConfigAssociativityMode>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000436:	f000 f911 	bl	800065c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800043a:	f000 fdc5 	bl	8000fc8 <HAL_ICACHE_Enable>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000444:	f000 f90a 	bl	800065c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000448:	bf00      	nop
 800044a:	bd80      	pop	{r7, pc}

0800044c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
 8000458:	605a      	str	r2, [r3, #4]
 800045a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800045c:	4b30      	ldr	r3, [pc, #192]	; (8000520 <MX_SPI1_Init+0xd4>)
 800045e:	4a31      	ldr	r2, [pc, #196]	; (8000524 <MX_SPI1_Init+0xd8>)
 8000460:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000462:	4b2f      	ldr	r3, [pc, #188]	; (8000520 <MX_SPI1_Init+0xd4>)
 8000464:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000468:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800046a:	4b2d      	ldr	r3, [pc, #180]	; (8000520 <MX_SPI1_Init+0xd4>)
 800046c:	2200      	movs	r2, #0
 800046e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000470:	4b2b      	ldr	r3, [pc, #172]	; (8000520 <MX_SPI1_Init+0xd4>)
 8000472:	2207      	movs	r2, #7
 8000474:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000476:	4b2a      	ldr	r3, [pc, #168]	; (8000520 <MX_SPI1_Init+0xd4>)
 8000478:	2200      	movs	r2, #0
 800047a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800047c:	4b28      	ldr	r3, [pc, #160]	; (8000520 <MX_SPI1_Init+0xd4>)
 800047e:	2200      	movs	r2, #0
 8000480:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000482:	4b27      	ldr	r3, [pc, #156]	; (8000520 <MX_SPI1_Init+0xd4>)
 8000484:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000488:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800048a:	4b25      	ldr	r3, [pc, #148]	; (8000520 <MX_SPI1_Init+0xd4>)
 800048c:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8000490:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000492:	4b23      	ldr	r3, [pc, #140]	; (8000520 <MX_SPI1_Init+0xd4>)
 8000494:	2200      	movs	r2, #0
 8000496:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000498:	4b21      	ldr	r3, [pc, #132]	; (8000520 <MX_SPI1_Init+0xd4>)
 800049a:	2200      	movs	r2, #0
 800049c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800049e:	4b20      	ldr	r3, [pc, #128]	; (8000520 <MX_SPI1_Init+0xd4>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 80004a4:	4b1e      	ldr	r3, [pc, #120]	; (8000520 <MX_SPI1_Init+0xd4>)
 80004a6:	2207      	movs	r2, #7
 80004a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80004aa:	4b1d      	ldr	r3, [pc, #116]	; (8000520 <MX_SPI1_Init+0xd4>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80004b0:	4b1b      	ldr	r3, [pc, #108]	; (8000520 <MX_SPI1_Init+0xd4>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80004b6:	4b1a      	ldr	r3, [pc, #104]	; (8000520 <MX_SPI1_Init+0xd4>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80004bc:	4b18      	ldr	r3, [pc, #96]	; (8000520 <MX_SPI1_Init+0xd4>)
 80004be:	2200      	movs	r2, #0
 80004c0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80004c2:	4b17      	ldr	r3, [pc, #92]	; (8000520 <MX_SPI1_Init+0xd4>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80004c8:	4b15      	ldr	r3, [pc, #84]	; (8000520 <MX_SPI1_Init+0xd4>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80004ce:	4b14      	ldr	r3, [pc, #80]	; (8000520 <MX_SPI1_Init+0xd4>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80004d4:	4b12      	ldr	r3, [pc, #72]	; (8000520 <MX_SPI1_Init+0xd4>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80004da:	4b11      	ldr	r3, [pc, #68]	; (8000520 <MX_SPI1_Init+0xd4>)
 80004dc:	2200      	movs	r2, #0
 80004de:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80004e0:	4b0f      	ldr	r3, [pc, #60]	; (8000520 <MX_SPI1_Init+0xd4>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004e6:	480e      	ldr	r0, [pc, #56]	; (8000520 <MX_SPI1_Init+0xd4>)
 80004e8:	f003 f8dc 	bl	80036a4 <HAL_SPI_Init>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 80004f2:	f000 f8b3 	bl	800065c <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80004f6:	2300      	movs	r3, #0
 80004f8:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 80004fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fe:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000500:	2300      	movs	r3, #0
 8000502:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	4619      	mov	r1, r3
 8000508:	4805      	ldr	r0, [pc, #20]	; (8000520 <MX_SPI1_Init+0xd4>)
 800050a:	f003 fce8 	bl	8003ede <HAL_SPIEx_SetConfigAutonomousMode>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 8000514:	f000 f8a2 	bl	800065c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000518:	bf00      	nop
 800051a:	3710      	adds	r7, #16
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	20000028 	.word	0x20000028
 8000524:	40013000 	.word	0x40013000

08000528 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b08c      	sub	sp, #48	; 0x30
 800052c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052e:	f107 031c 	add.w	r3, r7, #28
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
 800053c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053e:	4b44      	ldr	r3, [pc, #272]	; (8000650 <MX_GPIO_Init+0x128>)
 8000540:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000544:	4a42      	ldr	r2, [pc, #264]	; (8000650 <MX_GPIO_Init+0x128>)
 8000546:	f043 0301 	orr.w	r3, r3, #1
 800054a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800054e:	4b40      	ldr	r3, [pc, #256]	; (8000650 <MX_GPIO_Init+0x128>)
 8000550:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000554:	f003 0301 	and.w	r3, r3, #1
 8000558:	61bb      	str	r3, [r7, #24]
 800055a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800055c:	4b3c      	ldr	r3, [pc, #240]	; (8000650 <MX_GPIO_Init+0x128>)
 800055e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000562:	4a3b      	ldr	r2, [pc, #236]	; (8000650 <MX_GPIO_Init+0x128>)
 8000564:	f043 0320 	orr.w	r3, r3, #32
 8000568:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800056c:	4b38      	ldr	r3, [pc, #224]	; (8000650 <MX_GPIO_Init+0x128>)
 800056e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000572:	f003 0320 	and.w	r3, r3, #32
 8000576:	617b      	str	r3, [r7, #20]
 8000578:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057a:	4b35      	ldr	r3, [pc, #212]	; (8000650 <MX_GPIO_Init+0x128>)
 800057c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000580:	4a33      	ldr	r2, [pc, #204]	; (8000650 <MX_GPIO_Init+0x128>)
 8000582:	f043 0308 	orr.w	r3, r3, #8
 8000586:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800058a:	4b31      	ldr	r3, [pc, #196]	; (8000650 <MX_GPIO_Init+0x128>)
 800058c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000590:	f003 0308 	and.w	r3, r3, #8
 8000594:	613b      	str	r3, [r7, #16]
 8000596:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000598:	4b2d      	ldr	r3, [pc, #180]	; (8000650 <MX_GPIO_Init+0x128>)
 800059a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800059e:	4a2c      	ldr	r2, [pc, #176]	; (8000650 <MX_GPIO_Init+0x128>)
 80005a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005a4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80005a8:	4b29      	ldr	r3, [pc, #164]	; (8000650 <MX_GPIO_Init+0x128>)
 80005aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b6:	4b26      	ldr	r3, [pc, #152]	; (8000650 <MX_GPIO_Init+0x128>)
 80005b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005bc:	4a24      	ldr	r2, [pc, #144]	; (8000650 <MX_GPIO_Init+0x128>)
 80005be:	f043 0304 	orr.w	r3, r3, #4
 80005c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80005c6:	4b22      	ldr	r3, [pc, #136]	; (8000650 <MX_GPIO_Init+0x128>)
 80005c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005cc:	f003 0304 	and.w	r3, r3, #4
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d4:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <MX_GPIO_Init+0x128>)
 80005d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005da:	4a1d      	ldr	r2, [pc, #116]	; (8000650 <MX_GPIO_Init+0x128>)
 80005dc:	f043 0302 	orr.w	r3, r3, #2
 80005e0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80005e4:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <MX_GPIO_Init+0x128>)
 80005e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005ea:	f003 0302 	and.w	r3, r3, #2
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80005f2:	2201      	movs	r2, #1
 80005f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005f8:	4816      	ldr	r0, [pc, #88]	; (8000654 <MX_GPIO_Init+0x12c>)
 80005fa:	f000 fcad 	bl	8000f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000604:	4814      	ldr	r0, [pc, #80]	; (8000658 <MX_GPIO_Init+0x130>)
 8000606:	f000 fca7 	bl	8000f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 800060a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000610:	2301      	movs	r3, #1
 8000612:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000618:	2300      	movs	r3, #0
 800061a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800061c:	f107 031c 	add.w	r3, r7, #28
 8000620:	4619      	mov	r1, r3
 8000622:	480c      	ldr	r0, [pc, #48]	; (8000654 <MX_GPIO_Init+0x12c>)
 8000624:	f000 fac0 	bl	8000ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS_Pin */
  GPIO_InitStruct.Pin = RS_Pin;
 8000628:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800062c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062e:	2301      	movs	r3, #1
 8000630:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	2300      	movs	r3, #0
 8000634:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000636:	2300      	movs	r3, #0
 8000638:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RS_GPIO_Port, &GPIO_InitStruct);
 800063a:	f107 031c 	add.w	r3, r7, #28
 800063e:	4619      	mov	r1, r3
 8000640:	4805      	ldr	r0, [pc, #20]	; (8000658 <MX_GPIO_Init+0x130>)
 8000642:	f000 fab1 	bl	8000ba8 <HAL_GPIO_Init>
/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000646:	bf00      	nop
 8000648:	3730      	adds	r7, #48	; 0x30
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	46020c00 	.word	0x46020c00
 8000654:	42021400 	.word	0x42021400
 8000658:	42020c00 	.word	0x42020c00

0800065c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000660:	b672      	cpsid	i
}
 8000662:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000664:	e7fe      	b.n	8000664 <Error_Handler+0x8>
	...

08000668 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800066e:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <HAL_MspInit+0x30>)
 8000670:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000674:	4a08      	ldr	r2, [pc, #32]	; (8000698 <HAL_MspInit+0x30>)
 8000676:	f043 0304 	orr.w	r3, r3, #4
 800067a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <HAL_MspInit+0x30>)
 8000680:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000684:	f003 0304 	and.w	r3, r3, #4
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	46020c00 	.word	0x46020c00

0800069c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b0c0      	sub	sp, #256	; 0x100
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006b4:	f107 0310 	add.w	r3, r7, #16
 80006b8:	22d8      	movs	r2, #216	; 0xd8
 80006ba:	2100      	movs	r1, #0
 80006bc:	4618      	mov	r0, r3
 80006be:	f003 fc73 	bl	8003fa8 <memset>
  if(hspi->Instance==SPI1)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a27      	ldr	r2, [pc, #156]	; (8000764 <HAL_SPI_MspInit+0xc8>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d145      	bne.n	8000758 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80006cc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006d0:	f04f 0300 	mov.w	r3, #0
 80006d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PCLK2;
 80006d8:	2300      	movs	r3, #0
 80006da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006de:	f107 0310 	add.w	r3, r7, #16
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 fff2 	bl	80026cc <HAL_RCCEx_PeriphCLKConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80006ee:	f7ff ffb5 	bl	800065c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006f2:	4b1d      	ldr	r3, [pc, #116]	; (8000768 <HAL_SPI_MspInit+0xcc>)
 80006f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80006f8:	4a1b      	ldr	r2, [pc, #108]	; (8000768 <HAL_SPI_MspInit+0xcc>)
 80006fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006fe:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000702:	4b19      	ldr	r3, [pc, #100]	; (8000768 <HAL_SPI_MspInit+0xcc>)
 8000704:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000708:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000710:	4b15      	ldr	r3, [pc, #84]	; (8000768 <HAL_SPI_MspInit+0xcc>)
 8000712:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000716:	4a14      	ldr	r2, [pc, #80]	; (8000768 <HAL_SPI_MspInit+0xcc>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <HAL_SPI_MspInit+0xcc>)
 8000722:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800072e:	23e0      	movs	r3, #224	; 0xe0
 8000730:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000734:	2302      	movs	r3, #2
 8000736:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000740:	2300      	movs	r3, #0
 8000742:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000746:	2305      	movs	r3, #5
 8000748:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000750:	4619      	mov	r1, r3
 8000752:	4806      	ldr	r0, [pc, #24]	; (800076c <HAL_SPI_MspInit+0xd0>)
 8000754:	f000 fa28 	bl	8000ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000758:	bf00      	nop
 800075a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40013000 	.word	0x40013000
 8000768:	46020c00 	.word	0x46020c00
 800076c:	42020000 	.word	0x42020000

08000770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr

0800077e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000782:	e7fe      	b.n	8000782 <HardFault_Handler+0x4>

08000784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000788:	e7fe      	b.n	8000788 <MemManage_Handler+0x4>

0800078a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800078e:	e7fe      	b.n	800078e <BusFault_Handler+0x4>

08000790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000794:	e7fe      	b.n	8000794 <UsageFault_Handler+0x4>

08000796 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr

080007b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c4:	f000 f8c8 	bl	8000958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}

080007cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007d0:	4b18      	ldr	r3, [pc, #96]	; (8000834 <SystemInit+0x68>)
 80007d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007d6:	4a17      	ldr	r2, [pc, #92]	; (8000834 <SystemInit+0x68>)
 80007d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80007e0:	4b15      	ldr	r3, [pc, #84]	; (8000838 <SystemInit+0x6c>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80007e6:	4b14      	ldr	r3, [pc, #80]	; (8000838 <SystemInit+0x6c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <SystemInit+0x6c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <SystemInit+0x6c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <SystemInit+0x6c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a0e      	ldr	r2, [pc, #56]	; (8000838 <SystemInit+0x6c>)
 80007fe:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000802:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000806:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000808:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <SystemInit+0x6c>)
 800080a:	2200      	movs	r2, #0
 800080c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800080e:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <SystemInit+0x6c>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a09      	ldr	r2, [pc, #36]	; (8000838 <SystemInit+0x6c>)
 8000814:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000818:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800081a:	4b07      	ldr	r3, [pc, #28]	; (8000838 <SystemInit+0x6c>)
 800081c:	2200      	movs	r2, #0
 800081e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000820:	4b04      	ldr	r3, [pc, #16]	; (8000834 <SystemInit+0x68>)
 8000822:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000826:	609a      	str	r2, [r3, #8]
  #endif
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	e000ed00 	.word	0xe000ed00
 8000838:	46020c00 	.word	0x46020c00

0800083c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800083c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000874 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000840:	f7ff ffc4 	bl	80007cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000844:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000846:	e003      	b.n	8000850 <LoopCopyDataInit>

08000848 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000848:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800084a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800084c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800084e:	3104      	adds	r1, #4

08000850 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000850:	480a      	ldr	r0, [pc, #40]	; (800087c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000854:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000856:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000858:	d3f6      	bcc.n	8000848 <CopyDataInit>
	ldr	r2, =_sbss
 800085a:	4a0a      	ldr	r2, [pc, #40]	; (8000884 <LoopForever+0x12>)
	b	LoopFillZerobss
 800085c:	e002      	b.n	8000864 <LoopFillZerobss>

0800085e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800085e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000860:	f842 3b04 	str.w	r3, [r2], #4

08000864 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000864:	4b08      	ldr	r3, [pc, #32]	; (8000888 <LoopForever+0x16>)
	cmp	r2, r3
 8000866:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000868:	d3f9      	bcc.n	800085e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800086a:	f003 fb79 	bl	8003f60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800086e:	f7ff fd43 	bl	80002f8 <main>

08000872 <LoopForever>:

LoopForever:
    b LoopForever
 8000872:	e7fe      	b.n	8000872 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000874:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8000878:	080040b0 	.word	0x080040b0
	ldr	r0, =_sdata
 800087c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000880:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8000884:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000888:	200000bc 	.word	0x200000bc

0800088c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800088c:	e7fe      	b.n	800088c <ADC1_2_IRQHandler>
	...

08000890 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <HAL_Init+0x4c>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a10      	ldr	r2, [pc, #64]	; (80008dc <HAL_Init+0x4c>)
 800089a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800089e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a0:	2003      	movs	r0, #3
 80008a2:	f000 f94f 	bl	8000b44 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80008a6:	f001 fd69 	bl	800237c <HAL_RCC_GetSysClockFreq>
 80008aa:	4602      	mov	r2, r0
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <HAL_Init+0x50>)
 80008ae:	6a1b      	ldr	r3, [r3, #32]
 80008b0:	f003 030f 	and.w	r3, r3, #15
 80008b4:	490b      	ldr	r1, [pc, #44]	; (80008e4 <HAL_Init+0x54>)
 80008b6:	5ccb      	ldrb	r3, [r1, r3]
 80008b8:	fa22 f303 	lsr.w	r3, r2, r3
 80008bc:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <HAL_Init+0x58>)
 80008be:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008c0:	200f      	movs	r0, #15
 80008c2:	f000 f813 	bl	80008ec <HAL_InitTick>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 80008cc:	2301      	movs	r3, #1
 80008ce:	e002      	b.n	80008d6 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80008d0:	f7ff feca 	bl	8000668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40022000 	.word	0x40022000
 80008e0:	46020c00 	.word	0x46020c00
 80008e4:	08003fd8 	.word	0x08003fd8
 80008e8:	20000000 	.word	0x20000000

080008ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80008f4:	4b15      	ldr	r3, [pc, #84]	; (800094c <HAL_InitTick+0x60>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d101      	bne.n	8000900 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80008fc:	2301      	movs	r3, #1
 80008fe:	e021      	b.n	8000944 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000900:	4b13      	ldr	r3, [pc, #76]	; (8000950 <HAL_InitTick+0x64>)
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <HAL_InitTick+0x60>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	4619      	mov	r1, r3
 800090a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800090e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000912:	fbb2 f3f3 	udiv	r3, r2, r3
 8000916:	4618      	mov	r0, r3
 8000918:	f000 f939 	bl	8000b8e <HAL_SYSTICK_Config>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000922:	2301      	movs	r3, #1
 8000924:	e00e      	b.n	8000944 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2b0f      	cmp	r3, #15
 800092a:	d80a      	bhi.n	8000942 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800092c:	2200      	movs	r2, #0
 800092e:	6879      	ldr	r1, [r7, #4]
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	f000 f911 	bl	8000b5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000938:	4a06      	ldr	r2, [pc, #24]	; (8000954 <HAL_InitTick+0x68>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800093e:	2300      	movs	r3, #0
 8000940:	e000      	b.n	8000944 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000942:	2301      	movs	r3, #1
}
 8000944:	4618      	mov	r0, r3
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000008 	.word	0x20000008
 8000950:	20000000 	.word	0x20000000
 8000954:	20000004 	.word	0x20000004

08000958 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <HAL_IncTick+0x20>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_IncTick+0x24>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4413      	add	r3, r2
 8000968:	4a04      	ldr	r2, [pc, #16]	; (800097c <HAL_IncTick+0x24>)
 800096a:	6013      	str	r3, [r2, #0]
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	20000008 	.word	0x20000008
 800097c:	200000b8 	.word	0x200000b8

08000980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  return uwTick;
 8000984:	4b03      	ldr	r3, [pc, #12]	; (8000994 <HAL_GetTick+0x14>)
 8000986:	681b      	ldr	r3, [r3, #0]
}
 8000988:	4618      	mov	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	200000b8 	.word	0x200000b8

08000998 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009a0:	f7ff ffee 	bl	8000980 <HAL_GetTick>
 80009a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009b0:	d005      	beq.n	80009be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009b2:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <HAL_Delay+0x44>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	461a      	mov	r2, r3
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	4413      	add	r3, r2
 80009bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009be:	bf00      	nop
 80009c0:	f7ff ffde 	bl	8000980 <HAL_GetTick>
 80009c4:	4602      	mov	r2, r0
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	1ad3      	subs	r3, r2, r3
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d8f7      	bhi.n	80009c0 <HAL_Delay+0x28>
  {
  }
}
 80009d0:	bf00      	nop
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000008 	.word	0x20000008

080009e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f003 0307 	and.w	r3, r3, #7
 80009ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <__NVIC_SetPriorityGrouping+0x44>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009f6:	68ba      	ldr	r2, [r7, #8]
 80009f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009fc:	4013      	ands	r3, r2
 80009fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a12:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <__NVIC_SetPriorityGrouping+0x44>)
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	60d3      	str	r3, [r2, #12]
}
 8000a18:	bf00      	nop
 8000a1a:	3714      	adds	r7, #20
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a2c:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <__NVIC_GetPriorityGrouping+0x18>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	0a1b      	lsrs	r3, r3, #8
 8000a32:	f003 0307 	and.w	r3, r3, #7
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	6039      	str	r1, [r7, #0]
 8000a4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	db0a      	blt.n	8000a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	490c      	ldr	r1, [pc, #48]	; (8000a90 <__NVIC_SetPriority+0x4c>)
 8000a5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a62:	0112      	lsls	r2, r2, #4
 8000a64:	b2d2      	uxtb	r2, r2
 8000a66:	440b      	add	r3, r1
 8000a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a6c:	e00a      	b.n	8000a84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	4908      	ldr	r1, [pc, #32]	; (8000a94 <__NVIC_SetPriority+0x50>)
 8000a74:	88fb      	ldrh	r3, [r7, #6]
 8000a76:	f003 030f 	and.w	r3, r3, #15
 8000a7a:	3b04      	subs	r3, #4
 8000a7c:	0112      	lsls	r2, r2, #4
 8000a7e:	b2d2      	uxtb	r2, r2
 8000a80:	440b      	add	r3, r1
 8000a82:	761a      	strb	r2, [r3, #24]
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	e000e100 	.word	0xe000e100
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b089      	sub	sp, #36	; 0x24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	f1c3 0307 	rsb	r3, r3, #7
 8000ab2:	2b04      	cmp	r3, #4
 8000ab4:	bf28      	it	cs
 8000ab6:	2304      	movcs	r3, #4
 8000ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	3304      	adds	r3, #4
 8000abe:	2b06      	cmp	r3, #6
 8000ac0:	d902      	bls.n	8000ac8 <NVIC_EncodePriority+0x30>
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	3b03      	subs	r3, #3
 8000ac6:	e000      	b.n	8000aca <NVIC_EncodePriority+0x32>
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000acc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	43da      	mvns	r2, r3
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	401a      	ands	r2, r3
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aea:	43d9      	mvns	r1, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af0:	4313      	orrs	r3, r2
         );
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3724      	adds	r7, #36	; 0x24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
	...

08000b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b10:	d301      	bcc.n	8000b16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b12:	2301      	movs	r3, #1
 8000b14:	e00f      	b.n	8000b36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b16:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <SysTick_Config+0x40>)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b1e:	210f      	movs	r1, #15
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	f7ff ff8e 	bl	8000a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <SysTick_Config+0x40>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b2e:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <SysTick_Config+0x40>)
 8000b30:	2207      	movs	r2, #7
 8000b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	e000e010 	.word	0xe000e010

08000b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff ff47 	bl	80009e0 <__NVIC_SetPriorityGrouping>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b086      	sub	sp, #24
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	4603      	mov	r3, r0
 8000b62:	60b9      	str	r1, [r7, #8]
 8000b64:	607a      	str	r2, [r7, #4]
 8000b66:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b68:	f7ff ff5e 	bl	8000a28 <__NVIC_GetPriorityGrouping>
 8000b6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	68b9      	ldr	r1, [r7, #8]
 8000b72:	6978      	ldr	r0, [r7, #20]
 8000b74:	f7ff ff90 	bl	8000a98 <NVIC_EncodePriority>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b7e:	4611      	mov	r1, r2
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff ff5f 	bl	8000a44 <__NVIC_SetPriority>
}
 8000b86:	bf00      	nop
 8000b88:	3718      	adds	r7, #24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b082      	sub	sp, #8
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f7ff ffb2 	bl	8000b00 <SysTick_Config>
 8000b9c:	4603      	mov	r3, r0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b089      	sub	sp, #36	; 0x24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000bba:	e1ba      	b.n	8000f32 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	f000 81aa 	beq.w	8000f2c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a55      	ldr	r2, [pc, #340]	; (8000d30 <HAL_GPIO_Init+0x188>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d15d      	bne.n	8000c9c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8000be6:	2201      	movs	r2, #1
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	69fa      	ldr	r2, [r7, #28]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f003 0201 	and.w	r2, r3, #1
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	69fa      	ldr	r2, [r7, #28]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	69fa      	ldr	r2, [r7, #28]
 8000c0e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8000c10:	4a48      	ldr	r2, [pc, #288]	; (8000d34 <HAL_GPIO_Init+0x18c>)
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000c18:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8000c1a:	4a46      	ldr	r2, [pc, #280]	; (8000d34 <HAL_GPIO_Init+0x18c>)
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	00db      	lsls	r3, r3, #3
 8000c20:	4413      	add	r3, r2
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8000c26:	69bb      	ldr	r3, [r7, #24]
 8000c28:	08da      	lsrs	r2, r3, #3
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	3208      	adds	r2, #8
 8000c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c32:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	220f      	movs	r2, #15
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43db      	mvns	r3, r3
 8000c44:	69fa      	ldr	r2, [r7, #28]
 8000c46:	4013      	ands	r3, r2
 8000c48:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8000c4a:	69bb      	ldr	r3, [r7, #24]
 8000c4c:	f003 0307 	and.w	r3, r3, #7
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	220b      	movs	r2, #11
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	69fa      	ldr	r2, [r7, #28]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	08da      	lsrs	r2, r3, #3
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	3208      	adds	r2, #8
 8000c66:	69f9      	ldr	r1, [r7, #28]
 8000c68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	2203      	movs	r2, #3
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	69fa      	ldr	r2, [r7, #28]
 8000c80:	4013      	ands	r3, r2
 8000c82:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	2202      	movs	r2, #2
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	69fa      	ldr	r2, [r7, #28]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	69fa      	ldr	r2, [r7, #28]
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	e067      	b.n	8000d6c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d003      	beq.n	8000cac <HAL_GPIO_Init+0x104>
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	2b12      	cmp	r3, #18
 8000caa:	d145      	bne.n	8000d38 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	08da      	lsrs	r2, r3, #3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3208      	adds	r2, #8
 8000cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cb8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	f003 0307 	and.w	r3, r3, #7
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	220f      	movs	r2, #15
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	69fa      	ldr	r2, [r7, #28]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	691b      	ldr	r3, [r3, #16]
 8000cd4:	f003 020f 	and.w	r2, r3, #15
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	69fa      	ldr	r2, [r7, #28]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	08da      	lsrs	r2, r3, #3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3208      	adds	r2, #8
 8000cf2:	69f9      	ldr	r1, [r7, #28]
 8000cf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	2203      	movs	r2, #3
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	69fa      	ldr	r2, [r7, #28]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f003 0203 	and.w	r2, r3, #3
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	69fa      	ldr	r2, [r7, #28]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	69fa      	ldr	r2, [r7, #28]
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	e01e      	b.n	8000d6c <HAL_GPIO_Init+0x1c4>
 8000d2e:	bf00      	nop
 8000d30:	46020000 	.word	0x46020000
 8000d34:	08004028 	.word	0x08004028
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	2203      	movs	r2, #3
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	69fa      	ldr	r2, [r7, #28]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f003 0203 	and.w	r2, r3, #3
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	69fa      	ldr	r2, [r7, #28]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	69fa      	ldr	r2, [r7, #28]
 8000d6a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d00b      	beq.n	8000d8c <HAL_GPIO_Init+0x1e4>
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d007      	beq.n	8000d8c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d80:	2b11      	cmp	r3, #17
 8000d82:	d003      	beq.n	8000d8c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	2b12      	cmp	r3, #18
 8000d8a:	d130      	bne.n	8000dee <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	2203      	movs	r2, #3
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	69fa      	ldr	r2, [r7, #28]
 8000da0:	4013      	ands	r3, r2
 8000da2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	68da      	ldr	r2, [r3, #12]
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	69fa      	ldr	r2, [r7, #28]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	69fa      	ldr	r2, [r7, #28]
 8000dba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	69fa      	ldr	r2, [r7, #28]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	091b      	lsrs	r3, r3, #4
 8000dd8:	f003 0201 	and.w	r2, r3, #1
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	69fa      	ldr	r2, [r7, #28]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	69fa      	ldr	r2, [r7, #28]
 8000dec:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	2b03      	cmp	r3, #3
 8000df4:	d017      	beq.n	8000e26 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	2203      	movs	r2, #3
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43db      	mvns	r3, r3
 8000e08:	69fa      	ldr	r2, [r7, #28]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	689a      	ldr	r2, [r3, #8]
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	69fa      	ldr	r2, [r7, #28]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	69fa      	ldr	r2, [r7, #28]
 8000e24:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d07c      	beq.n	8000f2c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000e32:	4a47      	ldr	r2, [pc, #284]	; (8000f50 <HAL_GPIO_Init+0x3a8>)
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	089b      	lsrs	r3, r3, #2
 8000e38:	3318      	adds	r3, #24
 8000e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e3e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	f003 0303 	and.w	r3, r3, #3
 8000e46:	00db      	lsls	r3, r3, #3
 8000e48:	220f      	movs	r2, #15
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	69fa      	ldr	r2, [r7, #28]
 8000e52:	4013      	ands	r3, r2
 8000e54:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	0a9a      	lsrs	r2, r3, #10
 8000e5a:	4b3e      	ldr	r3, [pc, #248]	; (8000f54 <HAL_GPIO_Init+0x3ac>)
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	697a      	ldr	r2, [r7, #20]
 8000e60:	f002 0203 	and.w	r2, r2, #3
 8000e64:	00d2      	lsls	r2, r2, #3
 8000e66:	4093      	lsls	r3, r2
 8000e68:	69fa      	ldr	r2, [r7, #28]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000e6e:	4938      	ldr	r1, [pc, #224]	; (8000f50 <HAL_GPIO_Init+0x3a8>)
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	089b      	lsrs	r3, r3, #2
 8000e74:	3318      	adds	r3, #24
 8000e76:	69fa      	ldr	r2, [r7, #28]
 8000e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000e7c:	4b34      	ldr	r3, [pc, #208]	; (8000f50 <HAL_GPIO_Init+0x3a8>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69fa      	ldr	r2, [r7, #28]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d003      	beq.n	8000ea0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8000e98:	69fa      	ldr	r2, [r7, #28]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8000ea0:	4a2b      	ldr	r2, [pc, #172]	; (8000f50 <HAL_GPIO_Init+0x3a8>)
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8000ea6:	4b2a      	ldr	r3, [pc, #168]	; (8000f50 <HAL_GPIO_Init+0x3a8>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	69fa      	ldr	r2, [r7, #28]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d003      	beq.n	8000eca <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8000ec2:	69fa      	ldr	r2, [r7, #28]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8000eca:	4a21      	ldr	r2, [pc, #132]	; (8000f50 <HAL_GPIO_Init+0x3a8>)
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8000ed0:	4b1f      	ldr	r3, [pc, #124]	; (8000f50 <HAL_GPIO_Init+0x3a8>)
 8000ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000ed6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	43db      	mvns	r3, r3
 8000edc:	69fa      	ldr	r2, [r7, #28]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8000eee:	69fa      	ldr	r2, [r7, #28]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8000ef6:	4a16      	ldr	r2, [pc, #88]	; (8000f50 <HAL_GPIO_Init+0x3a8>)
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8000efe:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <HAL_GPIO_Init+0x3a8>)
 8000f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f04:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69fa      	ldr	r2, [r7, #28]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d003      	beq.n	8000f24 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8000f1c:	69fa      	ldr	r2, [r7, #28]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8000f24:	4a0a      	ldr	r2, [pc, #40]	; (8000f50 <HAL_GPIO_Init+0x3a8>)
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	fa22 f303 	lsr.w	r3, r2, r3
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	f47f ae3d 	bne.w	8000bbc <HAL_GPIO_Init+0x14>
  }
}
 8000f42:	bf00      	nop
 8000f44:	bf00      	nop
 8000f46:	3724      	adds	r7, #36	; 0x24
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	46022000 	.word	0x46022000
 8000f54:	002f7f7f 	.word	0x002f7f7f

08000f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	807b      	strh	r3, [r7, #2]
 8000f64:	4613      	mov	r3, r2
 8000f66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f68:	787b      	ldrb	r3, [r7, #1]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f6e:	887a      	ldrh	r2, [r7, #2]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8000f74:	e002      	b.n	8000f7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8000f76:	887a      	ldrh	r2, [r7, #2]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f90:	2300      	movs	r3, #0
 8000f92:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8000f94:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d002      	beq.n	8000fa6 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	73fb      	strb	r3, [r7, #15]
 8000fa4:	e007      	b.n	8000fb6 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8000fa6:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f023 0204 	bic.w	r2, r3, #4
 8000fae:	4905      	ldr	r1, [pc, #20]	; (8000fc4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	600b      	str	r3, [r1, #0]
  }

  return status;
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	40030400 	.word	0x40030400

08000fc8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8000fcc:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <HAL_ICACHE_Enable+0x1c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <HAL_ICACHE_Enable+0x1c>)
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	40030400 	.word	0x40030400

08000fe8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8000ff0:	4b39      	ldr	r3, [pc, #228]	; (80010d8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ff4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ff8:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d10b      	bne.n	800101a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001008:	d905      	bls.n	8001016 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800100a:	4b33      	ldr	r3, [pc, #204]	; (80010d8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	4a32      	ldr	r2, [pc, #200]	; (80010d8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001014:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8001016:	2300      	movs	r3, #0
 8001018:	e057      	b.n	80010ca <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001020:	d90a      	bls.n	8001038 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8001022:	4b2d      	ldr	r3, [pc, #180]	; (80010d8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4313      	orrs	r3, r2
 800102e:	4a2a      	ldr	r2, [pc, #168]	; (80010d8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001034:	60d3      	str	r3, [r2, #12]
 8001036:	e007      	b.n	8001048 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8001038:	4b27      	ldr	r3, [pc, #156]	; (80010d8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8001040:	4925      	ldr	r1, [pc, #148]	; (80010d8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4313      	orrs	r3, r2
 8001046:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001048:	4b24      	ldr	r3, [pc, #144]	; (80010dc <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a24      	ldr	r2, [pc, #144]	; (80010e0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800104e:	fba2 2303 	umull	r2, r3, r2, r3
 8001052:	099b      	lsrs	r3, r3, #6
 8001054:	2232      	movs	r2, #50	; 0x32
 8001056:	fb02 f303 	mul.w	r3, r2, r3
 800105a:	4a21      	ldr	r2, [pc, #132]	; (80010e0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800105c:	fba2 2303 	umull	r2, r3, r2, r3
 8001060:	099b      	lsrs	r3, r3, #6
 8001062:	3301      	adds	r3, #1
 8001064:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001066:	e002      	b.n	800106e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	3b01      	subs	r3, #1
 800106c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800106e:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d102      	bne.n	8001080 <HAL_PWREx_ControlVoltageScaling+0x98>
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d1f3      	bne.n	8001068 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d01b      	beq.n	80010be <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001086:	4b15      	ldr	r3, [pc, #84]	; (80010dc <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a15      	ldr	r2, [pc, #84]	; (80010e0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800108c:	fba2 2303 	umull	r2, r3, r2, r3
 8001090:	099b      	lsrs	r3, r3, #6
 8001092:	2232      	movs	r2, #50	; 0x32
 8001094:	fb02 f303 	mul.w	r3, r2, r3
 8001098:	4a11      	ldr	r2, [pc, #68]	; (80010e0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800109a:	fba2 2303 	umull	r2, r3, r2, r3
 800109e:	099b      	lsrs	r3, r3, #6
 80010a0:	3301      	adds	r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80010a4:	e002      	b.n	80010ac <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	3b01      	subs	r3, #1
 80010aa:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80010ac:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80010ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d102      	bne.n	80010be <HAL_PWREx_ControlVoltageScaling+0xd6>
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f3      	bne.n	80010a6 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d101      	bne.n	80010c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e000      	b.n	80010ca <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	46020800 	.word	0x46020800
 80010dc:	20000000 	.word	0x20000000
 80010e0:	10624dd3 	.word	0x10624dd3

080010e4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80010e8:	4b04      	ldr	r3, [pc, #16]	; (80010fc <HAL_PWREx_GetVoltageRange+0x18>)
 80010ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	46020800 	.word	0x46020800

08001100 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001108:	4b22      	ldr	r3, [pc, #136]	; (8001194 <HAL_PWREx_ConfigSupply+0x94>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a22      	ldr	r2, [pc, #136]	; (8001198 <HAL_PWREx_ConfigSupply+0x98>)
 800110e:	fba2 2303 	umull	r2, r3, r2, r3
 8001112:	099b      	lsrs	r3, r3, #6
 8001114:	2232      	movs	r2, #50	; 0x32
 8001116:	fb02 f303 	mul.w	r3, r2, r3
 800111a:	4a1f      	ldr	r2, [pc, #124]	; (8001198 <HAL_PWREx_ConfigSupply+0x98>)
 800111c:	fba2 2303 	umull	r2, r3, r2, r3
 8001120:	099b      	lsrs	r3, r3, #6
 8001122:	3301      	adds	r3, #1
 8001124:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d113      	bne.n	8001154 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800112c:	4b1b      	ldr	r3, [pc, #108]	; (800119c <HAL_PWREx_ConfigSupply+0x9c>)
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	4a1a      	ldr	r2, [pc, #104]	; (800119c <HAL_PWREx_ConfigSupply+0x9c>)
 8001132:	f023 0302 	bic.w	r3, r3, #2
 8001136:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001138:	e002      	b.n	8001140 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	3b01      	subs	r3, #1
 800113e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001140:	4b16      	ldr	r3, [pc, #88]	; (800119c <HAL_PWREx_ConfigSupply+0x9c>)
 8001142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b02      	cmp	r3, #2
 800114a:	d116      	bne.n	800117a <HAL_PWREx_ConfigSupply+0x7a>
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d1f3      	bne.n	800113a <HAL_PWREx_ConfigSupply+0x3a>
 8001152:	e012      	b.n	800117a <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <HAL_PWREx_ConfigSupply+0x9c>)
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	4a10      	ldr	r2, [pc, #64]	; (800119c <HAL_PWREx_ConfigSupply+0x9c>)
 800115a:	f043 0302 	orr.w	r3, r3, #2
 800115e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001160:	e002      	b.n	8001168 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	3b01      	subs	r3, #1
 8001166:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <HAL_PWREx_ConfigSupply+0x9c>)
 800116a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800116c:	f003 0302 	and.w	r3, r3, #2
 8001170:	2b00      	cmp	r3, #0
 8001172:	d102      	bne.n	800117a <HAL_PWREx_ConfigSupply+0x7a>
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1f3      	bne.n	8001162 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d101      	bne.n	8001184 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e000      	b.n	8001186 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20000000 	.word	0x20000000
 8001198:	10624dd3 	.word	0x10624dd3
 800119c:	46020800 	.word	0x46020800

080011a0 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <HAL_PWREx_EnableVddIO2+0x1c>)
 80011a6:	691b      	ldr	r3, [r3, #16]
 80011a8:	4a04      	ldr	r2, [pc, #16]	; (80011bc <HAL_PWREx_EnableVddIO2+0x1c>)
 80011aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80011ae:	6113      	str	r3, [r2, #16]
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	46020800 	.word	0x46020800

080011c0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 80011c4:	4b05      	ldr	r3, [pc, #20]	; (80011dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80011c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c8:	4a04      	ldr	r2, [pc, #16]	; (80011dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	46020800 	.word	0x46020800

080011e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08e      	sub	sp, #56	; 0x38
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80011e8:	2300      	movs	r3, #0
 80011ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d102      	bne.n	80011fa <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	f000 bec8 	b.w	8001f8a <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011fa:	4b99      	ldr	r3, [pc, #612]	; (8001460 <HAL_RCC_OscConfig+0x280>)
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	f003 030c 	and.w	r3, r3, #12
 8001202:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001204:	4b96      	ldr	r3, [pc, #600]	; (8001460 <HAL_RCC_OscConfig+0x280>)
 8001206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001208:	f003 0303 	and.w	r3, r3, #3
 800120c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0310 	and.w	r3, r3, #16
 8001216:	2b00      	cmp	r3, #0
 8001218:	f000 816c 	beq.w	80014f4 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800121c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800121e:	2b00      	cmp	r3, #0
 8001220:	d007      	beq.n	8001232 <HAL_RCC_OscConfig+0x52>
 8001222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001224:	2b0c      	cmp	r3, #12
 8001226:	f040 80de 	bne.w	80013e6 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800122a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800122c:	2b01      	cmp	r3, #1
 800122e:	f040 80da 	bne.w	80013e6 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d102      	bne.n	8001240 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	f000 bea5 	b.w	8001f8a <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001244:	4b86      	ldr	r3, [pc, #536]	; (8001460 <HAL_RCC_OscConfig+0x280>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d004      	beq.n	800125a <HAL_RCC_OscConfig+0x7a>
 8001250:	4b83      	ldr	r3, [pc, #524]	; (8001460 <HAL_RCC_OscConfig+0x280>)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001258:	e005      	b.n	8001266 <HAL_RCC_OscConfig+0x86>
 800125a:	4b81      	ldr	r3, [pc, #516]	; (8001460 <HAL_RCC_OscConfig+0x280>)
 800125c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001260:	041b      	lsls	r3, r3, #16
 8001262:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001266:	4293      	cmp	r3, r2
 8001268:	d255      	bcs.n	8001316 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800126a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800126c:	2b00      	cmp	r3, #0
 800126e:	d10a      	bne.n	8001286 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001274:	4618      	mov	r0, r3
 8001276:	f001 f9a3 	bl	80025c0 <RCC_SetFlashLatencyFromMSIRange>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d002      	beq.n	8001286 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	f000 be82 	b.w	8001f8a <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001286:	4b76      	ldr	r3, [pc, #472]	; (8001460 <HAL_RCC_OscConfig+0x280>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	4a75      	ldr	r2, [pc, #468]	; (8001460 <HAL_RCC_OscConfig+0x280>)
 800128c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001290:	6093      	str	r3, [r2, #8]
 8001292:	4b73      	ldr	r3, [pc, #460]	; (8001460 <HAL_RCC_OscConfig+0x280>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129e:	4970      	ldr	r1, [pc, #448]	; (8001460 <HAL_RCC_OscConfig+0x280>)
 80012a0:	4313      	orrs	r3, r2
 80012a2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80012ac:	d309      	bcc.n	80012c2 <HAL_RCC_OscConfig+0xe2>
 80012ae:	4b6c      	ldr	r3, [pc, #432]	; (8001460 <HAL_RCC_OscConfig+0x280>)
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	f023 021f 	bic.w	r2, r3, #31
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a1b      	ldr	r3, [r3, #32]
 80012ba:	4969      	ldr	r1, [pc, #420]	; (8001460 <HAL_RCC_OscConfig+0x280>)
 80012bc:	4313      	orrs	r3, r2
 80012be:	60cb      	str	r3, [r1, #12]
 80012c0:	e07e      	b.n	80013c0 <HAL_RCC_OscConfig+0x1e0>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	da0a      	bge.n	80012e0 <HAL_RCC_OscConfig+0x100>
 80012ca:	4b65      	ldr	r3, [pc, #404]	; (8001460 <HAL_RCC_OscConfig+0x280>)
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a1b      	ldr	r3, [r3, #32]
 80012d6:	015b      	lsls	r3, r3, #5
 80012d8:	4961      	ldr	r1, [pc, #388]	; (8001460 <HAL_RCC_OscConfig+0x280>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	60cb      	str	r3, [r1, #12]
 80012de:	e06f      	b.n	80013c0 <HAL_RCC_OscConfig+0x1e0>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012e8:	d30a      	bcc.n	8001300 <HAL_RCC_OscConfig+0x120>
 80012ea:	4b5d      	ldr	r3, [pc, #372]	; (8001460 <HAL_RCC_OscConfig+0x280>)
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a1b      	ldr	r3, [r3, #32]
 80012f6:	029b      	lsls	r3, r3, #10
 80012f8:	4959      	ldr	r1, [pc, #356]	; (8001460 <HAL_RCC_OscConfig+0x280>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	60cb      	str	r3, [r1, #12]
 80012fe:	e05f      	b.n	80013c0 <HAL_RCC_OscConfig+0x1e0>
 8001300:	4b57      	ldr	r3, [pc, #348]	; (8001460 <HAL_RCC_OscConfig+0x280>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a1b      	ldr	r3, [r3, #32]
 800130c:	03db      	lsls	r3, r3, #15
 800130e:	4954      	ldr	r1, [pc, #336]	; (8001460 <HAL_RCC_OscConfig+0x280>)
 8001310:	4313      	orrs	r3, r2
 8001312:	60cb      	str	r3, [r1, #12]
 8001314:	e054      	b.n	80013c0 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001316:	4b52      	ldr	r3, [pc, #328]	; (8001460 <HAL_RCC_OscConfig+0x280>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	4a51      	ldr	r2, [pc, #324]	; (8001460 <HAL_RCC_OscConfig+0x280>)
 800131c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001320:	6093      	str	r3, [r2, #8]
 8001322:	4b4f      	ldr	r3, [pc, #316]	; (8001460 <HAL_RCC_OscConfig+0x280>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132e:	494c      	ldr	r1, [pc, #304]	; (8001460 <HAL_RCC_OscConfig+0x280>)
 8001330:	4313      	orrs	r3, r2
 8001332:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001338:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800133c:	d309      	bcc.n	8001352 <HAL_RCC_OscConfig+0x172>
 800133e:	4b48      	ldr	r3, [pc, #288]	; (8001460 <HAL_RCC_OscConfig+0x280>)
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	f023 021f 	bic.w	r2, r3, #31
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a1b      	ldr	r3, [r3, #32]
 800134a:	4945      	ldr	r1, [pc, #276]	; (8001460 <HAL_RCC_OscConfig+0x280>)
 800134c:	4313      	orrs	r3, r2
 800134e:	60cb      	str	r3, [r1, #12]
 8001350:	e028      	b.n	80013a4 <HAL_RCC_OscConfig+0x1c4>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001356:	2b00      	cmp	r3, #0
 8001358:	da0a      	bge.n	8001370 <HAL_RCC_OscConfig+0x190>
 800135a:	4b41      	ldr	r3, [pc, #260]	; (8001460 <HAL_RCC_OscConfig+0x280>)
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a1b      	ldr	r3, [r3, #32]
 8001366:	015b      	lsls	r3, r3, #5
 8001368:	493d      	ldr	r1, [pc, #244]	; (8001460 <HAL_RCC_OscConfig+0x280>)
 800136a:	4313      	orrs	r3, r2
 800136c:	60cb      	str	r3, [r1, #12]
 800136e:	e019      	b.n	80013a4 <HAL_RCC_OscConfig+0x1c4>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001378:	d30a      	bcc.n	8001390 <HAL_RCC_OscConfig+0x1b0>
 800137a:	4b39      	ldr	r3, [pc, #228]	; (8001460 <HAL_RCC_OscConfig+0x280>)
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a1b      	ldr	r3, [r3, #32]
 8001386:	029b      	lsls	r3, r3, #10
 8001388:	4935      	ldr	r1, [pc, #212]	; (8001460 <HAL_RCC_OscConfig+0x280>)
 800138a:	4313      	orrs	r3, r2
 800138c:	60cb      	str	r3, [r1, #12]
 800138e:	e009      	b.n	80013a4 <HAL_RCC_OscConfig+0x1c4>
 8001390:	4b33      	ldr	r3, [pc, #204]	; (8001460 <HAL_RCC_OscConfig+0x280>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	03db      	lsls	r3, r3, #15
 800139e:	4930      	ldr	r1, [pc, #192]	; (8001460 <HAL_RCC_OscConfig+0x280>)
 80013a0:	4313      	orrs	r3, r2
 80013a2:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80013a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d10a      	bne.n	80013c0 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ae:	4618      	mov	r0, r3
 80013b0:	f001 f906 	bl	80025c0 <RCC_SetFlashLatencyFromMSIRange>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d002      	beq.n	80013c0 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	f000 bde5 	b.w	8001f8a <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80013c0:	f001 f8e4 	bl	800258c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013c4:	4b27      	ldr	r3, [pc, #156]	; (8001464 <HAL_RCC_OscConfig+0x284>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff fa8f 	bl	80008ec <HAL_InitTick>
 80013ce:	4603      	mov	r3, r0
 80013d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 80013d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f000 808a 	beq.w	80014f2 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80013de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013e2:	f000 bdd2 	b.w	8001f8a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d066      	beq.n	80014bc <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80013ee:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <HAL_RCC_OscConfig+0x280>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a1b      	ldr	r2, [pc, #108]	; (8001460 <HAL_RCC_OscConfig+0x280>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80013fa:	f7ff fac1 	bl	8000980 <HAL_GetTick>
 80013fe:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001400:	e009      	b.n	8001416 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001402:	f7ff fabd 	bl	8000980 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d902      	bls.n	8001416 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	f000 bdba 	b.w	8001f8a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001416:	4b12      	ldr	r3, [pc, #72]	; (8001460 <HAL_RCC_OscConfig+0x280>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0304 	and.w	r3, r3, #4
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0ef      	beq.n	8001402 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001422:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <HAL_RCC_OscConfig+0x280>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	4a0e      	ldr	r2, [pc, #56]	; (8001460 <HAL_RCC_OscConfig+0x280>)
 8001428:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800142c:	6093      	str	r3, [r2, #8]
 800142e:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <HAL_RCC_OscConfig+0x280>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143a:	4909      	ldr	r1, [pc, #36]	; (8001460 <HAL_RCC_OscConfig+0x280>)
 800143c:	4313      	orrs	r3, r2
 800143e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001444:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001448:	d30e      	bcc.n	8001468 <HAL_RCC_OscConfig+0x288>
 800144a:	4b05      	ldr	r3, [pc, #20]	; (8001460 <HAL_RCC_OscConfig+0x280>)
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	f023 021f 	bic.w	r2, r3, #31
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a1b      	ldr	r3, [r3, #32]
 8001456:	4902      	ldr	r1, [pc, #8]	; (8001460 <HAL_RCC_OscConfig+0x280>)
 8001458:	4313      	orrs	r3, r2
 800145a:	60cb      	str	r3, [r1, #12]
 800145c:	e04a      	b.n	80014f4 <HAL_RCC_OscConfig+0x314>
 800145e:	bf00      	nop
 8001460:	46020c00 	.word	0x46020c00
 8001464:	20000004 	.word	0x20000004
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146c:	2b00      	cmp	r3, #0
 800146e:	da0a      	bge.n	8001486 <HAL_RCC_OscConfig+0x2a6>
 8001470:	4b98      	ldr	r3, [pc, #608]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	015b      	lsls	r3, r3, #5
 800147e:	4995      	ldr	r1, [pc, #596]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001480:	4313      	orrs	r3, r2
 8001482:	60cb      	str	r3, [r1, #12]
 8001484:	e036      	b.n	80014f4 <HAL_RCC_OscConfig+0x314>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800148e:	d30a      	bcc.n	80014a6 <HAL_RCC_OscConfig+0x2c6>
 8001490:	4b90      	ldr	r3, [pc, #576]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	029b      	lsls	r3, r3, #10
 800149e:	498d      	ldr	r1, [pc, #564]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	60cb      	str	r3, [r1, #12]
 80014a4:	e026      	b.n	80014f4 <HAL_RCC_OscConfig+0x314>
 80014a6:	4b8b      	ldr	r3, [pc, #556]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a1b      	ldr	r3, [r3, #32]
 80014b2:	03db      	lsls	r3, r3, #15
 80014b4:	4987      	ldr	r1, [pc, #540]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	60cb      	str	r3, [r1, #12]
 80014ba:	e01b      	b.n	80014f4 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80014bc:	4b85      	ldr	r3, [pc, #532]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a84      	ldr	r2, [pc, #528]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 80014c2:	f023 0301 	bic.w	r3, r3, #1
 80014c6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80014c8:	f7ff fa5a 	bl	8000980 <HAL_GetTick>
 80014cc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80014ce:	e009      	b.n	80014e4 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014d0:	f7ff fa56 	bl	8000980 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d902      	bls.n	80014e4 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	f000 bd53 	b.w	8001f8a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80014e4:	4b7b      	ldr	r3, [pc, #492]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1ef      	bne.n	80014d0 <HAL_RCC_OscConfig+0x2f0>
 80014f0:	e000      	b.n	80014f4 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80014f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f000 808b 	beq.w	8001618 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001504:	2b08      	cmp	r3, #8
 8001506:	d005      	beq.n	8001514 <HAL_RCC_OscConfig+0x334>
 8001508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800150a:	2b0c      	cmp	r3, #12
 800150c:	d109      	bne.n	8001522 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800150e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001510:	2b03      	cmp	r3, #3
 8001512:	d106      	bne.n	8001522 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d17d      	bne.n	8001618 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	f000 bd34 	b.w	8001f8a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800152a:	d106      	bne.n	800153a <HAL_RCC_OscConfig+0x35a>
 800152c:	4b69      	ldr	r3, [pc, #420]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a68      	ldr	r2, [pc, #416]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	e041      	b.n	80015be <HAL_RCC_OscConfig+0x3de>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001542:	d112      	bne.n	800156a <HAL_RCC_OscConfig+0x38a>
 8001544:	4b63      	ldr	r3, [pc, #396]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a62      	ldr	r2, [pc, #392]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 800154a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800154e:	6013      	str	r3, [r2, #0]
 8001550:	4b60      	ldr	r3, [pc, #384]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a5f      	ldr	r2, [pc, #380]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001556:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	4b5d      	ldr	r3, [pc, #372]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a5c      	ldr	r2, [pc, #368]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	e029      	b.n	80015be <HAL_RCC_OscConfig+0x3de>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001572:	d112      	bne.n	800159a <HAL_RCC_OscConfig+0x3ba>
 8001574:	4b57      	ldr	r3, [pc, #348]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a56      	ldr	r2, [pc, #344]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 800157a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800157e:	6013      	str	r3, [r2, #0]
 8001580:	4b54      	ldr	r3, [pc, #336]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a53      	ldr	r2, [pc, #332]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001586:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800158a:	6013      	str	r3, [r2, #0]
 800158c:	4b51      	ldr	r3, [pc, #324]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a50      	ldr	r2, [pc, #320]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001596:	6013      	str	r3, [r2, #0]
 8001598:	e011      	b.n	80015be <HAL_RCC_OscConfig+0x3de>
 800159a:	4b4e      	ldr	r3, [pc, #312]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a4d      	ldr	r2, [pc, #308]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 80015a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	4b4b      	ldr	r3, [pc, #300]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a4a      	ldr	r2, [pc, #296]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 80015ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	4b48      	ldr	r3, [pc, #288]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a47      	ldr	r2, [pc, #284]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 80015b8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80015bc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d014      	beq.n	80015f0 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80015c6:	f7ff f9db 	bl	8000980 <HAL_GetTick>
 80015ca:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015cc:	e009      	b.n	80015e2 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ce:	f7ff f9d7 	bl	8000980 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b64      	cmp	r3, #100	; 0x64
 80015da:	d902      	bls.n	80015e2 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	f000 bcd4 	b.w	8001f8a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015e2:	4b3c      	ldr	r3, [pc, #240]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0ef      	beq.n	80015ce <HAL_RCC_OscConfig+0x3ee>
 80015ee:	e013      	b.n	8001618 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80015f0:	f7ff f9c6 	bl	8000980 <HAL_GetTick>
 80015f4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015f6:	e009      	b.n	800160c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f8:	f7ff f9c2 	bl	8000980 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b64      	cmp	r3, #100	; 0x64
 8001604:	d902      	bls.n	800160c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	f000 bcbf 	b.w	8001f8a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800160c:	4b31      	ldr	r3, [pc, #196]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1ef      	bne.n	80015f8 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d05f      	beq.n	80016e4 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001626:	2b04      	cmp	r3, #4
 8001628:	d005      	beq.n	8001636 <HAL_RCC_OscConfig+0x456>
 800162a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800162c:	2b0c      	cmp	r3, #12
 800162e:	d114      	bne.n	800165a <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001632:	2b02      	cmp	r3, #2
 8001634:	d111      	bne.n	800165a <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d102      	bne.n	8001644 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	f000 bca3 	b.w	8001f8a <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001644:	4b23      	ldr	r3, [pc, #140]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	041b      	lsls	r3, r3, #16
 8001652:	4920      	ldr	r1, [pc, #128]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001654:	4313      	orrs	r3, r2
 8001656:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001658:	e044      	b.n	80016e4 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d024      	beq.n	80016ac <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8001662:	4b1c      	ldr	r3, [pc, #112]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a1b      	ldr	r2, [pc, #108]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800166c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800166e:	f7ff f987 	bl	8000980 <HAL_GetTick>
 8001672:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001674:	e009      	b.n	800168a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001676:	f7ff f983 	bl	8000980 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d902      	bls.n	800168a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	f000 bc80 	b.w	8001f8a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800168a:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0ef      	beq.n	8001676 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001696:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	041b      	lsls	r3, r3, #16
 80016a4:	490b      	ldr	r1, [pc, #44]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	610b      	str	r3, [r1, #16]
 80016aa:	e01b      	b.n	80016e4 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80016ac:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a08      	ldr	r2, [pc, #32]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 80016b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016b6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80016b8:	f7ff f962 	bl	8000980 <HAL_GetTick>
 80016bc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016be:	e00b      	b.n	80016d8 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016c0:	f7ff f95e 	bl	8000980 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d904      	bls.n	80016d8 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	f000 bc5b 	b.w	8001f8a <HAL_RCC_OscConfig+0xdaa>
 80016d4:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016d8:	4baf      	ldr	r3, [pc, #700]	; (8001998 <HAL_RCC_OscConfig+0x7b8>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1ed      	bne.n	80016c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0308 	and.w	r3, r3, #8
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f000 80c8 	beq.w	8001882 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80016f2:	2300      	movs	r3, #0
 80016f4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016f8:	4ba7      	ldr	r3, [pc, #668]	; (8001998 <HAL_RCC_OscConfig+0x7b8>)
 80016fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016fe:	f003 0304 	and.w	r3, r3, #4
 8001702:	2b00      	cmp	r3, #0
 8001704:	d111      	bne.n	800172a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001706:	4ba4      	ldr	r3, [pc, #656]	; (8001998 <HAL_RCC_OscConfig+0x7b8>)
 8001708:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800170c:	4aa2      	ldr	r2, [pc, #648]	; (8001998 <HAL_RCC_OscConfig+0x7b8>)
 800170e:	f043 0304 	orr.w	r3, r3, #4
 8001712:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001716:	4ba0      	ldr	r3, [pc, #640]	; (8001998 <HAL_RCC_OscConfig+0x7b8>)
 8001718:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8001724:	2301      	movs	r3, #1
 8001726:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800172a:	4b9c      	ldr	r3, [pc, #624]	; (800199c <HAL_RCC_OscConfig+0x7bc>)
 800172c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b00      	cmp	r3, #0
 8001734:	d119      	bne.n	800176a <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001736:	4b99      	ldr	r3, [pc, #612]	; (800199c <HAL_RCC_OscConfig+0x7bc>)
 8001738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173a:	4a98      	ldr	r2, [pc, #608]	; (800199c <HAL_RCC_OscConfig+0x7bc>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001742:	f7ff f91d 	bl	8000980 <HAL_GetTick>
 8001746:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001748:	e009      	b.n	800175e <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800174a:	f7ff f919 	bl	8000980 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d902      	bls.n	800175e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	f000 bc16 	b.w	8001f8a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800175e:	4b8f      	ldr	r3, [pc, #572]	; (800199c <HAL_RCC_OscConfig+0x7bc>)
 8001760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0ef      	beq.n	800174a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d05f      	beq.n	8001832 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8001772:	4b89      	ldr	r3, [pc, #548]	; (8001998 <HAL_RCC_OscConfig+0x7b8>)
 8001774:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001778:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	699a      	ldr	r2, [r3, #24]
 800177e:	6a3b      	ldr	r3, [r7, #32]
 8001780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001784:	429a      	cmp	r2, r3
 8001786:	d037      	beq.n	80017f8 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001788:	6a3b      	ldr	r3, [r7, #32]
 800178a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d006      	beq.n	80017a0 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8001792:	6a3b      	ldr	r3, [r7, #32]
 8001794:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e3f4      	b.n	8001f8a <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80017a0:	6a3b      	ldr	r3, [r7, #32]
 80017a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d01b      	beq.n	80017e2 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80017aa:	4b7b      	ldr	r3, [pc, #492]	; (8001998 <HAL_RCC_OscConfig+0x7b8>)
 80017ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017b0:	4a79      	ldr	r2, [pc, #484]	; (8001998 <HAL_RCC_OscConfig+0x7b8>)
 80017b2:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80017b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 80017ba:	f7ff f8e1 	bl	8000980 <HAL_GetTick>
 80017be:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017c2:	f7ff f8dd 	bl	8000980 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b05      	cmp	r3, #5
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e3da      	b.n	8001f8a <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80017d4:	4b70      	ldr	r3, [pc, #448]	; (8001998 <HAL_RCC_OscConfig+0x7b8>)
 80017d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1ef      	bne.n	80017c2 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80017e2:	4b6d      	ldr	r3, [pc, #436]	; (8001998 <HAL_RCC_OscConfig+0x7b8>)
 80017e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017e8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	4969      	ldr	r1, [pc, #420]	; (8001998 <HAL_RCC_OscConfig+0x7b8>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80017f8:	4b67      	ldr	r3, [pc, #412]	; (8001998 <HAL_RCC_OscConfig+0x7b8>)
 80017fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017fe:	4a66      	ldr	r2, [pc, #408]	; (8001998 <HAL_RCC_OscConfig+0x7b8>)
 8001800:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001804:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001808:	f7ff f8ba 	bl	8000980 <HAL_GetTick>
 800180c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001810:	f7ff f8b6 	bl	8000980 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b05      	cmp	r3, #5
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e3b3      	b.n	8001f8a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001822:	4b5d      	ldr	r3, [pc, #372]	; (8001998 <HAL_RCC_OscConfig+0x7b8>)
 8001824:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001828:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d0ef      	beq.n	8001810 <HAL_RCC_OscConfig+0x630>
 8001830:	e01b      	b.n	800186a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8001832:	4b59      	ldr	r3, [pc, #356]	; (8001998 <HAL_RCC_OscConfig+0x7b8>)
 8001834:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001838:	4a57      	ldr	r2, [pc, #348]	; (8001998 <HAL_RCC_OscConfig+0x7b8>)
 800183a:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800183e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001842:	f7ff f89d 	bl	8000980 <HAL_GetTick>
 8001846:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800184a:	f7ff f899 	bl	8000980 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b05      	cmp	r3, #5
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e396      	b.n	8001f8a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800185c:	4b4e      	ldr	r3, [pc, #312]	; (8001998 <HAL_RCC_OscConfig+0x7b8>)
 800185e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001862:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1ef      	bne.n	800184a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800186a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800186e:	2b01      	cmp	r3, #1
 8001870:	d107      	bne.n	8001882 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001872:	4b49      	ldr	r3, [pc, #292]	; (8001998 <HAL_RCC_OscConfig+0x7b8>)
 8001874:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001878:	4a47      	ldr	r2, [pc, #284]	; (8001998 <HAL_RCC_OscConfig+0x7b8>)
 800187a:	f023 0304 	bic.w	r3, r3, #4
 800187e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0304 	and.w	r3, r3, #4
 800188a:	2b00      	cmp	r3, #0
 800188c:	f000 8111 	beq.w	8001ab2 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8001890:	2300      	movs	r3, #0
 8001892:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001896:	4b40      	ldr	r3, [pc, #256]	; (8001998 <HAL_RCC_OscConfig+0x7b8>)
 8001898:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d111      	bne.n	80018c8 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018a4:	4b3c      	ldr	r3, [pc, #240]	; (8001998 <HAL_RCC_OscConfig+0x7b8>)
 80018a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018aa:	4a3b      	ldr	r2, [pc, #236]	; (8001998 <HAL_RCC_OscConfig+0x7b8>)
 80018ac:	f043 0304 	orr.w	r3, r3, #4
 80018b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80018b4:	4b38      	ldr	r3, [pc, #224]	; (8001998 <HAL_RCC_OscConfig+0x7b8>)
 80018b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018ba:	f003 0304 	and.w	r3, r3, #4
 80018be:	613b      	str	r3, [r7, #16]
 80018c0:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80018c2:	2301      	movs	r3, #1
 80018c4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80018c8:	4b34      	ldr	r3, [pc, #208]	; (800199c <HAL_RCC_OscConfig+0x7bc>)
 80018ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d118      	bne.n	8001906 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80018d4:	4b31      	ldr	r3, [pc, #196]	; (800199c <HAL_RCC_OscConfig+0x7bc>)
 80018d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d8:	4a30      	ldr	r2, [pc, #192]	; (800199c <HAL_RCC_OscConfig+0x7bc>)
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018e0:	f7ff f84e 	bl	8000980 <HAL_GetTick>
 80018e4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018e8:	f7ff f84a 	bl	8000980 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e347      	b.n	8001f8a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80018fa:	4b28      	ldr	r3, [pc, #160]	; (800199c <HAL_RCC_OscConfig+0x7bc>)
 80018fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f0      	beq.n	80018e8 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	2b00      	cmp	r3, #0
 8001910:	d01f      	beq.n	8001952 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	2b00      	cmp	r3, #0
 800191c:	d010      	beq.n	8001940 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800191e:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <HAL_RCC_OscConfig+0x7b8>)
 8001920:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001924:	4a1c      	ldr	r2, [pc, #112]	; (8001998 <HAL_RCC_OscConfig+0x7b8>)
 8001926:	f043 0304 	orr.w	r3, r3, #4
 800192a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800192e:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <HAL_RCC_OscConfig+0x7b8>)
 8001930:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001934:	4a18      	ldr	r2, [pc, #96]	; (8001998 <HAL_RCC_OscConfig+0x7b8>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800193e:	e018      	b.n	8001972 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001940:	4b15      	ldr	r3, [pc, #84]	; (8001998 <HAL_RCC_OscConfig+0x7b8>)
 8001942:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001946:	4a14      	ldr	r2, [pc, #80]	; (8001998 <HAL_RCC_OscConfig+0x7b8>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001950:	e00f      	b.n	8001972 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001952:	4b11      	ldr	r3, [pc, #68]	; (8001998 <HAL_RCC_OscConfig+0x7b8>)
 8001954:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001958:	4a0f      	ldr	r2, [pc, #60]	; (8001998 <HAL_RCC_OscConfig+0x7b8>)
 800195a:	f023 0301 	bic.w	r3, r3, #1
 800195e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001962:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <HAL_RCC_OscConfig+0x7b8>)
 8001964:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001968:	4a0b      	ldr	r2, [pc, #44]	; (8001998 <HAL_RCC_OscConfig+0x7b8>)
 800196a:	f023 0304 	bic.w	r3, r3, #4
 800196e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d057      	beq.n	8001a2a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800197a:	f7ff f801 	bl	8000980 <HAL_GetTick>
 800197e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001980:	e00e      	b.n	80019a0 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001982:	f7fe fffd 	bl	8000980 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001990:	4293      	cmp	r3, r2
 8001992:	d905      	bls.n	80019a0 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e2f8      	b.n	8001f8a <HAL_RCC_OscConfig+0xdaa>
 8001998:	46020c00 	.word	0x46020c00
 800199c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019a0:	4b9c      	ldr	r3, [pc, #624]	; (8001c14 <HAL_RCC_OscConfig+0xa34>)
 80019a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0e9      	beq.n	8001982 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d01b      	beq.n	80019f2 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80019ba:	4b96      	ldr	r3, [pc, #600]	; (8001c14 <HAL_RCC_OscConfig+0xa34>)
 80019bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019c0:	4a94      	ldr	r2, [pc, #592]	; (8001c14 <HAL_RCC_OscConfig+0xa34>)
 80019c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80019ca:	e00a      	b.n	80019e2 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019cc:	f7fe ffd8 	bl	8000980 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019da:	4293      	cmp	r3, r2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e2d3      	b.n	8001f8a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80019e2:	4b8c      	ldr	r3, [pc, #560]	; (8001c14 <HAL_RCC_OscConfig+0xa34>)
 80019e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0ed      	beq.n	80019cc <HAL_RCC_OscConfig+0x7ec>
 80019f0:	e053      	b.n	8001a9a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80019f2:	4b88      	ldr	r3, [pc, #544]	; (8001c14 <HAL_RCC_OscConfig+0xa34>)
 80019f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019f8:	4a86      	ldr	r2, [pc, #536]	; (8001c14 <HAL_RCC_OscConfig+0xa34>)
 80019fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001a02:	e00a      	b.n	8001a1a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a04:	f7fe ffbc 	bl	8000980 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e2b7      	b.n	8001f8a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001a1a:	4b7e      	ldr	r3, [pc, #504]	; (8001c14 <HAL_RCC_OscConfig+0xa34>)
 8001a1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1ed      	bne.n	8001a04 <HAL_RCC_OscConfig+0x824>
 8001a28:	e037      	b.n	8001a9a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8001a2a:	f7fe ffa9 	bl	8000980 <HAL_GetTick>
 8001a2e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a30:	e00a      	b.n	8001a48 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a32:	f7fe ffa5 	bl	8000980 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e2a0      	b.n	8001f8a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a48:	4b72      	ldr	r3, [pc, #456]	; (8001c14 <HAL_RCC_OscConfig+0xa34>)
 8001a4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1ed      	bne.n	8001a32 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001a56:	4b6f      	ldr	r3, [pc, #444]	; (8001c14 <HAL_RCC_OscConfig+0xa34>)
 8001a58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d01a      	beq.n	8001a9a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001a64:	4b6b      	ldr	r3, [pc, #428]	; (8001c14 <HAL_RCC_OscConfig+0xa34>)
 8001a66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a6a:	4a6a      	ldr	r2, [pc, #424]	; (8001c14 <HAL_RCC_OscConfig+0xa34>)
 8001a6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a70:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001a74:	e00a      	b.n	8001a8c <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a76:	f7fe ff83 	bl	8000980 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e27e      	b.n	8001f8a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001a8c:	4b61      	ldr	r3, [pc, #388]	; (8001c14 <HAL_RCC_OscConfig+0xa34>)
 8001a8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1ed      	bne.n	8001a76 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a9a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d107      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aa2:	4b5c      	ldr	r3, [pc, #368]	; (8001c14 <HAL_RCC_OscConfig+0xa34>)
 8001aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aa8:	4a5a      	ldr	r2, [pc, #360]	; (8001c14 <HAL_RCC_OscConfig+0xa34>)
 8001aaa:	f023 0304 	bic.w	r3, r3, #4
 8001aae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0320 	and.w	r3, r3, #32
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d036      	beq.n	8001b2c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d019      	beq.n	8001afa <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8001ac6:	4b53      	ldr	r3, [pc, #332]	; (8001c14 <HAL_RCC_OscConfig+0xa34>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a52      	ldr	r2, [pc, #328]	; (8001c14 <HAL_RCC_OscConfig+0xa34>)
 8001acc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ad0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001ad2:	f7fe ff55 	bl	8000980 <HAL_GetTick>
 8001ad6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ada:	f7fe ff51 	bl	8000980 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e24e      	b.n	8001f8a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001aec:	4b49      	ldr	r3, [pc, #292]	; (8001c14 <HAL_RCC_OscConfig+0xa34>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0f0      	beq.n	8001ada <HAL_RCC_OscConfig+0x8fa>
 8001af8:	e018      	b.n	8001b2c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8001afa:	4b46      	ldr	r3, [pc, #280]	; (8001c14 <HAL_RCC_OscConfig+0xa34>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a45      	ldr	r2, [pc, #276]	; (8001c14 <HAL_RCC_OscConfig+0xa34>)
 8001b00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b04:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001b06:	f7fe ff3b 	bl	8000980 <HAL_GetTick>
 8001b0a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b0e:	f7fe ff37 	bl	8000980 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e234      	b.n	8001f8a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001b20:	4b3c      	ldr	r3, [pc, #240]	; (8001c14 <HAL_RCC_OscConfig+0xa34>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1f0      	bne.n	8001b0e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d036      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d019      	beq.n	8001b74 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8001b40:	4b34      	ldr	r3, [pc, #208]	; (8001c14 <HAL_RCC_OscConfig+0xa34>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a33      	ldr	r2, [pc, #204]	; (8001c14 <HAL_RCC_OscConfig+0xa34>)
 8001b46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b4a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001b4c:	f7fe ff18 	bl	8000980 <HAL_GetTick>
 8001b50:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001b54:	f7fe ff14 	bl	8000980 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e211      	b.n	8001f8a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001b66:	4b2b      	ldr	r3, [pc, #172]	; (8001c14 <HAL_RCC_OscConfig+0xa34>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0f0      	beq.n	8001b54 <HAL_RCC_OscConfig+0x974>
 8001b72:	e018      	b.n	8001ba6 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8001b74:	4b27      	ldr	r3, [pc, #156]	; (8001c14 <HAL_RCC_OscConfig+0xa34>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a26      	ldr	r2, [pc, #152]	; (8001c14 <HAL_RCC_OscConfig+0xa34>)
 8001b7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b7e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001b80:	f7fe fefe 	bl	8000980 <HAL_GetTick>
 8001b84:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001b88:	f7fe fefa 	bl	8000980 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e1f7      	b.n	8001f8a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001b9a:	4b1e      	ldr	r3, [pc, #120]	; (8001c14 <HAL_RCC_OscConfig+0xa34>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d07f      	beq.n	8001cb2 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d062      	beq.n	8001c80 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8001bba:	4b16      	ldr	r3, [pc, #88]	; (8001c14 <HAL_RCC_OscConfig+0xa34>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	4a15      	ldr	r2, [pc, #84]	; (8001c14 <HAL_RCC_OscConfig+0xa34>)
 8001bc0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001bc4:	6093      	str	r3, [r2, #8]
 8001bc6:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <HAL_RCC_OscConfig+0xa34>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd2:	4910      	ldr	r1, [pc, #64]	; (8001c14 <HAL_RCC_OscConfig+0xa34>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001be0:	d309      	bcc.n	8001bf6 <HAL_RCC_OscConfig+0xa16>
 8001be2:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <HAL_RCC_OscConfig+0xa34>)
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	f023 021f 	bic.w	r2, r3, #31
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	4909      	ldr	r1, [pc, #36]	; (8001c14 <HAL_RCC_OscConfig+0xa34>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	60cb      	str	r3, [r1, #12]
 8001bf4:	e02a      	b.n	8001c4c <HAL_RCC_OscConfig+0xa6c>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	da0c      	bge.n	8001c18 <HAL_RCC_OscConfig+0xa38>
 8001bfe:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <HAL_RCC_OscConfig+0xa34>)
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	015b      	lsls	r3, r3, #5
 8001c0c:	4901      	ldr	r1, [pc, #4]	; (8001c14 <HAL_RCC_OscConfig+0xa34>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	60cb      	str	r3, [r1, #12]
 8001c12:	e01b      	b.n	8001c4c <HAL_RCC_OscConfig+0xa6c>
 8001c14:	46020c00 	.word	0x46020c00
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c20:	d30a      	bcc.n	8001c38 <HAL_RCC_OscConfig+0xa58>
 8001c22:	4ba1      	ldr	r3, [pc, #644]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	029b      	lsls	r3, r3, #10
 8001c30:	499d      	ldr	r1, [pc, #628]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	60cb      	str	r3, [r1, #12]
 8001c36:	e009      	b.n	8001c4c <HAL_RCC_OscConfig+0xa6c>
 8001c38:	4b9b      	ldr	r3, [pc, #620]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	03db      	lsls	r3, r3, #15
 8001c46:	4998      	ldr	r1, [pc, #608]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8001c4c:	4b96      	ldr	r3, [pc, #600]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a95      	ldr	r2, [pc, #596]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001c52:	f043 0310 	orr.w	r3, r3, #16
 8001c56:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001c58:	f7fe fe92 	bl	8000980 <HAL_GetTick>
 8001c5c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001c60:	f7fe fe8e 	bl	8000980 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e18b      	b.n	8001f8a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001c72:	4b8d      	ldr	r3, [pc, #564]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0320 	and.w	r3, r3, #32
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0f0      	beq.n	8001c60 <HAL_RCC_OscConfig+0xa80>
 8001c7e:	e018      	b.n	8001cb2 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8001c80:	4b89      	ldr	r3, [pc, #548]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a88      	ldr	r2, [pc, #544]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001c86:	f023 0310 	bic.w	r3, r3, #16
 8001c8a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001c8c:	f7fe fe78 	bl	8000980 <HAL_GetTick>
 8001c90:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001c94:	f7fe fe74 	bl	8000980 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e171      	b.n	8001f8a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8001ca6:	4b80      	ldr	r3, [pc, #512]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0320 	and.w	r3, r3, #32
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1f0      	bne.n	8001c94 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 8166 	beq.w	8001f88 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cc2:	4b79      	ldr	r3, [pc, #484]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	f003 030c 	and.w	r3, r3, #12
 8001cca:	2b0c      	cmp	r3, #12
 8001ccc:	f000 80f2 	beq.w	8001eb4 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	f040 80c5 	bne.w	8001e64 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8001cda:	4b73      	ldr	r3, [pc, #460]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a72      	ldr	r2, [pc, #456]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001ce0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ce4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001ce6:	f7fe fe4b 	bl	8000980 <HAL_GetTick>
 8001cea:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cee:	f7fe fe47 	bl	8000980 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e144      	b.n	8001f8a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001d00:	4b69      	ldr	r3, [pc, #420]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1f0      	bne.n	8001cee <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d0c:	4b66      	ldr	r3, [pc, #408]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d12:	f003 0304 	and.w	r3, r3, #4
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d111      	bne.n	8001d3e <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8001d1a:	4b63      	ldr	r3, [pc, #396]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d20:	4a61      	ldr	r2, [pc, #388]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001d22:	f043 0304 	orr.w	r3, r3, #4
 8001d26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001d2a:	4b5f      	ldr	r3, [pc, #380]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001d2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8001d3e:	4b5b      	ldr	r3, [pc, #364]	; (8001eac <HAL_RCC_OscConfig+0xccc>)
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d4a:	d102      	bne.n	8001d52 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001d52:	4b56      	ldr	r3, [pc, #344]	; (8001eac <HAL_RCC_OscConfig+0xccc>)
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	4a55      	ldr	r2, [pc, #340]	; (8001eac <HAL_RCC_OscConfig+0xccc>)
 8001d58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d5c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8001d5e:	4b52      	ldr	r3, [pc, #328]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d66:	f023 0303 	bic.w	r3, r3, #3
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d72:	3a01      	subs	r2, #1
 8001d74:	0212      	lsls	r2, r2, #8
 8001d76:	4311      	orrs	r1, r2
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	494a      	ldr	r1, [pc, #296]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	628b      	str	r3, [r1, #40]	; 0x28
 8001d84:	4b48      	ldr	r3, [pc, #288]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001d86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d88:	4b49      	ldr	r3, [pc, #292]	; (8001eb0 <HAL_RCC_OscConfig+0xcd0>)
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d90:	3a01      	subs	r2, #1
 8001d92:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001d9a:	3a01      	subs	r2, #1
 8001d9c:	0252      	lsls	r2, r2, #9
 8001d9e:	b292      	uxth	r2, r2
 8001da0:	4311      	orrs	r1, r2
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001da6:	3a01      	subs	r2, #1
 8001da8:	0412      	lsls	r2, r2, #16
 8001daa:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001dae:	4311      	orrs	r1, r2
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001db4:	3a01      	subs	r2, #1
 8001db6:	0612      	lsls	r2, r2, #24
 8001db8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	493a      	ldr	r1, [pc, #232]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8001dc4:	4b38      	ldr	r3, [pc, #224]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc8:	4a37      	ldr	r2, [pc, #220]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001dca:	f023 0310 	bic.w	r3, r3, #16
 8001dce:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd4:	4a34      	ldr	r2, [pc, #208]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8001dda:	4b33      	ldr	r3, [pc, #204]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dde:	4a32      	ldr	r2, [pc, #200]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001de0:	f043 0310 	orr.w	r3, r3, #16
 8001de4:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8001de6:	4b30      	ldr	r3, [pc, #192]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dea:	f023 020c 	bic.w	r2, r3, #12
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df2:	492d      	ldr	r1, [pc, #180]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8001df8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d105      	bne.n	8001e0c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001e00:	4b2a      	ldr	r3, [pc, #168]	; (8001eac <HAL_RCC_OscConfig+0xccc>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	4a29      	ldr	r2, [pc, #164]	; (8001eac <HAL_RCC_OscConfig+0xccc>)
 8001e06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e0a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8001e0c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d107      	bne.n	8001e24 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8001e14:	4b24      	ldr	r3, [pc, #144]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e1a:	4a23      	ldr	r2, [pc, #140]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001e1c:	f023 0304 	bic.w	r3, r3, #4
 8001e20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001e24:	4b20      	ldr	r3, [pc, #128]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e28:	4a1f      	ldr	r2, [pc, #124]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001e2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e2e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8001e30:	4b1d      	ldr	r3, [pc, #116]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a1c      	ldr	r2, [pc, #112]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001e36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e3a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001e3c:	f7fe fda0 	bl	8000980 <HAL_GetTick>
 8001e40:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e44:	f7fe fd9c 	bl	8000980 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e099      	b.n	8001f8a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001e56:	4b14      	ldr	r3, [pc, #80]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCC_OscConfig+0xc64>
 8001e62:	e091      	b.n	8001f88 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8001e64:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a0f      	ldr	r2, [pc, #60]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001e6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e6e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001e70:	f7fe fd86 	bl	8000980 <HAL_GetTick>
 8001e74:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e78:	f7fe fd82 	bl	8000980 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e07f      	b.n	8001f8a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001e8a:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1f0      	bne.n	8001e78 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001e96:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9a:	4a03      	ldr	r2, [pc, #12]	; (8001ea8 <HAL_RCC_OscConfig+0xcc8>)
 8001e9c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8001ea0:	f023 0303 	bic.w	r3, r3, #3
 8001ea4:	6293      	str	r3, [r2, #40]	; 0x28
 8001ea6:	e06f      	b.n	8001f88 <HAL_RCC_OscConfig+0xda8>
 8001ea8:	46020c00 	.word	0x46020c00
 8001eac:	46020800 	.word	0x46020800
 8001eb0:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8001eb4:	4b37      	ldr	r3, [pc, #220]	; (8001f94 <HAL_RCC_OscConfig+0xdb4>)
 8001eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb8:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001eba:	4b36      	ldr	r3, [pc, #216]	; (8001f94 <HAL_RCC_OscConfig+0xdb4>)
 8001ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ebe:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d039      	beq.n	8001f3c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f003 0203 	and.w	r2, r3, #3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d132      	bne.n	8001f3c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	0a1b      	lsrs	r3, r3, #8
 8001eda:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d129      	bne.n	8001f3c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d122      	bne.n	8001f3c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f00:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d11a      	bne.n	8001f3c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	0a5b      	lsrs	r3, r3, #9
 8001f0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f12:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d111      	bne.n	8001f3c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	0c1b      	lsrs	r3, r3, #16
 8001f1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f24:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d108      	bne.n	8001f3c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	0e1b      	lsrs	r3, r3, #24
 8001f2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f36:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d001      	beq.n	8001f40 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e024      	b.n	8001f8a <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001f40:	4b14      	ldr	r3, [pc, #80]	; (8001f94 <HAL_RCC_OscConfig+0xdb4>)
 8001f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f44:	08db      	lsrs	r3, r3, #3
 8001f46:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d01a      	beq.n	8001f88 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8001f52:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <HAL_RCC_OscConfig+0xdb4>)
 8001f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f56:	4a0f      	ldr	r2, [pc, #60]	; (8001f94 <HAL_RCC_OscConfig+0xdb4>)
 8001f58:	f023 0310 	bic.w	r3, r3, #16
 8001f5c:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5e:	f7fe fd0f 	bl	8000980 <HAL_GetTick>
 8001f62:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8001f64:	bf00      	nop
 8001f66:	f7fe fd0b 	bl	8000980 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d0f9      	beq.n	8001f66 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f76:	4a07      	ldr	r2, [pc, #28]	; (8001f94 <HAL_RCC_OscConfig+0xdb4>)
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <HAL_RCC_OscConfig+0xdb4>)
 8001f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f80:	4a04      	ldr	r2, [pc, #16]	; (8001f94 <HAL_RCC_OscConfig+0xdb4>)
 8001f82:	f043 0310 	orr.w	r3, r3, #16
 8001f86:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3738      	adds	r7, #56	; 0x38
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	46020c00 	.word	0x46020c00

08001f98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e1d9      	b.n	8002360 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fac:	4b9b      	ldr	r3, [pc, #620]	; (800221c <HAL_RCC_ClockConfig+0x284>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 030f 	and.w	r3, r3, #15
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d910      	bls.n	8001fdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fba:	4b98      	ldr	r3, [pc, #608]	; (800221c <HAL_RCC_ClockConfig+0x284>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f023 020f 	bic.w	r2, r3, #15
 8001fc2:	4996      	ldr	r1, [pc, #600]	; (800221c <HAL_RCC_ClockConfig+0x284>)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fca:	4b94      	ldr	r3, [pc, #592]	; (800221c <HAL_RCC_ClockConfig+0x284>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d001      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e1c1      	b.n	8002360 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0310 	and.w	r3, r3, #16
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d010      	beq.n	800200a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	695a      	ldr	r2, [r3, #20]
 8001fec:	4b8c      	ldr	r3, [pc, #560]	; (8002220 <HAL_RCC_ClockConfig+0x288>)
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d908      	bls.n	800200a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8001ff8:	4b89      	ldr	r3, [pc, #548]	; (8002220 <HAL_RCC_ClockConfig+0x288>)
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	4986      	ldr	r1, [pc, #536]	; (8002220 <HAL_RCC_ClockConfig+0x288>)
 8002006:	4313      	orrs	r3, r2
 8002008:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b00      	cmp	r3, #0
 8002014:	d012      	beq.n	800203c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	691a      	ldr	r2, [r3, #16]
 800201a:	4b81      	ldr	r3, [pc, #516]	; (8002220 <HAL_RCC_ClockConfig+0x288>)
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	091b      	lsrs	r3, r3, #4
 8002020:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002024:	429a      	cmp	r2, r3
 8002026:	d909      	bls.n	800203c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002028:	4b7d      	ldr	r3, [pc, #500]	; (8002220 <HAL_RCC_ClockConfig+0x288>)
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	011b      	lsls	r3, r3, #4
 8002036:	497a      	ldr	r1, [pc, #488]	; (8002220 <HAL_RCC_ClockConfig+0x288>)
 8002038:	4313      	orrs	r3, r2
 800203a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	2b00      	cmp	r3, #0
 8002046:	d010      	beq.n	800206a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68da      	ldr	r2, [r3, #12]
 800204c:	4b74      	ldr	r3, [pc, #464]	; (8002220 <HAL_RCC_ClockConfig+0x288>)
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002054:	429a      	cmp	r2, r3
 8002056:	d908      	bls.n	800206a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002058:	4b71      	ldr	r3, [pc, #452]	; (8002220 <HAL_RCC_ClockConfig+0x288>)
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	496e      	ldr	r1, [pc, #440]	; (8002220 <HAL_RCC_ClockConfig+0x288>)
 8002066:	4313      	orrs	r3, r2
 8002068:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d010      	beq.n	8002098 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	4b69      	ldr	r3, [pc, #420]	; (8002220 <HAL_RCC_ClockConfig+0x288>)
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	429a      	cmp	r2, r3
 8002084:	d908      	bls.n	8002098 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002086:	4b66      	ldr	r3, [pc, #408]	; (8002220 <HAL_RCC_ClockConfig+0x288>)
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	f023 020f 	bic.w	r2, r3, #15
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	4963      	ldr	r1, [pc, #396]	; (8002220 <HAL_RCC_ClockConfig+0x288>)
 8002094:	4313      	orrs	r3, r2
 8002096:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 80d2 	beq.w	800224a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80020a6:	2300      	movs	r3, #0
 80020a8:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b03      	cmp	r3, #3
 80020b0:	d143      	bne.n	800213a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020b2:	4b5b      	ldr	r3, [pc, #364]	; (8002220 <HAL_RCC_ClockConfig+0x288>)
 80020b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d110      	bne.n	80020e2 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80020c0:	4b57      	ldr	r3, [pc, #348]	; (8002220 <HAL_RCC_ClockConfig+0x288>)
 80020c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020c6:	4a56      	ldr	r2, [pc, #344]	; (8002220 <HAL_RCC_ClockConfig+0x288>)
 80020c8:	f043 0304 	orr.w	r3, r3, #4
 80020cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80020d0:	4b53      	ldr	r3, [pc, #332]	; (8002220 <HAL_RCC_ClockConfig+0x288>)
 80020d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020d6:	f003 0304 	and.w	r3, r3, #4
 80020da:	60bb      	str	r3, [r7, #8]
 80020dc:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80020de:	2301      	movs	r3, #1
 80020e0:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80020e2:	f7fe fc4d 	bl	8000980 <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80020e8:	4b4e      	ldr	r3, [pc, #312]	; (8002224 <HAL_RCC_ClockConfig+0x28c>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00f      	beq.n	8002114 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80020f4:	e008      	b.n	8002108 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80020f6:	f7fe fc43 	bl	8000980 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e12b      	b.n	8002360 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002108:	4b46      	ldr	r3, [pc, #280]	; (8002224 <HAL_RCC_ClockConfig+0x28c>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0f0      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002114:	7dfb      	ldrb	r3, [r7, #23]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d107      	bne.n	800212a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800211a:	4b41      	ldr	r3, [pc, #260]	; (8002220 <HAL_RCC_ClockConfig+0x288>)
 800211c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002120:	4a3f      	ldr	r2, [pc, #252]	; (8002220 <HAL_RCC_ClockConfig+0x288>)
 8002122:	f023 0304 	bic.w	r3, r3, #4
 8002126:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800212a:	4b3d      	ldr	r3, [pc, #244]	; (8002220 <HAL_RCC_ClockConfig+0x288>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d121      	bne.n	800217a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e112      	b.n	8002360 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b02      	cmp	r3, #2
 8002140:	d107      	bne.n	8002152 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002142:	4b37      	ldr	r3, [pc, #220]	; (8002220 <HAL_RCC_ClockConfig+0x288>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d115      	bne.n	800217a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e106      	b.n	8002360 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d107      	bne.n	800216a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800215a:	4b31      	ldr	r3, [pc, #196]	; (8002220 <HAL_RCC_ClockConfig+0x288>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	2b00      	cmp	r3, #0
 8002164:	d109      	bne.n	800217a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e0fa      	b.n	8002360 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800216a:	4b2d      	ldr	r3, [pc, #180]	; (8002220 <HAL_RCC_ClockConfig+0x288>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e0f2      	b.n	8002360 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800217a:	4b29      	ldr	r3, [pc, #164]	; (8002220 <HAL_RCC_ClockConfig+0x288>)
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	f023 0203 	bic.w	r2, r3, #3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	4926      	ldr	r1, [pc, #152]	; (8002220 <HAL_RCC_ClockConfig+0x288>)
 8002188:	4313      	orrs	r3, r2
 800218a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800218c:	f7fe fbf8 	bl	8000980 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b03      	cmp	r3, #3
 8002198:	d112      	bne.n	80021c0 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800219a:	e00a      	b.n	80021b2 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800219c:	f7fe fbf0 	bl	8000980 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e0d6      	b.n	8002360 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021b2:	4b1b      	ldr	r3, [pc, #108]	; (8002220 <HAL_RCC_ClockConfig+0x288>)
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	f003 030c 	and.w	r3, r3, #12
 80021ba:	2b0c      	cmp	r3, #12
 80021bc:	d1ee      	bne.n	800219c <HAL_RCC_ClockConfig+0x204>
 80021be:	e044      	b.n	800224a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d112      	bne.n	80021ee <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80021c8:	e00a      	b.n	80021e0 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ca:	f7fe fbd9 	bl	8000980 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d8:	4293      	cmp	r3, r2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e0bf      	b.n	8002360 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80021e0:	4b0f      	ldr	r3, [pc, #60]	; (8002220 <HAL_RCC_ClockConfig+0x288>)
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	f003 030c 	and.w	r3, r3, #12
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d1ee      	bne.n	80021ca <HAL_RCC_ClockConfig+0x232>
 80021ec:	e02d      	b.n	800224a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d123      	bne.n	800223e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80021f6:	e00a      	b.n	800220e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021f8:	f7fe fbc2 	bl	8000980 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	f241 3288 	movw	r2, #5000	; 0x1388
 8002206:	4293      	cmp	r3, r2
 8002208:	d901      	bls.n	800220e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e0a8      	b.n	8002360 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800220e:	4b04      	ldr	r3, [pc, #16]	; (8002220 <HAL_RCC_ClockConfig+0x288>)
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	f003 030c 	and.w	r3, r3, #12
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1ee      	bne.n	80021f8 <HAL_RCC_ClockConfig+0x260>
 800221a:	e016      	b.n	800224a <HAL_RCC_ClockConfig+0x2b2>
 800221c:	40022000 	.word	0x40022000
 8002220:	46020c00 	.word	0x46020c00
 8002224:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002228:	f7fe fbaa 	bl	8000980 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	f241 3288 	movw	r2, #5000	; 0x1388
 8002236:	4293      	cmp	r3, r2
 8002238:	d901      	bls.n	800223e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e090      	b.n	8002360 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800223e:	4b4a      	ldr	r3, [pc, #296]	; (8002368 <HAL_RCC_ClockConfig+0x3d0>)
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	f003 030c 	and.w	r3, r3, #12
 8002246:	2b04      	cmp	r3, #4
 8002248:	d1ee      	bne.n	8002228 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d010      	beq.n	8002278 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	4b43      	ldr	r3, [pc, #268]	; (8002368 <HAL_RCC_ClockConfig+0x3d0>)
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	429a      	cmp	r2, r3
 8002264:	d208      	bcs.n	8002278 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002266:	4b40      	ldr	r3, [pc, #256]	; (8002368 <HAL_RCC_ClockConfig+0x3d0>)
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	f023 020f 	bic.w	r2, r3, #15
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	493d      	ldr	r1, [pc, #244]	; (8002368 <HAL_RCC_ClockConfig+0x3d0>)
 8002274:	4313      	orrs	r3, r2
 8002276:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002278:	4b3c      	ldr	r3, [pc, #240]	; (800236c <HAL_RCC_ClockConfig+0x3d4>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 030f 	and.w	r3, r3, #15
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	429a      	cmp	r2, r3
 8002284:	d210      	bcs.n	80022a8 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002286:	4b39      	ldr	r3, [pc, #228]	; (800236c <HAL_RCC_ClockConfig+0x3d4>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f023 020f 	bic.w	r2, r3, #15
 800228e:	4937      	ldr	r1, [pc, #220]	; (800236c <HAL_RCC_ClockConfig+0x3d4>)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	4313      	orrs	r3, r2
 8002294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002296:	4b35      	ldr	r3, [pc, #212]	; (800236c <HAL_RCC_ClockConfig+0x3d4>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d001      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e05b      	b.n	8002360 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d010      	beq.n	80022d6 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68da      	ldr	r2, [r3, #12]
 80022b8:	4b2b      	ldr	r3, [pc, #172]	; (8002368 <HAL_RCC_ClockConfig+0x3d0>)
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d208      	bcs.n	80022d6 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80022c4:	4b28      	ldr	r3, [pc, #160]	; (8002368 <HAL_RCC_ClockConfig+0x3d0>)
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	4925      	ldr	r1, [pc, #148]	; (8002368 <HAL_RCC_ClockConfig+0x3d0>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d012      	beq.n	8002308 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	691a      	ldr	r2, [r3, #16]
 80022e6:	4b20      	ldr	r3, [pc, #128]	; (8002368 <HAL_RCC_ClockConfig+0x3d0>)
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	091b      	lsrs	r3, r3, #4
 80022ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d209      	bcs.n	8002308 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80022f4:	4b1c      	ldr	r3, [pc, #112]	; (8002368 <HAL_RCC_ClockConfig+0x3d0>)
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	4919      	ldr	r1, [pc, #100]	; (8002368 <HAL_RCC_ClockConfig+0x3d0>)
 8002304:	4313      	orrs	r3, r2
 8002306:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0310 	and.w	r3, r3, #16
 8002310:	2b00      	cmp	r3, #0
 8002312:	d010      	beq.n	8002336 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	695a      	ldr	r2, [r3, #20]
 8002318:	4b13      	ldr	r3, [pc, #76]	; (8002368 <HAL_RCC_ClockConfig+0x3d0>)
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002320:	429a      	cmp	r2, r3
 8002322:	d208      	bcs.n	8002336 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8002324:	4b10      	ldr	r3, [pc, #64]	; (8002368 <HAL_RCC_ClockConfig+0x3d0>)
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	490d      	ldr	r1, [pc, #52]	; (8002368 <HAL_RCC_ClockConfig+0x3d0>)
 8002332:	4313      	orrs	r3, r2
 8002334:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002336:	f000 f821 	bl	800237c <HAL_RCC_GetSysClockFreq>
 800233a:	4602      	mov	r2, r0
 800233c:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <HAL_RCC_ClockConfig+0x3d0>)
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	f003 030f 	and.w	r3, r3, #15
 8002344:	490a      	ldr	r1, [pc, #40]	; (8002370 <HAL_RCC_ClockConfig+0x3d8>)
 8002346:	5ccb      	ldrb	r3, [r1, r3]
 8002348:	fa22 f303 	lsr.w	r3, r2, r3
 800234c:	4a09      	ldr	r2, [pc, #36]	; (8002374 <HAL_RCC_ClockConfig+0x3dc>)
 800234e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002350:	4b09      	ldr	r3, [pc, #36]	; (8002378 <HAL_RCC_ClockConfig+0x3e0>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe fac9 	bl	80008ec <HAL_InitTick>
 800235a:	4603      	mov	r3, r0
 800235c:	73fb      	strb	r3, [r7, #15]

  return status;
 800235e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	46020c00 	.word	0x46020c00
 800236c:	40022000 	.word	0x40022000
 8002370:	08003fd8 	.word	0x08003fd8
 8002374:	20000000 	.word	0x20000000
 8002378:	20000004 	.word	0x20000004

0800237c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800237c:	b480      	push	{r7}
 800237e:	b08b      	sub	sp, #44	; 0x2c
 8002380:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002382:	2300      	movs	r3, #0
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8002386:	2300      	movs	r3, #0
 8002388:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800238a:	4b7b      	ldr	r3, [pc, #492]	; (8002578 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	f003 030c 	and.w	r3, r3, #12
 8002392:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002394:	4b78      	ldr	r3, [pc, #480]	; (8002578 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002398:	f003 0303 	and.w	r3, r3, #3
 800239c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d005      	beq.n	80023b0 <HAL_RCC_GetSysClockFreq+0x34>
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	2b0c      	cmp	r3, #12
 80023a8:	d121      	bne.n	80023ee <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d11e      	bne.n	80023ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80023b0:	4b71      	ldr	r3, [pc, #452]	; (8002578 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d107      	bne.n	80023cc <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80023bc:	4b6e      	ldr	r3, [pc, #440]	; (8002578 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80023be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023c2:	0b1b      	lsrs	r3, r3, #12
 80023c4:	f003 030f 	and.w	r3, r3, #15
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
 80023ca:	e005      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80023cc:	4b6a      	ldr	r3, [pc, #424]	; (8002578 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	0f1b      	lsrs	r3, r3, #28
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023d8:	4a68      	ldr	r2, [pc, #416]	; (800257c <HAL_RCC_GetSysClockFreq+0x200>)
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d110      	bne.n	800240a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80023ec:	e00d      	b.n	800240a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023ee:	4b62      	ldr	r3, [pc, #392]	; (8002578 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	f003 030c 	and.w	r3, r3, #12
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d102      	bne.n	8002400 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023fa:	4b61      	ldr	r3, [pc, #388]	; (8002580 <HAL_RCC_GetSysClockFreq+0x204>)
 80023fc:	623b      	str	r3, [r7, #32]
 80023fe:	e004      	b.n	800240a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	2b08      	cmp	r3, #8
 8002404:	d101      	bne.n	800240a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002406:	4b5e      	ldr	r3, [pc, #376]	; (8002580 <HAL_RCC_GetSysClockFreq+0x204>)
 8002408:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	2b0c      	cmp	r3, #12
 800240e:	f040 80ac 	bne.w	800256a <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002412:	4b59      	ldr	r3, [pc, #356]	; (8002578 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800241c:	4b56      	ldr	r3, [pc, #344]	; (8002578 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800241e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002420:	0a1b      	lsrs	r3, r3, #8
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	3301      	adds	r3, #1
 8002428:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800242a:	4b53      	ldr	r3, [pc, #332]	; (8002578 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800242c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242e:	091b      	lsrs	r3, r3, #4
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002436:	4b50      	ldr	r3, [pc, #320]	; (8002578 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243a:	08db      	lsrs	r3, r3, #3
 800243c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002440:	68ba      	ldr	r2, [r7, #8]
 8002442:	fb02 f303 	mul.w	r3, r2, r3
 8002446:	ee07 3a90 	vmov	s15, r3
 800244a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800244e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 8086 	beq.w	8002566 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	2b02      	cmp	r3, #2
 800245e:	d003      	beq.n	8002468 <HAL_RCC_GetSysClockFreq+0xec>
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	2b03      	cmp	r3, #3
 8002464:	d022      	beq.n	80024ac <HAL_RCC_GetSysClockFreq+0x130>
 8002466:	e043      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	ee07 3a90 	vmov	s15, r3
 800246e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002472:	eddf 6a44 	vldr	s13, [pc, #272]	; 8002584 <HAL_RCC_GetSysClockFreq+0x208>
 8002476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800247a:	4b3f      	ldr	r3, [pc, #252]	; (8002578 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800247c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800247e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002482:	ee07 3a90 	vmov	s15, r3
 8002486:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800248a:	ed97 6a01 	vldr	s12, [r7, #4]
 800248e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002588 <HAL_RCC_GetSysClockFreq+0x20c>
 8002492:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002496:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800249a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800249e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024a6:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80024aa:	e046      	b.n	800253a <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	ee07 3a90 	vmov	s15, r3
 80024b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024b6:	eddf 6a33 	vldr	s13, [pc, #204]	; 8002584 <HAL_RCC_GetSysClockFreq+0x208>
 80024ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024be:	4b2e      	ldr	r3, [pc, #184]	; (8002578 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80024c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024c6:	ee07 3a90 	vmov	s15, r3
 80024ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80024ce:	ed97 6a01 	vldr	s12, [r7, #4]
 80024d2:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002588 <HAL_RCC_GetSysClockFreq+0x20c>
 80024d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024da:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80024de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ea:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80024ee:	e024      	b.n	800253a <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	ee07 3a90 	vmov	s15, r3
 80024f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	ee07 3a90 	vmov	s15, r3
 8002500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002504:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002508:	4b1b      	ldr	r3, [pc, #108]	; (8002578 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800250a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800250c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002510:	ee07 3a90 	vmov	s15, r3
 8002514:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002518:	ed97 6a01 	vldr	s12, [r7, #4]
 800251c:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8002588 <HAL_RCC_GetSysClockFreq+0x20c>
 8002520:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002524:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002528:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800252c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002534:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002538:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800253a:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800253c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800253e:	0e1b      	lsrs	r3, r3, #24
 8002540:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002544:	3301      	adds	r3, #1
 8002546:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	ee07 3a90 	vmov	s15, r3
 800254e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002552:	edd7 6a07 	vldr	s13, [r7, #28]
 8002556:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800255a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800255e:	ee17 3a90 	vmov	r3, s15
 8002562:	623b      	str	r3, [r7, #32]
 8002564:	e001      	b.n	800256a <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800256a:	6a3b      	ldr	r3, [r7, #32]
}
 800256c:	4618      	mov	r0, r3
 800256e:	372c      	adds	r7, #44	; 0x2c
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	46020c00 	.word	0x46020c00
 800257c:	08003fe8 	.word	0x08003fe8
 8002580:	00f42400 	.word	0x00f42400
 8002584:	4b742400 	.word	0x4b742400
 8002588:	46000000 	.word	0x46000000

0800258c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002590:	f7ff fef4 	bl	800237c <HAL_RCC_GetSysClockFreq>
 8002594:	4602      	mov	r2, r0
 8002596:	4b07      	ldr	r3, [pc, #28]	; (80025b4 <HAL_RCC_GetHCLKFreq+0x28>)
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	4906      	ldr	r1, [pc, #24]	; (80025b8 <HAL_RCC_GetHCLKFreq+0x2c>)
 80025a0:	5ccb      	ldrb	r3, [r1, r3]
 80025a2:	fa22 f303 	lsr.w	r3, r2, r3
 80025a6:	4a05      	ldr	r2, [pc, #20]	; (80025bc <HAL_RCC_GetHCLKFreq+0x30>)
 80025a8:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80025aa:	4b04      	ldr	r3, [pc, #16]	; (80025bc <HAL_RCC_GetHCLKFreq+0x30>)
 80025ac:	681b      	ldr	r3, [r3, #0]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	46020c00 	.word	0x46020c00
 80025b8:	08003fd8 	.word	0x08003fd8
 80025bc:	20000000 	.word	0x20000000

080025c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025c8:	4b3e      	ldr	r3, [pc, #248]	; (80026c4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80025ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ce:	f003 0304 	and.w	r3, r3, #4
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025d6:	f7fe fd85 	bl	80010e4 <HAL_PWREx_GetVoltageRange>
 80025da:	6178      	str	r0, [r7, #20]
 80025dc:	e019      	b.n	8002612 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025de:	4b39      	ldr	r3, [pc, #228]	; (80026c4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80025e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025e4:	4a37      	ldr	r2, [pc, #220]	; (80026c4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80025e6:	f043 0304 	orr.w	r3, r3, #4
 80025ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80025ee:	4b35      	ldr	r3, [pc, #212]	; (80026c4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80025f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025fc:	f7fe fd72 	bl	80010e4 <HAL_PWREx_GetVoltageRange>
 8002600:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002602:	4b30      	ldr	r3, [pc, #192]	; (80026c4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002604:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002608:	4a2e      	ldr	r2, [pc, #184]	; (80026c4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800260a:	f023 0304 	bic.w	r3, r3, #4
 800260e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002618:	d003      	beq.n	8002622 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002620:	d109      	bne.n	8002636 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002628:	d202      	bcs.n	8002630 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800262a:	2301      	movs	r3, #1
 800262c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800262e:	e033      	b.n	8002698 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8002630:	2300      	movs	r3, #0
 8002632:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002634:	e030      	b.n	8002698 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800263c:	d208      	bcs.n	8002650 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002644:	d102      	bne.n	800264c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8002646:	2303      	movs	r3, #3
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	e025      	b.n	8002698 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e035      	b.n	80026bc <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002656:	d90f      	bls.n	8002678 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d109      	bne.n	8002672 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002664:	d902      	bls.n	800266c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8002666:	2300      	movs	r3, #0
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	e015      	b.n	8002698 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800266c:	2301      	movs	r3, #1
 800266e:	613b      	str	r3, [r7, #16]
 8002670:	e012      	b.n	8002698 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	e00f      	b.n	8002698 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800267e:	d109      	bne.n	8002694 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002686:	d102      	bne.n	800268e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8002688:	2301      	movs	r3, #1
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	e004      	b.n	8002698 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800268e:	2302      	movs	r3, #2
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	e001      	b.n	8002698 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8002694:	2301      	movs	r3, #1
 8002696:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002698:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f023 020f 	bic.w	r2, r3, #15
 80026a0:	4909      	ldr	r1, [pc, #36]	; (80026c8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80026a8:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 030f 	and.w	r3, r3, #15
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d001      	beq.n	80026ba <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	46020c00 	.word	0x46020c00
 80026c8:	40022000 	.word	0x40022000

080026cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80026cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026d0:	b0c4      	sub	sp, #272	; 0x110
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026d8:	2300      	movs	r3, #0
 80026da:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026de:	2300      	movs	r3, #0
 80026e0:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ec:	f002 0401 	and.w	r4, r2, #1
 80026f0:	2500      	movs	r5, #0
 80026f2:	ea54 0305 	orrs.w	r3, r4, r5
 80026f6:	d00b      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80026f8:	4bd5      	ldr	r3, [pc, #852]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80026fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026fe:	f023 0103 	bic.w	r1, r3, #3
 8002702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002708:	4ad1      	ldr	r2, [pc, #836]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800270a:	430b      	orrs	r3, r1
 800270c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002710:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002718:	f002 0802 	and.w	r8, r2, #2
 800271c:	f04f 0900 	mov.w	r9, #0
 8002720:	ea58 0309 	orrs.w	r3, r8, r9
 8002724:	d00b      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002726:	4bca      	ldr	r3, [pc, #808]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800272c:	f023 010c 	bic.w	r1, r3, #12
 8002730:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002736:	4ac6      	ldr	r2, [pc, #792]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002738:	430b      	orrs	r3, r1
 800273a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800273e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002746:	f002 0a04 	and.w	sl, r2, #4
 800274a:	f04f 0b00 	mov.w	fp, #0
 800274e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002752:	d00b      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002754:	4bbe      	ldr	r3, [pc, #760]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800275a:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800275e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002764:	4aba      	ldr	r2, [pc, #744]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002766:	430b      	orrs	r3, r1
 8002768:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800276c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002774:	f002 0308 	and.w	r3, r2, #8
 8002778:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800277c:	2300      	movs	r3, #0
 800277e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002782:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002786:	460b      	mov	r3, r1
 8002788:	4313      	orrs	r3, r2
 800278a:	d00b      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800278c:	4bb0      	ldr	r3, [pc, #704]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800278e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002792:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002796:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800279a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279c:	4aac      	ldr	r2, [pc, #688]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800279e:	430b      	orrs	r3, r1
 80027a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ac:	f002 0310 	and.w	r3, r2, #16
 80027b0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80027b4:	2300      	movs	r3, #0
 80027b6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80027ba:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80027be:	460b      	mov	r3, r1
 80027c0:	4313      	orrs	r3, r2
 80027c2:	d00b      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80027c4:	4ba2      	ldr	r3, [pc, #648]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80027c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80027ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027d4:	4a9e      	ldr	r2, [pc, #632]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80027d6:	430b      	orrs	r3, r1
 80027d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80027dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80027e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80027ec:	2300      	movs	r3, #0
 80027ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80027f2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80027f6:	460b      	mov	r3, r1
 80027f8:	4313      	orrs	r3, r2
 80027fa:	d00b      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80027fc:	4b94      	ldr	r3, [pc, #592]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80027fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002802:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002806:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800280a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800280c:	4a90      	ldr	r2, [pc, #576]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800280e:	430b      	orrs	r3, r1
 8002810:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002814:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281c:	f002 0320 	and.w	r3, r2, #32
 8002820:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002824:	2300      	movs	r3, #0
 8002826:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800282a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800282e:	460b      	mov	r3, r1
 8002830:	4313      	orrs	r3, r2
 8002832:	d00b      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002834:	4b86      	ldr	r3, [pc, #536]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002836:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800283a:	f023 0107 	bic.w	r1, r3, #7
 800283e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002842:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002844:	4a82      	ldr	r2, [pc, #520]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002846:	430b      	orrs	r3, r1
 8002848:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800284c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002854:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002858:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800285c:	2300      	movs	r3, #0
 800285e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002862:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002866:	460b      	mov	r3, r1
 8002868:	4313      	orrs	r3, r2
 800286a:	d00b      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800286c:	4b78      	ldr	r3, [pc, #480]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800286e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002872:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8002876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800287a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800287c:	4a74      	ldr	r2, [pc, #464]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800287e:	430b      	orrs	r3, r1
 8002880:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800288c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8002890:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002894:	2300      	movs	r3, #0
 8002896:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800289a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800289e:	460b      	mov	r3, r1
 80028a0:	4313      	orrs	r3, r2
 80028a2:	d00b      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80028a4:	4b6a      	ldr	r3, [pc, #424]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80028a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b4:	4a66      	ldr	r2, [pc, #408]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80028b6:	430b      	orrs	r3, r1
 80028b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c4:	f402 7380 	and.w	r3, r2, #256	; 0x100
 80028c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028cc:	2300      	movs	r3, #0
 80028ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80028d2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4313      	orrs	r3, r2
 80028da:	d00b      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80028dc:	4b5c      	ldr	r3, [pc, #368]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80028de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ec:	4a58      	ldr	r2, [pc, #352]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80028ee:	430b      	orrs	r3, r1
 80028f0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002900:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002904:	2300      	movs	r3, #0
 8002906:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800290a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800290e:	460b      	mov	r3, r1
 8002910:	4313      	orrs	r3, r2
 8002912:	d00b      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8002914:	4b4e      	ldr	r3, [pc, #312]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800291a:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800291e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002922:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002924:	4a4a      	ldr	r2, [pc, #296]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002926:	430b      	orrs	r3, r1
 8002928:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 800292c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002934:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8002938:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800293c:	2300      	movs	r3, #0
 800293e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002942:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002946:	460b      	mov	r3, r1
 8002948:	4313      	orrs	r3, r2
 800294a:	d00b      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 800294c:	4b40      	ldr	r3, [pc, #256]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800294e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002952:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8002956:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800295a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800295c:	4a3c      	ldr	r2, [pc, #240]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800295e:	430b      	orrs	r3, r1
 8002960:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8002964:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8002970:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002974:	2300      	movs	r3, #0
 8002976:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800297a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800297e:	460b      	mov	r3, r1
 8002980:	4313      	orrs	r3, r2
 8002982:	d00c      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8002984:	4b32      	ldr	r3, [pc, #200]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002986:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800298a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800298e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002992:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002996:	4a2e      	ldr	r2, [pc, #184]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002998:	430b      	orrs	r3, r1
 800299a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800299e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a6:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80029aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80029ae:	2300      	movs	r3, #0
 80029b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80029b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80029b8:	460b      	mov	r3, r1
 80029ba:	4313      	orrs	r3, r2
 80029bc:	d00c      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80029be:	4b24      	ldr	r3, [pc, #144]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80029c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029c4:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80029c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029d0:	4a1f      	ldr	r2, [pc, #124]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80029d2:	430b      	orrs	r3, r1
 80029d4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e0:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80029e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80029e8:	2300      	movs	r3, #0
 80029ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80029ee:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80029f2:	460b      	mov	r3, r1
 80029f4:	4313      	orrs	r3, r2
 80029f6:	d00c      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80029f8:	4b15      	ldr	r3, [pc, #84]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80029fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029fe:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8002a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0a:	4a11      	ldr	r2, [pc, #68]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002a0c:	430b      	orrs	r3, r1
 8002a0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8002a12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002a1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a22:	2300      	movs	r3, #0
 8002a24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002a28:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	d010      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8002a32:	4b07      	ldr	r3, [pc, #28]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002a34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a38:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a44:	4a02      	ldr	r2, [pc, #8]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002a46:	430b      	orrs	r3, r1
 8002a48:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a4c:	e002      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8002a4e:	bf00      	nop
 8002a50:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5c:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002a60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002a64:	2300      	movs	r3, #0
 8002a66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002a6a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4313      	orrs	r3, r2
 8002a72:	d04c      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8002a74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a7c:	2b80      	cmp	r3, #128	; 0x80
 8002a7e:	d02d      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002a80:	2b80      	cmp	r3, #128	; 0x80
 8002a82:	d827      	bhi.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002a84:	2b60      	cmp	r3, #96	; 0x60
 8002a86:	d02b      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8002a88:	2b60      	cmp	r3, #96	; 0x60
 8002a8a:	d823      	bhi.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002a8c:	2b40      	cmp	r3, #64	; 0x40
 8002a8e:	d006      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8002a90:	2b40      	cmp	r3, #64	; 0x40
 8002a92:	d81f      	bhi.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d009      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002a98:	2b20      	cmp	r3, #32
 8002a9a:	d011      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8002a9c:	e01a      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a9e:	4bbe      	ldr	r3, [pc, #760]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa2:	4abd      	ldr	r2, [pc, #756]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa8:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002aaa:	e01a      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002aac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ab0:	3308      	adds	r3, #8
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 fcc6 	bl	8003444 <RCCEx_PLL2_Config>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002abe:	e010      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002ac0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ac4:	332c      	adds	r3, #44	; 0x2c
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 fd54 	bl	8003574 <RCCEx_PLL3_Config>
 8002acc:	4603      	mov	r3, r0
 8002ace:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002ad2:	e006      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8002ada:	e002      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8002adc:	bf00      	nop
 8002ade:	e000      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8002ae0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ae2:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10d      	bne.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8002aea:	4bab      	ldr	r3, [pc, #684]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002af0:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8002af4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002af8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002afc:	4aa6      	ldr	r2, [pc, #664]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002afe:	430b      	orrs	r3, r1
 8002b00:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002b04:	e003      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b06:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002b0a:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002b0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b16:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002b1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b24:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8002b28:	460b      	mov	r3, r1
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	d053      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8002b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b3a:	d033      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8002b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b40:	d82c      	bhi.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002b42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b46:	d02f      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8002b48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b4c:	d826      	bhi.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002b4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b52:	d008      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8002b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b58:	d820      	bhi.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00a      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b62:	d011      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002b64:	e01a      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b66:	4b8c      	ldr	r3, [pc, #560]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6a:	4a8b      	ldr	r2, [pc, #556]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b70:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002b72:	e01a      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002b74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b78:	3308      	adds	r3, #8
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 fc62 	bl	8003444 <RCCEx_PLL2_Config>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002b86:	e010      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002b88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b8c:	332c      	adds	r3, #44	; 0x2c
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 fcf0 	bl	8003574 <RCCEx_PLL3_Config>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002b9a:	e006      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8002ba2:	e002      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8002ba4:	bf00      	nop
 8002ba6:	e000      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8002ba8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002baa:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10d      	bne.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8002bb2:	4b79      	ldr	r3, [pc, #484]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bb4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002bb8:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8002bbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bc0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002bc4:	4a74      	ldr	r2, [pc, #464]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bc6:	430b      	orrs	r3, r1
 8002bc8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002bcc:	e003      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bce:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002bd2:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8002bd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bde:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002be2:	67bb      	str	r3, [r7, #120]	; 0x78
 8002be4:	2300      	movs	r3, #0
 8002be6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002be8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8002bec:	460b      	mov	r3, r1
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	d046      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8002bf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bf6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002bfa:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002bfe:	d028      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002c00:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002c04:	d821      	bhi.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8002c06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c0a:	d022      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002c0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c10:	d81b      	bhi.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8002c12:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c16:	d01c      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002c18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c1c:	d815      	bhi.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8002c1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c22:	d008      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8002c24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c28:	d80f      	bhi.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d011      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c32:	d00e      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002c34:	e009      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x57e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c3a:	3308      	adds	r3, #8
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 fc01 	bl	8003444 <RCCEx_PLL2_Config>
 8002c42:	4603      	mov	r3, r0
 8002c44:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8002c48:	e004      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x588>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8002c50:	e000      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x588>
        break;
 8002c52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c54:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10d      	bne.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8002c5c:	4b4e      	ldr	r3, [pc, #312]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c62:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002c66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002c6e:	4a4a      	ldr	r2, [pc, #296]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c70:	430b      	orrs	r3, r1
 8002c72:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c76:	e003      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c78:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002c7c:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8002c80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c88:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8002c8c:	673b      	str	r3, [r7, #112]	; 0x70
 8002c8e:	2300      	movs	r3, #0
 8002c90:	677b      	str	r3, [r7, #116]	; 0x74
 8002c92:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8002c96:	460b      	mov	r3, r1
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	d03f      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8002c9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d81e      	bhi.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8002ca8:	a201      	add	r2, pc, #4	; (adr r2, 8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cae:	bf00      	nop
 8002cb0:	08002cef 	.word	0x08002cef
 8002cb4:	08002cc5 	.word	0x08002cc5
 8002cb8:	08002cd3 	.word	0x08002cd3
 8002cbc:	08002cef 	.word	0x08002cef
 8002cc0:	08002cef 	.word	0x08002cef
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002cc4:	4b34      	ldr	r3, [pc, #208]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc8:	4a33      	ldr	r2, [pc, #204]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cce:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8002cd0:	e00e      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002cd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cd6:	332c      	adds	r3, #44	; 0x2c
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f000 fc4b 	bl	8003574 <RCCEx_PLL3_Config>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8002ce4:	e004      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8002cec:	e000      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x624>
        break;
 8002cee:	bf00      	nop
    }
    if (ret == HAL_OK)
 8002cf0:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10d      	bne.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8002cf8:	4b27      	ldr	r3, [pc, #156]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cfa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002cfe:	f023 0107 	bic.w	r1, r3, #7
 8002d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d0a:	4a23      	ldr	r2, [pc, #140]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d0c:	430b      	orrs	r3, r1
 8002d0e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002d12:	e003      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x650>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d14:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002d18:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8002d1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d24:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8002d28:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d2e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8002d32:	460b      	mov	r3, r1
 8002d34:	4313      	orrs	r3, r2
 8002d36:	d04c      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x706>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8002d38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d44:	d02a      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8002d46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d4a:	d821      	bhi.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8002d4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d50:	d026      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 8002d52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d56:	d81b      	bhi.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8002d58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d5c:	d00e      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8002d5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d62:	d815      	bhi.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d01d      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8002d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d6c:	d110      	bne.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d6e:	4b0a      	ldr	r3, [pc, #40]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d72:	4a09      	ldr	r2, [pc, #36]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d78:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8002d7a:	e014      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002d7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d80:	332c      	adds	r3, #44	; 0x2c
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 fbf6 	bl	8003574 <RCCEx_PLL3_Config>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8002d8e:	e00a      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8002d96:	e006      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8002d98:	46020c00 	.word	0x46020c00
        break;
 8002d9c:	bf00      	nop
 8002d9e:	e002      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8002da0:	bf00      	nop
 8002da2:	e000      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8002da4:	bf00      	nop
    }
    if (ret == HAL_OK)
 8002da6:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10d      	bne.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8002dae:	4baf      	ldr	r3, [pc, #700]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002db0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002db4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002db8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dc0:	4aaa      	ldr	r2, [pc, #680]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002dc2:	430b      	orrs	r3, r1
 8002dc4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002dc8:	e003      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x706>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dca:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002dce:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dda:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8002dde:	663b      	str	r3, [r7, #96]	; 0x60
 8002de0:	2300      	movs	r3, #0
 8002de2:	667b      	str	r3, [r7, #100]	; 0x64
 8002de4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8002de8:	460b      	mov	r3, r1
 8002dea:	4313      	orrs	r3, r2
 8002dec:	f000 80b5 	beq.w	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x88e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002df0:	2300      	movs	r3, #0
 8002df2:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002df6:	4b9d      	ldr	r3, [pc, #628]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d113      	bne.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x760>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e04:	4b99      	ldr	r3, [pc, #612]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e0a:	4a98      	ldr	r2, [pc, #608]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002e0c:	f043 0304 	orr.w	r3, r3, #4
 8002e10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002e14:	4b95      	ldr	r3, [pc, #596]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e1a:	f003 0304 	and.w	r3, r3, #4
 8002e1e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002e22:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
      pwrclkchanged = SET;
 8002e26:	2301      	movs	r3, #1
 8002e28:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002e2c:	4b90      	ldr	r3, [pc, #576]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8002e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e30:	4a8f      	ldr	r2, [pc, #572]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8002e32:	f043 0301 	orr.w	r3, r3, #1
 8002e36:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e38:	f7fd fda2 	bl	8000980 <HAL_GetTick>
 8002e3c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002e40:	e00b      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x78e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e42:	f7fd fd9d 	bl	8000980 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d903      	bls.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        ret = HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8002e58:	e005      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x79a>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002e5a:	4b85      	ldr	r3, [pc, #532]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8002e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0ed      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x776>
      }
    }

    if (ret == HAL_OK)
 8002e66:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d165      	bne.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e6e:	4b7f      	ldr	r3, [pc, #508]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002e70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8002e7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d023      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x800>
 8002e84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e88:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8002e8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d01b      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x800>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e94:	4b75      	ldr	r3, [pc, #468]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002e96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e9e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ea2:	4b72      	ldr	r3, [pc, #456]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002ea4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ea8:	4a70      	ldr	r2, [pc, #448]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002eb2:	4b6e      	ldr	r3, [pc, #440]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002eb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002eb8:	4a6c      	ldr	r2, [pc, #432]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ebe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ec2:	4a6a      	ldr	r2, [pc, #424]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002ec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ec8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ecc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d019      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x840>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed8:	f7fd fd52 	bl	8000980 <HAL_GetTick>
 8002edc:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ee0:	e00d      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x832>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee2:	f7fd fd4d 	bl	8000980 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002eec:	1ad2      	subs	r2, r2, r3
 8002eee:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d903      	bls.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x832>
          {
            ret = HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
            break;
 8002efc:	e006      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x840>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002efe:	4b5b      	ldr	r3, [pc, #364]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002f00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0ea      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x816>
          }
        }
      }

      if (ret == HAL_OK)
 8002f0c:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10d      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x864>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8002f14:	4b55      	ldr	r3, [pc, #340]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002f16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f22:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8002f26:	4a51      	ldr	r2, [pc, #324]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002f28:	430b      	orrs	r3, r1
 8002f2a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002f2e:	e008      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f30:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002f34:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
 8002f38:	e003      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f3a:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002f3e:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f42:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d107      	bne.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x88e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f4a:	4b48      	ldr	r3, [pc, #288]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f50:	4a46      	ldr	r2, [pc, #280]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002f52:	f023 0304 	bic.w	r3, r3, #4
 8002f56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8002f5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f62:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8002f66:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f68:	2300      	movs	r3, #0
 8002f6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f6c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8002f70:	460b      	mov	r3, r1
 8002f72:	4313      	orrs	r3, r2
 8002f74:	d042      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8002f76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f7a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002f7e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002f82:	d022      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8002f84:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002f88:	d81b      	bhi.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8002f8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f8e:	d011      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 8002f90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f94:	d815      	bhi.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d019      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x902>
 8002f9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f9e:	d110      	bne.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002fa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fa4:	3308      	adds	r3, #8
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 fa4c 	bl	8003444 <RCCEx_PLL2_Config>
 8002fac:	4603      	mov	r3, r0
 8002fae:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8002fb2:	e00d      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fb4:	4b2d      	ldr	r3, [pc, #180]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb8:	4a2c      	ldr	r2, [pc, #176]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fbe:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8002fc0:	e006      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8002fc8:	e002      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8002fca:	bf00      	nop
 8002fcc:	e000      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8002fce:	bf00      	nop
    }
    if (ret == HAL_OK)
 8002fd0:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10d      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x928>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8002fd8:	4b24      	ldr	r3, [pc, #144]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fde:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002fe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fe6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002fea:	4a20      	ldr	r2, [pc, #128]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8002fec:	430b      	orrs	r3, r1
 8002fee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ff2:	e003      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff4:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002ff8:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002ffc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003004:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003008:	653b      	str	r3, [r7, #80]	; 0x50
 800300a:	2300      	movs	r3, #0
 800300c:	657b      	str	r3, [r7, #84]	; 0x54
 800300e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003012:	460b      	mov	r3, r1
 8003014:	4313      	orrs	r3, r2
 8003016:	d031      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003018:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800301c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003024:	d00b      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x972>
 8003026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800302a:	d804      	bhi.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800302c:	2b00      	cmp	r3, #0
 800302e:	d008      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003034:	d007      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x97a>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 800303c:	e004      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 800303e:	bf00      	nop
 8003040:	e002      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8003042:	bf00      	nop
 8003044:	e000      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8003046:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003048:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800304c:	2b00      	cmp	r3, #0
 800304e:	d111      	bne.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003050:	4b06      	ldr	r3, [pc, #24]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003052:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003056:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800305a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800305e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003062:	4a02      	ldr	r2, [pc, #8]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003064:	430b      	orrs	r3, r1
 8003066:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800306a:	e007      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 800306c:	46020c00 	.word	0x46020c00
 8003070:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003074:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003078:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800307c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003084:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003088:	64bb      	str	r3, [r7, #72]	; 0x48
 800308a:	2300      	movs	r3, #0
 800308c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800308e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003092:	460b      	mov	r3, r1
 8003094:	4313      	orrs	r3, r2
 8003096:	d00c      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8003098:	4bb2      	ldr	r3, [pc, #712]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800309a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800309e:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 80030a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80030aa:	4aae      	ldr	r2, [pc, #696]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80030ac:	430b      	orrs	r3, r1
 80030ae:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80030b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ba:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80030be:	643b      	str	r3, [r7, #64]	; 0x40
 80030c0:	2300      	movs	r3, #0
 80030c2:	647b      	str	r3, [r7, #68]	; 0x44
 80030c4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80030c8:	460b      	mov	r3, r1
 80030ca:	4313      	orrs	r3, r2
 80030cc:	d019      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80030ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80030d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030da:	d105      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80030dc:	4ba1      	ldr	r3, [pc, #644]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80030de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e0:	4aa0      	ldr	r2, [pc, #640]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80030e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e6:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80030e8:	4b9e      	ldr	r3, [pc, #632]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80030ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80030ee:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80030f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80030fa:	4a9a      	ldr	r2, [pc, #616]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80030fc:	430b      	orrs	r3, r1
 80030fe:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003102:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800310e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003110:	2300      	movs	r3, #0
 8003112:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003114:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003118:	460b      	mov	r3, r1
 800311a:	4313      	orrs	r3, r2
 800311c:	d00c      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800311e:	4b91      	ldr	r3, [pc, #580]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003124:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003128:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800312c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003130:	4a8c      	ldr	r2, [pc, #560]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003132:	430b      	orrs	r3, r1
 8003134:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003138:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800313c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003140:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003144:	633b      	str	r3, [r7, #48]	; 0x30
 8003146:	2300      	movs	r3, #0
 8003148:	637b      	str	r3, [r7, #52]	; 0x34
 800314a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800314e:	460b      	mov	r3, r1
 8003150:	4313      	orrs	r3, r2
 8003152:	d00c      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003154:	4b83      	ldr	r3, [pc, #524]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800315a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800315e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003162:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003166:	4a7f      	ldr	r2, [pc, #508]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003168:	430b      	orrs	r3, r1
 800316a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800316e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003176:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800317a:	62bb      	str	r3, [r7, #40]	; 0x28
 800317c:	2300      	movs	r3, #0
 800317e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003180:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003184:	460b      	mov	r3, r1
 8003186:	4313      	orrs	r3, r2
 8003188:	d00c      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800318a:	4b76      	ldr	r3, [pc, #472]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800318c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003190:	f023 0218 	bic.w	r2, r3, #24
 8003194:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003198:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800319c:	4971      	ldr	r1, [pc, #452]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80031a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ac:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80031b0:	623b      	str	r3, [r7, #32]
 80031b2:	2300      	movs	r3, #0
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24
 80031b6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80031ba:	460b      	mov	r3, r1
 80031bc:	4313      	orrs	r3, r2
 80031be:	d032      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80031c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031c4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80031c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031cc:	d105      	bne.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031ce:	4b65      	ldr	r3, [pc, #404]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80031d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d2:	4a64      	ldr	r2, [pc, #400]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80031d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031d8:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80031da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031de:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80031e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031e6:	d108      	bne.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0xb2e>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80031e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031ec:	3308      	adds	r3, #8
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 f928 	bl	8003444 <RCCEx_PLL2_Config>
 80031f4:	4603      	mov	r3, r0
 80031f6:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    }
    if (ret == HAL_OK)
 80031fa:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10d      	bne.n	800321e <HAL_RCCEx_PeriphCLKConfig+0xb52>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8003202:	4b58      	ldr	r3, [pc, #352]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003204:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003208:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800320c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003210:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003214:	4953      	ldr	r1, [pc, #332]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003216:	4313      	orrs	r3, r2
 8003218:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800321c:	e003      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800321e:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003222:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 8003226:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800322a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322e:	2100      	movs	r1, #0
 8003230:	61b9      	str	r1, [r7, #24]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	61fb      	str	r3, [r7, #28]
 8003238:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800323c:	460b      	mov	r3, r1
 800323e:	4313      	orrs	r3, r2
 8003240:	d04a      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 8003242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003246:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800324a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800324e:	d01e      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 8003250:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003254:	d825      	bhi.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 8003256:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800325a:	d00e      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800325c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003260:	d81f      	bhi.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 8003262:	2b00      	cmp	r3, #0
 8003264:	d021      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0xbde>
 8003266:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800326a:	d11a      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800326c:	4b3d      	ldr	r3, [pc, #244]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800326e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003270:	4a3c      	ldr	r2, [pc, #240]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003276:	6293      	str	r3, [r2, #40]	; 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8003278:	e018      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800327a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800327e:	3308      	adds	r3, #8
 8003280:	4618      	mov	r0, r3
 8003282:	f000 f8df 	bl	8003444 <RCCEx_PLL2_Config>
 8003286:	4603      	mov	r3, r0
 8003288:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800328c:	e00e      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800328e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003292:	332c      	adds	r3, #44	; 0x2c
 8003294:	4618      	mov	r0, r3
 8003296:	f000 f96d 	bl	8003574 <RCCEx_PLL3_Config>
 800329a:	4603      	mov	r3, r0
 800329c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80032a0:	e004      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      default:
        ret = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 80032a8:	e000      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        break;
 80032aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ac:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10d      	bne.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xc04>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 80032b4:	4b2b      	ldr	r3, [pc, #172]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80032b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80032ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032c2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80032c6:	4927      	ldr	r1, [pc, #156]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80032ce:	e003      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d0:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80032d4:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80032d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e0:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80032e4:	613b      	str	r3, [r7, #16]
 80032e6:	2300      	movs	r3, #0
 80032e8:	617b      	str	r3, [r7, #20]
 80032ea:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80032ee:	460b      	mov	r3, r1
 80032f0:	4313      	orrs	r3, r2
 80032f2:	d03d      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xca4>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80032f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003300:	d00e      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8003302:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003306:	d815      	bhi.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003308:	2b00      	cmp	r3, #0
 800330a:	d017      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800330c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003310:	d110      	bne.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xc68>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003312:	4b14      	ldr	r3, [pc, #80]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003316:	4a13      	ldr	r2, [pc, #76]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800331c:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800331e:	e00e      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0xc72>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003320:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003324:	3308      	adds	r3, #8
 8003326:	4618      	mov	r0, r3
 8003328:	f000 f88c 	bl	8003444 <RCCEx_PLL2_Config>
 800332c:	4603      	mov	r3, r0
 800332e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8003332:	e004      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0xc72>
      default:
        ret = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 800333a:	e000      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0xc72>
        break;
 800333c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800333e:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003342:	2b00      	cmp	r3, #0
 8003344:	d110      	bne.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8003346:	4b07      	ldr	r3, [pc, #28]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8003348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800334c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003350:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003358:	4902      	ldr	r1, [pc, #8]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800335a:	4313      	orrs	r3, r2
 800335c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8003360:	e006      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xca4>
 8003362:	bf00      	nop
 8003364:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003368:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800336c:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8003370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003378:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800337c:	60bb      	str	r3, [r7, #8]
 800337e:	2300      	movs	r3, #0
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003386:	460b      	mov	r3, r1
 8003388:	4313      	orrs	r3, r2
 800338a:	d00c      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0xcda>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800338c:	4b2c      	ldr	r3, [pc, #176]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 800338e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003392:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003396:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800339a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800339e:	4928      	ldr	r1, [pc, #160]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 80033a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ae:	2100      	movs	r1, #0
 80033b0:	6039      	str	r1, [r7, #0]
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	607b      	str	r3, [r7, #4]
 80033b8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80033bc:	460b      	mov	r3, r1
 80033be:	4313      	orrs	r3, r2
 80033c0:	d036      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 80033c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80033ca:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80033ce:	d00d      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80033d0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80033d4:	d811      	bhi.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 80033d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033da:	d012      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80033dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033e0:	d80b      	bhi.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00d      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80033e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ea:	d106      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0xd2e>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80033ec:	4b14      	ldr	r3, [pc, #80]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80033ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f0:	4a13      	ldr	r2, [pc, #76]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80033f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f6:	6293      	str	r3, [r2, #40]	; 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 80033f8:	e004      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0xd38>

      default:
        ret = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        break;
 8003400:	e000      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0xd38>
        break;
 8003402:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003404:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10d      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800340c:	4b0c      	ldr	r3, [pc, #48]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 800340e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003412:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800341a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800341e:	4908      	ldr	r1, [pc, #32]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8003420:	4313      	orrs	r3, r2
 8003422:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8003426:	e003      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003428:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800342c:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8003430:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
}
 8003434:	4618      	mov	r0, r3
 8003436:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800343a:	46bd      	mov	sp, r7
 800343c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003440:	46020c00 	.word	0x46020c00

08003444 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800344c:	4b47      	ldr	r3, [pc, #284]	; (800356c <RCCEx_PLL2_Config+0x128>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a46      	ldr	r2, [pc, #280]	; (800356c <RCCEx_PLL2_Config+0x128>)
 8003452:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003456:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003458:	f7fd fa92 	bl	8000980 <HAL_GetTick>
 800345c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800345e:	e008      	b.n	8003472 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003460:	f7fd fa8e 	bl	8000980 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e077      	b.n	8003562 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003472:	4b3e      	ldr	r3, [pc, #248]	; (800356c <RCCEx_PLL2_Config+0x128>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f0      	bne.n	8003460 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800347e:	4b3b      	ldr	r3, [pc, #236]	; (800356c <RCCEx_PLL2_Config+0x128>)
 8003480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003482:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003486:	f023 0303 	bic.w	r3, r3, #3
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6811      	ldr	r1, [r2, #0]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	6852      	ldr	r2, [r2, #4]
 8003492:	3a01      	subs	r2, #1
 8003494:	0212      	lsls	r2, r2, #8
 8003496:	430a      	orrs	r2, r1
 8003498:	4934      	ldr	r1, [pc, #208]	; (800356c <RCCEx_PLL2_Config+0x128>)
 800349a:	4313      	orrs	r3, r2
 800349c:	62cb      	str	r3, [r1, #44]	; 0x2c
 800349e:	4b33      	ldr	r3, [pc, #204]	; (800356c <RCCEx_PLL2_Config+0x128>)
 80034a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034a2:	4b33      	ldr	r3, [pc, #204]	; (8003570 <RCCEx_PLL2_Config+0x12c>)
 80034a4:	4013      	ands	r3, r2
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	6892      	ldr	r2, [r2, #8]
 80034aa:	3a01      	subs	r2, #1
 80034ac:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	68d2      	ldr	r2, [r2, #12]
 80034b4:	3a01      	subs	r2, #1
 80034b6:	0252      	lsls	r2, r2, #9
 80034b8:	b292      	uxth	r2, r2
 80034ba:	4311      	orrs	r1, r2
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	6912      	ldr	r2, [r2, #16]
 80034c0:	3a01      	subs	r2, #1
 80034c2:	0412      	lsls	r2, r2, #16
 80034c4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80034c8:	4311      	orrs	r1, r2
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6952      	ldr	r2, [r2, #20]
 80034ce:	3a01      	subs	r2, #1
 80034d0:	0612      	lsls	r2, r2, #24
 80034d2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80034d6:	430a      	orrs	r2, r1
 80034d8:	4924      	ldr	r1, [pc, #144]	; (800356c <RCCEx_PLL2_Config+0x128>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80034de:	4b23      	ldr	r3, [pc, #140]	; (800356c <RCCEx_PLL2_Config+0x128>)
 80034e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e2:	f023 020c 	bic.w	r2, r3, #12
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	4920      	ldr	r1, [pc, #128]	; (800356c <RCCEx_PLL2_Config+0x128>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80034f0:	4b1e      	ldr	r3, [pc, #120]	; (800356c <RCCEx_PLL2_Config+0x128>)
 80034f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	491c      	ldr	r1, [pc, #112]	; (800356c <RCCEx_PLL2_Config+0x128>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80034fe:	4b1b      	ldr	r3, [pc, #108]	; (800356c <RCCEx_PLL2_Config+0x128>)
 8003500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003502:	4a1a      	ldr	r2, [pc, #104]	; (800356c <RCCEx_PLL2_Config+0x128>)
 8003504:	f023 0310 	bic.w	r3, r3, #16
 8003508:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800350a:	4b18      	ldr	r3, [pc, #96]	; (800356c <RCCEx_PLL2_Config+0x128>)
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003512:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	69d2      	ldr	r2, [r2, #28]
 800351a:	00d2      	lsls	r2, r2, #3
 800351c:	4913      	ldr	r1, [pc, #76]	; (800356c <RCCEx_PLL2_Config+0x128>)
 800351e:	4313      	orrs	r3, r2
 8003520:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8003522:	4b12      	ldr	r3, [pc, #72]	; (800356c <RCCEx_PLL2_Config+0x128>)
 8003524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003526:	4a11      	ldr	r2, [pc, #68]	; (800356c <RCCEx_PLL2_Config+0x128>)
 8003528:	f043 0310 	orr.w	r3, r3, #16
 800352c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800352e:	4b0f      	ldr	r3, [pc, #60]	; (800356c <RCCEx_PLL2_Config+0x128>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a0e      	ldr	r2, [pc, #56]	; (800356c <RCCEx_PLL2_Config+0x128>)
 8003534:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003538:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800353a:	f7fd fa21 	bl	8000980 <HAL_GetTick>
 800353e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003540:	e008      	b.n	8003554 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003542:	f7fd fa1d 	bl	8000980 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e006      	b.n	8003562 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003554:	4b05      	ldr	r3, [pc, #20]	; (800356c <RCCEx_PLL2_Config+0x128>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f0      	beq.n	8003542 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8003560:	2300      	movs	r3, #0

}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	46020c00 	.word	0x46020c00
 8003570:	80800000 	.word	0x80800000

08003574 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800357c:	4b47      	ldr	r3, [pc, #284]	; (800369c <RCCEx_PLL3_Config+0x128>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a46      	ldr	r2, [pc, #280]	; (800369c <RCCEx_PLL3_Config+0x128>)
 8003582:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003586:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003588:	f7fd f9fa 	bl	8000980 <HAL_GetTick>
 800358c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800358e:	e008      	b.n	80035a2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003590:	f7fd f9f6 	bl	8000980 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e077      	b.n	8003692 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80035a2:	4b3e      	ldr	r3, [pc, #248]	; (800369c <RCCEx_PLL3_Config+0x128>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f0      	bne.n	8003590 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80035ae:	4b3b      	ldr	r3, [pc, #236]	; (800369c <RCCEx_PLL3_Config+0x128>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80035b6:	f023 0303 	bic.w	r3, r3, #3
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6811      	ldr	r1, [r2, #0]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6852      	ldr	r2, [r2, #4]
 80035c2:	3a01      	subs	r2, #1
 80035c4:	0212      	lsls	r2, r2, #8
 80035c6:	430a      	orrs	r2, r1
 80035c8:	4934      	ldr	r1, [pc, #208]	; (800369c <RCCEx_PLL3_Config+0x128>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	630b      	str	r3, [r1, #48]	; 0x30
 80035ce:	4b33      	ldr	r3, [pc, #204]	; (800369c <RCCEx_PLL3_Config+0x128>)
 80035d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035d2:	4b33      	ldr	r3, [pc, #204]	; (80036a0 <RCCEx_PLL3_Config+0x12c>)
 80035d4:	4013      	ands	r3, r2
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6892      	ldr	r2, [r2, #8]
 80035da:	3a01      	subs	r2, #1
 80035dc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	68d2      	ldr	r2, [r2, #12]
 80035e4:	3a01      	subs	r2, #1
 80035e6:	0252      	lsls	r2, r2, #9
 80035e8:	b292      	uxth	r2, r2
 80035ea:	4311      	orrs	r1, r2
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	6912      	ldr	r2, [r2, #16]
 80035f0:	3a01      	subs	r2, #1
 80035f2:	0412      	lsls	r2, r2, #16
 80035f4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80035f8:	4311      	orrs	r1, r2
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6952      	ldr	r2, [r2, #20]
 80035fe:	3a01      	subs	r2, #1
 8003600:	0612      	lsls	r2, r2, #24
 8003602:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8003606:	430a      	orrs	r2, r1
 8003608:	4924      	ldr	r1, [pc, #144]	; (800369c <RCCEx_PLL3_Config+0x128>)
 800360a:	4313      	orrs	r3, r2
 800360c:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800360e:	4b23      	ldr	r3, [pc, #140]	; (800369c <RCCEx_PLL3_Config+0x128>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	f023 020c 	bic.w	r2, r3, #12
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	4920      	ldr	r1, [pc, #128]	; (800369c <RCCEx_PLL3_Config+0x128>)
 800361c:	4313      	orrs	r3, r2
 800361e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8003620:	4b1e      	ldr	r3, [pc, #120]	; (800369c <RCCEx_PLL3_Config+0x128>)
 8003622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	491c      	ldr	r1, [pc, #112]	; (800369c <RCCEx_PLL3_Config+0x128>)
 800362a:	4313      	orrs	r3, r2
 800362c:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800362e:	4b1b      	ldr	r3, [pc, #108]	; (800369c <RCCEx_PLL3_Config+0x128>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	4a1a      	ldr	r2, [pc, #104]	; (800369c <RCCEx_PLL3_Config+0x128>)
 8003634:	f023 0310 	bic.w	r3, r3, #16
 8003638:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800363a:	4b18      	ldr	r3, [pc, #96]	; (800369c <RCCEx_PLL3_Config+0x128>)
 800363c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800363e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003642:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	69d2      	ldr	r2, [r2, #28]
 800364a:	00d2      	lsls	r2, r2, #3
 800364c:	4913      	ldr	r1, [pc, #76]	; (800369c <RCCEx_PLL3_Config+0x128>)
 800364e:	4313      	orrs	r3, r2
 8003650:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8003652:	4b12      	ldr	r3, [pc, #72]	; (800369c <RCCEx_PLL3_Config+0x128>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	4a11      	ldr	r2, [pc, #68]	; (800369c <RCCEx_PLL3_Config+0x128>)
 8003658:	f043 0310 	orr.w	r3, r3, #16
 800365c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800365e:	4b0f      	ldr	r3, [pc, #60]	; (800369c <RCCEx_PLL3_Config+0x128>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a0e      	ldr	r2, [pc, #56]	; (800369c <RCCEx_PLL3_Config+0x128>)
 8003664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003668:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800366a:	f7fd f989 	bl	8000980 <HAL_GetTick>
 800366e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003670:	e008      	b.n	8003684 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003672:	f7fd f985 	bl	8000980 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e006      	b.n	8003692 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003684:	4b05      	ldr	r3, [pc, #20]	; (800369c <RCCEx_PLL3_Config+0x128>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0f0      	beq.n	8003672 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	46020c00 	.word	0x46020c00
 80036a0:	80800000 	.word	0x80800000

080036a4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e0fb      	b.n	80038ae <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a7f      	ldr	r2, [pc, #508]	; (80038b8 <HAL_SPI_Init+0x214>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d004      	beq.n	80036ca <HAL_SPI_Init+0x26>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a7d      	ldr	r2, [pc, #500]	; (80038bc <HAL_SPI_Init+0x218>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	e000      	b.n	80036cc <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 80036ca:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a78      	ldr	r2, [pc, #480]	; (80038b8 <HAL_SPI_Init+0x214>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d004      	beq.n	80036e6 <HAL_SPI_Init+0x42>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a76      	ldr	r2, [pc, #472]	; (80038bc <HAL_SPI_Init+0x218>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d105      	bne.n	80036f2 <HAL_SPI_Init+0x4e>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	2b0f      	cmp	r3, #15
 80036ec:	d901      	bls.n	80036f2 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e0dd      	b.n	80038ae <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 fbd8 	bl	8003ea8 <SPI_GetPacketSize>
 80036f8:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a6e      	ldr	r2, [pc, #440]	; (80038b8 <HAL_SPI_Init+0x214>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d004      	beq.n	800370e <HAL_SPI_Init+0x6a>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a6c      	ldr	r2, [pc, #432]	; (80038bc <HAL_SPI_Init+0x218>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d102      	bne.n	8003714 <HAL_SPI_Init+0x70>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2b08      	cmp	r3, #8
 8003712:	d816      	bhi.n	8003742 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003718:	4a69      	ldr	r2, [pc, #420]	; (80038c0 <HAL_SPI_Init+0x21c>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d00e      	beq.n	800373c <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a68      	ldr	r2, [pc, #416]	; (80038c4 <HAL_SPI_Init+0x220>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d009      	beq.n	800373c <HAL_SPI_Init+0x98>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a66      	ldr	r2, [pc, #408]	; (80038c8 <HAL_SPI_Init+0x224>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d004      	beq.n	800373c <HAL_SPI_Init+0x98>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a65      	ldr	r2, [pc, #404]	; (80038cc <HAL_SPI_Init+0x228>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d104      	bne.n	8003746 <HAL_SPI_Init+0xa2>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2b10      	cmp	r3, #16
 8003740:	d901      	bls.n	8003746 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e0b3      	b.n	80038ae <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d106      	bne.n	8003760 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7fc ff9e 	bl	800069c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2202      	movs	r2, #2
 8003764:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0201 	bic.w	r2, r2, #1
 8003776:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8003782:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800378c:	d119      	bne.n	80037c2 <HAL_SPI_Init+0x11e>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003796:	d103      	bne.n	80037a0 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800379c:	2b00      	cmp	r3, #0
 800379e:	d008      	beq.n	80037b2 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10c      	bne.n	80037c2 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80037ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037b0:	d107      	bne.n	80037c2 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80037c0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00f      	beq.n	80037ee <HAL_SPI_Init+0x14a>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	2b06      	cmp	r3, #6
 80037d4:	d90b      	bls.n	80037ee <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	e007      	b.n	80037fe <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037fc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	69da      	ldr	r2, [r3, #28]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003806:	431a      	orrs	r2, r3
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003810:	ea42 0103 	orr.w	r1, r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68da      	ldr	r2, [r3, #12]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	431a      	orrs	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	431a      	orrs	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	431a      	orrs	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	431a      	orrs	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	431a      	orrs	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	431a      	orrs	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003864:	431a      	orrs	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386a:	ea42 0103 	orr.w	r1, r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00a      	beq.n	800389c <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	46002000 	.word	0x46002000
 80038bc:	56002000 	.word	0x56002000
 80038c0:	40013000 	.word	0x40013000
 80038c4:	50013000 	.word	0x50013000
 80038c8:	40003800 	.word	0x40003800
 80038cc:	50003800 	.word	0x50003800

080038d0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b08a      	sub	sp, #40	; 0x28
 80038d4:	af02      	add	r7, sp, #8
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	603b      	str	r3, [r7, #0]
 80038dc:	4613      	mov	r3, r2
 80038de:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	3320      	adds	r3, #32
 80038e6:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038e8:	2300      	movs	r3, #0
 80038ea:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d101      	bne.n	80038fa <HAL_SPI_Transmit+0x2a>
 80038f6:	2302      	movs	r3, #2
 80038f8:	e203      	b.n	8003d02 <HAL_SPI_Transmit+0x432>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003902:	f7fd f83d 	bl	8000980 <HAL_GetTick>
 8003906:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b01      	cmp	r3, #1
 8003912:	d007      	beq.n	8003924 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8003914:	2302      	movs	r3, #2
 8003916:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8003920:	7efb      	ldrb	r3, [r7, #27]
 8003922:	e1ee      	b.n	8003d02 <HAL_SPI_Transmit+0x432>
  }

  if ((pData == NULL) || (Size == 0UL))
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d002      	beq.n	8003930 <HAL_SPI_Transmit+0x60>
 800392a:	88fb      	ldrh	r3, [r7, #6]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d107      	bne.n	8003940 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800393c:	7efb      	ldrb	r3, [r7, #27]
 800393e:	e1e0      	b.n	8003d02 <HAL_SPI_Transmit+0x432>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2203      	movs	r2, #3
 8003944:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	88fa      	ldrh	r2, [r7, #6]
 800395a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	88fa      	ldrh	r2, [r7, #6]
 8003962:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8003990:	d108      	bne.n	80039a4 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	e009      	b.n	80039b8 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80039b6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	0c1b      	lsrs	r3, r3, #16
 80039c0:	041b      	lsls	r3, r3, #16
 80039c2:	88f9      	ldrh	r1, [r7, #6]
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	6812      	ldr	r2, [r2, #0]
 80039c8:	430b      	orrs	r3, r1
 80039ca:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0201 	orr.w	r2, r2, #1
 80039da:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10c      	bne.n	8003a04 <HAL_SPI_Transmit+0x134>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039f2:	d107      	bne.n	8003a04 <HAL_SPI_Transmit+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	2b0f      	cmp	r3, #15
 8003a0a:	d95b      	bls.n	8003ac4 <HAL_SPI_Transmit+0x1f4>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a8f      	ldr	r2, [pc, #572]	; (8003c50 <HAL_SPI_Transmit+0x380>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d04f      	beq.n	8003ab6 <HAL_SPI_Transmit+0x1e6>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a8e      	ldr	r2, [pc, #568]	; (8003c54 <HAL_SPI_Transmit+0x384>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d04a      	beq.n	8003ab6 <HAL_SPI_Transmit+0x1e6>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a8c      	ldr	r2, [pc, #560]	; (8003c58 <HAL_SPI_Transmit+0x388>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d045      	beq.n	8003ab6 <HAL_SPI_Transmit+0x1e6>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a8b      	ldr	r2, [pc, #556]	; (8003c5c <HAL_SPI_Transmit+0x38c>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d147      	bne.n	8003ac4 <HAL_SPI_Transmit+0x1f4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8003a34:	e03f      	b.n	8003ab6 <HAL_SPI_Transmit+0x1e6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d114      	bne.n	8003a6e <HAL_SPI_Transmit+0x19e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6812      	ldr	r2, [r2, #0]
 8003a4e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a54:	1d1a      	adds	r2, r3, #4
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	3b01      	subs	r3, #1
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8003a6c:	e023      	b.n	8003ab6 <HAL_SPI_Transmit+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a6e:	f7fc ff87 	bl	8000980 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d803      	bhi.n	8003a86 <HAL_SPI_Transmit+0x1b6>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a84:	d102      	bne.n	8003a8c <HAL_SPI_Transmit+0x1bc>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d114      	bne.n	8003ab6 <HAL_SPI_Transmit+0x1e6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 f93d 	bl	8003d0c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aa0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e125      	b.n	8003d02 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1b9      	bne.n	8003a36 <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8003ac2:	e0f8      	b.n	8003cb6 <HAL_SPI_Transmit+0x3e6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	2b07      	cmp	r3, #7
 8003aca:	f240 80ed 	bls.w	8003ca8 <HAL_SPI_Transmit+0x3d8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8003ace:	e05d      	b.n	8003b8c <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d132      	bne.n	8003b44 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d918      	bls.n	8003b1c <HAL_SPI_Transmit+0x24c>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d014      	beq.n	8003b1c <HAL_SPI_Transmit+0x24c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6812      	ldr	r2, [r2, #0]
 8003afc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b02:	1d1a      	adds	r2, r3, #4
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	3b02      	subs	r3, #2
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8003b1a:	e037      	b.n	8003b8c <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b20:	881a      	ldrh	r2, [r3, #0]
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b2a:	1c9a      	adds	r2, r3, #2
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8003b42:	e023      	b.n	8003b8c <HAL_SPI_Transmit+0x2bc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b44:	f7fc ff1c 	bl	8000980 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d803      	bhi.n	8003b5c <HAL_SPI_Transmit+0x28c>
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b5a:	d102      	bne.n	8003b62 <HAL_SPI_Transmit+0x292>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d114      	bne.n	8003b8c <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f000 f8d2 	bl	8003d0c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b76:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e0ba      	b.n	8003d02 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d19b      	bne.n	8003ad0 <HAL_SPI_Transmit+0x200>
 8003b98:	e08d      	b.n	8003cb6 <HAL_SPI_Transmit+0x3e6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d15b      	bne.n	8003c60 <HAL_SPI_Transmit+0x390>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	2b03      	cmp	r3, #3
 8003bb2:	d918      	bls.n	8003be6 <HAL_SPI_Transmit+0x316>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb8:	2b40      	cmp	r3, #64	; 0x40
 8003bba:	d914      	bls.n	8003be6 <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6812      	ldr	r2, [r2, #0]
 8003bc6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bcc:	1d1a      	adds	r2, r3, #4
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	3b04      	subs	r3, #4
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8003be4:	e060      	b.n	8003ca8 <HAL_SPI_Transmit+0x3d8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d917      	bls.n	8003c22 <HAL_SPI_Transmit+0x352>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d013      	beq.n	8003c22 <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bfe:	881a      	ldrh	r2, [r3, #0]
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c08:	1c9a      	adds	r2, r3, #2
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	3b02      	subs	r3, #2
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8003c20:	e042      	b.n	8003ca8 <HAL_SPI_Transmit+0x3d8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	3320      	adds	r3, #32
 8003c2c:	7812      	ldrb	r2, [r2, #0]
 8003c2e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c34:	1c5a      	adds	r2, r3, #1
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	3b01      	subs	r3, #1
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8003c4c:	e02c      	b.n	8003ca8 <HAL_SPI_Transmit+0x3d8>
 8003c4e:	bf00      	nop
 8003c50:	40013000 	.word	0x40013000
 8003c54:	50013000 	.word	0x50013000
 8003c58:	40003800 	.word	0x40003800
 8003c5c:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c60:	f7fc fe8e 	bl	8000980 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d803      	bhi.n	8003c78 <HAL_SPI_Transmit+0x3a8>
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c76:	d102      	bne.n	8003c7e <HAL_SPI_Transmit+0x3ae>
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d114      	bne.n	8003ca8 <HAL_SPI_Transmit+0x3d8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 f844 	bl	8003d0c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c92:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e02c      	b.n	8003d02 <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f47f af72 	bne.w	8003b9a <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	2108      	movs	r1, #8
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 f8c3 	bl	8003e4c <SPI_WaitOnFlagUntilTimeout>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d007      	beq.n	8003cdc <HAL_SPI_Transmit+0x40c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cd2:	f043 0220 	orr.w	r2, r3, #32
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 f815 	bl	8003d0c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <HAL_SPI_Transmit+0x430>
  {
    return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e000      	b.n	8003d02 <HAL_SPI_Transmit+0x432>
  }
  return errorcode;
 8003d00:	7efb      	ldrb	r3, [r7, #27]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3720      	adds	r7, #32
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop

08003d0c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	699a      	ldr	r2, [r3, #24]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f042 0208 	orr.w	r2, r2, #8
 8003d2a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	699a      	ldr	r2, [r3, #24]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f042 0210 	orr.w	r2, r2, #16
 8003d3a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0201 	bic.w	r2, r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6812      	ldr	r2, [r2, #0]
 8003d56:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8003d5a:	f023 0303 	bic.w	r3, r3, #3
 8003d5e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003d6e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	d014      	beq.n	8003da6 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f003 0320 	and.w	r3, r3, #32
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00f      	beq.n	8003da6 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d8c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	699a      	ldr	r2, [r3, #24]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f042 0220 	orr.w	r2, r2, #32
 8003da4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b03      	cmp	r3, #3
 8003db0:	d014      	beq.n	8003ddc <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00f      	beq.n	8003ddc <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dc2:	f043 0204 	orr.w	r2, r3, #4
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	699a      	ldr	r2, [r3, #24]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dda:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00f      	beq.n	8003e06 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dec:	f043 0201 	orr.w	r2, r3, #1
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	699a      	ldr	r2, [r3, #24]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e04:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00f      	beq.n	8003e30 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e16:	f043 0208 	orr.w	r2, r3, #8
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	699a      	ldr	r2, [r3, #24]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e2e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 8003e40:	bf00      	nop
 8003e42:	3714      	adds	r7, #20
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	603b      	str	r3, [r7, #0]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8003e5c:	e010      	b.n	8003e80 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e5e:	f7fc fd8f 	bl	8000980 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d803      	bhi.n	8003e76 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e74:	d102      	bne.n	8003e7c <SPI_WaitOnFlagUntilTimeout+0x30>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d101      	bne.n	8003e80 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e00f      	b.n	8003ea0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	695a      	ldr	r2, [r3, #20]
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	bf0c      	ite	eq
 8003e90:	2301      	moveq	r3, #1
 8003e92:	2300      	movne	r3, #0
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	461a      	mov	r2, r3
 8003e98:	79fb      	ldrb	r3, [r7, #7]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d0df      	beq.n	8003e5e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb4:	095b      	lsrs	r3, r3, #5
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	3307      	adds	r3, #7
 8003ec6:	08db      	lsrs	r3, r3, #3
 8003ec8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	fb02 f303 	mul.w	r3, r2, r3
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3714      	adds	r7, #20
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b083      	sub	sp, #12
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
 8003ee6:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d12e      	bne.n	8003f52 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d101      	bne.n	8003f02 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8003efe:	2302      	movs	r3, #2
 8003f00:	e028      	b.n	8003f54 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2202      	movs	r2, #2
 8003f0e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f022 0201 	bic.w	r2, r2, #1
 8003f20:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003f2e:	ea42 0103 	orr.w	r1, r2, r3
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	689a      	ldr	r2, [r3, #8]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	e000      	b.n	8003f54 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
  }
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <__libc_init_array>:
 8003f60:	b570      	push	{r4, r5, r6, lr}
 8003f62:	4d0d      	ldr	r5, [pc, #52]	; (8003f98 <__libc_init_array+0x38>)
 8003f64:	2600      	movs	r6, #0
 8003f66:	4c0d      	ldr	r4, [pc, #52]	; (8003f9c <__libc_init_array+0x3c>)
 8003f68:	1b64      	subs	r4, r4, r5
 8003f6a:	10a4      	asrs	r4, r4, #2
 8003f6c:	42a6      	cmp	r6, r4
 8003f6e:	d109      	bne.n	8003f84 <__libc_init_array+0x24>
 8003f70:	4d0b      	ldr	r5, [pc, #44]	; (8003fa0 <__libc_init_array+0x40>)
 8003f72:	2600      	movs	r6, #0
 8003f74:	4c0b      	ldr	r4, [pc, #44]	; (8003fa4 <__libc_init_array+0x44>)
 8003f76:	f000 f81f 	bl	8003fb8 <_init>
 8003f7a:	1b64      	subs	r4, r4, r5
 8003f7c:	10a4      	asrs	r4, r4, #2
 8003f7e:	42a6      	cmp	r6, r4
 8003f80:	d105      	bne.n	8003f8e <__libc_init_array+0x2e>
 8003f82:	bd70      	pop	{r4, r5, r6, pc}
 8003f84:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f88:	3601      	adds	r6, #1
 8003f8a:	4798      	blx	r3
 8003f8c:	e7ee      	b.n	8003f6c <__libc_init_array+0xc>
 8003f8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f92:	3601      	adds	r6, #1
 8003f94:	4798      	blx	r3
 8003f96:	e7f2      	b.n	8003f7e <__libc_init_array+0x1e>
 8003f98:	080040a8 	.word	0x080040a8
 8003f9c:	080040a8 	.word	0x080040a8
 8003fa0:	080040a8 	.word	0x080040a8
 8003fa4:	080040ac 	.word	0x080040ac

08003fa8 <memset>:
 8003fa8:	4402      	add	r2, r0
 8003faa:	4603      	mov	r3, r0
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d100      	bne.n	8003fb2 <memset+0xa>
 8003fb0:	4770      	bx	lr
 8003fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8003fb6:	e7f9      	b.n	8003fac <memset+0x4>

08003fb8 <_init>:
 8003fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fba:	bf00      	nop
 8003fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fbe:	bc08      	pop	{r3}
 8003fc0:	469e      	mov	lr, r3
 8003fc2:	4770      	bx	lr

08003fc4 <_fini>:
 8003fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fc6:	bf00      	nop
 8003fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fca:	bc08      	pop	{r3}
 8003fcc:	469e      	mov	lr, r3
 8003fce:	4770      	bx	lr
